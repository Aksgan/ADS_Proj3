s) { int iter, n = s.size; if (s == NULL) return 0; for (iter = 0; iter < n; iter++, s++) { if (*s == '\0') return iter; } return n; } </source> Here, <code>strlen</code> bounds itself by the length of the array passed to it, thus not going over the actual length. Each of the kinds of pointer type can be safely cast to each of the others, and arrays and strings are automatically cast to <code>?</code> by the compiler. (Casting from <code>?</code> to <code>*</code> invokes a [[bounds checking|bounds check]], and casting from <code>?</code> to <code>@</code> invokes both a <code>NULL</code> check and a bounds check. Casting from <code>*</code> or <code>@</code> results in no checks whatsoever; the resulting <code>?</code> pointer has a size of 1.) ===Dangling pointers and region analysis=== Consider the following code, in C: <source lang="C"> char *itoa(int i) { char buf[20]; sprintf(buf,"%d",i); return buf; } </source> This returns an object that is allocated on the stack of the function <code>itoa</code>, which is not available after the function returns. While [[GNU Compiler Collection|gcc]] and other compilers will warn about such code, the following will typically compile without warnings: <source lang="C"> char *itoa(int i) { char buf[20], *z; sprintf(buf,"%d",i); z = buf; return z; } </source> Cyclone does regional analysis of each segment of code, preventing dangling pointers, such as the one returned from this version of <code>itoa</code>. All of the local variables in a given scope are considered to be part of the same region, separate from the heap or any other local region. Thus, when analyzing <code>itoa</code>, the compiler would see that <code>z</code> is a pointer into the local stack, and would report an error. ===Manual memory management=== {{Empty section|date=January 2011}} == Examples == The best example to start with is the classic [[Hello world]] program: <source lang="C"> #include <stdio.h> #include <core.h> using Core; int main(int argc, string_t ? args) { if (argc <= 1) { printf("Usage: hello-cyclone <name>\n"); return 1; } printf("Hello from Cyclone, %s\n", args[1]); return 0; } </source> ==See also== * [[C (programming language)|C]] * [[ML (programming language)|ML]] * [[Mythryl]] * [[AuroraUX]] an operating system based on OpenSolaris, using Cyclone ==References== * [http://cyclone.thelanguage.org/wiki/User%20Manual Cyclone User Manual] * [http://www.cs.umd.edu/~mwh/papers/cyclone-cuj.pdf Cyclone: a Type-safe Dialect of C] by Dan Grossman, Michael Hicks, Trevor Jim, and Greg Morrisett - published January 2005 ==External links== * [http://cyclone.thelanguage.org/ Cyclone Homepage] * [http://math.ifi.uzh.ch/fedora/5/i386/SRPMS.gemi/cyclone-1.0-1.src.rpm Cyclone 1.0 source code RPM] * [http://cyclone.thelanguage.org/wiki/Download Cyclone - Source code repositories] * [http://cyclone.thelanguage.org/wiki/Frequently%20Asked%20Questions Cyclone - FAQ] * [http://cyclone.thelanguage.org/wiki/Cyclone%20for%20C%20Programmers Cyclone for C programmers] Presentations: * [http://www.cs.kent.ac.uk/people/staff/rej/morrisett-4.2.03.ppt Cyclone: A Type-Safe Dialect of C] * [http://www.cs.washington.edu/homes/djg/slides/grossman_cyclone_jpl_05.ppt Cyclone: A Memory-Safe C-Level Programming Language] {{CProLang}} {{DEFAULTSORT:Cyclone (Programming Language)}} [[Category:C programming language family]] [[ca:Cyclone]] [[de:Cyclone]] [[pl:Cyclone]] [[ru:Cyclone (язык программирования)]]</text> </page> <page> <id>8846</id> <title>Cydia (application)</title> <text>{{redirect|Cydia|the tortrix moth [[genus]]|Cydia (genus)}} {{Infobox Software |name = Cydia |logo = [[File:Cydia logo .jpg|Cydia Logo]] |screenshot = |caption = Cydia installer |developer = Jay Freeman (saurik)<ref name="SaurikHomepage">{{cite web |url=http://www.saurik.com/ |title=Saurik's Homepage |accessdate=2010-08-04}}</ref> |released = {{release date|March 2008}} |latest_release_version = 1.0.3366-1 |latest_release_date = November 2010 |operating_system = [[iOS (Apple)|iOS]], [[Mac OS X]]<ref name="OSX">{{cite web |url=http://www.tuaw.com/2010/12/10/360-macdev-jay-saurik-freeman-on-the-jailbreak-store-for-mac/ |title=360 MacDev: Jay "saurik" Freeman on the jailbreak store for Mac apps |author=Steven Sande |date=December 10, 2010 |work= |publisher=[[The Unofficial Apple Weblog]] |accessdate=December 9, 2010}}</ref> |genre = [[Package management system|Package manager]] |license = [[Open source]] |website = http://cydia.saurik.com/ }} '''Cydia''' ({{pron-en|ˈsɪdi.ə}}) is a [[application software|software application]] for [[iOS (Apple)|iOS]] that is a graphical [[Front and back ends|front end]] to [[Advanced Packaging Tool|APT]] and the [[dpkg]] [[package management system]]. It allows a user to find and download applications and [[Software package (installation)|software package]]s for a [[iOS jailbreaking|jailbroken]] [[iPhone]], [[iPod Touch]] or [[iPad]], by browsing [[Software repository|repositories]] that list these applications and packages, most of which are available at no cost.<ref>Yukari Iwatani Kane. [http://online.wsj.com/article/SB123629876097346481.html "Breaking Apple's Grip on the iPhone"], ''[[The Wall Street Journal]]'', March 6, 2009. <!--accessed March 8, 2009--></ref> Cydia also includes the '''Cydia Store''', which offers a number of applications for sale. Cydia is developed by Jay Freeman (also known as "saurik").<ref name="SaurikHomepage">{{cite web |url=http://www.saurik.com/ |title=Saurik's Homepage |accessdate=2010-08-04}}</ref> He originally released it as an open-source alternative to [[Installer.app]] on iPhone OS 1.1.x, but Cydia quickly became the most popular package manager after iPhone OS 2.0's release. In September 2010, Freeman's company, Saurik IT, LLC, announced that it had acquired Rock Your Phone, Inc. (makers of Rock.app), which made the Cydia Store the largest third-party app store for jailbroken iOS devices.<ref name="merger">{{cite web|author=saurik|url=http://cydia.saurik.com/faq/merger.html|title=Cydia += Rock Your Phone?|publisher=Cydia}}</ref> As of December 2010, Freeman plans to also release a Cydia Store for [[Mac OS X]] as an alternative to Apple's [[Mac App Store]].<ref name="OSX"/> The name "Cydia" is an allusion to the [[Codling Moth]] (''Cydia pomonella''), which made famous the "worm in the apple." == Purpose and function == Cydia's primary purpose is to provide a [[graphical user interface]] to [[iOS jailbreaking|jailbroken iOS]] users using [[Advanced Packaging Tool|APT]] repositories to install software unavailable on the App Store. It also works as a [[Software repository|repository]] aggregator to avoid dependence on a single host and comes with a few trusted "community sources." Many stable packages are available on these repositories; however, additional repositories can be easily added. This enables the iOS development scene to stay as [[Open source|open]] as possible; anyone with a server can set up, host, manage, and update his or her own repository and share it with the community. Most of the community sources will accept package submissions, as this helps packages to gain more exposure than if it was hosted on a separate repository. Software packages are downloaded directly to an iOS device, to the same location as [[Apple Inc.|Apple]]'s pre-installed applications (the <code>/Applications</code> [[directory (file systems)|directory]]). This is normally done through applications on a computer such as [[blackra1n]], but a website named http://www.jailbreakme.com was used for iOS 4.0 and jailbroke the [[iDevice]] through the web browser on the device itself ([[Safari (web browser)|Safari]]). In addition to offering applications to install, as of September 2009, Cydia was further improved to [[cache]] the [[digital signature|digital signatures]] known as [[SHSH blob|SHSH blobs]] used by Apple 