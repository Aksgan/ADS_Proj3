The Future of Social Search] [[Category:Internet search engines]] [[Category:Social search]]</text> </page> <page> <id>34331</id> <title>SigmaPlot</title> <text>{{Infobox_Software | name = SigmaPlot | logo = | screenshot = | caption = | developer = [[SYSTAT|Systat Software Inc.]] | latest_release_version = 11.0.0 | latest_release_date = 2008 | operating_system = [[Microsoft Windows|Windows]] | genre = [[technical graphing and analysis package]] | license = [[Proprietary software|proprietary]] | website = [http://www.sigmaplot.com/products/sigmaplot/sigmaplot-details.php SYSTAT] | }} '''SigmaPlot''' is a scientific graphing and data analysis software package that allows the creation of graphs. The software can read multiple formats (such as [[Microsoft Excel]] spreadsheets), and can also perform mathematical transforms and statistical analyses. SigmaPlot is maintained on [[Microsoft Windows]] operating systems, and the current version is 11.x for [[Windows 2000]] to [[Windows Vista]]. ==History== SigmaPlot was developed by Jandel Corporation for [[Windows 3.1x]] and maintained by them until version 3.0. In 1996, Jandel Corporation merged into [[SPSS Inc.]]<ref>{{cite web|url=http://www.secinfo.com/dsvR3.94Ku.a.htm|title=SEC Info - SPSS Inc - S-4/A - On 11/7/96 - EX-99.1}}</ref> SigmaPlot was maintained by SPSS through version 8. As of version 9, it is owned and maintained by [[SYSTAT Software]]. ==References== {{Reflist}} == External links == * [http://www.sigmaplot.com/products/sigmaplot/sigmaplot-details.php SigmaPlot], official site {{science-software-stub}} [[category:plotting software]] [[category:Earth sciences graphics software]] [[ru:SigmaPlot]]</text> </page> <page> <id>34336</id> <title>Sigma approximation</title> <text>In [[mathematics]], '''σ-approximation''' adjusts a [[Fourier series|Fourier summation]] to eliminate the [[Gibbs phenomenon]] which would otherwise occur at [[discontinuities]]. A σ-approximated summation for a series of period ''T'' can be written as follows: :<math>s(\theta) = \frac{1}{2} a_0 + \sum_{k=1}^{m-1} \mathrm{sinc}\Bigl(\frac{k}{m}\Bigr)\cdot \left[a_{k} \cos \Bigl( \frac{2 \pi k}{T} \theta \Bigr) +b_k\sin\Bigl( \frac{2 \pi k}{T} \theta \Bigr) \right] ,</math> in terms of the normalized [[sinc function]] :<math> \mathrm{sinc}\, x = \frac{\sin \pi x}{\pi x}.</math> Here, the term :<math>\mathrm{sinc}\Bigl(\frac{k}{m}\Bigr)</math> is the '''Lanczos σ factor''', which is responsible for eliminating most of the Gibbs ringing phenomenon. It does not do so entirely, however, but one can square or even cube the expression to serially attenuate Gibbs Phenomenon in the most extreme cases. == See also == * [[Lanczos resampling]] ==References== {{Unreferenced|date=January 2007}} {{math-stub}} [[Category:Fourier series]] [[Category:Numerical analysis]] [[bs:Sigma aproksimacija]] [[fr:Approximation sigma]]</text> </page> <page> <id>34338</id> <title>Sigmaquad</title> <text>{{Orphan|date=February 2009}} '''SigmaQuad - Quad Data Rate SRAM''' is a type of static [[RAM]] computer memory that can transfer up to four [[word (computing)|word]]s of data in each clock cycle. Like [[Double Data-Rate]] (DDR) [[SDRAM]], SigmaQuad SRAM transfers data on both [[Clock edge|rising and falling edges]] of the [[clock signal]]. This requires more wires between the memory device and the [[memory controller]], but doubles the theoretical maximum data transfer rate. SigmaQuad SRAM uses two clocks, one for read data and one for write data. This helps to eliminate problems caused by the propagation delay of the clock wiring, and allows concurrent reads and writes, thereby doubling the transfer rate again. SigmaQuad SRAM was designed for high-speed communications and networking applications, where data [[throughput]] is more important than cost, power efficiency or density. The technology was a joint development by [http://www.gsitechnology.com GSI Technology], [http://products.sel.sony.com/semi/ Sony Microelectronics] and [http://www.issi.com/index.html ISSI]. Contents [hide] == Clock Inputs == Clocks: #Input clock: K, /K #Output clock: C, /C == Control Inputs == Control Lines: #not-Write enable: /WPS #not-Read enable: /RPS == Buses == Address and Data Buses: #Address bus #Data in bus #Data out bus == Clocking scheme == Address Clock #Read address latched on rising edge of K #Write address latched on rising edge of K Write Data Clock If /WPS is low #A data word on Data In is latched on rising edge of K #The next data word on Data In is latched on rising edge of /K Read Data Clock A read is a two-cycle process #If /RPS is low #The first rising edge of K latches the read address, A #The second rising edge of K puts the data word, from address A, on the Data Out bus #The next rising edge of /K puts the next data word, from address A+1, on the Data Out bus [[Category:Computer memory]]</text> </page> <page> <id>34342</id> <title>Sign extension</title> <text>'''Sign extension''' is the operation, in [[computer]] [[arithmetic]], of increasing the number of [[bit]]s of a [[binary number]] while preserving the number's [[sign (mathematics)|sign (positive/negative)]] and value. This is done by appending digits to the [[most significant bit|most significant]] side of the number, following a procedure dependent on the particular [[signed number representation]] used. For example, if six bits are used to represent the number "<code>00 1010</code>" (decimal positive 10) and the sign extend operation increases the [[word (computer science)|word length]] to 16 bits, then the new ([[endianness|big endian]], i.e. the left-most bit is the most significant bit) representation is simply "<code>0000 0000 0000 1010</code>". Thus, both the value and the fact that the value was positive are maintained. If ten bits are used to represent the value "<code>11 1111 0001</code>" (decimal negative 15) using [[two's complement]], and this is sign extended to sixteen bits, the new representation is "<code>1111 1111 1111 0001</code>". Thus, by padding the left side with ones, the negative sign and the value of the original number are maintained. In the [[x86 instruction listings|x86 instruction set]], used by most home [[IBM PC compatible|PC]]s, there are two ways of doing sign extension: * using the instructions <tt>cbw</tt>, <tt>cwd</tt>, <tt>cwde</tt>, and <tt>cdq</tt> (convert byte to word, doubleword, extended doubleword, and quadword, respectively; in the x86 context, a byte has 8 bits, a word 16 bits, a doubleword and extended doubleword 32 bits, and a quadword 64 bits); * using one of the sign extended moves, accomplished by the <tt>movsx</tt> ("move with sign extension") family of instructions. ==References== * Mano, Morris M.; Kime, Charles R. (2004). ''Logic and Computer Design Fundamentals'' (3rd ed.), pp 453. Pearson Prentice Hall. ISBN 0-13-140539-X. [[Category:Computer arithmetic]] [[ja:符号拡張]] [[de:Zweierkomplement#Vorzeichenerweiterung]]</text> </page> <page> <id>34347</id> <title>Signal (electronics)</title> <text>{{Other uses|Signal (disambiguation)}} {{No footnotes|date=April 2009}} In the fields of [[telecommunications|communications]], [[signal processing]], and in [[electrical engineering]] more generally, a '''signal''' is any time-varying or spatial-varying quantity. In the physical world, any [[physical quantity|quantity]] measurable through time or over space can be taken as a signal. Within a complex society, any set 