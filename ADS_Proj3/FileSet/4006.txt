guidelines / FAQ's such as the [http://phpsec.org/projects/guide/ PHPSEC.ORG PHP Security Guide] (accessed January 2006). Later, session pollution has become covered in some articles, such as [http://segfaultlabs.com/pdf/php-session-security.pdf PHP Session Security, Przemek Sobstel, 2007] (accessed September 22, 2007). ==Attack examples== ===Trivial attack scenario=== A example code vulnerable to this problem is: <pre> Session("Login") = Request("login") Session("Username") = Request("username") </pre> Which is subject to trivial attacks such as <pre>vulnerable.asp?login=YES&username=Mary</pre> This problem could exist in software where *User submits username / password to <code>logon.asp</code> *If password for <code>Mary</code> checks outs, <code>logon.asp</code> forwards to <code>vulnerable.asp?login=YES&username=Mary</code> The problem is that <code>vulnerable.asp</code> is designed on the assumption that the page is only accessed in a non-malicious way. Anyone who realizes how the script is designed, is able to craft an HTTP request which sets the logon user arbitrarily. ===Exploiting ambiguous or dual use of same session variable=== [http://archives.neohapsis.com/archives/fulldisclosure/2006-01/0414.html Alla Bezroutchko] discusses a scenario where <code>$_SESSION['login']</code> is used for two different purposes. *In the login scripts, the session variable stores "This user is logged on". *In the password reset scripts, the session variable stores "this user wants his password reset". A race condition was demonstrated, in which the reset scripts could be exploited to change the logged on user arbitrarily. ===Exploiting scripts allowing writes to arbitrary session variables=== [http://archives.neohapsis.com/archives/fulldisclosure/2006-01/0423.html /someone] discusses examples observed in development forums, which allows writing to arbitrary session variables. The first example is <pre> $var = $_GET["something"]; $_SESSION["$var"] = $var2; </pre> (in which $_GET["something"] is probably from a selection box or similar). Attack becomes <pre>vulnerable.php?something=SESSION_VAR_TO_POISON</pre> ====Session poisoning attacks enabled by php.ini: register_globals = on==== <code>php.ini: register_globals = on</code> is known to enable security vulnerabilities in several applications. [[PHP]] server administrators are recommended to disable this feature. ''Note: Real-world examples of session poisoning in enabled by register_globals = on was publicly demonstrated in back in July 2001 article [http://seclists.org/lists/bugtraq/2001/Jul/0569.html Serious security hole in Mambo Site Server version 3.0.X].'' Second example by [http://archives.neohapsis.com/archives/fulldisclosure/2006-01/0423.html /someone] is <pre> if ($condition1) { $var = 'SOMETHING'; }; if ($condition2) { $var = 'OTHER'; }; $_SESSION["$var"] = $var2; </pre> which is vulnerable if: *It is possible for attacker to cause both conditions to be false. *php.ini is misconfigured (register_globals = on), which allows $var default value to be controlled by GPC (GET, POST, or COOKIE) input. Attack becomes <pre>vulnerable.php?var=SESSION_VAR_TO_POISON</pre> ===Exploit utilizing a shared PHP server (e.g. shared web hosting)=== [http://seclists.org/lists/bugtraq/2005/Sep/0193.html unknow of uw-team.org] discusses a scenario where attacker and victim shares the same PHP server. Attack is fairly easy: *The attacker first visits the victim's page, and e.g. log on. *Attacker then uploads a PHP script to his account, and has it display context of $_SESSION (set by victim script). *Attacker determines which variable needs to be changed, uploads a script which sets this variable, executes it. *Attacker visits victim pages to see if anticipated exploit worked. This attack only requires that victim and attacker share the same PHP server. The attack is not dependent on victim and attacker having the same virtual hostname, as it is trivial for attacker to move the session identifier cookie from one cookie domain to another. ==See also== *[[Session fixation]] [[Category:Web security exploits]] [[de:Session Poisoning]]</text> </page> <page> <id>34064</id> <title>Set packing</title> <text>'''Set packing''' is a classical [[NP-complete]] problem in [[computational complexity theory]] and [[combinatorics]], and was one of [[Karp's 21 NP-complete problems]]. Suppose we have a finite set ''S'' and a list of subsets of ''S''. Then, the set packing problem asks if some ''k'' subsets in the list are pairwise [[disjoint sets|disjoint]] (in other words, no two of them intersect). The problem is clearly in [[NP (complexity)|NP]] since, given ''k'' subsets, we can easily verify that they are pairwise disjoint. The [[optimization problem|optimization version]] of the problem, '''maximum set packing''', asks for the maximum number of pairwise disjoint sets in the list. It is a maximization problem that can be formulated naturally as an [[integer linear program]], belongs to the class of [[packing problem]]s, and its [[dual linear program]] is the [[set cover problem]].<ref>{{harvtxt|Vazirani|2001}}</ref> {{Covering-Packing Problem Pairs}} == Example == As a simple example, suppose you're at a convention of foreign ambassadors, each of which speaks English and also various other languages. You want to make an announcement to a group of them, but because you don't trust them, you don't want them to be able to speak among themselves without you being able to understand them. To ensure this, you will choose a group such that no two ambassadors speak the same language, other than English. On the other hand you also want to give your announcement to as many ambassadors as possible. In this case, the elements of the set are languages other than English, and the subsets are the sets of languages spoken by a particular ambassador. If two sets are disjoint, those two ambassadors share no languages other than English. A maximum set packing will choose the largest possible number of ambassadors under the desired constraint. Although this problem is hard to solve in general, in this example a good heuristic is to choose ambassadors who only speak unusual languages first, so that not too many others are disqualified. == Heuristics and related problems == Set packing is one among a family of problems related to covering or partitioning the elements of a set. One closely related problem is the [[set cover problem]]. Here, we are also given a set ''S'' and a list of sets, but the goal is to determine whether we can choose ''k'' sets that together contain every element of ''S''. These sets may overlap. The optimization version finds the minimum number of such sets. The maximum set packing need not cover every possible element. One advantage of the set packing problem is that even if it's hard for some ''k'', it's not hard to find a ''k'' for which it is easy on a particular input. For example, we can use a [[greedy algorithm]] where we look for the set which intersects the smallest number of other sets, add it to our solution, and remove the 