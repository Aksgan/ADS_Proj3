Allan, Comput. Mat. Science '''25''', 478 (2002)</ref><ref>X. Gonze, G.-M. Rignanese, M. Verstraete, J.-M. Beuken, Y. Pouillon, R. Caracas, F. Jollet, M. Torrent, G. Zerah, M. Mikami, Ph. Ghosez, M. Veithen, J.-Y. Raty, V. Olevano, F. Bruneval, L. Reining, R.W. Godby, G. Onida, D.R. Hamann, and D.C. Allan, [http://www.atypon-link.com/OLD/doi/abs/10.1524/zkri.220.5.558.65066 Z. Kristallogr. '''220''', 558 (2005)]</ref> A web-based easy-to-use [http://nanohub.org/resources/ABINIT graphical version] of the package is available for free use through the [[nanohub]]. ABINIT also includes options to * optimize the [[geometry]] according to the DFT forces and stresses; * perform [[molecular dynamics]] [[simulation]]s using these forces; and * generate [[Dynamical system|dynamical]] [[matrix (mathematics)|matrices]], [[Max Born|Born]] effective [[Electric charge|charges]], and [[dielectric]] [[tensor]]s. [[Excited state]]s can be computed within the [[time-dependent density functional theory]] (for molecules), or within [[Many-body problem|many-body]] [[Perturbation theory (quantum mechanics)|perturbation theory]] (the [[GW approximation]]). In addition to the main ABINIT [[code]], different [[utility program]]s are also provided. ==See also== {{Portal|Free software}} * [[List of quantum chemistry and solid state physics software]] ==References== <references/> ==External links== * {{Official|http://www.abinit.org/ |name=ABINIT web site}} * [http://nanohub.org/resources/ABINIT Graphical version (web-based) of ABINIT] <!--- [[Category: Computational physics]] Physics software is a sub-category ---> <!-- Categories --> [[Category:Density functional theory]] [[Category:Free physics software]] [[Category:Computational chemistry software]]{{DEFAULTSORT:Abinit}} {{Physics-stub}} {{Science-software-stub}} [[ru:Abinit]]</text> </page> <page> <id>260</id> <title>ABLE (programming language)</title> <text>'''ABLE''' is a simplified [[programming language]] targeted at [[accounting]] applications. More information is available at [http://www.ltnow.com/contact.html www.LTNow.com] ==References== {{refbegin}} * "ABLE, The Accounting Language, Programming and Reference Manual," Evansville Data Proc Center, Evansville, IN, March 1975 * Listed in SIGPLAN Notices 13(11):56 (November 1978) {{refend}} {{FOLDOC}} [[Category:Accounting software]] [[Category:Domain-specific programming languages]] {{compu-lang-stub}} [[ms:Bahasa pengaturcaraan ABLE]] {{DEFAULTSORT:Able}}</text> </page> <page> <id>263</id> <title>ABSYS</title> <text>'''ABSYS''' was an early [[declarative programming|declarative]] [[programming language]] from the [[University of Aberdeen]] which anticipated a number of features of [[Prolog]]. ==See also== *[[ABSET]] ==References== *"ABSYS: An Incremental Compiler for Assertions", J.M. Foster et al., Mach Intell 4, Edinburgh U Press, 1969, pp. 423–429 *{{FOLDOC}} [[Category:Declarative programming languages]] [[ms:ABSYS]] {{DEFAULTSORT:Absys}}</text> </page> <page> <id>267</id> <title>AC0</title> <text>{{DISPLAYTITLE:AC<sup>0</sup>}} '''AC<sup>0</sup>''' is a [[complexity class]] used in [[circuit complexity]]. It is the smallest class in the [[AC (complexity)|AC]] hierarchy, and consists of all families of circuits of depth O(1) and polynomial size, with unlimited-[[fanin]] [[AND gate]]s and [[OR gate]]s. (We allow [[NOT gate]]s only at the inputs). It thus contains [[NC0|NC<sup>0</sup>]], which has only bounded-fanin AND and OR gates. From a [[descriptive complexity]] viewpoint, [[DLOGTIME]]-[[Uniformity (complexity theory)|uniform]] AC<sup>0</sup> is equal to the descriptive class [[FO (complexity)|FO]]+BIT of all languages describable in first-order logic with the addition of the [[BIT operator]], or alternatively by FO(+, <math>\times</math>), or by Turing machine in the [[LH (complexity)|logarithmic hierarchy]]<ref>*N. Immerman ''Descriptive complexity'' (1999 Springer), page 85.</ref>. In 1984 Furst, Saxe, and Sipser showed that calculating the [[parity bit#Parity|parity]] of an input cannot be decided by any AC<sup>0</sup> circuits, even with non-uniformity. <ref>M. Furst, J. B. Saxe, and M. Sipser. Parity, circuits, and the polynomial-time hierarchy. ''Math. Systems Theory'', 17:13&ndash;27, 1984.</ref> It follows that AC<sup>0</sup> is not equal to [[NC1 (complexity)|NC<sup>1</sup>]], because a family of circuits in the latter class can compute parity. ==References== <references/> {{ComplexityClasses}} [[Category:Circuit complexity]] [[Category:Complexity classes]]</text> </page> <page> <id>268</id> <title>AC/AC converter</title> <text>{{No footnotes|date=July 2010}} [[Image:AC AC Converter Classification.jpg|thumb|Fig 1: Classification of three-phace AC/AC converter circuits.<ref>J. W. Kolar, T. Friedli, F. Krismer, S. D. Round, “The Essence of Three-Phase AC/AC Converter Systems”, Proceedings of the 13th Power Electronics and Motion Control Conference (EPE-PEMC'08), Poznan, Poland, pp. 27 – 42, Sept. 1 - 3, 2008.</ref>]] [[Image:Three Phase AC AC voltage DC.jpg|thumb|Fig 2: Topology of the three-phase AC/AC converter with voltage DC-link <ref>I. Takahashi, Y. Itoh, “Electrolytic Capacitor-Less PWM Inverter“, in Proceedings of the IPEC’90, Tokyo, Japan, , pp. 131 – 138, April 2 – 6, 1990.</ref>]] [[Image:3PAC current DC.jpg|thumb|Fig 3: Topology of the three-phase AC/AC converter with current DC-link <ref>K. Kuusela, M. Salo, H. Tuusa, “A Current Source PWM Converter Fed Permanent Magnet Synchronous Motor Drive with Adjustable DC-Link Current“, in Proceedings of the NORPIE’2000, Aalborg, Denmark, pp. 54 – 58, June 15 – 16, 2000.</ref><ref>M. H. Bierhoff, F. W. Fuchs, “Pulse Width Modulation for Current Source Converters – A Detailed Concept,“ in Proceedings of the 32nd IEEE IECON’06, Paris, France, Nov. 7–10, 2006.</ref>]] [[Image:Direct matrix converter.jpg|thumb|Fig 4: Topology of the Conventional Direct Matrix Converter <ref>L. Gyugyi, B. R. Pelly, “Static Power Frequency Changers - Theory, Performance, & Application“, New York: J. Wiley, 1976.</ref><ref>W. I. Popow, “Der zwangskommutierte Direktumrichter mit sinusförmiger Ausgangsspannung,“ Elektrie 28, No. 4, pp. 194 – 196, 1974</ref>]] [[Image:Indirect matrix converter.jpg|thumb|Fig 5: Topology of the indirect matrix converter <ref>J. Holtz, U. Boelkens, “Direct Frequency Converter with Sinusoidal Line Currents for Speed-Variable AC Motors“, IEEE Transactions Industry Electronics, Vol. 36, No. 4, pp. 475–479, 1989.</ref><ref>K. Shinohara, Y. Minari, T. Irisa, “Analysis and Fundamental Characteristics of Induction Motor Driven by Voltage Source Inverter without DC Link Components (in Japanese)“, IEEJ Transactions, Vol. 109-D, No. 9, pp. 637 – 644, 1989.</ref><ref>L. Wei, T. A. Lipo, “A Novel Matrix Converter Topology with Simple Commutation“, in Proceedings of the 36th IEEE IAS’01, Chicago, USA, vol. 3, pp. 1749–1754, Sept. 30 – Oct. 4, 2001.</ref>]] An '''AC/AC converter''' converts an [[Alternating current|AC]] [[waveform]] such as the mains supply, to another AC waveform, where the output voltage and frequency can be set arbitrarily. AC/AC converters can be categorized into * Converters with a DC-link. * [[Cycloconverter]]s * Hybrid Matrix Converters. * Matrix Converters. As shown in Fig 1. For such AC-AC conversion today typically converter systems with a voltage (Fig. 2) or current (Fig. 3) DC-link are employed. For the voltage DC-link, the mains coupling could be implemented by a diode bridge. To accomplish braking operation of a motor, a braking resistor must be placed in the DC-link. Alternatively, an anti-parallel thyristor bridge must be provided on the mains side for feeding back energy into the mains. The disadvantages of this solution are the relatively high mains distortion and high reactive power requirements (especially during inverter operation). An AC/AC converter with approximately sinusoidal input currents and bidirectional power flow can be realized by coupling a PWM rectifier and a PWM inverter to the DC-link. The 