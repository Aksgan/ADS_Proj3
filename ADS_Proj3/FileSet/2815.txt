even though values other than <code>0x00</code> and <code>0x80</code> are ''undefined'' and the bootstrap program may display an error message if this occurs. In practice, their parsing depends upon what the actual bootstrap code within the MBR has been coded to accept: some MBR bootstrap programs specifically look for the value 0x80 to indicate the bootable ("active") partition, others simply look for a non-zero value, and yet others look for any value with the top bit set. On [[IA-32]] [[IBM PC compatible]] machines using the MBR partition table scheme, the bootstrapping [[firmware]] contained within the [[read-only memory|ROM]] [[BIOS]] loads and executes the master boot record. Because the i386 family of processors boot up in [[real mode]], the code in the MBR uses real mode [[machine language]] instructions. This code normally passes control by [[chain loading]] the [[volume boot record]] (VBR) of the active (primary) partition, although some [[boot manager]]s replace that conventional code with their own. The conventional MBR code expects the MBR partition table scheme to have been used, and scans the list of (primary) partition entries in its embedded partition table to find the only one that is marked with the ''active flag''. It then loads and runs the volume boot record for that partition. (Thus the master boot record, like other boot sectors, is a target for [[boot sector]]-infecting [[computer virus]]es .) The MBR replacement code in some boot managers can perform a variety of tasks; what those tasks are varies from boot manager to boot manager. In some, for example, it loads the remainder of the boot manager code from the first track of the disk, which it assumes to be "free" space that is not allocated to any disk partition, and executes it. In others, it uses a table of embedded disk locations to locate the remainder of the boot manager code to load and to execute. (Both approaches have problems. The first relies on behavior that is not universal across all disk partitioning utilities, most notably those which read and write [[GUID Partition Table|GPT]]s. The second requires that the embedded list of disk locations be updated when changes are made that would relocate the remainder of the code.) On machines that do not use [[IA-32]] processors, and on machines that use [[Extensible Firmware Interface]] (EFI) firmware, this design is unsuitable, and the MBR is not used as part of the system bootstrap. On the latter, the firmware is instead capable of directly understanding the [[GUID Partition Table|GPT]] partitioning scheme and the [[File Allocation Table|FAT]] filesystem format, and loads and runs programs held as files in the [[EFI System partition]]. The MBR will be involved only insofar as it might contain the partition table if the GPT partition table scheme has been used. There is some MBR replacement code that emulates EFI firmware's bootstrap, which makes non-EFI machines capable of booting from disks using the GPT partitioning scheme. (A typical example is a [[multi boot]] record, which can be used as a MBR and as a [[volume boot record]] in the bootstrap process and hence the name. It detects a GPT and loads the EFI compatible code from disk to complete this task.) == Disk identity == [[File:Qtparted-usb-hdd-snapshot.png|thumb|200px|right|Information contained in the Partition Table of an external hard drive as it appears in the utility program [[QtParted]], running under Linux.]] In addition to the bootstrap code and a partition table, master boot records may contain a [[Windows NT]] disk signature. This is a 32-bit value that is intended to identify uniquely the disk medium (as opposed to the disk unit &mdash; the two not necessarily being the same for removable hard disks). The disk signature was introduced by Windows NT version 3.5, but is now used by several operating systems, including the [[Linux]] kernel version 2.6 and later. Linux uses the NT disk signature at boot time to determine the location of the boot volume.<ref>{{cite web|url=http://lkml.org/lkml/2003/12/19/139|title=Re: RFC 2.6.0 EDD enhancements|work=Linux Kernel Mailing List|author=Matt Domsch}}</ref> Windows NT (and later Microsoft operating systems) uses the disk signature as an index to all the partitions on any disk ever connected to the computer under that OS; these signatures are kept in [[Windows Registry|registry]] keys, primarily for storing the persistent mappings between disk partitions and drive letters. It may also be used in [[boot.ini]] files (though most do not), to describe the location of bootable Windows NT (or later) partitions.<ref>{{cite web|url=http://support.microsoft.com/kb/227704|author=Microsoft|work=KnowledgeBase|title=Windows May Use Signature() Syntax in the Boot.ini File}}</ref> One key (among many) where NT disk signatures appear in a Windows 2000/XP registry is: HKEY_LOCAL_MACHINE\SYSTEM\MountedDevices\ If a disk's signature stored in the MBR was <code>A8 E1 B9 D2</code> (in that order) and its first partition corresponded with logical drive C: under Windows, then the <code>REG_BINARY</code> data under the key value '''<code>DosDevices\C:</code>''' would be: A8 E1 B9 D2 00 7E 00 00 00 00 00 00 The first four bytes are said disk signature. (''Note:'' In other keys, these bytes may appear in reverse order from that found in the MBR sector.) These are followed by eight more bytes, forming a 64-bit integer, in [[endianness|little endian]] notation, which are used to locate the byte offset of this partition. In this case, <code>00 7E</code> corresponds to the hexadecimal value <code>0x7E00</code> (<code>32,256<sub>dec</sub></code>). Dividing this byte offset by 512 (the size of a hard disk's physical sector in bytes) results in 63, which is the physical sector number (or LBA) containing the first sector of the partition (unlike the ''sector count'' used in the sectors value of CHS tuples, which counts from '''one''', the absolute or LBA sector value starts counting from '''zero'''). If this disk had another partition with the values <code>00 F8 93 71 02</code> following the disk signature (under, e.g., the key value <code>\DosDevices\D:</code>), it would begin at byte offset <code>0x27193f800</code> (<code>10,495,457,280<sub>dec</sub></code>), which is also the first byte of physical sector 20,498,940. == Programming considerations == Assume that the system being programmed uses the BIOS MBR scheme, as stated above, and the system [[BIOS]] locates a valid MBR on a partitioned drive 