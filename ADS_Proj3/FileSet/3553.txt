</td> <td align="center">2 </td> <td></td> </td> <td align="center">2 </td> <td align="center">3 </td> </tr> </table> </table> == Proof sketch of undecidability == The most common proof for the undecidability of PCP describes an instance of PCP that can simulate the computation of a [[Turing machine]] on a particular input. A match will only occur if the input would be accepted by the Turing machine. Because deciding if a Turing machine will accept an input is a basic undecidable problem, PCP cannot be decidable either. The following discussion is based on [[Michael Sipser]]'s textbook ''Introduction to the Theory of Computation''.<ref name="sipser05">{{cite book|author = [[Michael Sipser]] | year = 2005 | title = Introduction to the Theory of Computation | edition = 2nd | publisher = Thomson Course Technology | isbn = 0-534-95097-3 | chapter = A Simple Undecidable Problem | pages = 199&ndash;205}}</ref> In more detail, the idea is that the string along the top and bottom will be a [[computation history]] of the Turing machine's computation. This means it will list a string describing the initial state, followed by a string describing the next state, and so on until it ends with a string describing an accepting state. The state strings are separated by some separator symbol (usually written #). According to the definition of a Turing machine, the full state of the machine consists of three parts: * The current contents of the tape. * The current state of the [[finite state machine]] which operates the tape head. * The current position of the tape head on the tape. Although the tape has infinitely many cells, only some finite prefix of these will be non-blank. We write these down as part of our state. To describe the state of the finite control, we create new symbols, labelled ''q''<sub>1</sub> through ''q''<sub>''k''</sub>, for each of the finite state machine's ''k'' states. We insert the correct symbol into the string describing the tape's contents at the position of the tape head, thereby indicating both the tape head's position and the current state of the finite control. For the alphabet {0,1}, a typical state might look something like: 101101110''q''<sub>7</sub>00110. A simple computation history would then look something like this: ''q''<sub>0</sub>101#1''q''<sub>4</sub>01#11''q''<sub>2</sub>1#1''q''<sub>8</sub>10. We start out with this block, where ''x'' is the input string and ''q''<sub>0</sub> is the start state: {| class="wikitable" style="text-align:center;" | bgcolor="#05FFD3" width="40" | |- | bgcolor="#57D6FF" width="40" | ''q''<sub>0</sub>''x''# |} The top starts out "lagging" the bottom by one state, and keeps this lag until the very end stage. Next, for each symbol ''a'' in the tape alphabet, as well as #, we have a "copy" block, which copies it unmodified from one state to the next: {| class="wikitable" style="text-align:center;" | bgcolor="#05FFD3" width="40" | ''a'' |- | bgcolor="#57D6FF" width="40" | ''a'' |} We also have a block for each position transition the machine can make, showing how the tape head moves, how the finite state changes, and what happens to the surrounding symbols. For example, here the tape head is over a 0 in state 4, and then writes a 1 and moves right, changing to state 7: {| class="wikitable" style="text-align:center;" | bgcolor="#05FFD3" width="40" | ''q''<sub>4</sub>0 |- | bgcolor="#57D6FF" width="40" | 1''q''<sub>7</sub> |} Finally, when the top reaches an accepting state, the bottom needs a chance to finally catch up to complete the match. To allow this, we extend the computation so that once an accepting state is reached, each subsequent machine step will cause a symbol near the tape head to vanish, one at a time, until none remain. If ''q''<sub>''f''</sub> is an accepting state, we can represent this with the following transition blocks, where ''a'' is a tape alphabet symbol: <table border="0" cellspacing="0" cellpadding="0"> <tr align="center"> <td> {| class="wikitable" style="text-align:center;" | bgcolor="#05FFD3" width="40" | ''q''<sub>''f''</sub>''a'' |- | bgcolor="#57D6FF" width="40" | ''q''<sub>''f''</sub> |} </td> <td valign="center">,</td> <td> {| class="wikitable" style="text-align:center;" | bgcolor="#05FFD3" width="40" | ''aq''<sub>''f''</sub> |- | bgcolor="#57D6FF" width="40" | ''q''<sub>''f''</sub> |} </td> </tr></table> There are a number of details to work out, such as dealing with boundaries between states, making sure that our initial tile goes first in the match, and so on, but this shows the general idea of how a static tile puzzle can simulate a Turing machine computation. == Variants == Many variants of PCP have been considered. One reason is that, when one tries to prove undecidability of some new problem by reducing from PCP, it often happens that the first reduction one finds is not from PCP itself but from an apparently weaker version. * The condition that the alphabet <math>A</math> have at least two symbols is required since the problem is decidable if <math>A</math> has only one symbol. * A simple variant is to fix ''n'', the number of tiles. This problem is decidable if ''n'' ≤ 2, but remains undecidable for ''n'' ≥ 7. It is unknown whether the problem is decidable for 3 ≤ ''n'' ≤ 6. * The '''''circular'' Post correspondence problem''' asks whether indexes <math>i_1, i_2, ...</math> can be found such that <math>\alpha_{i_1} \cdots \alpha_{i_k}</math> and <math>\beta_{i_1} \cdots \beta_{i_k}</math> are [[conjugacy|conjugate words]], i.e., they are equal modulo rotation. This variant is undecidable.<ref name="Ruohonen83">{{cite journal|author= K. Ruohonen |year =1983|title=On some variants of Post's correspondence problem|publisher=Springer|volume=19|issue=4|pages=357&ndash;367|journal=Acta Informatica | doi = 10.1007/BF00290732}}</ref> * One of the most important variants of PCP is the '''''bounded'' Post correspondence problem''', which asks if we can find a match using no more than ''k'' tiles, including repeated tiles. A brute force search solves the problem in time O(2<sup>''k''</sup>), but this may be difficult to improve upon, since the problem is [[NP-complete]].<ref name="GJ79">{{cite book|author = [[Michael R. Garey]]|coauthors=[[David S. Johnson]] | year = 1979 | title = [[Computers and Intractability: A Guide to the Theory of NP-Completeness]] | publisher = W.H. Freeman | isbn = 0-7167-1045-5 | page = 228 }}</ref> Unlike some NP-complete problems like the [[boolean satisfiability problem]], a small variation of the bounded problem was also shown to be complete for RNP, which means that it remains hard even if the inputs are chosen at 