functions as: * Routing a request to different application objects based on the target [[Uniform Resource Locator|URL]], after changing the [[environment variables]] accordingly. * Allowing multiple applications or frameworks to run side-by-side in the same [[process (computing)|process]] * [[Load balancing (computing)|Load balancing]] and remote processing, by forwarding requests and responses over a [[computer network|network]] * Perform content postprocessing, such as applying [[XSLT]] stylesheets ==Example application== A WSGI compatible "[[Hello World]]" application written in [[Python (programming language)|Python]]: <source lang="python"> def app(environ, start_response): start_response('200 OK', [('Content-Type', 'text/plain')]) yield 'Hello World\n' </source> ==Example of calling an application== An example of calling an application and retrieving its response: <source lang="python"> def call_application(app, environ): body = [] status_headers = [None, None] def start_response(status, headers): status_headers[:] = [status, headers] return body.append app_iter = app(environ, start_response) try: for item in app_iter: body.append(item) finally: if hasattr(app_iter, 'close'): app_iter.close() return status_headers[0], status_headers[1], ''.join(body) status, headers, body = call_application(app, {...environ...}) </source> ==WSGI-compatible applications and frameworks== There are numerous [[web application framework]]s supporting WSGI: * [[CherryPy]] * [[Django (web framework)|Django]]<ref name="djangowsgi">[http://www.djangoproject.com/weblog/2005/jul/18/local_server/] Django with WSGI support</ref> * [[web2py]] * [[TurboGears]] * [[Tornado (web server)|Tornado]] * [[Pylons (web framework)|Pylons]] * [[BlueBream]] * [[nginx]] * [[Google App Engine]] * [[Trac]] * [[Flask (programming)|Flask]] * [[Pyramid (web framework) |Pyramid]] * Bottle<ref name="bottle">[http://bottle.paws.de/] Bottle Micro-Framework</ref> * weblayer<ref name="weblayer">[http://packages.python.org/weblayer] weblayer package for writing WSGI application</ref> ==Wrappers== The server or gateway invokes the application callable once for each request it receives from an [[HTTP]] client, that is directed at the application. Currently wrappers are available for [[FastCGI]], [[Common Gateway Interface|CGI]], [[SCGI]], [[Apache JServ Protocol|AJP]] (using flup), Apache (using [[mod_wsgi]] or [[mod_python]]) and [[Internet Information Services|Microsoft IIS]] (using [http://code.google.com/p/isapi-wsgi/ isapi-wsgi], [http://pyisapie.sourceforge.net/ PyISAPIe], or an [[Active Server Pages|ASP]] gateway). ==WSGI and Python 3== The separation of binary and text data in Python 3 poses a problem for WSGI, as it specifies that header data should be strings, while it sometimes needs to be binary and sometimes text. This works in Python 2 where text and binary data both are kept in "string" variables, but in Python 3 binary data is kept in "bytes" variables and "string" variables are for unicode text data. The result has been a reworked standard called Web3, specified in PEP444. This standard is an incompatible derivative of WSGI designed to work on Python 2.6, 2.7, 3.1+. <ref>{{cite web|title=PEP 444 -- Python Web3 Interface|url=http://python.org/dev/peps/pep-0444/|author=Chris McDonough, Armin Ronacher|date=2010-09-16|accessdate=2010-09-20}}</ref> ==See also== * [[Rack (web server interface)|Rack]] - [[Ruby (programming language)|Ruby]] web server interface * [[PSGI]] - [[Perl]] Web Server Gateway Interface * [[Simple Common Gateway Interface|SCGI]] ==References== <references/> ==External links== * [http://www.pythonpaste.org/ WSGI metaframework] * [http://wsgi.org/ Comprehensive wiki about everything WSGI] * [http://webpython.codepoint.net/wsgi WSGI Tutorial] * [http://docs.python.org/library/wsgiref.html Python standard library module wsgiref] {{Web server interfaces}} [[Category:Python programming language]] [[cs:Web Server Gateway Interface]] [[de:Web Server Gateway Interface]] [[fr:Web Server Gateway Interface]] [[it:Web Server Gateway Interface]] [[nl:Web Server Gateway Interface]] [[ja:Web Server Gateway Interface]] [[pt:Web Server Gateway Interface]] [[ru:WSGI]] [[uk:WSGI]] [[zh:WSGI]]</text> </page> <page> <id>39953</id> <title>Web Storage</title> <text>{{HTML}} '''Web Storage''' and '''DOM Storage''' ([[Document Object Model]]) are [[web application]] software methods and protocols used for storing data in a [[web browser]]. Web storage supports [[Persistence (computer science)|persistent]] data storage, similar to [[HTTP cookie|cookies]], as well as [[Window (computing)|window]]-local storage. Web storage is being standardized by the [[World Wide Web Consortium]] (W3C). It was originally part of the [[HTML 5]] specification, but is now in a separate specification<ref>[http://www.w3.org/TR/webstorage/ Web Storage]</ref>. It is supported by [[Internet Explorer 8]], [[Mozilla]]-based browsers (e.g., [[Mozilla Firefox 2|Firefox 2+]], officially from [[Mozilla Firefox 3.5|3.5]])<ref>[https://developer.mozilla.org/En/DOM:Storage#Description Mozilla Developer Center: DOM Storage]</ref>, [[Safari (web browser)|Safari]] 4, [[Google Chrome]] 4 (sessionStorage is from 5), and [[Opera 10|Opera 10.50]]. {{As of|2010|7|14}} only Opera supports the storage events<ref>[http://www.diveintojavascript.com/javascript-apis/web-storage-dom-storage Dive Into JavaScript: Web Storage (DOM Storage)]</ref>. ==Features== Web storage can be viewed simplistically as an improvement on [[HTTP cookie|cookies]], providing much greater storage capacity (5MB per [[Domain name|domain]] in [[Mozilla Firefox]]<ref>[http://ejohn.org/blog/dom-storage/ John Resig: DOM Storage]</ref>, Google Chrome, and [[Opera (web browser)|Opera]], 10MB per storage area in [[Internet Explorer]]<ref>[http://msdn.microsoft.com/en-us/library/cc197062(VS.85).aspx#_dom MSDN: Introduction to DOM Storage]</ref>) and better programmatic interfaces. However, it differs from cookies in some key ways. ===Client-side interface=== Unlike cookies, which can be accessed by both the server and client side, Web storage falls exclusively under the purview of [[client-side scripting]]. Web storage data is not transmitted to the server in every HTTP request, and a web server can't directly write to Web storage, but can of course issue read and write requests. ===Local and session storage=== Web storage offers two different storage areas—local storage and session storage—which differ in scope and lifetime. Data placed in local storage is per domain (it's available to all scripts from the domain that originally stored the data) and persists after the browser is closed. Session storage is per-page-per-window and is limited to the lifetime of the window. Session storage is intended to allow separate instances of the same web application to run in different windows without interfering with each other, a use case that's not well-supported by cookies.<ref>[http://dev.w3.org/html5/webstorage/#introduction W3C: Web Storage draft standard]</ref> ===Data model=== Web storage currently provides an [[associative array]] [[data model]] where the keys and values are both [[String (computer science)|strings]]. An additional [[Application programming interface|API]] for accessing [[Data model|structured data]], perhaps based on [[SQL]], is being considered by the W3C Web Applications Working Group.<ref>[http://www.w3.org/TR/webdatabase W3C: Web SQL Database (working draft)]</ref> ==Nomenclature== The W3C draft is titled "Web Storage", but "DOM storage" is also a commonly used name.<ref>[https://developer.mozilla.org/En/DOM:Storage Mozilla Developer Center: DOM Storage]</ref><ref>[http://msdn.microsoft.com/en-us/library/cc197062(VS.85).aspx MSDN: Introduction to DOM Storage]</ref> The "DOM" in DOM storage doesn't literally refer to the [[Document Object Model]]. "The term DOM is used to refer to the API set made available to scripts in Web applications, and does not necessarily imply the existence of an actual Document object.."<ref>[http://dev.w3.org/html5/webstorage/#terminology W3C: Web Storage draft standard]</ref> ==Web Storage Management== Storage of Web Storage Objects is enabled per default in [[Mozilla Firefox]] and [[Seamonkey]], but can be disabled by setting the "about:config" parameter "dom.storage.enabled" to false. <ref>[http://kb.mozillazine.org/Dom.storage.enabled Mozillazine article on disabling Web Storage Objects in about:config]</ref> Mozilla Firefox stores all Web Storage objects in a single 