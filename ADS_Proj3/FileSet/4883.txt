XML-RPC library for C++] * [http://xmlrpc-c.sourceforge.net/ XML-RPC for C and C++] * [http://xmlrpcpp.sourceforge.net/ XmlRpc++] * [https://sourceforge.net/projects/xmlrpcc4win/ XmlRpc C++ client for Windows] * [http://www.cs.fsu.edu/~engelen/soap.html gSOAP toolkit for C and C++ supporting XML-RPC and more] * [http://wiedi.frubar.net/blog/2008/03/08/libmaia-xml-rpc-with-qt4/ libmaia: XML-RPC for Qt/C++] === Objective-C / GNUstep / Cocoa === * [http://www.mulle-kybernetik.com/software/XMLRPC/ XMLRPC Framework] * [http://divisiblebyzero.com/ Cocoa XML-RPC Framework]: Open Source XML-RPC framework written for use in Mac OS X Cocoa applications. === Erlang === * [http://erlang.stacken.kth.se/contrib/xmlrpc-1.13.tgz XML-RPC for Erlang]: This is an HTTP 1.1 compliant XML-RPC library for Erlang. It is designed to make it easy to write XML-RPC Erlang clients and/or servers. The library is compliant with the XML-RPC specification published by http://www.xmlrpc.org/ === Java === * [http://ws.apache.org/xmlrpc/ Apache XML-RPC]: Open source library for Java * [http://delight.opendfki.de/ XML-RPC Delight]: Convenient serialisation/deserialisation for Apache XML-RPC using Java Annotations and Beans * [http://members.fortunecity.com/neptune42/xmlrpc/index.htm]: Secure Apache XML-RPC * [http://xmlrpc.sourceforge.net/ Redstone XML-RPC Library]: Redstone's Open Source Library - XML-RPC implementation in Java * [http://kxmlrpc.sourceforge.net/ XML-RPC Library for Java ME]: Open source client-side library for Java ME === XMPP === * [http://gdr.geekhood.net/gdrwpl/jxmlrpc.php pyJabberXMLRPC]: Python classes for XMPP * [http://xmpp.org/extensions/xep-0009.html Jabber-RPC]: Over the [[Extensible Messaging and Presence Protocol]] protocol === Other === * [http://code.google.com/p/json-xml-rpc/ JSON/XML-RPC Client and Server]: Abstract away the differences between JSON-RPC and XML-RPC * [http://www.remobjects.com/ro RemObjects SDK] Delphi and .NET package for XML-RPC, in addition to [[SOAP (protocol)|SOAP]] and others * [http://www.realthinclient.com RealThinClient SDK]: For Delphi/C++ * [http://search.cpan.org/~daan/XML-RPC-0.5/lib/XML/RPC.pm XML::RPC]: Perl module implementation * [http://xmlrpcflash.mattism.com XML-RPC for ActionScript]: For Flash ActionScript 2.0 * [http://code.google.com/p/as3-rpclib/ as3-rpclib]: For Flex/Actionscript 3 * [http://www.xml-rpc.net XML-RPC.NET]: Open source library for .NET clients and servers * [http://code.google.com/p/xmlrpc-light/ XmlRpc-Light]: Client and server library for OCaml * [http://common-lisp.net/project/s-xml-rpc/ S-XML-RPC]: Client and server library for Common Lisp * [http://phpxmlrpc.sourceforge.net/ PHP-XML-RPC]: For PHP * [http://www.cr-solutions.net/p/projects crVCL PHP Framework]: Fast PHP Framework with native XML-RPC library * [http://www.haskell.org/haxr/ HaXR]: Client and server library for Haskell * [http://www.x2ii.info/x2ii/xi/ xi library with PHP and Javascript XML-RPC]: For PHP and Javascript * [http://www.ruby-doc.org/stdlib/libdoc/xmlrpc/rdoc/index.html Ruby XML-RPC library]: For Ruby * [http://www.keplerproject.org/luaxmlrpc/ XML-RPC interface to Lua]: For [[Lua (programming language)|Lua]] * [http://code.google.com/p/android-xmlrpc/ android-xmlrpc]: A light XML-RPC client for Google Android * [http://sourceforge.net/projects/xmlrpctcl/ XML-RPC for Tcl]: A Tcl implementation of XML-RPC providing client and server support * [http://earl.strain.at/space/rebXR+Users+Guide]: RebXR, a full client/server XML-RPC implementation for REBOL. ==See also== *[[Ajax (programming)]] *[[Software componentry#Technologies for Software Components|Component technologies]] *[[List of web service markup languages]] *[[OPML]] *[[Web service]] ==References== <references /> ==External links== * [http://www.xmlrpc.com/ XML-RPC Homepage] * [http://groups.yahoo.com/group/xml-rpc/ Forum] * [http://www.xml.com/pub/rg/XML_RPC_Tutorials Tutorials] * [http://xml.coverpages.org/xml-rpc.html Technology Reports] * [http://citeseer.ist.psu.edu/cis?q=XML+RPC&cs=1 Citations from CiteSeer] * [http://phpxmlrpc.sourceforge.net/wsdl/schema.rnc Relax-NG schema for XML-RPC] {{DEFAULTSORT:Xml-Rpc}} [[Category:XML-based standards]] [[Category:Web services]] [[Category:Internet protocols]] [[Category:Remote procedure call]] [[ar:XML-RPC]] [[bg:XML-RPC]] [[ca:XML-RPC]] [[cs:XML-RPC]] [[de:XML-RPC]] [[es:XML-RPC]] [[fr:XML-RPC]] [[ko:XML-RPC]] [[it:XML-RPC]] [[ja:XML-RPC]] [[pl:XML-RPC]] [[pt:XML-RPC]] [[ru:XML-RPC]] [[uk:XML-RPC]] [[zh:XML-RPC]]</text> </page> <page> <id>40682</id> <title>XML Catalog</title> <text>[[XML]] documents typically refer to external entities, for example the public and/or system ID for the [[Document Type Definition]]. These external relationships are expressed using URIs, typically as URLs. However, if they are absolute URLs, they only work when your network can reach them. Relying on remote resources makes XML processing susceptible to both planned and unplanned network downtime. Conversely, if they are relative URLs, they're only useful in the context where they were initially created. For example, the URL "../../xml/dtd/docbookx.xml" will usually only be useful in very limited circumstances. One way to avoid these problems is to use an entity resolver (a standard part of [[Simple API for XML|SAX]]) or a URI Resolver (a standard part of [[JAXP]]). A resolver can examine the URIs of the resources being requested and determine how best to satisfy those requests. The XML catalog is a document describing a mapping between external entity references and locally-cached equivalents. ==Example Catalog.xml== The following simple catalog shows how one might provide locally-cached DTDs for an XHTML page validation tool, for example. <source lang=xml> <?xml version="1.0"?> <!DOCTYPE catalog PUBLIC "-//OASIS//DTD Entity Resolution XML Catalog V1.0//EN" "http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd"> <catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog" prefer="public"> <public publicId="-//W3C//DTD XHTML 1.0 Strict//EN" uri="dtd/xhtml1/xhtml1-strict.dtd"/> <public publicId="-//W3C//DTD XHTML 1.0 Transitional//EN" uri="dtd/xhtml1/xhtml1-transitional.dtd"/> <public publicId="-//W3C//DTD XHTML 1.1//EN" uri="dtd/xhtml11/xhtml11-flat.dtd"/> </catalog> </source> This catalog makes it possible to resolve <tt>-//W3C//DTD XHTML 1.0 Strict//EN</tt> to the local URI <tt>dtd/xhtml1/xhtml1-strict.dtd</tt>. Similarly, it provides local URIs for two other public IDs. Note that the document above includes a DOCTYPE - this may cause the parser to attempt to access the system ID URL for the DOCTYPE (i.e. <tt>http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd</tt>) before the catalog resolver is fully functioning, which is probably undesirable. To prevent this, simply remove the DOCTYPE declaration. The following example shows this, and also shows the equivalent <tt><system/></tt> declarations as an alternative to <tt><public/></tt> declarations. <source lang=xml> <?xml version="1.0"?> <catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog"> <system systemId="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd" uri="dtd/xhtml1/xhtml1-strict.dtd"/> <system systemId="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" uri="dtd/xhtml1/xhtml1-transitional.dtd"/> <system systemId="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" uri="dtd/xhtml11/xhtml11-flat.dtd"/> </catalog> </source> ==Using a Catalog - Java SAX Example== Catalog resolvers are available for various programming languages. The following example shows how, in Java, a [[Simple API for XML|SAX]] parser may be created to parse some input source in which the <tt>org.apache.xml.resolver.tools.CatalogResolver</tt> is used to resolve external entities to locally-cached instances. This resolver originates from [[Apache Software Foundation|Apache]] [[Xerces]] but is now included with the Sun Java runtime. Simply create a <tt>SAXParser</tt> in the normal way, using factories. Obtain the XML reader and set the entity resolver to the standard one (<tt>CatalogResolver</tt>) or another of your own. <source lang=java> final SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser(); final XMLReader reader = saxParser.getXMLReader(); final ContentHandler handler = ...; final InputSource input = ...; reader.setEntityResolver( new CatalogResolver() ); reader.setContentHandler( handler ); reader.parse( input ); </source> It is important to call the <tt>parse</tt> method on the reader, ''not'' on the SAX parser. ==See also== *[http://www.oasis-open.org/committees/download.php/14810/xml-catalogs.pdf XML Catalogs. OASIS Standard, Version 1.1. 07-October-2005.] *[http://java.sun.com/webservices/docs/1.6/jaxb/catalog.html XML Entity and URI Resolvers], Sun *[http://xmlcatmgr.sourceforge.net/ XML Catalog Manager] project on Sourceforge *[http://xmlcatalog.net/ XML Catalogs for .NET and Mono] [[Category:XML]] [[de:XML Catalogs]]</text> </page> <page> <id>40684</id> <title>XML Configuration Access Protocol</title> <text>{{IPstack}} The XML Configuration Access Protocol ('''XCAP'''), is an application layer [[Protocol (computing)|protocol]] that allows a client to read, write, and modify application configuration data stored in [[XML]] format on a server. == Overview == XCAP maps XML document sub-trees and element attributes to [[HTTP]] 