Direct3D 9 and 10.x-class hardware and [[Device Driver Interface|drivers]],<ref name="gamefest2008"/> using the {{code|D3D10_FEATURE_LEVEL1}} functionality first introduced in Direct3D 10.1 runtime.<ref name="D3Dfeaturelevel"/> Feature levels 9_1, 9_2 and 9_3 encapsulate various features of popular Direct3D 9 cards, and feature levels 10_0 and 10.1 refer to Direct3D 10 and 10.1 respectively; each upper level is a strict superset of a lower level. Feature levels allow developers to unify the rendering pipeline under Direct3D 11 API and make use of API improvements such as better resource management and multithreading even on entry-level cards, though advanced features such as new shader models and rendering stages will only be exposed on up-level hardware.<ref name="D3D11DDI">{{cite web|url=http://msdn.microsoft.com/en-us/library/dd835183.aspx|title=Windows DDK - Supporting Direct3D 11|publisher=MSDN|accessdate=2009-06-13}}</ref> <ref name="D3D11downlevel">GameFest 2008 presentation: '''Introduction to the Direct3D 11 Graphics Pipeline''', Slide 56: <br> <blockquote>'''Direct3D 11 will run on down-level hardware'''<br> *Multithreading! *Direct3D 10.1, 10 and 9 hardware/drivers *Full functionality (for example, tesselation) will require Direct3D 11 hardware<blockquote></ref> [[Tessellation]] was earlier considered for Direct3D 10, but was later abandoned. GPUs such as [[Radeon R600]] feature a tessellation engine that can be used with Direct3D 9/10<ref name="dx9tessellation">{{cite web | url = http://null-ptr.blogspot.com/2008/07/using-ati-hardware-tesselation-in-dx9.html | accessdate = 2008-08-02 | title = Using ATI hardware tessellation in DX9}}</ref> and OpenGL, but it's not compatible with Direct3D 11 (according to Microsoft). Older graphics hardware such as Radeon 8xxx, GeForce 3/4 had support for another form of tesselation (RT patches, N patches) but those technologies never saw substantial use. As such, their support was dropped from newer hardware. Microsoft has also hinted at other features such as [[order independent transparency]], which was never exposed by the Direct3D API but supported almost transparently by early Direct3D hardware such as Videologic's [[PowerVR]] line of chips. The Direct3D 11 Technical Preview has been included in November 2008 release of DirectX SDK.<ref name=Nov2008SDK>{{cite web|url=http://www.microsoft.com/downloads/details.aspx?FamilyID=5493f76a-6d37-478d-ba17-28b1cca4865a&DisplayLang=en|title=DirectX Software Development Kit, November 2008|publisher=Microsoft|date=2008-11-07|accessdate=2008-11-08}}</ref> First seen in the [[Release Candidate]] version, [[Windows 7]] integrates the first released Direct3D 11 support. [[Windows Vista Platform Update]] includes full-featured Direct3D 11 runtime and DXGI 1.1 update, as well as other related components from Windows 7 like [[Windows Advanced Rasterization Platform|WARP]], [[Direct2D]], [[DirectWrite]], and [[Windows Imaging Component|WIC]].<ref>http://support.microsoft.com/kb/971644</ref><ref>http://blogs.msdn.com/directx/archive/2009/09/10/windows-7-transition-pack-for-windows-vista.aspx</ref> ==Architecture== [[Image:D3D Abs.svg|thumb|right|190px|Abstract Layer]] Direct3D is a Microsoft [[DirectX]] API subsystem component. The aim of Direct3D is to abstract the communication between a graphics application and the graphics hardware drivers. It is presented like a thin abstract layer at a level comparable to [[Graphics Device Interface|GDI]] (see attached diagram). Direct3D contains numerous features that GDI lacks. Direct3D is an ''Immediate mode'' graphics API. It provides a low-level interface to every video card 3D function (''[[transform, clipping, and lighting|transformations, clipping, lighting]]'', ''materials'', ''textures'', ''[[Z-buffering|depth buffering]]'' and so on). It also had a higher level ''Retained mode'' component, that has now been officially discontinued. Direct3D immediate mode presents three main abstractions: ''devices'', ''resources'' and ''swap chains'' (see attached diagram). ''Devices'' are responsible for rendering the 3D scene. They provide an interface with different rendering capabilities. For example, the [[monochrome|mono]] device provides white and black rendering, while the [[RGB color model|RGB]] device renders in color. There are four types of devices: *'''HAL''' ([[hardware abstraction layer]]) device: For devices supporting hardware acceleration. [[Image:D3DDevice.svg|thumb|right|190px|Device]] *'''Reference''' device: Simulates new functions not yet available in hardware. It is necessary to install the Direct3D [[Software development kit|SDK]] to use this device type. *'''Null reference''' device: Does nothing. This device is used when the SDK is not installed and a reference device is requested. *'''Pluggable software''' device: Performs software rendering. This device was introduced with '''DirectX 9.0'''.<ref>{{ cite web |url=http://www.microsoft.com/downloads/details.aspx?FamilyID=57d03491-6c49-4429-bff7-130408b5f410&DisplayLang=en |title=Software Rasterizer for DirectX 9.0 SDK }}</ref> Every device contains at least one ''swap chain''. A ''swap chain'' is made up of one or more back [[Buffer (computer science)|buffer]] surfaces. Rendering occurs in the [[Double buffering|back buffer]]. Moreover, devices contain a collection of ''resources''; specific data used during rendering. Each resource has four attributes: *'''Type''': Determines the type of resource: surface, volume, texture, cube texture, volume texture, surface texture, index buffer or vertex buffer. *'''Pool''':<ref>{{ cite web |url=http://www.toymaker.info/Games/html/d3d_resources.html#MemoryPool |title=Direct3D Resources - [[Memory pool]] }}</ref> Describes how the resource is managed by the runtime and where it is stored. In the '''Default''' pool the resource will exist only in device memory. Resources in the '''managed''' pool will be stored in system memory, and will be sent to the device when required. Resources in '''system memory''' pool will only exist in system memory. Finally, the '''scratch''' pool is basically the same as the system memory pool, but resources are not bound by hardware restrictions. *'''Format''': Describes the layout of the resource data in memory. For example, ''D3DFMT_R8G8B8'' format value means a 24 bits [[colour depth]] (8 bits for red, 8 bits for green and 8 bits for blue). *'''Usage''': Describes, with a collection of [[Flag (computing)|flag]] bits, how the resource will be used by the application. These flags are dictate which resources are used in dynamic or static access patterns. Static resource values donâ€™t change after being loaded, whereas dynamic resource values may be modified. ==Pipeline== [[Image:D3D Pipeline.svg|thumb|right|Graphics pipeline process]] The Microsoft Direct3D 10 API defines a process to convert a group of vertices, textures, buffers, and state into an image on the screen. This process is described as a rendering pipeline with several distinct stages. The different stages of the Direct3D 10 pipeline<ref>{{ cite web |url=http://www.xmission.com/~legalize/book/preview/poster/pipeline-9.0.png |title=Direct3D 9.0 pipeline diagram }}</ref> are:<ref>{{ cite web |url=http://msdn2.microsoft.com/en-us/library/bb205123.aspx |title=Direct3D 10 pipeline stages }}</ref> #'''Input Assembler''': Reads in vertex data from an application supplied vertex buffer and feeds them down the pipeline. #'''[[Vertex shader|Vertex Shader]]''': Performs operations on a single vertex at a time, such as transformations, skinning, or lighting. #'''[[Geometry shader|Geometry Shader]]''': Processes entire primitives such as triangles, points, or lines. Given a primitive, this stage discards it, or generates one or more new primitives. #'''Stream Output''': Can write out the previous stage's results to memory. This is useful to recirculate data back into the pipeline. #'''Rasterizer''': Converts primitives into pixels, feeding these pixels into the pixel shader. The Rasterizer may also perform other tasks such as clipping what is not 