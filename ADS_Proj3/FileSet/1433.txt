to dictate the use of technical software features and architecture. * Dependence upon all other aspects of XP: "XP is like a ring of poisonous snakes, daisy-chained together. All it takes is for one of them to wriggle loose, and you've got a very angry, poisonous snake heading your way."<ref>[http://www.softwarereality.com/lifecycle/xp/safety_net.jsp The Case Against Extreme Programming: A Self-Referential Safety Net]</ref> ===Scalability=== Historically, XP only works on teams of twelve or fewer people. One way to circumvent this limitation is to break up the project into smaller pieces and the team into smaller groups. It has been claimed that XP has been used successfully on teams of over a hundred developers{{Citation needed|date=February 2007}}. [[ThoughtWorks]] has claimed reasonable success on distributed XP projects with up to sixty people{{Citation needed|date=August 2009}}. In 2004 Industrial Extreme Programming (IXP)<ref>[http://www.cutter.com/content-and-analysis/resource-centers/agile-project-management/sample-our-research/apmr0502.html Cutter Consortium :: Industrial XP: Making XP Work in Large Organizations<!-- Bot generated title -->]</ref> was introduced as an evolution of XP. It is intended to bring the ability to work in large and distributed teams. It now has 23 practices and flexible values. As it is a new member of the [[w:en:Category:Agile software development|Agile]] family, there is not enough data to prove its usability, however it claims to be an answer to what it sees as XP's imperfections. ===Severability and responses=== In 2003, Matt Stephens and Doug Rosenberg published ''Extreme Programming Refactored: The Case Against XP'' which questioned the value of the XP process and suggested ways in which it could be improved. This triggered a lengthy debate in articles, internet newsgroups, and web-site chat areas. The core argument of the book is that XP's practices are interdependent but that few practical organizations are willing/able to adopt all the practices; therefore the entire process fails. The book also makes other criticisms and it draws a likeness of XP's "collective ownership" model to [[socialism]] in a negative manner. Certain aspects of XP have changed since the book ''Extreme Programming Refactored'' (2003) was published; in particular, XP now accommodates modifications to the practices as long as the required objectives are still met. XP also uses increasingly generic terms for processes. Some argue that these changes invalidate previous criticisms; others claim that this is simply watering the process down. RDP Practice is a technique for tailoring extreme programming. This practice was initially proposed as a long research paper in a workshop organized by Philippe Kruchten and Steve Adolph( See [http://www.lero.ie/apso08/introduction.html APSO workshop] at [http://icse08.upb.de/ ICSE 2008]) and yet it is the only proposed and applicable method for customizing XP. The valuable concepts behind RDP practice, in a short time provided the rationale for applicability of it in industries. RDP Practice tries to customize XP by relying on [[RDP technique|technique XP Rules.]] Other authors have tried to reconcile XP with the older methods in order to form a unified methodology. Some of these XP sought to replace, such as the [[Waterfall model|waterfall]] method; example: [http://www.lux-seattle.com/resources/whitepapers/waterfall.htm Project Lifecycles: Waterfall, Rapid Application Development, and All That]. [[JPMorgan Chase & Co.]] tried combining XP with the computer programming methodologies of [[Capability Maturity Model Integration]] (CMMI), and [[Six Sigma]]. They found that the three systems reinforced each other well, leading to better development, and did not mutually contradict.<ref>[http://www.sei.cmu.edu/library/assets/jarvis-gristock.pdf Extreme Programming (XP) Six Sigma CMMI].</ref> ==Criticism== Extreme programming's initial buzz and controversial tenets, such as [[pair programming]] and [[continuous design]], have attracted particular criticisms, such as the ones coming from McBreen<ref name="mcbreen">{{cite book|last=McBreen|first=P.|title=Questioning Extreme Programming|publisher=Addison-Wesley|location=Boston, MA|year=2003|isbn=0-201-84457-5}}</ref> and Boehm and Turner.<ref name="boehm2004">{{cite book|last=Boehm|first=B.|authorlink=Barry Boehm|coauthors=[[Richard Turner (software)|R. Turner]]|title=Balancing Agility and Discipline: A Guide for the Perplexed|publisher=Addison-Wesley|location=Boston, MA|year=2004|isbn=0-321-18612-5}}</ref> Many of the criticisms, however, are believed by Agile practitioners to be misunderstandings of agile development.<ref name="sdmagazine1811">[http://www.sdmagazine.com/documents/s=1811/sdm0112h/0112h.htm sdmagazine]</ref> In particular, extreme programming is reviewed and critiqued by Matt Stephens's and Doug Rosenberg's ''Extreme Programming Refactored''.<ref name= "ExtremeProgrammingRefactored">[http://www.softwarereality.com/ExtremeProgrammingRefactored.jsp Extreme Programming Refactored], Matt Stephens and Doug Rosenberg, Publisher: Apress L.P.</ref> Criticisms include: * A methodology is only as effective as the people involved, Agile does not solve this * Often used as a means to bleed money from customers through lack of defining a deliverable * Lack of structure and necessary documentation * Only works with senior-level developers * Incorporates insufficient software design * Requires meetings at frequent intervals at enormous expense to customers * Requires too much cultural change to adopt * Can lead to more difficult contractual negotiations * Can be very inefficientâ€”if the requirements for one area of code change through various iterations, the same programming may need to be done several times over. Whereas if a plan were there to be followed, a single area of code is expected to be written once. * Impossible to develop realistic estimates of work effort needed to provide a quote, because at the beginning of the project no one knows the entire scope/requirements * Can increase the risk of [[scope creep]] due to the lack of detailed requirements documentation * Agile is feature driven; non-functional quality attributes are hard to be placed as [[User story|user stories]] == See also == * [[Software engineering]] * [[Software Craftsmanship]] * [[Agile software development]] * [[Extreme project management]] * [[Extreme programming practices]] * [[Pair Programming]] * [[RDP technique]] * [[Kaizen]] * [[List of software development philosophies]] * [[Scrum (development)]] ==References== {{reflist}} == Further reading == * [[Ken Auer]] and [[Roy Miller]]. ''Extreme Programming Applied: Playing To Win'', Addison-Wesley. * [[Kent Beck]]: ''Extreme Programming Explained: Embrace Change'', Addison-Wesley. * [[Kent Beck]] and [[Martin Fowler]]: ''Planning Extreme Programming'', Addison-Wesley. * [[Kent Beck]] and Cynthia Andres. ''Extreme Programming Explained: Embrace Change, Second Edition'', Addison-Wesley. * [[Alistair Cockburn]]: ''Agile Software Development'', Addison-Wesley. * [[Martin Fowler]]: ''Refactoring: Improving the Design of Existing Code'', Addison-Wesley. * [[Harvey Herela]] (2005). [http://calla.ics.uci.edu/histories/ccc/ Case Study: The Chrysler Comprehensive Compensation System]. Galen Lab, U.C. Irvine. * [[Jim Highsmith]]. ''Agile Software Development Ecosystems'', Addison-Wesley. * [[Ron Jeffries]], Ann Anderson and Chet Hendrickson (2000), ''Extreme Programming Installed'', Addison-Wesley. * [[Mehdi Mirakhorli]] (2008). ''RDP technique: a practice to customize xp'', International Conference on Software Engineering, Proceedings of the 2008 international workshop on Scrutinizing agile practices or shoot-out at 