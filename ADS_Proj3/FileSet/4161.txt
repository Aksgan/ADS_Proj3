common runtime and clustering model, used across the entire [[middleware]] stack. The core middleware components in a typical SBA architecture are: {| class="wikitable" |- ! Component ! Description |- | Messaging Grid | Handles the flow of incoming transaction as well as the communication between services |- | [[Data grid|Data Grid]] | Manages the data in distributed memory with options for synchronizing that data with an underlying database |- | Processing Grid | Parallel processing component based on the master/worker pattern (also known as a [[Blackboard system|blackboard pattern]]) that enables parallel processing of events among different services |} * '''POJO-Driven Services Model''' — A lightweight services model that can take any standard Java implementation and turn it into a loosely coupled distributed service. The model is ideal for interaction with services that run within the same processing-unit. * '''SLA-Driven Container''' — The SLA-driven container enables the deployment of the application on a dynamic pool of machines based on Service Level Agreements. SLA definitions include the number of instances that need to run in order to comply with the application scaling and fail-over policies, as well as other policies. ==See also== * [[Tuple space]] * [[JavaSpaces]] * [[Blackboard system]] ==Literature== '''Articles/papers, technical:''' * {{cite web | last = Xu | first = Dezheng | coauthors = Xiaoying Bai, Guilan Dai | year = 2006 | url = http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/proceedings/&toc=comp/proceedings/sose/2006/2726/00/2726toc.xml&DOI=10.1109/SOSE.2006.6 | title = A Tuple-Space-Based Coordination Architecture for Test Agents in the MAST Framework | format = PDF | publisher = Tsinghua University, China}} * {{cite web | last = Shalom | first = Nati | coauthors = | year = 2006 | url = http://www.gigaspaces.com/os_papers.html#a1 | title = Space-Based Architecture and the End of Tier-Based Computing | format = PDF | publisher = GigaSpaces Technologies}} * {{cite web | last = Engelhardtsen | first = Fritjof Boger | coauthors = Tommy Gagnes | year = 2002 | url = http://www.nik.no/2002/Engelhardtsen.pdf | title = Using JavaSpaces to create adaptive distributed systems | format = PDF | publisher = Agder University College, Norway}} ==References== * Bernhard Angerer, [http://www.onjava.com/pub/a/onjava/2003/03/19/java_spaces.html Space-Based Programming] * Joseph Ottinger, [http://www.theserverside.com/news/thread.tss?thread_id=42928 Space-Based Architecture] * Julian Browne, [http://www.julianbrowne.com/article/viewer/space-based-architecture-example Space-Based Architecture Illustration] * Julian Browne, [http://www.julianbrowne.com/article/viewer/space-based-agility Space-Based Agility] * Julian Browne, [http://www.julianbrowne.com/article/viewer/space-based-archetypes Space-Based Archetypes] * Owen Taylor, [http://jroller.com/page/owentaylor?entry=space_based_architecture_an_implementation Space-based Architecture — an implementation of TPC] * Udi Dahan, The Software Simplist, [http://udidahan.weblogs.us/2007/01/20/space-based-architectural-thinking/ Space-Based Architectural Thinking] * Mike Herrick, [http://fuzzypanic.blogspot.com/2006/12/sba-eda-lessons-learned.html SBA & EDA Lessons Learned] * Tobin Harris, [http://www.tobinharris.com/2007/5/6/space-based-architecture-one-to-watch Space-Based Architecture — One to Watch] * Udi Dahan, The Software Simplist, [http://udidahan.weblogs.us/category/space-based-architecture/ Space-Based Architecture] * Guy Nirpaz (webcast), [http://www.bejug.org/confluenceBeJUG/display/PARLEYS/SBA+-+Scalable+SOA Space-Based Architecture — Scalable SOA] [[Category:Software architecture]] [[Category:Middleware]] [[Category:Cluster computing]] [[Category:Grid computing]] [[Category:Distributed data storage]]</text> </page> <page> <id>35184</id> <title>SpaceWire</title> <text>{{Infobox Computer Hardware Bus | name = SpaceWire | fullname = | image = | caption = | invent-date = | invent-name = [[European Space Agency]] | super-name = | super-date = | width = | numdev = | speed = 2 Mbit/s to 400 Mbit/s | style = s | hotplug = Yes | external = Yes }} {{Infobox connector |name = SpaceWire |type = Data connector |image = |logo = |caption = |designer = [[European Space Agency]] |design_date = |manufacturer = |production_date = |superseded = |superseded_by = |superseded_by_date = |external = Yes |hotplug = Yes |length = |width = |height = |electrical = |ground = |maximum_voltage = |maximum_current = |audio_signal = No |video_signal = No |data_signal = Yes |data_bit_width = |data_bandwidth = 2 Mbit/s to 400 Mbit/s |data_devices = |data_style = Serial |cable = |physical_connector = DE-9 |num_pins = 9 |pinout_col1_name = Name |pinout_col2_name = Description |pinout_image = |pinout_caption = |pin1 = Data In Pos. |pin1_name = DIN+ |pin2 = Strobe In Pos. |pin2_name = SIN+ |pin3 = Ground |pin3_name = Inner Shield |pin4 = Strobe Out Neg. |pin4_name = SOUT- |pin5 = Data Out Neg. |pin5_name = DOUT- |pin6 = Data In Neg. |pin6_name = DIN- |pin7 = Strobe In Neg. |pin7_name = SIN- |pin8 = Strobe Out Pos. |pin8_name = SOUT+ |pin9 = Data Out Pos. |pin9_name = DOUT+ |pinout_notes = }} '''SpaceWire''' is a [[spacecraft]] [[communication network]] based in part on the [[IEEE 1355]] standard of communications. It is coordinated by the [[European Space Agency]] (ESA) in collaboration with international space agencies including [[NASA]], [[Japan Aerospace Exploration Agency|JAXA]] and [[Russian Federal Space Agency|RKA]]. Within a SpaceWire network the nodes are connected through low-cost, low-[[Lag|latency]], [[Duplex (telecommunications)#Full-duplex|full-duplex]], [[Point-to-point communication (telecommunications)|point-to-point]] serial links and [[packet switching]] [[wormhole routing]] routers. SpaceWire covers two (physical and data-link) of the seven layers of the [[OSI model]] for communications. ==Architecture== SpaceWire's modulation and data formats generally follow the [[data strobe encoding]] - [[Differential signaling|differential ended signaling]] (DS-DE) part of the IEEE Std 1355-1995. SpaceWire utilizes [[asynchronous communication]] and allows speeds between 2 Mbit/s and 400 Mbit/s. DS-DE is well-favored because it describes modulation, bit formats, routing, [[flow control]] and [[error detection]] in hardware, with little need for software. SpaceWire also has very low error rates, deterministic system behavior, and relatively simple digital electronics. SpaceWire replaced old [[Positive Emitter Coupled Logic|PECL]] differential drivers in the physical layer of IEEE 1355 DS-DE by [[low-voltage differential signaling]] (LVDS). SpaceWire also proposes the use of space-qualified 9-pin connectors. SpaceWire and IEEE 1355 DS-DE allows for a wider set of speeds for data transmission, and some new features for automatic [[failover]]. The fail-over features let data find alternate routes, so a spacecraft can have multiple data buses, and be made [[Fault-tolerant design|fault-tolerant]]. SpaceWire also allows the propagation of time interrupts over SpaceWire links, eliminating the need for separate time discretes. ==Uses== SpaceWire is used worldwide. Its use began primarily in [[European Space Agency|ESA]] projects, but it is currently used by [[NASA]], [[Japan Aerospace Exploration Agency|JAXA]], [[Russian Federal Space Agency|RKA]], and many other organizations and companies. Some NASA projects using it include the [[James Webb Space Telescope]], [[Swift Gamma-Ray Burst Mission|Swift's]] [[Burst Alert Telescope]], the [[Lunar Reconnaissance Orbiter]], [[LCROSS]], the [[Geostationary Operational Environmental Satellite]] (GOES-R), and the Communications, Navigation, and Networking Reconfigurable Testbed (CoNNeCT). It has also been selected by the [[United States 