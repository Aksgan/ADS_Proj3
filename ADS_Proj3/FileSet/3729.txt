also known as [[Phong shading]]. This performs bilinear interpolation of the normal vectors and uses the result to do local lighting calculation. ==Acceleration techniques== To extract the maximum performance out of any rasterization engine, a minimum number of polygons should be sent to the renderer. A number of acceleration techniques have been developed over time to cull out objects which can not be seen. ===Backface culling=== {{main|Back-face culling}} The simplest way to cull polygons is to cull all polygons which face away from the viewer. This is known as backface culling. Since most 3d objects are fully enclosed, polygons facing away from a viewer are always blocked by polygons facing towards the viewer unless the viewer is inside the object. A polygon’s facing is defined by its '''winding''', or the order in which its vertices are sent to the renderer. A renderer can define either clockwise or counterclockwise winding as front or back facing. Once a polygon has been transformed to screen space, its winding can be checked and if it is in the opposite direction, it is not drawn at all. Of course, backface culling can not be used with degenerate and unclosed volumes. ===Spatial data structures=== More advanced techniques use data structures to cull out objects which are either outside the viewing volume or are occluded by other objects. The most common data structures are [[binary space partition]]s, [[octree]]s, and '''cell and portal culling'''. ==Further refinements== While the basic rasterization process has been known for decades, modern applications continue to make optimizations and additions to increase the range of possibilities for the rasterization rendering engine. ===Texture filtering=== Textures are created at specific resolutions, but since the surface they are applied to may be at any distance from the viewer, they can show up at arbitrary sizes on the final image. As a result, one pixel on screen usually does not correspond directly to one [[Texel (graphics)|texel]]. Some form of [[Texture filtering|filtering]] technique needs to be applied to create clean images at any distance. A variety of methods are available, with different tradeoffs between image quality and computational complexity. ===Environment mapping=== Environment mapping is a form of texture mapping in which the texture coordinates are view-dependent. One common application, for example, is to simulate reflection on a shiny object. One can environment map the interior of a room to a metal cup in a room. As the viewer moves about the cup, the texture coordinates of the cup’s vertices move accordingly, providing the illusion of reflective metal. ===Bump mapping=== [[Bump map]]ping is another form of texture mapping which does not provide pixels with color, but rather with depth. Especially with modern pixel shaders (see below), bump mapping creates the feel of view and lighting-dependent roughness on a surface to enhance realism greatly. ===Level of detail=== In many modern applications, the number of polygons in any scene can be phenomenal. However, a viewer in a scene will only be able to discern details of close-by objects. [[Level of detail (programming)|Level of detail]] algorithms vary the complexity of geometry as a function of distance to the viewer. Objects right in front of the viewer can be rendered at full complexity while objects further away can be simplified dynamically, or even replaced completely with [[Sprite (computer graphics)|sprites]]. ===Shadows=== Lighting calculations in the traditional rasterization process do not account for object occlusion. [[Shadow mapping]] and [[shadow volume]]s are two common modern techniques for creating shadows. ==Hardware acceleration== Starting in the 1990s, [[hardware acceleration]] for normal consumer desktop computers has become the norm. Whereas graphics programmers had earlier relied on hand-coded assembly to make their programs run fast, most modern programs are written to interface with one of the existing graphics APIs, which drives a dedicated [[Graphics processing unit|GPU]]. The latest GPUs feature support for programmable [[pixel shader]]s which drastically improve the capabilities of programmers. The trend is towards full programmability of the graphics pipeline. == References == {{reflist}} ==See also== * [[Hidden surface determination]] * [[Bresenham's line algorithm]] for a typical method in rasterisation * [[Scanline rendering]] for line-by-line rasterisation * [[Rendering (computer graphics)]] for more general information * [[Graphics pipeline]] for rasterisation in commodity graphics hardware * [[Raster image processor]] for 2D rasterisation in printing systems * [[Vector graphics]] for the source art * [[Raster graphics]] for the result * [[Raster to vector]] for conversion in the opposite direction * [[Triangulated irregular network]], a vector source for topography data, often rasterized as a (raster) [[digital elevation model]]. ==External links== *[http://www.ddj.com/documents/s=1048/ddj9205m/9205m.htm Michael Abrash’s articles on computer graphics] *[http://www.microsoft.com/windows/directx/ Microsoft’s DirectX API] *[http://www.opengl.org OpenGL API] *[http://mathworld.wolfram.com/topics/MatrixTypes.html Matrices (including transformation matrices) from MathWorld] [[Category:Computer graphics]] [[ca:Tramar]] [[de:Rasterung]] [[es:Rasterización]] [[fr:Rastérisation]] [[it:Rasterizzazione]] [[ms:Perasteran]] [[ja:ラスタライズ]] [[pl:Rasteryzacja]] [[pt:Rasterização]] [[ru:Растеризация]] [[zh:栅格化]]</text> </page> <page> <id>31327</id> <title>Rational ignorance</title> <text>{{Inappropriate tone|date=December 2007}}{{Refimprove|date=September 2007}} '''Rational ignorance''' occurs when the cost of educating oneself on an issue exceeds the potential benefit that the knowledge would provide. [[Ignorance]] about an issue is said to be "rational" when the cost of educating oneself about the issue sufficiently to make an informed decision can outweigh any potential benefit one could reasonably expect to gain from that decision, and so it would be irrational to waste time doing so. This has consequences for the quality of decisions made by large numbers of people, such as [[general election]]s, where the [[probability]] of any one [[vote]] changing the outcome is very small. The term is most often found in [[economic]]s, particularly [[public choice theory]], but also used in other disciplines which study [[rationality]] and choice, including [[philosophy]] ([[epistemology]]) and [[game theory]]. The term was coined by [[Anthony Downs]], [[An Economic Theory of Democracy]] (New York: Harper & Brothers, 1957) [[Bryan Caplan]] has theorized that voters' anomalous beliefs cannot be attributed solely to irrational ignorance; he states that irrational [[systemic bias]] is also at work.<ref>{{citation|doi=10.1007/978-0-306-47828-4_171|chapter=Rational Irrationality|title=The Encyclopedia of Public Choice|author=Caplan, Bryan|date=2003|url=http://www.springerlink.com/content/j61547572640v05w/|pages=795–797}}</ref> Although some scholars have argued that citizens use "shortcuts" to gain enough knowledge to participate in self-government, the evidence does not support the "shortcut" argument.<ref>{{citation|title=When Ignorance Isn't Bliss: How Political Ignorance 