with an elliptic key algorithm using a 109-bit long key has been broken by brute force.<ref>[https://www.certicom.com/index.php/2004-press-releases/36-2004-press-releases/300-solution-required-team-of-mathematicians-2600-computers-and-17-months- Certicom Announces Elliptic Curve Cryptography Challenge Winner]</ref> The [[NSA]] specifies that "Elliptic Curve Public Key Cryptography using the 256-bit prime modulus elliptic curve as specified in FIPS-186-2 and SHA-256 are appropriate for protecting classified information up to the SECRET level. Use of the 384-bit prime modulus elliptic curve and SHA-384 are necessary for the protection of TOP SECRET information."<ref>[http://www.nsa.gov/ia/programs/suiteb_cryptography/index.shtml NSA Suite B Cryptography (nsa.gov)]</ref> ==Effect of quantum computing attacks on key strength== The two best known quantum computing attacks are based on [[Shor's algorithm]] and [[Grover's algorithm]]. Of the two Shor's offers the greater risk to current security systems. Derivatives of Shor's algorithm are widely conjectured to be effective against all mainstream public-key algorithms including [[RSA]], [[Diffie-Hellman]] and [[elliptic curve cryptography]]. According to Professor Gilles Brassard, an expert in quantum computing: "The time needed to factor an RSA integer is the same order as the time needed to use that same integer as modulus for a single RSA encryption. In other words, it takes no more time to break RSA on a quantum computer (up to a multiplicative constant) than to use it legitimately on a classical computer." The general consensus is that these public key algorithms are insecure at any key size if sufficiently large quantum computers capable of running Shor's algorithm become available. The implication of this attack is that all data encrypted using current standards based security systems such as the ubiquitous [[Transport Layer Security|SSL]] used to protect e-commerce and Internet banking and [[SSH]] used to protect access to sensitive computing systems is at risk. Encrypted data protected using public-key algorithms can be archived and may be broken at a later time. Mainstream symmetric ciphers (such as [[Advanced Encryption Standard|AES]] or [[Twofish]]) and collision resistant hash functions (such as [[SHA]]) are widely conjectured to offer greater security against known quantum computing attacks. They are widely conjectured to be most vulnerable to [[Grover's algorithm]]. Bennett, Bernstein, Brassard, and Vazirani proved in 1996 that a brute-force key search on a quantum computer cannot be faster than roughly 2<sup>''n''/2</sup> invocations of the underlying cryptographic algorithm, compared with roughly 2<sup>''n''</sup> in the classical case.<ref name=bennett_1997>Bennett C.H., Bernstein E., Brassard G., Vazirani U., ''[http://www.cs.berkeley.edu/~vazirani/pubs/bbbv.ps The strengths and weaknesses of quantum computation]''. [[SIAM Journal on Computing]] 26(5): 1510-1523 (1997).</ref> Thus in the presence of large quantum computers an ''n''-bit key can provide at most ''n''/2 bits of security. Quantum brute force is easily defeated by doubling the key length, which has little extra computational cost in ordinary use. This implies that at least a 160-bit symmetric key is required to achieve 80-bit security rating against a quantum computer. ==See also== * [[Key strengthening]] ==References== {{reflist}} * [http://csrc.nist.gov/publications/PubsSPs.html ''Recommendation for Key Management &mdash; Part 1: general,''] NIST Special Publication 800-57. March, 2007 * Blaze, Matt; Diffie, Whitfield; Rivest, Ronald L.; et al. "Minimal Key Lengths for Symmetric Ciphers to Provide Adequate Commercial Security". January, 1996 * Arjen K. Lenstra, Eric R. Verheul: Selecting Cryptographic Key Sizes. J. Cryptology 14(4): 255-293 (2001) &mdash; [http://citeseer.ist.psu.edu/lenstra99selecting.html Citeseer link] ==External links== * [http://www.keylength.com/ www.keylength.com: An online keylength calculator] * [http://www.giac.org/practical/gsec/Lorraine_Williams_GSEC.pdf A discussion on the importance of key length] ([[Portable Document Format|PDF]] file), available also in [[PostScript]] and other [[File format|format]]s * [http://synaptic-labs.com/ecosystem/context-qc-relevant-today.html A discussion on how much time we have available before we must take steps to protect against quantum computing attacks] * NIST [http://csrc.nist.gov/CryptoToolkit/ crypto toolkit] * The [[FreeS/WAN]] project's [http://www.freeswan.org/freeswan_trees/freeswan-2.06/doc/politics.html#shortkeys discussion of key length] * [[Burt Kaliski]]: [http://www.rsasecurity.com/rsalabs/node.asp?id=2004 TWIRL and RSA key sizes] (May 2003) {{Crypto navbox}} {{DEFAULTSORT:Key Size}} [[Category:Key management]] [[cs:Délka klíče]] [[de:Schlüssellänge]] [[es:Longitud de la clave]] [[fr:Longueur de clé]] [[it:Dimensione della chiave]] [[pt:Tamanho de chave]] [[simple:Key size]] [[vi:Độ lớn khóa]]</text> </page> <page> <id>20617</id> <title>Key strengthening</title> <text>In [[cryptography]], '''key strengthening''' or '''key stretching''' refer to techniques used to make a possibly weak [[Key (cryptography)|key]], typically a [[password]] or [[passphrase]], more secure against a [[brute force attack]] by increasing the time it takes to test each possible key. Passwords or passphrases created by humans are often short or predictable enough to allow [[password cracking]]. Key strengthening makes such attacks more difficult. Key strengthening techniques generally work as follows. The initial key is fed into an algorithm that, running on a given speed of processor, takes a known constant time to apply. The algorithm is constructed so that the delay introduced is acceptable to most users, say one second on a typical personal computer. The output is the '''enhanced key'''. The enhanced key should be of sufficient size to make it unfeasible to break by brute force (e.g. at least 128 bits). The overall algorithm used should be secure in the sense that there should be no known way of taking a shortcut that would make it possible to calculate the enhanced key in less time (less processor work) than by using the key strengthening algorithm itself. The key strengthening process leaves the attacker with two options: either try every possible combination of the enhanced key (infeasible if the enhanced key is long enough), or else try likely combinations of the initial key. In the latter approach, if the initial key is a password or a passphrase, then the attacker would first try every word in a dictionary or common password list and then try all character combinations for longer passwords. Key strengthening does not prevent this approach, but the attacker has to spend much more time on each attempt. If the attacker uses the same class of hardware as the user, each guess will take the same amount of time to process as it took the user (for example, one second). Even if the attacker has much greater computing resources than the user, the key strengthening will still slow the attacker down, since the user's computer only has to compute the strengthening function once upon the user entering his/her password, whereas the attacker must compute it for every guess in the attack. There are several ways to perform key strengthening. 