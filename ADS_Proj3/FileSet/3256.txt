LISP 1.5 Programmer's Manual | publisher = [[MIT Press]] | first1 = John | last1 = McCarthy | author-link = John McCarthy (computer scientist) | first2 = Paul W. | last2 = Abrahams | first3 = Daniel J. | last3 = Edwards | author3-link = Daniel Edwards (programmer) | first4 = swapnil d. | last4 = Hart | first5 = Michael I. | last5 = Levin | isbn = 0262130114 | year = 1962 | page = 105 | quote = Object - a synonym for atomic symbol}}</ref> Alan Kay was later to cite a detailed understanding of LISP internals as a strong influence on his thinking in 1966.<ref name=alanKayOnOO>{{Cite web|url=http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en |title=Dr. Alan Kay on the Meaning of “Object-Oriented Programming” |year= 2003|accessdate=2010-02-11}}</ref> Another early MIT example was [[Sketchpad]] created by [[Ivan Sutherland]] in 1960-61; in the glossary of the 1963 technical report based on his dissertation about Sketchpad, Sutherland defined notions of "object" and "instance" (with the class concept covered by "master" or "definition"), albeit specialized to graphical interaction.<ref>{{Cite web |author=Sutherland, I. E. |title=Sketchpad: A Man-Machine Graphical Communication System |date=30 January 1963 |url=http://handle.dtic.mil/100.2/AD404549 |publisher=Technical Report No. 296, Lincoln Laboratory, Massachusetts Institute of Technology via Defense Technical Information Center (stinet.dtic.mil) |format=PDF|accessdate=2007-11-03}} </ref> Also, an MIT [[ALGOL]] version, AED-0, linked data structures ("plexes", in that dialect) directly with procedures, prefiguring what were later termed "messages", "methods" and "member functions".<ref name=simuladev> The Development of the Simula Languages, [[Kristen Nygaard]], [[Ole-Johan Dahl]], p.254 [http://cs-exhibitions.uni-klu.ac.at/fileadmin/template/documents/text/The_development_of_the_simula_languages.pdf Uni-kl.ac.at] </ref><ref>{{Cite web | last = Ross | first = Doug | title = The first software engineering language | work = LCS/AI Lab Timeline: | publisher = MIT Computer Science and Artificial Intelligence Laboratory | date = | url = http://www.csail.mit.edu/timeline/timeline.php?query=event&id=19 | doi = | accessdate = 13 May 2010 }} </ref> Objects as a formal concept in programming were introduced in the 1960s in [[Simula]] 67, a major revision of Simula I, a programming language designed for [[discrete event simulation]], created by [[Ole-Johan Dahl]] and [[Kristen Nygaard]] of the [[Norwegian Computing Center]] in [[Oslo]].<ref>{{Cite journal | last = Holmevik | first = Jan Rune | title = Compiling Simula: A historical study of technological genesis | journal = IEEE Annals in the History of Computing | volume = 16 | issue = 4 | pages = 25–37 | publisher = | location = | year = 1994 | url = http://www.idi.ntnu.no/grupper/su/publ/simula/holmevik-simula-ieeeannals94.pdf | issn = | doi = | id = | accessdate = 12 May 2010 }} </ref> Simula 67 was influenced by [[SIMSCRIPT]] and [[Tony Hoare|Hoare']]s proposed "record classes".<ref name=simuladev/><ref>{{Cite journal | last = Hoare | first = C. A. | author-link = Tony Hoare | title = Record Handling | journal = Algol Bulletin | issue = 21 | pages = 39–69 | year = 1965 | month = Nov | doi = 1061032.1061041 | postscript = <!--None--> }} </ref> Simula introduced the notion of classes and instances or objects (as well as subclasses, virtual methods, coroutines, and discrete event simulation) as part of an explicit programming paradigm. The language also used automatic [[Garbage collection (computer science)|garbage collection]] that had been invented earlier for the [[functional programming]] language [[Lisp (programming language)|Lisp]]. <!-- The invention of automatic garbage collection is often erroneously attributed to OOP --> Simula was used for physical modeling, such as models to study and improve the movement of ships and their content through cargo ports. The ideas of Simula 67 influenced many later languages, including Smalltalk, derivatives of LISP ([[CLOS]]), [[Object Pascal]], and [[C++]]. The [[Smalltalk]] language, which was developed at [[Xerox PARC]] (by [[Alan Kay]] and others) in the 1970s, introduced the term ''object-oriented programming'' to represent the pervasive use of objects and messages as the basis for computation. Smalltalk creators were influenced by the ideas introduced in Simula 67, but Smalltalk was designed to be a fully dynamic system in which classes could be created and modified dynamically rather than statically as in Simula 67.<ref name="st">{{Cite web|first=Alan|last=Kay|url=http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html|title=The Early History of Smalltalk|accessdate=2007-09-13}}</ref> Smalltalk and with it OOP were introduced to a wider audience by the August 1981 issue of ''[[Byte (magazine)|Byte Magazine]]''. In the 1970s, Kay's Smalltalk work had influenced the [[Lisp (programming language)#Language innovations|Lisp community]] to incorporate [[Lisp (programming language)#Object systems|object-based techniques]] that were introduced to developers via the [[Lisp machine]]. Experimentation with various extensions to Lisp (like [[LOOPS (programming language)|LOOPS]] and [[Flavors (programming language)|Flavors]] introducing [[multiple inheritance]] and [[mixins]]), eventually led to the [[Common Lisp Object System]] (CLOS, a part of the first standardized object-oriented programming language, [[ANSI]] [[Common Lisp]]), which integrates functional programming and object-oriented programming and allows extension via a [[Meta-object protocol]]. In the 1980s, there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful. Examples include the [[Intel iAPX 432]] and the [[Linn Products|Linn Smart]] [[Rekursiv]]. Object-oriented programming developed as the dominant programming methodology in the early and mid 1990s when programming languages supporting the techniques became widely available. These included Visual FoxPro 3.0,<ref>1995 (June) Visual FoxPro 3.0, FoxPro evolves from a procedural language to an object-oriented language. Visual FoxPro 3.0 introduces a database container, seamless client/server capabilities, support for ActiveX™ technologies, and OLE Automation and null support. [http://www.foxprohistory.org/foxprotimeline.htm#summary_of_fox_releases Summary of Fox releases]</ref><ref>FoxPro History web site: [http://www.foxprohistory.org/tableofcontents.htm Foxprohistory.org]</ref><ref>1995 Reviewers Guide to Visual FoxPro 3.0: [http://www.dfpug.de/loseblattsammlung/migration/whitepapers/vfp_rg.htm DFpug.de]</ref> [[C++]]{{Citation needed|date=April 2007}}, and Delphi{{Citation needed|date=February 2010}}. Its dominance was further enhanced by the rising popularity of [[graphical user interface]]s, which rely heavily upon object-oriented programming techniques. An example of a closely related dynamic GUI library and OOP language can be found in the [[Cocoa (software)|Cocoa]] frameworks on [[Mac OS X]], written in [[Objective-C]], an object-oriented, dynamic messaging extension to C based on Smalltalk. OOP toolkits also enhanced the popularity of [[event-driven programming]] (although this concept is not limited to OOP). Some{{Who|date=April 2010}} feel that association with GUIs (real or perceived) was what propelled OOP into the programming mainstream. At [[ETH Zürich]], [[Niklaus Wirth]] and his colleagues had also been investigating such topics as [[data abstraction]] and [[modularity (programming)|modular 