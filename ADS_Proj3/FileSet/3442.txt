efficient. (See [[Password cracking]].) Security in such situations depends on using passwords or passphrases of adequate complexity, making such an attack computationally infeasible for the attacker. Some systems, such as [[Pretty Good Privacy|PGP]] and [[Wi-Fi Protected Access|Wi-Fi WPA]], apply a computation-intensive hash to the password to slow such attacks. See [[key strengthening]]. ===Form of stored passwords=== Some computer systems store user passwords as [[cleartext]], against which to compare user log on attempts. If an attacker gains access to such an internal password store, all passwords—and so all user accounts—will be compromised. If some users employ the same password for accounts on different systems, those will be compromised as well. More secure systems store each password in a cryptographically protected form, so access to the actual password will still be difficult for a snooper who gains internal access to the system, while validation of user access attempts remains possible. A common approach stores only a "hashed" form of the plaintext password. When a user types in a password on such a system, the password handling software runs through a [[cryptographic hash]] algorithm, and if the hash value generated from the user's entry matches the hash stored in the password database, the user is permitted access. The hash value is created by applying a hash function (for maximum resistance to attack this should be a [[cryptographic hash function]]) to a string consisting of the submitted password and, usually, another value known as a [[salt (cryptography)|salt]]. The salt prevents attackers from easily building a list of hash values for common passwords. [[MD5]] and [[SHA1]] are frequently used cryptographic hash functions. A modified version of the [[Data Encryption Standard|DES]] algorithm was used for this purpose in early [[Unix]] systems. The UNIX DES function was iterated to make the hash function equivalent slow, further frustrating automated guessing attacks, and used the password candidate as a key to encrypt a fixed value, thus blocking yet another attack on the password shrouding system. More recent Unix or Unix like systems (e.g., [[Linux]] or the various [[BSD]] systems) use what most believe to be still more effective protective mechanisms based on [[MD5]], [[SHA1]], [[Blowfish (cipher)|Blowfish]], [[Twofish]], or any of several other algorithms to prevent or frustrate attacks on stored password files.<ref>[http://www.usenix.org/publications/login/2004-06/pdfs/alexander.pdf Password Protection for Modern Operating Systems]</ref> If the hash function is well designed, it will be computationally infeasible to reverse it to directly find a [[plaintext]] password. However, many systems do not protect their hashed passwords adequately, and if an attacker can gain access to the hashed values he can use widely available tools which compare the encrypted outcome of every word from some list, such as a dictionary (many are available on the Internet). Large lists of possible passwords in many languages are widely available on the Internet, as are software programs to try common variations. The existence of these [[dictionary attack]] tools constrains user password choices which are intended to resist easy attacks; they must not be findable on such lists. Obviously, words on such lists should be avoided as passwords. Use of a [[key stretching]] hash such as [[PBKDF2]] is designed to reduce this risk. A poorly designed hash function can make attacks feasible even if a strong password is chosen. See [[LM hash]] for a widely deployed, and insecure, example.<ref>http://support.microsoft.com/default.aspx?scid=KB;EN-US;q299656</ref> ===Methods of verifying a password over a network=== Various methods have been used to verify submitted passwords in a network setting: ====Simple transmission of the password==== Passwords are vulnerable to interception (i.e., "snooping") while being transmitted to the authenticating machine or person. If the password is carried as electrical signals on unsecured physical wiring between the user access point and the central system controlling the password database, it is subject to snooping by [[Telephone tapping|wiretapping]] methods. If it is carried as packetized data over the Internet, anyone able to watch the [[packet (information technology)|packets]] containing the logon information can snoop with a very low probability of detection. Email is sometimes used to distribute passwords. Since most email is sent as [[cleartext]], it is available without effort during transport to any eavesdropper. Further, the email will be stored on at least two computers as cleartext—the sender's and the recipient's. If it passes through intermediate systems during its travels, it will probably be stored on those as well, at least for some time. Attempts to delete an email from all these vulnerabilities may, or may not, succeed; [[backup]]s or history files or [[cache]]s on any of several systems may still contain the email. Indeed merely identifying every one of those systems may be difficult. Emailed passwords are generally an insecure method of distribution. An example of [[cleartext]] transmission of passwords is the original [[Wikipedia]] website. When you logged into your Wikipedia account, your [[username]] and password are sent from your computer's browser through the Internet as cleartext. In principle, anyone could read them in transit and thereafter log into your account as you; Wikipedia's servers have no way of distinguishing such an attacker from you. In practice, an unknowably larger number could do so as well (e.g., employees at your Internet Service Provider, at any of the systems through which the traffic passes, etc.). More recently, Wikipedia has offered a secure login option, which, like many e-commerce sites, uses the [[Secure Sockets Layer|SSL]] / ([[Transport Layer Security|TLS]]) cryptographically based protocol to eliminate the cleartext transmission. But, because anyone can gain access to Wikipedia (without logging in at all), and then edit essentially all articles, it can be argued that there is little need to encrypt these transmissions as there's little being protected. Other websites (e.g., banks and financial institutions) have quite different security requirements, and cleartext transmission of anything is clearly insecure in those contexts. Using client-side encryption will only protect transmission from the mail handling system server to the client machine. Previous or subsequent relays of the email will not be protected and the email will probably be stored on multiple computers, certainly on the originating and receiving computers, most often in cleartext. ====Transmission 