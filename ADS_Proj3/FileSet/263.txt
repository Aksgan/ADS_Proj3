and runtime management information (fig2). ==AIS Platform Services== [[Image:Mapping between PML CLM and AMF entities.JPG‎|thumb|center|upright=2.0|alt=PLM, CLM classes.|Figure 3 Mapping between PLM, CLM and AMF entities.]] ===Platform Management Service (PLM)=== The PLM provides a logical view of the hardware and the low-level software of the system. Low-level software in this sense comprises the operating system and virtualization layers that provide execution environments for all kinds of software. The main logical entities implemented by PLM are (fig 3): [[Image:Virtualized architectures in the PLM Information Model.JPG‎|thumb|alt=PLM, CLM classes.|The Figure 4: Virtualized architectures in the PLM Information Model.]] * '''Hardware Element (HE)''' - A hardware element is a logical entity that represents any kind of hardware entity, which can be, for instance, a chassis, a [[Blade server|CPU blade]], or an I/O device. Typically, all [[Field Replaceable Unit]]s (FRUs) are modeled as hardware elements. * '''Execution Environment (EE)''' - An execution environment is a logical entity that represents an environment capable of running some software programs. For example, a CPU blade or an [[Symmetric multiprocessing|SMP]] machine runs a single operating system instance modeled as an execution environment. Different virtualization architectures are supported (fig 4). PLM ''maintains the state'' of these entities in the information model and provides means to ''control'' them and ''track'' any state changes. To fulfill these tasks for HEs, the PLM Service typically uses HPI. In case of EEs, PLM is in charge of retrieving all necessary information about the health of the operating system and any available virtualization layer. ===Cluster Membership Service (CLM)=== The Cluster Membership Service provides applications with membership information about the nodes that have been administratively configured in the cluster configuration (these nodes are also called cluster nodes or configured nodes) and is core to any clustered system. A cluster consists of this set of configured nodes, each with a unique node name. The two logical entities implemented by the Cluster Membership Service are (fig 3): * '''Cluster''' - Represents the cluster itself and it is the parent object of the cluster node objects. * '''Cluster Node''' - Represents a configured cluster node. The CLM provides APIs to retrieve the current cluster membership information and to track membership changes (e.g. node leave, node join). All cluster-wide AIS services must use the CLM track API to determine the membership. ==AIS Management Services== ===Information Model Management Service (IMM)=== The various entities implemented by the AIS services (e.g. execution environments, checkpoints, components, etc.) are represented as [[managed object]]s in the SA Forum [[information model|Information Model]] (IM), which can be conceived as a [[CMDB|configuration management database]]. The managed objects are instances of object classes defined by the relevant AIS service specification, which define the class attributes and administrative operations. The administrative operations specified for the object classes represent operations that can be performed on the entities represented by the objects, e.g. locking a service unit or exporting the contents of the IM in XML format. The objects in the IM are stored in a tree hierarchy where an object can have, at most, one parent object and any number of child objects (fig 5). [[Image:APIs provided by the Information Model Management Service.JPG‎|thumb|left|alt=IMM Schematic Overview.|Figure 5: APIs provided by the Information Model Management Service.]] The logical entities represented by the objects in the IM are not generally implemented by the IMM Service itself; instead, user applications and the AIS Services, such as the Checkpoint Service, or the Availability Management Framework provide their implementation. Therefore, these are called '''object implementers''' (OI). For management purposes, all AIS services expose their implemented entities as managed objects through the IMM service. There are two categories of objects and attributes in the IM: runtime and configuration. '''[[Run time (computing)|Runtime]] objects and attributes''' reflect the current state of the entities they represent – they are of ''descriptive'' nature. In contrast, '''configuration objects and attributes''' are ''prescriptive'' as for management applications – or '''object managers''' (OM) – they are the means to provide input to the object implementers on what entities they need to implement. Configuration objects may include both configuration and runtime attributes while runtime objects may include only runtime attributes. Administrative operations may be defined on both object categories. Accordingly, the IMM Service exposes a “[[Northbound interface|southbound]]” interface – the IMM-OI API – to object implementers and a “[[Northbound interface|northbound]]” interface – the IMM-OM API – to management applications (fig 5)., e.g. SNMP agents, and mediates between these two parties. It is also responsible for storing the persistent objects and attributes ===Log Service (LOG)=== The Log Service is intended for [[Event logging#Event logging|event logging]], that is, for collecting cluster-wide, function-based (as opposed to implementation specific) information about the system, which is suited for system administrators or automated tools. The Log Service enables applications to express and write log records through well-known log streams that lead to particular output destinations, such as a named file. Once at the output destination, a log record is subject to output formatting rules, which are configurable and public. The logging application does not need to be aware of any of these aspects (e.g. the destination file location, file rotation or formatting, etc.) as the Log Service handles them based on the current settings for the targeted log stream. Since the output format is public, third party tools can read these log files. Four types of log streams are specified: ''alarm'' (ITU X.733 and ITU X.736 based log records), ''notification'' (ITU X.730 and ITU X.731 based log records), ''system'' and ''application''. The application type is used by applications to define application specific log streams. There is exactly one predefined log stream for each of the alarm, notification, and system log stream types in an SA Forum cluster. User applications are allowed to use any of the predefined streams or create new application-specific log streams. ===Notification Service (NTF)=== The Notification Service is - to a great degree - based on the [[ITU-T]] Fault Management model (as found in the X.700 series of documents) as well as on many other supportive recommendations. The Notification Service is 