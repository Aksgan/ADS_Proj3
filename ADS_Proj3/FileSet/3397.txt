matrix for the consecutive ones property, recognizing [[interval graph]]s and determining whether a graph is [[Planar graph|planar]]. ==Examples and notation== [[Image:pq-tree-5-leaves.png|left|thumb|The PQ tree representing <br/>[1 (2 3 4) 5] ]] If all the leaves of a PQ tree are connected directly to a root P node then all possible orderings are allowed. If all the leaves are connected directly to a root Q node then only one order (and its reverse) is allowed. If nodes a,b,c connect to a P node, which connects to a root P node, with all other leaf nodes connected directly to the root, then any ordering where a,b,c are contiguous is allowed. Where graphical presentation is unavailable PQ trees are often noted using nested parenthesized lists. Square parentheses represents a Q node and regular ones represents P nodes. Leaves are non-parentheses elements of the lists. The image on the left is represented in this notation by [1 (2 3 4) 5]. This PQ tree represents the following twelve permutations on the set {1, 2, 3, 4, 5}: : 12345, 12435, 13245, 13425, 14235, 14325, 52341, 52431, 53241, 53421, 54231, 54321. ==PC trees== The '''PC tree''', developed by [[Wei-Kuan Shih]] and [[Wen-Lian Hsu]], is a more recent generalization of the PQ tree. Like the PQ tree it represents permutations by reorderings of nodes in a tree, with elements represented at the leaves of the tree. Unlike the PQ tree, the PC tree is unrooted. The nodes adjacent to any non-leaf node labeled P may be reordered arbitrarily as in the PQ tree, while the nodes adjacent to any non-leaf node labeled C have a fixed [[cyclic order]] and may only be reordered by reversing this order. Thus, a PC tree can only represent sets of orderings in which any circular permutation or reversal of an ordering in the set is also in the set. However, a PQ tree on ''n'' elements may be simulated by a PC tree on ''n'' + 1 elements, where the extra element serves to root the PC tree. The data structure operations required to perform a planarity testing algorithm on PC trees are somewhat simpler than the corresponding operations on PQ trees. ==See also== *[[Series-parallel partial order]] ==References== * {{cite journal | author = Booth, Kellogg S. and Lueker, George S. | title = Testing for the consecutive ones property, interval graphs, and graph planarity using PQ-tree algorithms | journal = [[Journal of Computer and System Sciences]] | volume = 13 | pages = 335–379 | year = 1976}} * {{cite journal | author = Shih, Wei-Kuan and Hsu, Wen-Lian | title = A new planarity test | url = http://www.iis.sinica.edu.tw/IASL/webpdf/paper-1999-A_New_Planarity_test.pdf | journal = [[Theoretical Computer Science (journal)|Theoretical Computer Science]] | volume = 223 | pages = 179–191 | year = 1999 | doi = 10.1016/S0304-3975(98)00120-0}} ==External links== *[http://knol.google.com/k/greg-grothaus/pq-trees-and-the-consecutive-ones/2zbou4xzp3j9w/4 PQ Trees and the Consecutive Ones Property]* {{CS-Trees}} {{DEFAULTSORT:Pq Tree}} [[Category:Trees (structure)]] [[ru:PQ-дерево]]</text> </page> <page> <id>28164</id> <title>PR/SM</title> <text>{{Multiple issues|context = February 2009|primarysources = February 2009}} '''PR/SM''' ('''Processor Resource/System Manager''') is a type-1 [[Hypervisor]] that allows multiple [[LPAR|logical partition]]s to share physical resources such as [[Central processing unit|CPU]]s, [[Channel I/O|I/O channels]] and [[direct access storage device]]s (DASD). It is integrated with all [[IBM System z]] machines. [[IBM]] introduced PR/SM in 1985 with the IBM 3090-E processors. IBM developed the concept of [[Hypervisor]]s ([[Virtual machine|virtual machines]] in [[IBM CP-40|CP-40]] and [[CP-67]] and in 1972 provided it for the [[IBM System/370|S/370]] as Virtual Machine Facility/370<ref>{{cite manual |url=http://www.vm.ibm.com/pubs/HCSF8A50.PDF |title=z/VM™built on IBM Virtualization Technology General Information Version 4 Release 3.0 |id=GC24-5991-04 |date=2002-04-12 |first=Copyright IBM Corp. |last=1990, 2002}}</ref>. IBM introduced the Start Interpretive Execution ('''SIE''') instruction as part of 370-XA on the 3081, and VM/XA versions of [[VM (operating system)|VM]] to exploit it. PR/SM is a type-1 Hypervisor based on the CP component of [[VM (operating system)|VM/XA]] that runs directly on the machine level and allocates system resources across LPAR's to share physical resources. It is a standard feature on [[IBM System z]] machines. ==References== *[http://publib.boulder.ibm.com/infocenter/eserver/v1r2/index.jsp?topic=/eicaz/eicazzlpar.htm System z PR/SM] {{Reflist}} [[Category:AS/400]] [[Category:IBM storage devices]] [[Category:Power Architecture]] [[Category:Virtualization software]] [[Category:IBM mainframe technology]] {{software-stub}} {{mainframe-compu-stub}} [[ja:PR/SM]]</text> </page> <page> <id>28165</id> <title>PRAM consistency</title> <text>{{Unreferenced|date=July 2009}} '''PRAM consistency''' (pipelined [[random access memory]]) also known as ''[[FIFO]] [[Consistency model|consistency]]'', or ''[[Central processing unit|Processor]] [[Consistency model|consistency]]''. All [[Process (computing)|processes]] see [[Computer storage|memory]] writes from one process in the order they were issued from the process. Writes from different processes may be seen in a different order on different processes. Only the write order needs to be [[consistent]], thus the name ''pipelined''. PRAM consistency is easy to implement. In effect it says that there are no guarantees about the order in which different processes see writes, except that two or more writes from a single source must arrive in order, as though they were in a pipeline. P1:W(x)1 P2: R(x)1W(x)2 P3: R(x)1R(x)2 P4: R(x)2R(x)1 Time ----> Fig: A valid sequence of events for PRAM consistency. While the above sequence is not valid for [[Causal consistency]] because W(x)1 and W(x)2 are causal so different processes must read it in same sequence. {{DEFAULTSORT:Pram Consistency}} [[Category:Consistency models]] [[Category:Computing acronyms]]</text> </page> <page> <id>28167</id> <title>PRC (file format)</title> <text>{{otheruses2|PRC}} '''PRC''' (Product Representation Compact; "précis" in French language) is a 3D file format that can be used to embed 3D data in a [[PDF]] file. This highly compressed format facilitates the storage of different representations of a 3D model. For example, you can save only a visual representation that consists of polygons (a [[tessellation]]), or you can save the model's exact geometry ([[B-rep]] data). Varying levels of compression can be applied to the 3D [[CAD]] data when it is converted to the PRC format using [[Adobe Acrobat]] 3D. The 3D data stored in PRC format in a PDF is interoperable with [[Computer-Aided Manufacturing]] (CAM) and [[Computer-Aided Engineering]] (CAE) applications. ==History== *June 12, 2002 [http://www.ttf-group.com/articles/PRC_US.pdf TTF Showcases PRC] *April 21, 2006 [http://www.adobe.com/aboutadobe/pressroom/pressreleases/200604/042106TTF.html Adobe Acquires Trade and Technologies France (TTF)] *May 24, 2010 [http://www.techsoft3d.com/tech-soft-3d-reaches-agreement-adobe-develop-adobe-3d-sdk-technology Tech Soft 3D Reaches Agreement with Adobe to Develop Adobe 3D SDK Technology] ==Supporting== * [[Adobe Acrobat]] 8.0 and newer ==See 