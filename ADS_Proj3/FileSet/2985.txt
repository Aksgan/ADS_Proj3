the children is a complete graph. The final tree has one-element sets of vertices of ''G'' as its leaves, due to the base case. A set ''Y'' of vertices of ''G'' is a module if and only if it is a node of the tree or a union of children of a series or parallel node. This implicitly gives all modular partitions of ''V''. It is in this sense that the modular decomposition tree "subsumes" all other ways of recursively decomposing ''G'' into quotients. == Algorithmic issues == A data structure for representing the modular decomposition tree should support the operation that inputs a node and returns the set of vertices of G that the node represents. An obvious way to do this is to assign to each node a list of the ''k'' vertices of ''G'' that it represents. Given a pointer to a node, this structure could return the set of vertices of ''G'' that it represents in ''O(k)'' time. However, this data structure would require <math>\Theta(n^2)</math> space in the worst case. [[Image:O n ModularDecompRep.pdf|thumb|An O(n) representation of the modular decomposition]] An ''O(n)''-space alternative that matches this performance is obtained by representing the modular decomposition tree using any standard ''O(n)'' rooted-tree data structure and labeling each leaf with the vertex of ''G'' that it represents. The set represented by an internal node ''v'' is given by the set of labels of its leaf descendants. It is well-known that any rooted tree with ''k'' leaves has at most ''k-1'' internal nodes, one can using a depth-first search, starting at ''v'', to report the labels of leaf descendants of ''v'', takes ''O(k)'' time. [[Image:ModDecompQuotients.pdf|thumb|The modular decomposition, augmented with a quotient on the children of each internal node, gives a complete representation of ''G''.]] Each node ''X'' is a set of vertices of ''G'' and, if ''X'' is an internal node, the set ''P'' of children of ''X'' is a partition of ''X'' where each partition class is a module. They therefore induce the quotient ''G[X]/P'' in ''G[X]''. The vertices of this quotient are the elements of ''P'', so ''G[X]/P'' can be represented by installing edges among the children of ''X''. If ''Y'' and ''Z'' are two members of ''P'' and <math>u \in Y</math> and <math>v \in Z</math>, then ''u'' and ''v'' are adjacent in ''G'' if and only if ''Y'' and ''Z'' are adjacent in this quotient. For any pair ''{u,v}'' of vertices of ''G'', this is determined by the quotient at children of the least common ancestor of ''{u}'' and ''{v}'' in the modular decomposition tree. Therefore, the modular decomposition, labeled in this way with quotients, gives a complete representation of ''G''. Many combinatorial problems can be solved on ''G'' by solving the problem separately on each of these quotients. For example, ''G'' is a comparability graph if and only if each of these quotients is a comparability graph (Gallai, 67; Möhring, 85). Therefore, to find whether a graph is a comparability graph, one need only find whether each of the quotients is. In fact, to find a [[comparability graph|transitive orientation]] of a comparability graph, it suffices to transitively orient each of these quotients of its modular decomposition (Gallai, 67; Möhring, 85). A similar phenomenon applies for permutation graphs, (McConnell and Spinrad '94), interval graphs (Hsu and Ma '99), perfect graphs, and other graph classes. Some important combinatorial optimization problems on graphs can be solved using a similar strategy (Möhring, 85). [[Cograph]]s are the graphs that only have parallel or series nodes in their modular decomposition tree. The first polynomial algorithm to compute the modular decomposition tree of a graph was published in 1972 (James, Stanton & Cowan 1972) and now linear algorithms are available (McConnell & Spinrad 1999, Tedder et al. 2007, Cournier & Habib 1994). ==Generalizations== Modular decomposition of directed graphs can be done in linear time {{harv|McConnell|de Montfolfier|2005}}. == References == *{{cite journal | last = Gallai | first = Tibor | authorlink = Tibor Gallai | title = Transitiv orientierbare Graphen | journal = Acta Mathematica Academiae Scientiarum Hungaricae | volume = 18 | year = 1967 | pages = 25–66 | id = {{MathSciNet | id = 0221974}} | doi = 10.1007/BF02020961}} *{{cite book | last1 = James | first1 = Lee O. | last2 = Stanton | first2 = Ralph G. | last3 = Cowan | first3 = Donald D. | contribution = Graph decomposition for undirected graphs | title = Proc. 3rd Southeastern International Conference on Combinatorics, Graph Theory, and Computing (Florida Atlantic Univ., Boca Raton, Fla., 1972) | publisher = [[Florida Atlantic University]] | year = 1972 | pages = 281–290 | id = {{MathSciNet | id = 0351909}} }} *{{cite book | last1 = Golumbic | first1=Martin C. | publisher = Academic Press | year = 1980 | title = Algorithmic Graph Theory and Perfect Graphs}} *{{cite journal | doi = 10.1137/S0097539792224814 | last1 = Hsu | first1 = W.L. | last2 = Ma | first2 = T. | title = Fast and simple algorithms for recognizing chordal comparability graphs and interval graphs | journal = SIAM Journal on Computing | volume = 28 | year = 1999 | pages = 1004–1020}} *{{cite journal | last1 = McConnell | first1 = Ross M. | last2 = de Montgolfier | first2 = Fabien | doi = 10.1016/j.dam.2004.02.017 | issue = 2 | journal = Discrete Applied Mathematics | pages = 198–209 | title = Linear-time modular decomposition of directed graphs | volume = 145 | year = 2005 | ref = harv}} *{{cite journal | last1 = McConnell | first1 = Ross M. | last2 = Spinrad | first2 = Jeremy P. | title = Modular decomposition and transitive orientation | journal = [[Discrete Mathematics (journal)|Discrete Mathematics]] | volume = 201 | year = 1999 | pages = 189–241 | url = http://www.cs.colostate.edu/~rmm/linto.pdf | id = {{MathSciNet | id = 1687819}} | doi = 10.1016/S0012-365X(98)00319-7}} *{{cite journal | last1 = Möhring | first1 = Rolf H. | title = Algorithmic aspects 