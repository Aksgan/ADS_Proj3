[[Name mangling]] * [[Application programming interface]] - API * [[Application Binary Interface]] - ABI * [[Comparison of application virtual machines]] * [[SWIG]] opensource automatic interfaces bindings generator from many languages to other languages * [[D-Bus]] ==References== {{Refimprove|date=April 2008}} <references /> *{{cite web | title=COM: A Brief Introduction (powerpoint) | url=http://www.cs.ucr.edu/~dberger/Documents/Presentations/com-intro.ppt | accessdate=March 7, 2006 }} *{{cite book | last=Box | first=Don | authorlink=Don Box | title = Essential COM | publisher = Addison-Wesley | year = 1998 | id = ISBN 0-201-63446-5}} *{{cite book | last=Chappell | first=David | authorlink=David Chappell | title = Understanding ActiveX and OLE | publisher = Microsoft Press | year = 1996 | id = ISBN 978-1572312166}} *{{cite web | title=Integration and Migration of COM+ services to WCF | http://msdn.microsoft.com/en-us/library/bb978523.aspx | accessdate=April 15, 2010}} ==External links== *[http://www.microsoft.com/com/ Microsoft COM Technologies] *[http://channel9.msdn.com/ShowPost.aspx?PostID=224935 Interview with Tony Williams, Co-Inventor of COM] (Video Webcast, August 2006) *[http://www.polberger.se/components/read/com.html A concise technical overview of COM] from master's thesis *[http://support.microsoft.com/kb/159621/en-us Info: Difference Between OLE Controls and ActiveX Controls] from Microsoft *[http://theircorp.byethost11.com/index.php?vw=TypeLib TypeLib Data Format Specification (unofficial)] with open source dumper utility. *[http://www.innovatia.com/software/papers/com.htm The COM / DCOM Glossary] {{Microsoft APIs}} {{Microsoft Windows components}} [[Category:Software components]] [[Category:Inter-process communication]] [[Category:Microsoft application programming interfaces]] [[Category:Object-oriented programming]] [[Category:Object models]] [[da:COM (software)]] [[de:Component Object Model]] [[es:Component Object Model]] [[fr:Component Object Model]] [[ko:컴포넌트 오브젝트 모델]] [[it:Component Object Model]] [[he:COM]] [[hu:Component Object Model]] [[nl:Component Object Model]] [[ja:Component Object Model]] [[pl:Component Object Model]] [[pt:Component Object Model]] [[ru:Component Object Model]] [[sk:Component Object Model]] [[sv:Component Object Model]] [[uk:Component Object Model]] [[zh:组件对象模型]]</text> </page> <page> <id>7330</id> <title>Componential analysis</title> <text>'''Componential analysis''', also called ''feature analysis'' or ''contrast analysis'', refers to the description of the meaning of words through structured sets of [[semantics|semantic]] features, which are given as “present”, “absent” or “indifferent with reference to feature”. The method thus departs from the [[principle of compositionality]]. Componential analysis is a method typical of [[structural semantics]] which analyzes the structure of a word's meaning. Thus, it reveals the culturally important features by which speakers of the language distinguish different words in the domain (Ottenheimer, 2006, p. 20). This is a highly valuable approach to learning another language and understanding a specific semantic domain of an [[Ethnography]]. ==Examples== ''man'' = [+ male], [+ mature] or ''woman'' = [– male], [+ mature] or ''boy'' = [+ male], [– mature] or ''girl'' [– male] [– mature] or ''child'' [+/– male] [– mature]. In other words, the word ''girl'' can have three basic factors (or [[semantic properties]]): [[human]], [[young]], and [[female]]. Another example, being [[edible]] is an important factor by which plants may be distinguished from one another (Ottenheimer, 2006, p. 20). To summarize, one word can have basic underlying meanings that are well established depending on the cultural context. It is crucial to understand these underlying meanings in order to fully understand any language and culture. ==Historical background== Structural semantics and the componential analysis were patterned on the phonological methods of the [[Prague School]], which described sounds by determining the absence and presence of features. On one hand, componential analysis gave birth to various models in [[generative semantics]], [[lexical field theory]] and [[transformational grammar]]. On the other hand, its shortcoming were also visible: * The discovery procedures for semantic features are not clearly objectifiable. * Only part of the vocabulary can be described through more or less structured sets of features. * Metalinguistic features are expressed through language again. * Features used may not have clear definitions. * Limited in focus and mechanical in style. As a consequence, entirely different ways to describe meaning were developed, such as [[prototype theory|prototype semantics]]. ==See also== *[[structural linguistics]] *[[Ethnoscience]] ==References== * Bussmann, Hadumod (1996), ''Routledge Dictionary of Language and Linguistics'', London: Routledge, s.v. componential analysis. * Ottenheimer, H. J. (2006). ''The Anthropology of Language''. Belmont, CA: Thomson Wadsworth. {{DEFAULTSORT:Componential Analysis}} [[Category:Semantics]] [[de:Komponentenanalyse]] [[nl:Componentenanalyse]] [[ru:Компонентный анализ]]</text> </page> <page> <id>7334</id> <title>Composite UI Application Block</title> <text>The '''Composite UI Application Block''' (or CAB) is an addition to [[Microsoft]]'s [[.NET Framework]] for creating complex [[user interface]]s made of loosely coupled components. Developed by Microsoft's [[Design pattern (computer science)|patterns]] & practices team, CAB is used exclusively for developing [[Windows Forms]]. A derivative version of CAB exists in both the Web Client and Mobile Client [[Software factory|Software Factories]] as well. It encourages the developer to use either the [[Model-View-Controller]] or [[Model_View_Presenter|Model-View-Presenter]] [[Architectural pattern (computer science)|architectural pattern]], to encourage reuse of the individual User Controls (referred to in CAB as "SmartParts") by not coupling them with their underlying data elements or presentation code. It is part of the foundation of the Smart Client Software Factory, another patterns & practices deliverable. It is also part of the Mobile Client Software Factory which is a version of the Smart Client Software Factory for use with the [[.NET Compact Framework]] 2.0. == See also == * [[Software factory|Software Factories]] == External links == * [http://msdn2.microsoft.com/en-us/library/aa480450.aspx CAB Home page] * [http://msdn2.microsoft.com/en-us/library/aa480482.aspx Smart Client Software Factory Home page] {{Microsoft APIs}} [[Category:Microsoft software factories]] [[Category:Software architecture]] {{Microsoft-software-stub}}</text> </page> <page> <id>7337</id> <title>Composite data type</title> <text>{{Unreferenced|date=May 2009}} In [[computer science]], '''composite data types''' are [[data type]]s which can be constructed in a program using its [[programming language]]'s [[primitive data types]] and other composite types. The act of constructing a composite type is known as [[Object composition|composition]]. ==C/C++ structures and classes== {{seedetails|C++ classes}} A <code>struct</code> is [[C (programming language)|C]]'s and [[C++]]'s notion of a composite type, a datatype that composes a fixed set of labeled '''fields''' or '''members'''. It is so called because of the <code>struct</code> keyword used in declaring them, which is short for ''structure'' or, more precisely, ''user-defined data structure''.{{Fact|reason=Please give a reliable source for this assertion.|date=March 2009}} In C++, the only difference between a <code>struct</code> and a [[class (computer science)|class]] is the default [[access level]], which is ''private'' for classes and ''public'' for <code>struct</code>s. Note that while classes and the <code>class</code> [[keyword (computer programming)|keyword]] were completely new in C++, the [[C (programming language)|C programming language]] already had a crude type of <code>struct</code>s. For all intents and purposes, C++ <code>struct</code>s form a [[superset]] of C <code>struct</code>s: virtually all valid C 