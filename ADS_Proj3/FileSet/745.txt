'''CodeIt.Right''' is productivity [[Plug-in (computing)|add-on]] for [[Microsoft]] [[Microsoft Visual Studio|Visual Studio .NET 2008]], 2005 and 2003.<ref>{{cite web | title= Static Analysis Tools For .NET | url=http://msdn.microsoft.com/en-us/magazine/dd263071.aspx | accessdate=December 2008 }}</ref> ==See also== *[[FxCop]] *[[StyleCop]] ==Notes and references== <references /> ==External links== *[http://msdn.microsoft.com/en-us/magazine/dd263071.aspx CodeIt.Right reviewed on MSDN Toolbox - Static Analysis Tools For .NET] *[http://submain.com/codeit.right CodeIt.Right on SubMain site] {{DEFAULTSORT:Codeit.Right}} [[Category:Static code analysis]] [[Category:.NET programming tools]] [[Category:Visual Studio extensions]]</text> </page> <page> <id>6674</id> <title>Code Saturne</title> <text>{{Cleanup|date=November 2010}} {{Infobox software | name = Code_Saturne | developer = [[Électricité_de_France|EDF]] | latest_release_version = 2.0.1 | latest_release_date = {{release date|2011|01|14}} | operating_system = [[Cross-platform]] | genre = | license = [[GNU General Public License]] | website = Official English website : http://www.code-saturne.org - Official website for developers : https://code-saturne.info/ }} '''''Code_Saturne''''' is a general purpose [[Computational fluid dynamics|computational fluid dynamics]] free software. Developed since 1997 at [[Électricité de France|EDF]] R&D, ''Code_Saturne'' is distributed under the [[GNU GPL]] licence. It is based on a co-located [[Finite volume method|Finite Volume]] approach that accepts meshes with any type of cell (tetrahedral, hexahedral, prismatic, pyramidal, polyhedral…) and any type of grid structure (unstructured, block structured, hybrid, conforming or with hanging nodes…). Its basic capabilities enable the handling of either incompressible or expandable flows with or without heat transfer and turbulence (mixing length, 2-equation models, v2f, [[Reynolds stresses|Reynolds stress models]], [[Large eddy simulation]]…). Dedicated modules are available for specific physics such as radiative heat transfer, combustion (gas, coal, heavy fuel oil, …), magneto-hydro dynamics, compressible flows, [[Multiphase flow|two-phase flows]] ([[Lagrangian and Eulerian coordinates|Euler-Lagrange approach]] with two-way coupling), extensions to specific applications (e.g. for atmospheric environment). ''Code_Saturne'' can be coupled to thermal software SYRTHES for conjugate heat transfer. It can also be used jointly with structural analysis software ''[[Code_Aster]]'', in particular in the Salomé platform. SYRTHES and ''Code_Aster'' are developed by EDF and distributed under the GNU GPL licence. == Alternative software == * [[ANSYS]] CFX (proprietary software) * [[ANSYS]] Fluent (proprietary software) * [[OpenFOAM]] (GPL) * [[CD-adapco#STAR-CCM.2B|STAR-CCM+]] (proprietary software) ==See also== {{Portal|Free software}} * [[Code_Aster]] * [[SALOME]] ==External links== * {{en}} [http://www.code-saturne.org Official english website] * {{fr}} [http://innovation.edf.com/recherche-et-communaute-scientifique/logiciels/code-saturne/presentation-45341.html Official french website] * {{en}} [https://code-saturne.info/products/code-saturne Official development website] * {{en}} [http://research.edf.com/fichiers/fckeditor/Commun/Innovation/logiciels/code_saturne/CodeSaturneGeneral-2008-09-26.pdf Code_Saturne Overview (pdf, 2 pages)] * {{en}} [http://research.edf.com/fichiers/fckeditor/Commun/Innovation/logiciels/code_saturne/CodeSaturneOpenSrc-2008-09-26.pdf Overview of EDF's Open Source initiative (pdf, 2 pages)] * {{en}} [https://code-saturne.info/products/code-saturne/forums/announces/715855256 Download page for Code Saturne 2.0.0 RC2] * {{en}} code-saturne.blogspot.com : Not official Blog about SALOME, Code_Saturne, ParaView and Numerical Modelling * {{en}} [http://www.caelinux.com CAE Linux] : LiveDVD with ''Code_Saturne'', ''Code_Aster'' and the Salomé platform * {{en}} [http://saturne.cfdtm.org Website at the University of Manchester] [[Category:Computational fluid dynamics]] [[Category:Computational science]] [[Category:Fluid dynamics]] [[Category:Free science software]] [[Category:Turbulence]] [[es:Code Saturne]] [[fr:Code Saturne]] [[it:Code Saturne]]</text> </page> <page> <id>6676</id> <title>Code audit</title> <text>A software '''code audit''' is a comprehensive analysis of [[source code]] in a [[programming]] project with the intent of discovering bugs, security breaches or violations of programming conventions. It is an integral part of the [[defensive programming]] paradigm, which attempts to reduce errors before the software is released. C and C++ source code is the most common code to be audited since many higher-level languages, such as Python, have fewer potentially vulnerable functions (e.g., functions that do not check bounds). == Guidelines == When auditing software, every critical component should be audited separately and together with the entire program. It is a good idea to search for high-risk [[Vulnerability (computing)|vulnerabilities]] first and work down to low-risk vulnerabilities. Vulnerabilities in between high-risk and low-risk generally exist depending on the situation and how the source code in question is being used. Application penetration testing tries to identify vulnerabilities in software by launching as many known attack techniques as possible on likely access points in an attempt to bring down the application.<ref name="source-code-audit-faq">{{cite web|title=Source Code Audit - FAQ|url=http://www.ouncelabs.com/resources/code-audit-faq.asp}}</ref> This is a common auditing method and can be used to find out if any specific vulnerabilities exist, but not where they are in the source code. === High-risk vulnerabilities === Some common high-risk vulnerabilities may exist due to the use of: * Non-bounds-checking functions (e.g., strcpy, sprintf, vsprintf, and sscanf) that could lead to a [[buffer overflow]] vulnerability <ref name="guidelines-for-c-source-code-auditing">{{cite web|title=Guidelines for C source code auditing|url=http://mixter.void.ru/vulns.html}}</ref> * Pointer manipulation of buffers that may interfere with later bounds checking, e.g.: <code>if ((bytesread = net_read(buf,len)) > 0) buf += bytesread;</code> <ref name="guidelines-for-c-source-code-auditing"/> * Calls like execve(), execution pipes, system() and similar things, especially when called with non-static arguments <ref name="guidelines-for-c-source-code-auditing"/> * Input validation, e.g. (in SQL): <code>statement := "SELECT * FROM users WHERE name = '" + userName + "';"</code> is an example of a [[SQL injection]] vulnerability * File inclusion functions, e.g. (in PHP): <code>include($page . '.php');</code> is an example of a [[Remote File Inclusion]] vulnerability === Low-risk vulnerabilities === The following is a list of low-risk vulnerabilities that should be found when auditing code, but do not produce a high risk situation. * Client-side code vulnerabilities that do not affect the server side (e.g., [[cross-site scripting]]) * Username enumeration * Directory traversal (in [[Web applications]]) == Tools == Source code auditing tools generally look for common vulnerabilities and only work for specific [[programming languages]]. Such automated tools could be used to save time, but should not be relied on for an in-depth audit. Applying such tools as part of a policy-based approach is recommended.<ref>"[http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1331438,00.html Static analysis at the end of the SDLC doesn't work]" by Wayne Ariola, SearchSoftwareQuality.com, September 22, 2008 </ref> == See also == * [[Information technology audit]] * [[Defensive programming]] * [[Remote File Inclusion]] * [[SQL injection]] * [[Buffer overflow]] * [[List of tools for static code analysis]] == References == {{reflist}} {{compsci-stub}} [[Category:Information technology audit]] [[fr:Audit de code]]</text> </page> <page> <id>6694</id> <title>Code refactoring</title> <text>{{Redirect|Refactor|the use of 'refactor' on Wikipedia|Wikipedia:Refactoring talk pages}} '''Code refactoring''' is the process of changing a [[computer program]]'s [[source code]] without modifying its external ''[[Functional requirement|functional]]'' behavior in order to improve some of the ''[[Non-functional requirement|nonfunctional]]'' attributes of the software. Advantages include improved code [[readability]] and reduced [[Cyclomatic complexity|complexity]] to improve the [[maintainability]] of the source code, as well as a more 