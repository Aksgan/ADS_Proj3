a flow structure, by analogy to a physical pipeline carrying reaction products through a [[chemical plant|chemical]] or other plant. The best-known example is the [[pipeline (Unix)|UNIX pipe system]], but many high level software design tools (such as the [[openDX]] display suite) provide a [[GUI]] pipeline programming tool that helps visualize data flow through the program. A [[Data Flow Diagram]] (DFD) maps well to pipeline programming. Note that exception handling can be one of the weak points{{Clarify|date=May 2010}}. ==Examples== *[[Windows PowerShell]] *[[Hartmann pipeline]] *[[Bash]] ==See also== * [[Pipeline (software)]] * [[Hartmann pipeline]] * [[Function composition (computer science)|Function composition]] * [[Architecture description language]] * [[Scripting language]] {{Programming language}} {{DEFAULTSORT:Pipeline Programming}} [[Category:Programming paradigms]] [[Category:Inter-process communication]] {{Compu-lang-stub}}</text> </page> <page> <id>29318</id> <title>Pivot element</title> <text>The '''pivot''' or '''pivot element''' is the element of a [[Matrix (mathematics)|matrix]], an [[array data structure|array]], or some other kind of [[finite set]], which is selected first by an [[algorithm]] (e.g. [[Gaussian elimination]], [[Quicksort]], [[Simplex algorithm]], etc.), to do certain calculations. In the case of matrix algorithms, a pivot entry is usually required to be at least distinct from zero, and often distant from it; in this case finding this element is called '''pivoting'''. Pivoting may be followed by an interchange of rows or columns to bring the pivot to a fixed position and allow the algorithm to proceed successfully, and possibly to reduce round-off error. Pivoting might be thought of as swapping or sorting rows or columns in a matrix, and thus it can be represented as [[matrix multiplication|multiplication]] by [[permutation matrix|permutation matrices]]. However, algorithms rarely move the matrix elements because this would cost too much time; instead, they just keep track of the permutations. The pivot element in [[quicksort]] is the element that is selected as the boundary for partitioning. Quicksort sorts all elements "left" and "right" of the pivot element [[recursion|recursively]]. Overall, pivoting adds more operations to the computational cost of an algorithm. These additional operations are sometimes necessary for the algorithm to work at all. Other times these additional operations are worthwhile because they add [[numerical stability]] to the final result. ==Examples of systems that require pivoting== In the case of Gaussian elimination, the algorithm requires that pivot elements not be zero. Interchanging rows or columns in the case of a zero pivot element is necessary. The system below requires the interchange of rows 2 and 3 to perform elimination. :<math> \left[ \begin{array}{ccc|c} 1 & -1 & 2 & 8 \\ 0 & 0 & -1 & -11 \\ 0 & 2 & -1 & -3 \end{array} \right] </math> The system that results from pivoting is as follows and will allow the elimination algorithm and backwards substitution to output the solution to the system. :<math> \left[ \begin{array}{ccc|c} 1 & -1 & 2 & 8 \\ 0 & 2 & -1 & -3 \\ 0 & 0 & -1 & -11 \end{array} \right] </math> Furthermore, in Gaussian elimination it is generally desirable to choose a pivot element with large [[absolute value]]. This improves the [[numerical stability]]. The following system (taken from Numerical Analysis, Burden and Faires, 8th Edition.) is dramatically affected by round-off error when Gaussian elimination and backwards substitution are performed. :<math> \left[ \begin{array}{cc|c} 0.00300 & 59.14 & 59.17 \\ 5.291 & -6.130 & 46.78 \\ \end{array} \right] </math> This system has the exact solution of x<sub>1</sub> = 10.00 and x<sub>2</sub> = 1.000, but when the elimination algorithm and backwards substitution are performed using four-digit arithmetic, the small value of a<sub>11</sub> causes small round-off errors to be propagated. The algorithm without pivoting yields the approximation of x<sub>1</sub> ≈ 9873.3 and x<sub>2</sub> ≈ 4. In this case it is desirable that we interchange the two rows so that a<sub>21</sub> is in the pivot position :<math> \left[ \begin{array}{cc|c} 5.291 & -6.130 & 46.78 \\ 0.00300 & 59.14 & 59.17 \\ \end{array} \right]. </math> Considering this system, the elimination algorithm and backwards substitution using four-digit arithmetic yield the correct values x<sub>1</sub> = 10.00 and x<sub>2</sub> = 1.000. ==Partial and complete pivoting== In '''partial pivoting''', the algorithm selects the entry with largest absolute value from the column of the matrix that is currently being considered as the pivot element. Partial pivoting is generally sufficient to adequately reduce round-off error. However for certain systems and algorithms, '''complete pivoting''' (or maximal pivoting) may be required for acceptable accuracy. Complete pivoting considers all entries in the whole matrix, interchanging rows and columns to achieve the highest accuracy. Complete pivoting is usually not necessary to ensure numerical stability and, due to the additional computations it introduces, it may not always be the most appropriate pivoting strategy. ==Scaled pivoting== A variation of the partial pivoting strategy is '''scaled partial pivoting'''. In this approach, the algorithm selects as the pivot element the entry that is largest relative to the entries in its row. This strategy is desirable when entries' large differences in magnitude lead to the propagation of round-off error. Scaled pivoting should be used to in system like the one below where a row's entries vary greatly in magnitude. In the example below, it would desirable to interchange the two rows because the current pivot element 30 is larger than 5.291 but it is relatively small compared with the other entries in its row. Without row interchange in this case, rounding errors will be propagated as in the previous example. :<math> \left[ \begin{array}{cc|c} 30 & 591400 & 591700 \\ 5.291 & -6.130 & 46.78 \\ \end{array} \right] </math> ==References== * G. H. Golub, C. F. Loan, Matrix Computations, 3rd edition, Johns Hopkins, 1996. ISBN 0801854148. * R. L. Burden, J. D. Faires, Numerical Analysis, 8th edition, Thompson Brooks/Cole, 2005. ISBN 0534392008 {{planetmath|id=1243|title=Pivoting}} {{Numerical linear algebra}} [[Category:Numerical linear algebra]] [[de:Pivotelement]] [[it:Pivot (matematica)]] [[sv:Pivotelement]] [[zh:主元]]</text> </page> <page> <id>29319</id> <title>Pivot table</title> <text>In [[data processing]], a '''pivot table''' is a data summarization tool found in data visualization programs such as [[spreadsheet]]s (for example, in [[Microsoft Excel]], [[OpenOffice.org Calc]] and [[Lotus 1-2-3]]) or [[business intelligence]] software. Among other functions, pivot-table tools can automatically sort, count, and total the data stored in one 