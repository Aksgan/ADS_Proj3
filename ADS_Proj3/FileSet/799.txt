are additional features for Visual Basic .NET that originated in VB6, including: * The default namespace is hidden (but can be disabled) * Certain project files are hidden (the user can show them) * The auto-generated <code>My.*</code> namespaces contain many commonly-used shortcuts brought over from VB6, such as methods for operating on the registry and application configuration file''''' Background compilation is a feature of the Visual Studio [[Integrated development environment|IDE]] whereby code is compiled as it is written by the programmer with the purpose of identifying compilation errors without requiring the solution to be built. This feature has been available for Visual Basic since .NET 1.1 and was present in early versions of Visual Studio for Visual Basic .NET. However, background compilation is a relatively new concept for Visual C# and is available with service pack 1 for Visual Studio 2008 Standard Edition and above. A distinct disadvantage for C# is that the Error List panel does not update until the solution is rebuilt. Refactoring large projects in C# is made more difficult by the need to frequently rebuild the solution order to highlight compilation errors<ref name="freepatentsonline.com">{{cite web | url = http://www.freepatentsonline.com/6804682.html | title = System and methodology providing compiler-assisted refactoring }}</ref>. Such is not the case with Visual Basic because the Error List panel is synchronised with the background compiler. Background Compilation is less demanding on system resources and results in faster build cycles<ref name="freepatentsonline.com"/>. This is a particular advantage with large projects and can significantly reduce the time required to start debugging the IDE<ref name="freepatentsonline.com"/>. ==Language features== The bulk of the differences between C# and VB.NET from a technical perspective are [[syntactic sugar]]. That is, most of the features are in both languages, but some things are easier to do in one language than another. Many of the differences between the two languages are actually centered around the [[Integrated development environment|IDE]]. ===Features of Visual Basic .NET not found in C#=== * Variables can be declared using the <code>WithEvents</code> construct. This construct is available so that a programmer may select an object from the ''Class Name'' drop down list and then select a method from the ''Declarations'' drop down list to have the [[Method signature]] automatically inserted * Auto-wireup of events, VB.NET has the <code>Handles</code> syntax for events * [[Marshalling]] an object for multiple actions using an unqualified dot reference. This is done using the <code>With ... End With</code> structure * <code>[[Is functions|IsNumeric]]</code> evaluates whether a string can be cast into a numeric value (the equivalent for C# requires using <code>int.TryParse</code>) * XML Literals<ref name="csharpxml">{{cite web | url = http://www.infoq.com/news/2007/03/CSharp-XML | title = Does C# Need VB9's XML Literals? | author = Jonathan Allen | accessdate = 2009-01-13}}</ref> * Inline date declarations by using <code>#1/1/2000#</code> syntax (M/dd/yyyy). * <code>Module</code> (although C#'s sealed static classes with additional semantics, but each field has to individually be declared as static) * Members of <code>Module</code>s imported to the current file, can be access with no preceeding container accessor (See [http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.dateandtime.now.aspx <code>Now]</code> for example) * The [http://msdn.microsoft.com/en-us/library/5btzf5yk.aspx <code>My</code>] namespace * Visual Studio's design-time experience is more responsive in the VB.NET language * COM components and interoperability is more powerful in VB.NET as the Object type is bound at runtime<ref name="early-binding">{{cite web | url =http://visualbasic.about.com/od/usingvbnet/a/earlybind.htm | title = Early vs. Late Binding}}</ref> * Namespaces can be imported in project level, so they don't have to be imported to each individual file, like C# * Root namespace, in VB.NET projects, you can set the assembly root namespace which the whole project is wrapped with it, and you don't have to declare the namespace for each container. ===Features of C# not found in Visual Basic .NET=== * Allows blocks of unsafe code (like C++/CLI) via the <code>unsafe</code> keyword. * Partial Interfaces * Iterators and the <code>yield</code> keyword * Multi-line comments (note that the Visual Studio IDE supports multi-line commenting for Visual Basic .NET) * Static classes (Classes which cannot contain any non-static members, although VB's Modules are essentially sealed static classes with additional semantics) * Can use <code>checked</code> and <code>unchecked</code> contexts for fine-grained control of overflow/underflow checking ===Other characteristics of Visual Basic .NET not applicable to C#=== * Conversion of Boolean value True to Integer may yield -1 or 1 depending on the conversion used * Assigning and comparing variables uses the same token, <code>=</code>. Whereas C# has separate tokens, <code>==</code> for comparison and <code>=</code> to assign a value * VB.NET is not case-sensitive. * Type checking is less strict by default. If the default is left in place, It will auto convert type without notifying programmer, for example: <source lang="vb"> Dim i As Integer = "1" 'Compiler automatically converts String to Integer Dim j As String = 1 'Compiler automatically converts Integer to String If i = j Then 'Compiler does cast and compare between i and j MessageBox.Show("Avoid using, but this message will appear!") End If </source> It should be noted that although the default is for '<code>Option Strict</code>' is off, it is recommended by Microsoft<ref>MSDN: [http://msdn.microsoft.com/en-us/library/zcd4xwzs.aspx Option Strict Statement]</ref> and widely considered to be a good to turn '<code>Option Strict</code>' "on", due to the fact it increases application performance, and eliminates the chance of naming errors and other programming mistakes.<ref>GetDotNetCode.com:{{cite web | url=http://www.getdotnetcode.com/gdncstore/free/Articles/OPTION%20STRICT%20ON.htm | title = Option Strict On}}</ref> * <code>Val()</code> function which also parses a null value while converting into double (In c# <code>Convert.ToDouble()</code> is used to convert any object into double type value, but which throws exception in case of a null value) * CInt, CStr, CByte, CDbl, CBool, CByte, CDate, CLng, CCur, CObj and a wide variety of converting functions built in the language ===Other characteristics of C# not applicable to Visual Basic .NET=== * By default, numeric operations are not checked. This results in slightly faster code, at the risk that numeric overflows will not be detected. However, the programmer can place arithmetic operations into a checked context to activate overflow checking. (It can be done in Visual Basic by checking an option) * Addition and string concatenation use the 