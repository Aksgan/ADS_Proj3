''[[Proceedings of the National Academy of Sciences]]'', (May 26, 1998) [[Category:Cognition]] {{neuroscience-stub}}</text> </page> <page> <id>3849</id> <title>Binomial</title> <text>{{Otheruses}} {{Unreferenced|date=November 2009}} In [[algebra]], a '''binomial''' is a [[polynomial]] with two terms&mdash;the sum of two [[monomial]]s&mdash;often bound by parenthesis or brackets when operated upon. It is the simplest kind of polynomial. For example, (x + 5) is a binomial of [[degree of a polynomial|degree]] one, while (x^2 + 5) is ''still'' a binomial, but it is a binomial of ''degree two''. ==See also== *[[Binomial theorem]] *[[Completing the square]] *[[Binomial distribution]] *[[Binomial coefficient]] * [[Binomial-QMF]] (Daubechies Wavelet Filters) *The [[list of factorial and binomial topics]] contains a large number of related links. *[[Binomial series]] ==References== * L. Bostock, and S. Chandler (1978). Pure Mathematics 1. ISBN 0 85950 0926. pp. 36. [[Category:Algebra]] [[bs:Binom]] [[bg:Бином]] [[ca:Binomi]] [[cs:Dvojčlen]] [[de:Binom]] [[et:Binoom]] [[es:Binomio]] [[eu:Binomio]] [[fa:دوجمله‌ای]] [[fr:Binôme (mathématique)]] [[hu:Binom]] [[io:Binomio]] [[is:Tvíliða]] [[it:Binomio]] [[lt:Dvinaris]] [[ml:ദ്വിപദം]] [[nl:Tweeterm]] [[pl:Dwumian]] [[ru:Бином]] [[sk:Dvojčlen]] [[sl:Binom]] [[fi:Binomi]] [[sv:Binom]] [[uk:Біном]] [[zh:二项式]]</text> </page> <page> <id>3851</id> <title>Binomial heap</title> <text>In [[computer science]], a '''binomial heap''' is a [[Heap (data structure)|heap]] similar to a [[binary heap]] but also supports quickly merging two heaps. This is achieved by using a special tree structure. It is important as an implementation of the '''mergeable heap''' [[abstract data type]] (also called meldable heap), which is a [[priority queue]] supporting merge operation. ==Binomial tree== A binomial heap is implemented as a collection of binomial [[tree data structure|tree]]s (compare with a [[binary heap]], which has a shape of a single [[binary tree]]). A '''binomial tree''' is defined recursively: * A binomial tree of order 0 is a single node * A binomial tree of order ''k'' has a root node whose children are roots of binomial trees of orders ''k''−1, ''k''−2, ..., 2, 1, 0 (in this order). [[Image:Binomial_Trees.svg|center|thumb|500px|Binomial trees of order 0 to 3: Each tree has a root node with subtrees of all lower ordered binomial trees, which have been highlighted. For example, the order 3 binomial tree is connected to an order 2, 1, and 0 (highlighted as blue, green and red respectively) binomial tree.]] A binomial tree of order ''k'' has 2<sup>k</sup> nodes, height ''k''. Because of its unique structure, a binomial tree of order ''k'' can be constructed from two trees of order ''k''−1 trivially by attaching one of them as the leftmost child of the other one. This feature is central to the ''merge'' operation of a binomial heap, which is its major advantage over other conventional heaps. The name comes from the shape: a binomial tree of order <math>n</math> has <math>\tbinom n d</math> nodes at depth <math>d</math>. (See [[Binomial coefficient]].) ==Structure of a binomial heap== A binomial heap is implemented as a set of binomial trees that satisfy the ''binomial heap properties'': * Each binomial tree in a heap obeys the ''[[minimum-heap property]]'': the key of a node is greater than or equal to the key of its parent. * There can only be either ''one'' or ''zero'' binomial trees for each order, including zero order. The first property ensures that the root of each binomial tree contains the smallest key in the tree, which applies to the entire heap. The second property implies that a binomial heap with ''n'' nodes consists of at most [[Binary logarithm|log]] ''n'' + 1 binomial trees. In fact, the number and orders of these trees are uniquely determined by the number of nodes ''n'': each binomial tree corresponds to one digit in the [[binary numeral system|binary]] representation of number ''n''. For example number 13 is 1101 in binary, <math>2^3 + 2^2 + 2^0</math>, and thus a binomial heap with 13 nodes will consist of three binomial trees of orders 3, 2, and 0 (see figure below). <center>[[Image:Binomial-heap-13.svg|325px|Example of a binomial heap]]<br>''Example of a binomial heap containing 13 nodes with distinct keys.<br/>The heap consists of three binomial trees with orders 0, 2, and 3.''</center> ==Implementation== Because no operation requires random access to the root nodes of the binomial trees, the roots of the binomial trees can be stored in a [[linked list]], ordered by increasing order of the tree. ===Merge=== As mentioned above, the simplest and most important operation is the merging of two binomial trees of the same order within two binomial heaps. Due to the structure of binomial trees, they can be merged trivially. As their root node is the smallest element within the tree, by comparing the two keys, the smaller of them is the minimum key, and becomes the new root node. Then the other tree become a subtree of the combined tree. This operation is basic to the complete merging of two binomial heaps. '''function''' mergeTree(p, q) '''if''' p.root <= q.root '''return''' p.addSubTree(q) '''else''' '''return''' q.addSubTree(p) [[Image:Binomial heap merge1.svg|left|thumb|200px|To merge two binomial trees of the same order, first compare the root key. Since 7>3, the black tree on the left(with root node 7) is attached to the grey tree on the right(with root node 3) as a subtree. The result is a tree of order 3.]] The operation of '''merging''' two heaps is perhaps the most interesting and can be used as a subroutine in most other operations. The lists of roots of both heaps are traversed simultaneously, similarly as in the [[merge algorithm]]. If only one of the heaps contains a tree of order ''j'', this tree is moved to the merged heap. If both heaps contain a tree of order ''j'', the two trees are merged to one tree of order ''j''+1 so that the minimum-heap property is satisfied. Note that it may later be necessary to merge this tree with some other tree of order ''j''+1 present in one of the heaps. In the course of the algorithm, we need to examine at most three trees of any order (two from the two heaps we merge and one composed of two smaller trees). Because each binomial tree in a binomial heap corresponds to a bit in the binary representation of its size, there is an analogy between the merging of two heaps and the binary addition of 