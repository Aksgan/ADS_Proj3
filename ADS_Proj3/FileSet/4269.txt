topic. SMEs are often asked to review, improve, and approve technical work; to guide others; and to teach. According to [[Six Sigma]], a Subject Matter Expert "exhibits the highest level of expertise in performing a specialized job, task, or skill."<ref>{{Cite web|url=http://military.isixsigma.com/dictionary/Subject_Matter_Expert_-_SME-396.htm/SME/|title=Subject Matter Expert|publisher=iSixSigma|accessdate=2008-11-24}}</ref> In software development, as in the development of "complex computer systems" (e.g., [[artificial intelligence]], [[expert system]]s, control, simulation, or business software) a SME is a person who is knowledgeable about the domain being represented (but often not knowledgeable about the programming technology used to represent it in the system). The SME tells the software developers what needs to be done by the computer system, and how the SME intends to use it. The SME may interact directly with the system, possibly through a simplified interface, or may codify domain knowledge for use by [[knowledge engineering|knowledge engineers]] or [[Ontology (information science)|ontologists]]. An SME is also involved in validating the resulting system. SME has formal meaning in certain contexts such as [[Capability Maturity Model|CMMs]]. ==References== {{Reflist|1}} *[http://nas.cl.uh.edu/helm/swen5534/Do_Ans/tsld002.htm ''A Domain Expert'', 6/11/06] *[http://ksi.cpsc.ucalgary.ca/KAW/KAW96/simon/KAW96US.htm ''Different Types of Systems Users'', 2004, University of Calgary] *[http://www.cs.vu.nl/~frankh/postscript/IEAAIE00.pdf ''Bultman, Kuipers, Harmelen'', 2005, Maintenance of KBS's by Domain Experts] ==See also== * [[Domain knowledge]] * [[Expert system]] * [[Knowledge Engineer]] * [[Knowledge Engineering]] * [[Subject matter expert Turing test]] * [[System testing]] * [[User interface design]] * [[Usability]] * [[User Acceptance Testing]] ==External links== * [http://www.usabilityfirst.com/glossary A glossary of UML at Usability First] * [http://scom.hud.ac.uk/planet/aisp02Kett/aylett.pdf Supporting the Domain Expert in Planning] * [http://www.cs.vu.nl/~frankh/postscript/IEAAIE00.pdf Maintenance of KBS's by Domain Experts] * [http://www.dnexpert.com/ Domain Expert News and Advice] *[http://www.youtube.com/watch?v=fC66f0bqdLY/ Subject Matter Expert Personal Resources Inventory (SMEPRI)] [[Category:Knowledge engineering]] [[tr:Alan uzmanı]] {{Systemstheory-stub}}</text> </page> <page> <id>36042</id> <title>Subject-oriented programming</title> <text>{{Programming paradigms}} In [[computing]], '''Subject-Oriented Programming''' is an [[Object-oriented programming|object-oriented]] [[programming paradigm |software paradigm]] in which the state (fields) and behavior (methods) of objects are not seen as intrinsic to the objects themselves, but are provided by various [[Subject (programming)|subjective perceptions]] (“subjects”) of the objects. The term and concepts were first published in September 1993 in a conference paper<ref>William Harrison and Harold Ossher, Subject-Oriented Programming - A Critique of Pure Objects, Proceedings of 1993 Conference on Object-Oriented Programming Systems, Languages, and Applications, September 1993 </ref> which was later recognized as being one of the three most influential papers to be presented at the conference between 1986 and 1996<ref>http://www.sigplan.org/award-oopsla.htm</ref>. As illustrated in that paper, an analogy is made with the contrast between the philosophical views of [[Plato]] and [[Immanuel Kant | Kant]] with respect to the characteristics of “real” objects, but applied to software ones. For example, while we may all perceive a tree as having a measurable height, weight, leaf-mass, etc., from the point-of view of a bird, a tree may also have measures of relative value for food or nesting purposes, or from the point-of-view of a tax-assessor, it may have a certain taxable value in a given year. Neither the bird’s nor the tax-assessor’s additional state information need be seen as intrinsic to the tree, but are added by the perceptions of the bird and tax-assessor, and from Kant’s analysis, the same may be true even of characteristics we think of as intrinsic. Subject-oriented programming advocates the organization of the [[Class (computer science)|classes]] that describe [[Object (computer science)|objects]] into “subjects”, which may be composed to form larger subjects. At points of access to fields or [[Method (computer science)|methods]], several subjects’ contributions may be composed. These points were characterized as the [[join-point]]s<ref>Harold Ossher , Peri Tarr. Operation-Level Composition: A Case in (Join) Point, in ECOOP ’98 Workshop Reader, 406–409</ref> of the subjects. For example, if a tree is cut-down, the methods involved may need to join behavior in the bird and tax-assessor’s subjects with that of the tree’s own. It is therefore fundamentally a view of the compositional nature of software development, as opposed to the algorithmic (procedural) or representation-hiding (object) nature. ==Relationship to Aspect-Oriented Programming== The introduction of [[Aspect-Oriented Programming]] in 1997<ref>Kiczales, Gregor; John Lamping, Anurag Mendhekar, Chris Maeda, Cristina Lopes, Jean-Marc Loingtier, and John Irwin (1997). "Aspect-Oriented Programming". Proceedings of the European Conference on Object-Oriented Programming, vol.1241. pp. 220–242.</ref>, raised questions about its relationship to subject-oriented programming, and about the difference between subjects and aspects. These questions were unanswered for some time, but were addressed in the patent on Aspect-oriented programming filed in 1999<ref>Kiczales; Gregor J.; Lamping; John O.; Lopes; Cristina V.; Hugunin; James J.; Hilsdale; Erik A.; Boyapati; Chandrasekhar, Aspect Oriented Programming, United States Patent 6,467,086, October 15, 2002</ref> in which two points emerge as characteristic differences from earlier art: * the aspect program comprises both a) a cross-cut that comprises a point in the execution where cross-cutting behavior is to be included; and b) a cross-cut action comprising a piece of implementaton associated with the cross-cut, the piece of implementaton comprising computer readable program code that implements the cross-cutting behavior. * the aspect transparently forces the cross-cutting behavior on object classes and other software entities In the subject-oriented view, the cross-cut may be placed separately from the aspect (subject) and the behavior is not forced by the aspect, but by governed by rules of composition. Hindsight<ref>William Harrison. De-constructing and Re-constructing Aspect-Orientation, Seventh Annual Workshop on Foundations of Aspect Languages, Brussels, Belgium, 1 April, 2008, edited by Gary T. Leavens , ACM Digital Library, 2008, pp. 43-50</ref> makes it also possible to distinguish aspect-oriented programming by its introduction and exploitation of the concept of a query-like [[pointcut]] to externally impose the join-points used by aspects in general ways. In the presentation of subject-oriented programming, the join-points were deliberately restricted to field access and method call on the grounds that those were the points at which well-designed frameworks were designed to admit functional extension. The use of externally imposed pointcuts is an important linguistic capability, but remains one of the most controversial features of aspect-oriented programming<ref>Friedrich Steimann. The paradoxical success of aspect-oriented programming, Proceedings of the 21st annual ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications, Portland, Oregon, USA , 2006, pp. 481 - 497</ref>. ==Relationship to 