= Searle | first = John R. | authorlink = John Searle | coauthors = | title = Chomsky's Revolution in Linguistics | url = http://www.nybooks.com/articles/10142 | journal = The New York Review of Books | volume = 18 | issue = 12 | pages = | year = 1972 | doi = | postscript = . }} * {{Citation | last=van Schooneveld | first= Cornelis H. | authorlink= | title=A brief comment re Jan Noordegraaf's "On the publication date of Syntactic Structures" | journal=Historiographia Linguistica | volume=28 | issue=3 | year=2001 | pages=468 | url= }} == References == <references/> ==Further reading== * {{citation |last= Tomalin |first= Marcus |author= |authorlink= |title= Linguistics and the Formal Sciences: The Origins of Generative Grammar |url= |year= 2006 |publisher= Cambridge University Press |location= Cambridge }} * Pullum, Geoffrey K. (forthcoming) On the mathematics of Syntactic Structures. To appear in ''Journal of Logic, Language and Information''. [http://www.ling.ed.ac.uk/~gpullum/onSyntacticStructures.pdf PDF format (18 pages)] ==External links== * [http://www.google.com/books?id=a6a_b-CXYAkC ''Syntactic Structures'' preview in Google Books] * [http://kaivonfintel.org/2007/02/10/50-years-of-syntactic-structures/ 50 years of Syntactic Structures] {{Noam Chomsky}} [[Category:Linguistics books]] [[Category:Books by Noam Chomsky]] [[Category:Cognitive science literature]] [[ca:Estructures sintàctiques]] [[ko:변형생성문법의 이론]] [[la:Syntactic Structures]] [[ru:Синтаксические структуры]]</text> </page> <page> <id>36418</id> <title>Syntactic sugar</title> <text>'''Syntactic sugar''' is a [[computer science]] term that refers to [[syntax]] within a [[programming language]] that is designed to make things easier to read or to express, while alternative ways of expressing them exist. It makes the language "sweeter" for humans to use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer. Specifically, a construct in a language is called syntactic sugar if it can be removed from the language without any effect on what the language can do: [[Function (engineering)|functionality]] and [[expressive power]] will remain the same. All applications of the construct can be systematically replaced with equivalents that do not use it. For instance, in [[imperative programming language]]s, [[for loop]]s can be systematically replaced with [[while loop]]s, which in turn can be systematically replaced with [[goto]]s. More generally, the term is used to characterize syntax as being designed for ease of expression. For instance, in [[C Sharp (programming language)|C#]], the [[property (computer science)|property]] construct may be called syntactic sugar: it is roughly, but not exactly equivalent to a [[Setter (computer science)|getter-setter]] pair of functions. Even more broadly, programming languages have been called{{By whom|date=July 2010}} "[[machine code]] with a lot of syntactic sugar", which is actually incorrect since the concept of syntactic sugar is applied ''within'' a programming language, and not ''between'' different languages. The term was coined by [[Peter J. Landin]], when he was working on a [[lambda calculus]] enriched with a few operations, such as assignment.{{Citation needed|date=April 2010}} Following Landin's insights, some later programming languages, such as [[ML programming language|ML]] and [[Scheme (programming language)|Scheme]], were explicitly designed as a language core of essential constructs. The convenient, higher-level features could be "desugared" and decomposed into that subset. This is, in fact, the usual [[mathematical]] practice of building up from primitives. == Examples == === Array access === In the [[C (programming language)|C]] programming language [[Array data structure|arrays]] are constructed as blocks of memory, accessed via an offset from the array's starting point in memory. Since some pointer operations are hard to write and understand when expressed in terms of pointer arithmetic, C also provides the <code>A[i]</code> syntax for what would otherwise be written as <code>*(A + i)</code>. Similarly <code>A[i][j]</code> is more readable than <code>*(A + L*i + j)</code>, L being A's first dimension. === String literals === A common feature of many programming languages is the ability to specify [[string literal]]s directly in source code. The conventions for this vary, and there are some languages whose conventions are more restrictive than others. This is one example where proposals to change syntax in order to "save typing" have been characterized as "syntactic sugar"<ref>[http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4472509 Bug ID: 4472509 Add support for verbatim string literals<!-- Bot generated title -->]</ref>. === Object-oriented programming === [[Object-oriented programming]] is possible in C by way of function pointers, type casting, and [[Struct (C programming language)|structures]]. However, languages such as [[C++]] make object-oriented programming more convenient by introducing syntax specific to this coding style. The specialized syntax works to encourage the object-oriented approach especially for new programmers. Features of the [[C Sharp (programming language)|C#]] programming language, such as properties and events, similarly do not enable new functionality but instead make specific programming practices more prominent and more natural. == Criticism == Some programmers{{Who|date=January 2011}} feel that these features are either unimportant or outright frivolous. For example, [[Alan Perlis]] once quipped, in a reference to [[Curly bracket programming language|bracket-delimited languages]], that "syntactic sugar causes cancer of the [[semicolon]]" (see [[Epigrams on Programming]]). === Derivative terms === ==== Syntactic salt ==== The metaphor has been extended by coining the term '''syntactic salt''', which indicates a feature designed to make it harder to write bad code. Specifically, syntactic salt is a hoop programmers must jump through just to prove that they know what's going on, rather than to express a program action. Some programmers consider required type declarations to be syntactic salt. In [[VB.NET]], a requirement to write "end if", "end while", "end do", etc. to terminate the last block controlled by a control construct (as opposed to just "end" or even simpler syntax using braces "}") is widely considered syntactic salt.{{Citation needed|date=December 2008}} ====Syntactic saccharin==== Another extension is '''syntactic [[saccharin]]''', meaning gratuitous syntax that does not actually make programming easier.<ref>[http://www.retrologic.com/jargon/S/syntactic-sugar.html The Jargon File v4.4.7: "syntactic sugar"]</ref> == Notes and references == {{Reflist}} {{More footnotes|date=July 2007}} * Landin, Peter J.; ''A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Parts I and II'', Communications of the ACM, 8(2.3):89-101, 158-165 (February and March 1965) * Landin, Peter J.; ''Programming Without Imperatives - An Example'', Technical report, UNIVAC Systems Programming Research, March 1965 * Landin, Peter J.; ''Getting Rid of Labels'', Technical report, UNIVAC Systems Programming Research, July 1965 * Landin, Peter J.; ''A Generalization of Jumps and Labels'', Report, UNIVAC Systems Programming Research, August 1965, reprinted 