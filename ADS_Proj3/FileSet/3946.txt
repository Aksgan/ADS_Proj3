Core defines "bare" SAML assertions along with SAML request and response elements. A SAML binding determines how SAML requests and responses map onto standard messaging or communications protocols. An important (synchronous) binding is the SAML SOAP binding. A SAML profile is a concrete manifestation of a defined use case using a particular combination of assertions, protocols and bindings. ===SAML Assertions=== A SAML ''assertion'' contains a packet of security information: <'''saml:Assertion''' ...> ... <'''/saml:Assertion'''>. Loosely speaking, a relying party interprets an assertion as follows: <blockquote>Assertion ''A'' was issued at time ''t'' by issuer ''R'' regarding subject ''S'' provided conditions ''C'' are valid.</blockquote> SAML assertions are usually transferred from identity providers to service providers. Assertions contain ''statements'' that service providers use to make access control decisions. Three types of statements are provided by SAML: # '''Authentication statements''' # '''Attribute statements''' # '''Authorization decision statements''' ''Authentication statements'' assert to the service provider that the principal did indeed authenticate with the identity provider at a particular time using a particular method of authentication. Other information about the authenticated principal (called the ''authentication context'') may be disclosed in an authentication statement. An ''attribute statement'' asserts that a subject is associated with certain attributes. An ''attribute'' is simply a name-value pair. Relying parties use attributes to make access control decisions. An ''authorization decision statement'' asserts that a subject is permitted to perform action ''A'' on resource ''R'' given evidence ''E''. The expressiveness of authorization decision statements in SAML is intentionally limited. More advanced use cases are encouraged to use [[XACML]] instead. ===SAML protocols=== [[Image:Saml-protocol-response.gif|right|SAML Protocol Response]] A SAML ''protocol'' describes how certain SAML elements (including assertions) are packaged within SAML request and response elements, and gives the processing rules that SAML entities must follow when producing or consuming these elements. For the most part, a SAML protocol is a simple request-response protocol. The most important type of SAML protocol request is called a ''query''. A service provider makes a query directly to an identity provider over a secure back channel. Thus query messages are typically bound to SOAP. Corresponding to the three types of statements, there are three types of SAML queries: # '''Authentication query''' # '''Attribute query''' # '''Authorization decision query''' Of these, the ''attribute query'' is perhaps most important (and still the object of much research). The result of an attribute query is a SAML response containing an assertion, which itself contains an attribute statement. See the SAML 2.0 topic for [[SAML 2.0#SAML Attribute Query|an example of attribute query/response]]. ====SAML 1.1 protocols==== Beyond queries, SAML 1.1 specifies no other protocols. ====SAML 2.0 protocols==== SAML 2.0 expands the notion of ''protocol'' considerably. The following protocols are described in detail in SAML 2.0 Core: * Assertion Query and Request Protocol * Authentication Request Protocol * Artifact Resolution Protocol * Name Identifier Management Protocol * Single Logout Protocol * Name Identifier Mapping Protocol Most of these protocols are completely new in [[SAML 2.0]]. ===SAML bindings=== [[Image:Saml-over-soap-over-http.gif|right|SAML over SOAP over HTTP]] A SAML ''binding'' is a mapping of a SAML protocol message onto standard messaging formats and/or communications protocols. For example, the SAML SOAP binding specifies how a SAML message is encapsulated in a SOAP envelope, which itself is bound to an HTTP message. ====SAML 1.1 bindings==== SAML 1.1 specifies just one binding, the SAML SOAP Binding. In addition to SOAP, implicit in SAML 1.1 Web Browser SSO are the precursors of the HTTP POST Binding, the HTTP Redirect Binding, and the HTTP Artifact Binding. These are not defined explicitly, however, and are only used in conjunction with SAML 1.1 Web Browser SSO. The notion of binding is not fully developed until SAML 2.0. ====SAML 2.0 bindings==== SAML 2.0 completely separates the binding concept from the underlying profile. In fact, there is a brand [[SAML 2.0#SAML 2.0 Bindings|new binding specification in SAML 2.0]] that defines the following standalone bindings: * SAML SOAP Binding (based on SOAP 1.1) * Reverse SOAP (PAOS) Binding * HTTP Redirect (GET) Binding * HTTP POST Binding * HTTP Artifact Binding * SAML URI Binding This reorganization provides tremendous flexibility: taking just Web Browser SSO alone as an example, a service provider can choose from four bindings (HTTP Redirect, HTTP POST and two flavors of HTTP Artifact), while the identity provider has three binding options (HTTP POST plus two forms of HTTP Artifact), for a total of twelve (12) possible deployments of the SAML 2.0 Web Browser SSO Profile. ===SAML profiles=== A SAML ''profile'' describes in detail how SAML assertions, protocols, and bindings combine to support a defined use case. The most important SAML profile is the Web Browser SSO Profile. ====SAML 1.1 profiles==== SAML 1.1 specifies two profiles, the Browser/Artifact Profile and the Browser/POST Profile. The latter passes assertions ''by value'' whereas Browser/Artifact passes assertions ''by reference''. As a consequence, Browser/Artifact requires a back-channel SAML exchange over SOAP. In SAML 1.1, all flows begin with a request at the identity provider for simplicity. Proprietary extensions to the basic IdP-initiated flow have been proposed (by [[Shibboleth (Internet2)|Shibboleth]], e.g.). ====SAML 2.0 profiles==== The Web Browser SSO Profile has been completely refactored for SAML 2.0. Conceptually, SAML 1.1 Browser/Artifact and Browser/POST are special cases of SAML 2.0 Web Browser SSO. The latter is considerably more flexible than its SAML 1.1 counterpart due to the new "plug-and-play" binding design of V2.0. Unlike previous versions, SAML 2.0 browser flows begin with a request at the service provider. This provides greater flexibility, but SP-initiated flows naturally give rise to the so-called ''Identity Provider Discovery'' problem, the focus of much research today. In addition to Web Browser SSO, SAML 2.0 introduces numerous new profiles: * SSO Profiles ** Web Browser SSO Profile ** Enhanced Client or Proxy (ECP) Profile ** Identity Provider Discovery Profile ** Single Logout Profile ** Name Identifier Management Profile * Artifact Resolution Profile * Assertion Query/Request Profile * Name Identifier Mapping Profile * SAML Attribute Profiles A number of these profiles are discussed in more detail in the [[SAML 2.0]] topic. ==The SAML Use Case== The 