minor differences derived from the fact that the HFS Plus format was finalized before Unicode had standardized the NFD format (see [http://developer.apple.com/technotes/tn/tn1150.html#UnicodeSubtleties “Unicode Subtleties”] for more information)</ref> and UTF-16 implies that characters from outside the [[Basic Multilingual Plane]] — often seldom used and characters from ancient writing systems — also count as two characters in an HFS+ filename). HFS Plus permits filenames up to 255 UTF-16 characters in length, and [[n-forked files]] similar to [[NTFS]], though until recently, almost no software takes advantage of forks other than the [[data fork]] and [[resource fork]]. HFS Plus also uses a full 32-bit allocation mapping table, rather than HFS’s 16 bits. This was a serious limitation of HFS, meaning that no disk could support more than 65,536 allocation blocks under HFS. When disks were small, this was of little consequence, but as larger-capacity drives became available, it meant that the smallest amount of space that any file could occupy (a single allocation block) became excessively large, wasting significant amounts of space. For example, on a 1 GB disk, the allocation block size under HFS is 16 KB, so even a 1 byte file would take up 16 KB of disk space. Unlike most other file systems HFS Plus supports [[hard link]]s to directories. Like HFS, HFS Plus uses [[B-tree]]s to store most volume [[Metadata (computing)|metadata]]. == History == HFS+ was introduced with the January 19, 1998 release of [[Mac OS 8|Mac OS 8.1]].<ref name="tn1150">{{cite web | url=http://developer.apple.com/technotes/tn/tn1150.html | title=Technical Note TN1150: HFS Plus Volume Format | date=March 5, 2004 | work=Apple Developer Connection | accessdate=2007-03-28}}</ref> However its first appearance, as a beta filesystem, was in the never-released [[Copland (operating system)|Copland OS]] betas. With the release of the [[Mac OS X v10.2|10.2.2]] update on November 11, 2002, Apple added optional [[Journaling file system|journaling]] features to HFS Plus for improved data reliability. These features were easily accessible in [[Mac OS X]] Server, but only accessible through the command line in the standard desktop client.<ref>{{cite web | url=http://daringfireball.net/2002/11/crow | title=Crow | author=John Gruber | date=November 11, 2002 | work=DaringFireball.net | accessdate=2007-03-28}}</ref> With [[Mac OS X v10.3]], all HFS Plus volumes on all Macs are set to be journaled by default. Within the system, an HFS Plus volume with a journal is identified as '''HFSJ'''. [[Mac OS X v10.3|10.3]] also introduced another version of HFS Plus called '''HFSX'''. HFSX volumes are almost identical to HFS Plus volumes, except that they are never surrounded by the [[HFS Plus#Design|HFS Wrapper]] that is typical of HFS Plus volumes and they optionally support [[case sensitivity]] for file and folder names. HFSX volumes can be recognized by two entries in the Volume Header, a value of HX in the signature field and 5 in the version field.<ref name="tn1150" /> Additionally, Mac OS X 10.3 marked Apple's adoption of Unicode 3.2 decomposition, superseding the Unicode 2.1 decomposition used previously. This change has caused problems for developers writing software for Mac OS X.<ref>{{cite web|url=http://kerneltrap.org/mailarchive/git/2008/1/23/593749/thread |title=Re: git on MacOSX and files with decomposed utf-8 file names |publisher=KernelTrap |date=2010-05-07 |accessdate=2010-07-05}}</ref> With [[Mac OS X v10.4|10.4]], Apple added support for Inline Attribute Data records, something that had been a part of the Mac OS X implementation of HFS Plus since at least [[Mac OS X v10.0|10.0]], but always marked as "reserved for future use".<ref>{{cite web | url=http://arstechnica.com/reviews/os/macosx-10.4.ars/6 | title=Mac OS X 10.4 Tiger: Metadata revisited | author=[[John Siracusa]] | date=April 28, 2005 | work=Ars Technica | accessdate=2007-03-28}}</ref> Until the release of [[Mac OS X Server|Mac OS X Server 10.4]], HFS Plus supported only the standard UNIX [[file system permissions]], however 10.4 introduced support for [[access control list]]-based file security, which provides a richer mechanism to define file permissions and is also designed to be fully compatible with the file permission models on other platforms such as [[Microsoft]] [[Windows XP]] and [[Windows Server 2003]].<ref>{{cite web | url=http://www.apple.com/br/server/macosx/windowsservices.html | title=Apple - Mac OS X Server - Windows Services | work=Apple.com | accessdate=2007-11-12 |archiveurl = http://web.archive.org/web/20071231203318/http://www.apple.com/br/server/macosx/windowsservices.html <!-- Bot retrieved archive --> |archivedate = 2007-12-31}}</ref> == Design == HFS Plus volumes are divided into sectors (called logical blocks in HFS), that are usually 512 bytes in size. These sectors are then grouped together into allocation blocks which can contain one or more sectors; the number of allocation blocks depends on the total size of the volume. HFS Plus uses a larger value to address allocation blocks than HFS, 32 bits rather than 16 bits; this means it can access 4,294,967,296 (= 2<sup>32</sup>) allocation blocks rather than the 65,536 (= 2<sup>16</sup>) allocation blocks available to HFS.<ref name="tn1150" /> Formerly, HFS Plus volumes were embedded inside an HFS standard filesystem. This was phased out by the Tiger transition to Intel Macs, where the HFS Plus filesystem was not embedded inside a wrapper. The wrapper was designed for two purposes; it allowed Macintosh computers without HFS Plus support in their ROM to boot HFS Plus volumes and it also was designed to help users transition to HFS Plus by including a minimal HFS volume with a read-only file called ''Where_have_all_my_files_gone?'', explaining to users with versions of Mac OS 8.0 and earlier without HFS Plus, that the volume requires a system with HFS Plus support. The original HFS volume contains a signature and an offset to the embedded HFS Plus volume within its volume header. All allocation blocks in the HFS volume which contain the embedded volume are mapped out of the HFS allocation file as ''bad blocks''.<ref name="tn1150" /> There are nine structures that make up a typical HFS Plus volume:<ref name="tn1150" /> # Sectors 0 and 1 of the volume are HFS '''[[Boot sector|boot blocks]]'''. These are identical to the boot blocks in an HFS volume. They are part of the HFS wrapper. # Sector 2 contains the '''Volume Header''' equivalent to the Master Directory Block in an HFS volume. The Volume Header stores a wide variety of data about the volume itself, for example the size of allocation blocks, a timestamp that indicates when the volume was created or the location of 