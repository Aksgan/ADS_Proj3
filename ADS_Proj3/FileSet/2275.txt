Any compact manifold has isoperimetric dimension 0. It is also possible for the isoperimetric dimension to be larger than the topological dimension. The simplest example is the infinite [[jungle gym]], which has topological dimension 2 and isoperimetric dimension 3. See [http://www.math.ucla.edu/~bon/jungle.html] for pictures and Mathematica code. The [[hyperbolic plane]] has topological dimension 2 and isoperimetric dimension infinity. In fact the hyperbolic plane has positive [[Cheeger constant]]. This means that it satisfies the inequality :<math>\mathrm{area}\,(\partial D)\geq C\,\mathrm{vol}\,(D),</math> which obviously implies infinite isoperimetric dimension. ==Isoperimetric dimension of graphs== The isoperimetric dimension of [[Graph (mathematics)|graphs]] can be defined in a similar fashion. there is no need to have an area and volume measures. One simply counts points. For every subset ''A'' of the graph ''G'' one defines <math>\partial A</math> as the set of vertices in <math>G\setminus A</math> with a neighbor in ''A''. A ''d''-dimensional isoperimetric inequality is now defined by :<math>|\partial A|\geq C|A|^{(d-1)/d}.</math> The graph analogs of all the examples above hold. The isoperimetric dimension of any finite graph is 0. The isoperimetric dimension of a ''d''-dimensional grid is ''d''. In general, the isoperimetric dimension is preserved by [[Glossary of Riemannian and metric geometry#Q|quasi isometries]], both by quasi-isometries between manifolds, between graphs, and even by quasi isometries carrying manifolds to graphs, with the respective definitions. In rough terms, this means that a graph "mimicking" a given manifold (as the grid mimics the Euclidean space) would have the same isoperimetric dimension as the manifold. An infinite complete [[binary tree]] has isoperimetric dimension ∞. ==Consequences of isoperimetry==<!-- This section is linked from [[Random walk]] --> A simple integration over ''r'' (or sum in the case of graphs) shows that a ''d''-dimensional isoperimetric inequality implies a ''d''-dimensional [[Growth rate (group theory)|volume growth]], namely :<math>\mathrm{vol}\,B(x,r)\geq Cr^d</math> where ''B''(''x'',''r'') denotes the ball of radius ''r'' around the point ''x'' in the [[Riemannian manifold|Riemannian distance]] or in the [[Glossary of graph theory#Distance|graph distance]]. In general, the opposite is not true, i.e. even uniformly exponential volume growth does not imply any kind of isoperimetric inequality. A simple example can be had by taking the graph '''Z''' (i.e. all the integers with edges between ''n'' and ''n'' + 1) and connecting to the vertex ''n'' a complete binary tree of height |''n''|. Both properties (exponential growth and 0 isoperimetric dimension) are easy to verify. An interesting exception is the case of [[Group (mathematics)|groups]]. It turns out that a group with polynomial growth of order ''d'' has isoperimetric dimension ''d''. This holds both for the case of [[Lie group]]s and for the [[Cayley graph]] of a [[Glossary of group theory#Types of groups|finitely generated]] group. A theorem of [[Varopoulos]] connects the isoperimetric dimension of a graph to the rate of escape of [[random walk]] on the graph. The result states ''Varopoulos' theorem: If G is a graph satisfying a d-dimensional isoperimetric inequality then'' :<math>p_n(x,y)\leq Cn^{-d/2}</math> ''where'' <math>\scriptstyle p_n(x,y)\,</math> ''is the probability that a random walk on G starting from x will be in y after n steps, and C is some constant.'' ==References== * Isaac Chavel, ''Isoperimetric Inequalities: Differential geometric and analytic persepectives'', Cambridge university press, Cambridge, UK (2001), ISBN 0-521-80267-9 :Discusses the topic in the context of manifolds, no mention of graphs. * N. Th. Varopoulos, ''Isoperimetric inequalities and Markov chains'', J. Funct. Anal. '''63:2''' (1985), 215-239. * Thierry Coulhon and Laurent Saloff-Coste, ''Isopérimétrie pour les groupes et les variétés'', Rev. Mat. Iberoamericana '''9:2''' (1993), 293-314. :This paper contains the result that on groups of polynomial growth, volume growth and isoperimetric inequalities are equivalent. In French. [[Category:Mathematical analysis]] [[Category:Dimension]] [[it:Dimensione isoperimetrica]]</text> </page> <page> <id>19434</id> <title>Iterative deepening depth-first search</title> <text>{{Tree search algorithm}} '''Iterative deepening depth-first search''' (IDDFS) is a [[state space search]] strategy in which a [[depth-limited search]] is run repeatedly, increasing the depth limit with each iteration until it reaches <math>d</math>, the depth of the shallowest goal state. On each iteration, IDDFS visits the [[node (computer science)|node]]s in the [[search tree]] in the same order as [[depth-first search]], but the cumulative order in which nodes are first visited, assuming no [[pruning (algorithm)|pruning]], is effectively [[breadth-first search|breadth-first]]. == Properties == IDDFS combines [[depth-first search]]'s space-efficiency and [[breadth-first search]]'s completeness (when the [[branching factor]] is finite). It is optimal when the path cost is a non-decreasing function of the depth of the node. The [[space complexity]] of IDDFS is <math>O(bd)</math>, where <math>b</math> is the branching factor and <math>d</math> is the depth of shallowest goal. Since iterative deepening visits states multiple times, it may seem wasteful, but it turns out to be not so costly, since in a tree most of the nodes are in the bottom level, so it does not matter much if the upper levels are visited multiple times.<ref name="rn3">{{Russell Norvig 2003}}</ref> The main advantage of IDDFS in [[game tree]] searching is that the earlier searches tend to improve the commonly used heuristics, such as the [[killer heuristic]] and [[alpha-beta pruning]], so that a more accurate estimate of the score of various nodes at the final depth search can occur, and the search completes more quickly since it is done in a better order. For example, alpha-beta pruning is most efficient if it searches the best moves first <ref name="rn3"/>. A second advantage is the responsiveness of the algorithm. Because early iterations use small values for <math>d</math>, they execute extremely quickly. This allows the algorithm to supply early indications of the result almost immediately, followed by refinements as <math>d</math> increases. When used in an interactive setting, such as in a [[chess]]-playing program, this facility allows the program to play at any time with the current best move found in the search it has completed so far. This is not possible with a traditional depth-first search. The [[time complexity]] of IDDFS in well-balanced trees works out to be the same as Depth-first search: <math>O(b^{d})</math>. In an iterative deepening search, the nodes on the bottom level are expanded once, those on the next to bottom level are expanded twice, and so on, up to the root of the search tree, which is expanded <math>d+1</math> 