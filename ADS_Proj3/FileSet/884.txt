| title = Multi-Core Programming | publisher = Richard Bowles (Intel Press) | year = 2006 | pages = 11–13 | isbn = 0-9764832-4-6 }}</ref> One computer program can calculate simultaneously more than one operation using [[thread (computer science)|threads]] or separate [[process (computing)|processes]]. [[Multithreading (computer architecture)|Multithreading]] processors are optimized to execute multiple threads efficiently. == Functional categories == Computer programs may be categorized along functional lines. The main functional categories are [[system software]] and [[application software]]. System software includes the [[operating system]] which couples [[computer hardware]] with application software.<ref name = "osc-ch1-1"/> The purpose of the operating system is to provide an environment in which application software executes in a convenient and efficient manner.<ref name="osc-ch1-1">{{cite book | last = Silberschatz | first = Abraham | title = Operating System Concepts, Fourth Edition | publisher = Addison-Wesley | year = 1994 | pages = 1 | isbn = 0-201-50480-4 }}</ref> In addition to the operating system, system software includes [[Utility software|utility programs]] that help manage and tune the computer. If a computer program is not system software then it is application software. Application software includes [[middleware]], which couples the system software with the [[user interface]]. Application software also includes utility programs that help users solve application problems, like the need for sorting. Sometimes development environments for [[software development]] are seen as a functional category on its own, especially in the context of [[human-computer interaction]] and [[programming language design]]. Development environments gather system software (such as compilers and system's [[batch processing]] scripting languages) and application software (such as [[integrated development environment|IDEs]]) for the specific purpose of helping programmers create new programs. ==See also== *[[algorithm#Formalization|Algorithm]] for the relationship between computer programs and algorithms *[[Computer software]] for more information on computer programs *[[Data structure]] ==References== {{reflist}} ==Further reading== {{refbegin}} *{{cite book | last = Knuth | first = Donald E. | title = The Art of Computer Programming, Volume 1, 3rd Edition | year = 1997 | publisher = Addison-Wesley | location = Boston | isbn = 0-201-89683-4 }} *{{cite book |last=Knuth |first=Donald E. |title=The Art of Computer Programming, Volume 2, 3rd Edition |year=1997 |publisher=Addison-Wesley |location = Boston |isbn=0-201-89684-2 }} *{{cite book |last=Knuth |first=Donald E. |title=The Art of Computer Programming, Volume 3, 3rd Edition |year=1997 |publisher=Addison-Wesley |location = Boston |isbn=0-201-89685-0 }}{{refend}} ==External links== *[http://www.webopedia.com/TERM/P/program.html Definition of "Program"] at Webopedia *[http://wombat.doc.ic.ac.uk/foldoc/foldoc.cgi?query=software Definition of "Software"] at [[FOLDOC]] *[http://dictionary.reference.com/browse/computer%20program Definition of "Computer Program"] at dictionary.com [[Category:Computer programming]] [[Category:Computing terminology]] [[af:Rekenaarprogram]] [[ar:برنامج (حاسوب)]] [[ast:Programa informáticu]] [[az:Kompyuter proqramları]] [[bn:কম্পিউটার প্রোগ্রাম]] [[zh-min-nan:Tiān-náu thêng-sek]] [[be:Камп'ютарная праграма]] [[be-x-old:Праграма]] [[bs:Računarski program]] [[br:Goulev]] [[bg:Програма]] [[ca:Programa informàtic]] [[cs:Počítačový program]] [[de:Computerprogramm]] [[et:Arvutiprogramm]] [[el:Πρόγραμμα υπολογιστή]] [[es:Programa informático]] [[eo:Komputila programo]] [[fa:برنامه (رایانه)]] [[fr:Programme (informatique)]] [[ga:Ríomhchlár]] [[gd:Prògram (coimpiutair)]] [[ko:컴퓨터 프로그램]] [[hi:कम्प्यूटर प्रोग्राम]] [[hr:Računalni program]] [[io:Programo di ordinatro]] [[id:Program komputer]] [[is:Forrit]] [[it:Programma (informatica)]] [[he:תוכנית מחשב]] [[ka:კომპიუტერული პროგრამა]] [[kk:Компьютерлік бағдарлама]] [[lo:ໂປແກມ ຄອມພິວເຕີ]] [[la:Programma computatrale]] [[lv:Datorprogramma]] [[lb:Computerprogramm]] [[ms:Atur cara komputer]] [[nl:Computerprogramma]] [[ja:プログラム (コンピュータ)]] [[no:Dataprogram]] [[uz:Kompyuter dasturi]] [[pl:Program komputerowy]] [[pt:Programa de computador]] [[ro:Program (informatică)]] [[qu:Wakichi]] [[ru:Компьютерная программа]] [[sq:Programi kompjuterik]] [[simple:Computer program]] [[sk:Program (počítačový)]] [[sl:računalniški program]] [[sr:Рачунарски програм]] [[fi:Tietokoneohjelma]] [[sv:Datorprogram]] [[ta:செய்நிரல்]] [[th:โปรแกรมคอมพิวเตอร์]] [[bug:ᨄᨛᨑᨚᨁᨛᨑᨆ ᨀᨚᨇᨘᨈᨛᨑᨛ]] [[uk:Комп'ютерна програма]] [[ur:شمارندی برنامج]] [[wa:Programe éndjolike]] [[wo:Tëriinuw nosukaay]] [[yi:קאמפיוטער פראגראם]] [[zh:计算机程序]]</text> </page> <page> <id>7572</id> <title>Computer programming in the punched card era</title> <text>[[Image:FortranCardPROJ039.agr.jpg|thumb|right|300px|Punched card from a [[Fortran]] program.]] From the invention of computer [[programming language]]s up to the mid-1980s, many if not most computer programmers created, edited and stored their programs on [[punched card]]s. The practice was nearly universal with [[IBM]] computers in the era. A punched card is a flexible write-once medium that encodes, most commonly, 80 characters of data. Groups or "decks" of cards form programs and collections of data. Users could create cards using a desk-sized [[keypunch]] with a typewriter-like keyboard. A typing error generally necessitated repunching an entire card. A single character typo could be corrected by duplicating the card up to the error column, typing the correct character and then duplicating the rest of the card. In some companies programmers wrote information on special forms called coding sheets, taking care to distinguish the digit zero from the letter ''O,'' the digit one from the letter ''I,'' 8's from ''Bs,'' 2's from ''Zs,'' and so on. These forms were then converted to cards by keypunch operators and, in some cases, checked by verifiers. [[Image:PunchCardDecks.agr.jpg|thumb|left|A box of punched cards with several program decks.]] Many early programming languages, including [[Fortran]], [[Cobol]] and the various IBM [[assembler language]]s, used the first 72 columns of a card — a tradition that traces back to the [[IBM 711]] card reader used on the [[IBM 700/7000 series#Scientific Architecture (704/709/7090/7094)|IBM 704/709/7090/7094 series]] (especially the [[IBM 704]], the first mass-produced computer with floating point arithmetic hardware), which could only read [[Punched card#IBM 80 column punched card format|72 of the 80 columns]] in one pass. Columns 73-80 were ignored by the compiler and could be used for identification, such as adding a sequence number so that if the card deck was dropped it could be restored to its proper order using a [[card sorter]]. Drawing a diagonal stripe across the top of the card deck provided a similar check for proper order. Programs were backed up by duplicating the deck or writing it to magnetic tape. [[Image:FortranCodingForm.agr.jpg|thumb|right|A pad of Fortran coding forms.]] In many mainframe operations, known as '''closed shops''', programmers submitted the program decks, often followed by data cards to be read by the program, to a person working behind a counter in the computer room. Many computer installations used cards with the opposite corner cut (sometimes no corner cut) as "job separators", so that an operator could stack several job decks in the card reader at the same time and be able to quickly separate the decks manually when he removed them from the stacker. These cards (e.g., a [[Job Control Language|JCL]] "JOB" card to start a new job) were often prepunched in large quantities in advance.<ref>[http://www.columbia.edu/acis/history/cards.html Columbia University Computing History: IBM Cards]</ref> This was especially useful when the main computer did not read the cards directly, but instead read their images from [[magnetic tape]] that was prepared offline by smaller computers such as 