not necessary to have both interface and implementation sections. If a separate interface declaration file is needed, it is created by stripping the code out of a module and creating a "skeleton" of the module. This is typically done only if the object for a module is to be sent out without the source. Modules must occupy a single file, and modules reference other modules via a '''uses''' or '''joins''' statement. To allow this, a module must bear the same name as its file name. The '''uses''' statement indicates that the referenced module will have its global declarations merged with the referencing module, and any name conflicts that result will cause an error. The '''joins''' statement will cause the referenced module to be accessible via the referencing module, but does not merge the name spaces of the two modules. Instead, the referencing module must use a so-called "qualified identifier": module.identifier A '''program''' from ISO 7185 Pascal is directly analogous to a module, and is effectively a module without an exit section. Because all modules in the system are "daisy chained" such that each are executed in order, a program assumes "command" of the program simply because it does not exit its initialization until its full function is complete, unlike a module which does. In fact, it is possible to have multiple program sections, which would execute in sequence. A '''process''' module, like a '''program''' module, has only an initialization section, and runs its start, full function and completion in that section. However, it gets its own thread for execution aside from the main thread that runs '''program''' modules. As such, it can only call '''monitor''' and '''share''' modules. A '''monitor''' is a module that includes task locking on each call to an externally accessible '''procedure''' or '''function''', and implements communication between tasks by semaphores. A '''share''' module, because it has no global data at all, can be used by any other module in the system, and is used to place library code in. Because the module system directly implements multitasking/multithreading using the [[Monitor (synchronization)|Monitor]] concept, it solves the majority of multithreading access problems. Data for a module is bound to the code with [[mutex]]es or [[mutex|Mutually Exclusive Sections]]. Subtasks/subthreads are started transparently with the process module. Multiple subtasks/subthreads can access monitors or share modules. A share module is a module without data, which does not need the locking mechanisms of a monitor. * [[Dynamic array]]s. In IP Pascal, dynamics are considered "containers" for static arrays. The result is that IP Pascal is perhaps the only Pascal where dynamic arrays are fully compatible with the ISO 7185 static arrays from the original language. A static array can be passed into a dynamic array parameter to a procedure or function, or created with new. '''program''' test(output);<br/> '''type''' string = '''packed''' '''array''' '''of''' char;<br/> '''var''' s: string;<br/> '''procedure''' wrtstr('''view''' s: string);<br/> '''var''' i: integer;<br/> '''begin'''<br/> '''for''' i := 1 '''to''' max(s) '''do''' write(s[i])<br/> '''end''';<br/> '''begin'''<br/> new(s, 12); s := 'Hello, world'; wrtstr(s^); wrtstr('That's all folks')<br/> '''end'''. Such "container" arrays can be any number of dimensions. * Constant expressions. A constant declaration can contain expressions of other constants. '''const''' b = a+10; * Radix for numbers. $ff, &76, %011000 * Alphanumeric goto labels. '''label''' exit; '''goto''' exit; * '_' in all labels. '''var''' my_number: integer; * '_' in numbers. a := 1234_5678; The '_' (break) character can be included anywhere in a number except for the first digit. It is ignored, and serves only to separate digits in the number. * Special character sequences that can be embedded in constant strings: '''const''' str = 'the rain in Spain\cr\lf'; Using standard [[ISO 8859-1]] memnemonics. * Duplication of forwarded headers. '''procedure''' x(i: integer); '''forward''';<br/> ...<br/> '''procedure''' x(i: integer);<br/> '''begin'''<br/> ...<br/> '''end'''; This makes it easier to declare a forward by cut-and-paste, and keeps the parameters of the procedure or function in the actual header where you can see them. * 'halt' procedure. '''procedure''' error('''view''' s: string);<br/> '''begin'''<br/> writeln('*** Error: ', s:0); halt { terminate program }<br/> '''end'''; * Special predefined header files. '''program''' myprog(input, output, list);<br/> '''begin'''<br/> writeln(list, 'Start of listing:'); ... '''program''' echo(output, command);<br/> '''var''' c: char;<br/> '''begin'''<br/> '''while''' '''not''' eoln(command) '''do''' '''begin'''<br/> read(command, c); write(c)<br/> '''end'''; writeln<br/> '''end'''. '''program''' newprog(input, output, error);<br/> '''begin'''<br/> ... writeln(error, 'Bad parameter'); halt ... 'command' is a file that connects to the command line, so that it can be read using normal file read operations. * Automatic connection of program header files to command line names. '''program''' copy(source, destination);<br/> '''var''' source, destination: text; c: char;<br/> '''begin'''<br/> reset(source); rewrite(destination); '''while''' '''not''' eof(source) '''do''' '''begin'''<br/> '''while''' '''not''' eoln(source) '''do''' '''begin'''<br/> read(source, c); write(destination, c)<br/> '''end'''; readln(source); writeln(destination)<br/> '''end'''<br/> '''end'''. 'source' and 'destination' files are automatically connected to the parameters on the command line for the program. * File naming and handling operations. '''program''' extfile(output);<br/> '''var''' f: file of integer;<br/> '''begin'''<br/> assign(f, 'myfile'); { set name of external file } update(f); { keep existing file, and set to write mode } position(f, length(f)); { position to end of file to append to it } writeln('The end of the file is: ', location(f)); { tell user location of new element } write(f, 54321); { write new last element } close(f) { close the file }<br/> '''end'''. * 'fixed' declarations which declare structured constant types. '''fixed''' table: '''array''' [1..5] '''of''' '''record''' a: integer; '''packed''' '''array''' [1..10] '''of''' char '''end =''' '''array'''<br/> '''record''' 1, 'data1 ' '''end''', '''record''' 2, 'data2 ' '''end''', '''record''' 3, 'data3 ' '''end''', '''record''' 4, 'data4 ' '''end''', '''record''' 5, 'data5 ' '''end'''<br/> '''end'''; * Boolean bit operators. '''program''' test;<br/> '''var''' a, b: integer;<br/> '''begin'''<br/> a := a '''and''' b; b := b '''or''' $a5; a := '''not''' b; b := a '''xor''' b<br/> '''end'''. * Extended range variables. '''program''' test;<br/> '''var''' a: linteger; b: cardinal; c: lcardinal; d: 1..maxint*2; ... Extended range specifications give rules for scalars that lie outside the range of -maxint..maxint. It is implementation specific as to just how large a number is possible, but Pascaline defines 