[[Metaprogramming]], [[Reflection (computer science)|reflection]] or access to the [[abstract syntax tree]] * Increased emphasis on distribution and mobility. * Integration with databases, including [[XML]] and [[relational database]]s. * Support for [[Unicode]] so that [[source code]] (program text) is not restricted to those characters contained in the [[ASCII]] character set; allowing, for example, use of non-[[Latin]]-based scripts or extended punctuation. * XML for graphical interface ([[XUL]], [[Extensible Application Markup Language|XAML]]). Some important languages developed during this period include: * 2001 - [[C Sharp (programming language)|C#]] * 2001 - [[Visual Basic .NET]] * 2002 - [[F Sharp (programming language)|F#]] * 2003 - [[Scala (programming language)|Scala]] * 2003 - [[Factor (programming language)|Factor]] * 2006 - [[Windows Power Shell]] * 2007 - [[Clojure]] * 2007 - [[Groovy (programming language)|Groovy]] * 2009 - [[Go (programming language)|Go]] == Prominent people in the history of programming languages == * [[John Backus]], inventor of [[Fortran]]. * [[Alan Cooper]], developer of [[Visual Basic]]. * [[Edsger W. Dijkstra]], developed the framework for structured programming. * [[James Gosling]], developer of [[Oak (programming language)|Oak]], the precursor of [[Java (programming language)|Java]]. * [[Anders Hejlsberg]], developer of [[Turbo Pascal]], [[Embarcadero Delphi|Delphi]] and [[C Sharp (programming language)|C#]]. * [[Grace Hopper]], developer of [[Flow-Matic]], influencing [[COBOL]]. * [[Kenneth E. Iverson]], developer of [[APL (programming language)|APL]], and co-developer of [[J (programming language)|J]] along with [[Roger Hui]]. * [[Bill Joy]], inventor of [[vi]], early author of [[Berkeley Software Distribution|BSD]] Unix, and originator of [[SunOS]], which became [[Solaris (operating system)|Solaris]]. * [[Alan Kay]], pioneering work on object-oriented programming, and originator of [[Smalltalk]]. * [[Brian Kernighan]], co-author of the first book on the [[C (programming language)|C]] programming language with [[Dennis Ritchie]], coauthor of the [[AWK]] and [[AMPL (programming language)|AMPL]] programming languages. * [[John McCarthy (computer scientist)|John McCarthy]], inventor of [[Lisp (programming language)|LISP]]. * [[John von Neumann]], originator of the [[operating system]] concept. * [[Dennis Ritchie]], inventor of [[C (programming language)]]. Unix Operating System , Plan 9 Operating System. * [[Bjarne Stroustrup]], developer of [[C++]]. * [[Ken Thompson]], inventor of [[B (programming language)|B]] , Go Programming Language , Inferno Programming Language. * [[Niklaus Wirth]], inventor of [[Pascal (programming language)|Pascal]], [[Modula]] and [[Oberon (programming language)|Oberon]]. * [[Larry Wall]], creator of [[Perl]] and [[Perl 6]] * [[Guido van Rossum]], creator of [[Python (programming language)|Python]] * [[Yukihiro Matsumoto]], creator of [[Ruby (programming language)|Ruby]] == See also == * [[Association for Computing Machinery|ACM]] [[History of Programming Languages Conference]] * [[History of compiler writing]] * [[History of computing hardware]] * [[Programming language]] * [[Timeline of computing]] * [[Timeline of programming languages]] * [[List of programming languages]] == References== <references/> == Further reading == * [[Saul Rosen|Rosen, Saul]], (editor), ''Programming Systems and Languages'', McGraw-Hill, 1967 * [[Jean E. Sammet|Sammet, Jean E.]], ''Programming Languages: History and Fundamentals'', Prentice-Hall, 1969 * Sammet, Jean E., "Programming Languages: History and Future", ''Communications of the ACM'', of Volume 15, Number 7, July 1972 == External links == * [http://hopl.murdoch.edu.au The History of Programming Languages] by Diarmuid Pigott * [http://www.scriptol.com/programming/history.php History and evolution of programming languages]. * [http://www.levenez.com/lang/history.html Graph of programming language history] * [http://hhh.gavilan.edu/dvantassel/history/history.html Topics in history and comparing programming languages] by Dennie Van Tassel. {{DEFAULTSORT:History Of Programming Languages}} [[Category:Lists of programming languages]] [[Category:History of software|Programming languages]] [[bn:প্রোগ্রামিং ভাষার ইতিহাস]] [[ca:Història dels llenguatges de programació]] [[de:Geschichte der Programmiersprachen]] [[el:Ιστορία γλωσσών προγραμματισμού]] [[es:Anexo:Historia de los lenguajes de programación]] [[fr:Histoire des langages de programmation]] [[hi:कम्प्यूटर प्रोग्रामन की भाषाओं का इतिहास]] [[is:Saga forritunarmála]] [[ja:プログラミング言語年表]] [[pt:História das Linguagens de Programação]] [[ru:История языков программирования]] [[ta:நிரல் மொழிகள் வரலாறு]] [[zh:程式語言歷史]]</text> </page> <page> <id>16826</id> <title>History of wireless mesh networking</title> <text>{{multiple issues|cleanup =December 2008|original research =October 2008|unencyclopedic =May 2010}} [[Image:Self-form-self-heal.gif‎|thumb|Fig 1:Self-Healing Mesh]] [[Image:WIKIthreegenerationslg.gif‎|thumb|Fig 2:Three generations of Mesh]] [[Image:Single-radio-mesh.gif‎|thumb|Fig 3: Single Radio Mesh Cycle]] [[Image:Third-Generation-mesh-hop.gif‎|thumb|Fig 4:Third Generation Cycle]] The core advantage of wireless [[mesh network]]s is their inherent ability to form a network on power up. Watch what happens in Fig 1, when the mesh nodes power up (green LED on box turns on). The nodes hear each other's broadcast and form a network. Also watch what happens when a node fails and how the nodes discover an alternate routing path. This healing is fully automatic. Over the years, wireless mesh networking has seen three unique deployments based on radio technology, each incorporating iterative improvements allowing for greater [[scalability]] and higher network performance - both [[throughput]] and [[latency (engineering)|latency]].{{Citation needed|date=May 2010}} This early stage of pre IEEE standard technological development is known as first Generation of Wireless Mesh.{{Citation needed|date=May 2010}} The following deployments are briefly described of various configurations of first generation Wireless Mesh Networking: Dr. Winrich Hoseit of [[Cologne, Germany]] first described the "DIRC technology" (digital inter relay communication) with PCT patent No. DE 197 37 897 and DE 197 33 586.{{Citation needed|date=May 2010}} Because transmitted radio waves always interfere, the ratio of carrier to interference first had to be worked out. Dr.Hoseit also discovered how to prevent latency by transmitting single symbols rather than digital packages. (symbol stream switching). Each node collaborates with its neighbor-nodes via a control channel (CCH) to choose the frequency, time and energy with which to transmit each symbol. Only the final destination "understands" the application with the lowest possible latency.{{Citation needed|date=May 2010}} ==Configurations== ===1-Radio Mesh=== As shown in Figure 2, this configuration uses one [[radio]] channel both to service clients and to provide the mesh routing path back to a wired or satellite link ([[Backhaul (telecommunications)|backhaul]]). The single mesh radio, provides both services - client access and backhaul. Comparative performance analysis indicates this architecture provides the worst performance of all configurations, because backhaul and service compete for bandwidth. Also all single radio mesh architectures suffer from the send-receive-wait cycle shown in Figure 3. Since there is only radio, the mesh node has to listen, then send, then listen again. This intermittent stop-and-go behavior adversely affects network performance especially if the destination is far away and the traffic has to be re-transmitted ("hop") across many intermediate nodes first. ===Dual-Radio with 1-Radio backhaul mesh=== This configuration can also be referred to as a "1+1" network, since each node contains two radios, one to provide service to the 