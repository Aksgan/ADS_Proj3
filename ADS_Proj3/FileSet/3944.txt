transferred or after 1 hour has passed, whichever is sooner. * The ''user authentication'' layer (RFC 4252). This layer handles client authentication and provides a number of authentication methods. Authentication is ''client-driven'': when one is prompted for a password, it may be the SSH client prompting, not the server. The server merely responds to client's authentication requests. Widely used user authentication methods include the following: ** ''password'': a method for straightforward password authentication, including a facility allowing a password to be changed. This method is not implemented by all programs. ** ''publickey'': a method for [[Public-key cryptography|public key-based authentication]], usually supporting at least [[Digital Signature Algorithm|DSA]] or [[RSA]] keypairs, with other implementations also supporting [[X.509]] certificates. ** ''keyboard-interactive'' (RFC 4256): a versatile method where the server sends one or more prompts to enter information and the client displays them and sends back responses keyed-in by the user. Used to provide [[one-time password]] authentication such as [[S/Key]] or [[SecurID]]. Used by some OpenSSH configurations when [[Pluggable authentication modules|PAM]] is the underlying host authentication provider to effectively provide password authentication, sometimes leading to inability to log in with a client that supports just the plain ''password'' authentication method. ** [[Generic Security Services Application Program Interface|GSSAPI]] authentication methods which provide an extensible scheme to perform SSH authentication using external mechanisms such as [[Kerberos (protocol)|Kerberos 5]] or [[NTLM]], providing [[single sign on]] capability to SSH sessions. These methods are usually implemented by commercial SSH implementations for use in organizations, though OpenSSH does have a working GSSAPI implementation. * The ''connection'' layer (RFC 4254). This layer defines the concept of channels, channel requests and global requests using which SSH services are provided. A single SSH connection can host multiple channels simultaneously, each transferring data in both directions. Channel requests are used to relay out-of-band channel specific data, such as the changed size of a terminal window or the exit code of a server-side process. The SSH client requests a server-side port to be forwarded using a global request. Standard channel types include: ** ''shell'' for terminal shells, SFTP and exec requests (including SCP transfers) ** ''direct-tcpip'' for client-to-server forwarded connections ** ''forwarded-tcpip'' for server-to-client forwarded connections * The [[SSHFP]] DNS record (RFC 4255) provides the public host key fingerprints in order to aid in verifying the authenticity of the host. This open architecture provides considerable flexibility, allowing SSH to be used for a variety of purposes beyond secure shell. The functionality of the transport layer alone is comparable to [[Transport Layer Security]] (TLS); the user authentication layer is highly extensible with custom authentication methods; and the connection layer provides the ability to multiplex many secondary sessions into a single SSH connection, a feature comparable to [[BEEP]] and not available in TLS. === Security issues === {{Unreferenced section|date=June 2010}} Since SSH-1 has inherent design flaws which make it vulnerable (e.g., [[man-in-the-middle attack]]s), it is now generally considered obsolete and should be avoided by explicitly disabling fallback to SSH-1. While most modern servers and clients support SSH-2, some organizations still use software with no support for SSH-2, and thus SSH-1 cannot always be avoided. In all versions of SSH, it is important to verify unknown [[public key]]s before accepting them as valid. Accepting an attacker's public key as a valid public key has the effect of disclosing the transmitted password and allowing man-in-the-middle attacks. ==See also== {{Portal|Cryptography}} * [[Ident]] * [[SSH file transfer protocol]] (SFTP) - a file transfer protocol using SSH * [[Web-based SSH]] – Access to SSH servers through standard web browsers ===Software=== * [[Autossh]] - a tool to maintain a constant SSH connection, restarting it as necessary * [[Comparison of SSH clients]] * [[Comparison of SSH servers]] * [[Corkscrew (program)|Corkscrew]] – a tool that enables a user to run SSH over [[HTTPS]] [[proxy server]]s * [[NX technology]] uses SSH to tunnel secure access to remote machines * [[Virtual Network Computing|VNC]] can be tunneled through SSH to securely access a remote machine that is behind a firewall ==References== {{Reflist|2}} ==Further reading== * [[Daniel J. Barrett]], Richard E. Silverman, and Robert G. Byrnes &ndash; ''SSH: The Secure Shell (The Definitive Guide)'', O'Reilly 2005 (2<sup>nd</sup> edition). ISBN 0-596-00895-3 * Michael Stahnke &ndash; ''Pro OpenSSH'', Apress 2005 ISBN 1-59059-476-2 * {{cite news|url=http://groups.google.com/group/comp.security.unix/msg/67079d812a19f499?dmode=source&hl=en|title=Announcement: Ssh (Secure Shell) Remote Login Program|publisher=comp.security.unix|date=12 July 1995}} Original announcement of Ssh by Tatu Ylönen * Himanshu Dwivedi; ''Implementing SSH'', Wiley 2003. ISBN 978-0-471-45880-7 * {{FOLDOC}} ==External links== {{wikibooks|Internet Technologies/SSH}} * [http://www.ietf.org/html.charters/OLD/secsh-charter.html Old homepage for IETF 'secsh' working group, which has concluded] (for SSH-2) * [http://www.snailbook.com/protocols.html SSH Protocols] {{URI scheme}} [[Category:Cryptographic protocols]] [[Category:Cryptographic software]] [[Category:Internet protocols]] [[Category:Internet standards]] [[Category:Remote administration software]] [[Category:Unix network-related software]] [[af:Secure Shell]] [[ar:قشرة آمنة]] [[bs:Secure Shell]] [[bg:SSH]] [[ca:Secure Shell]] [[cs:Secure Shell]] [[da:SSH]] [[de:Secure Shell]] [[et:Turvakest]] [[es:Secure Shell]] [[eo:SSH]] [[eu:Secure Shell]] [[fr:Secure Shell]] [[gl:Secure shell]] [[ko:시큐어 셸]] [[hr:Secure Shell]] [[id:SSH]] [[it:Secure shell]] [[he:Secure Shell]] [[kk:SSH]] [[lt:SSH]] [[hu:Secure Shell]] [[mk:Secure Shell]] [[nl:Secure Shell]] [[ja:Secure Shell]] [[no:Secure Shell]] [[pl:SSH]] [[pt:SSH]] [[ro:SSH]] [[ru:SSH]] [[simple:Secure Shell]] [[sk:Secure shell]] [[sl:Secure shell]] [[sr:SSH]] [[fi:SSH]] [[sv:SSH]] [[sq:Secure Shell]] [[th:Secure Shell]] [[tr:SSH]] [[uk:SSH]] [[vi:SSH]] [[yo:Secure Shell]] [[zh:SSH]]</text> </page> <page> <id>33608</id> <title>Secure coding</title> <text>{{Lead missing|date=September 2009}} {{Unreferenced|date=May 2008}} {{Computer security}} History has proven that [[software]] defects, bugs and logic flaws are consistently the primary cause of commonly exploited software vulnerabilities. Through the analysis of thousands of reported vulnerabilities, security professionals have discovered that most vulnerabilities stem from a relatively small number of common software programming errors. By identifying the insecure coding practices that lead to these errors and educating developers on secure alternatives, organizations can take proactive steps to help significantly reduce or eliminate vulnerabilities in software before deployment. == See also == * [[Defensive programming]] * [[Secure input and output handling]] * [[Security bug]] ==References== {{Reflist}} {{No footnotes|date=September 2010}} *{{Cite book| last = Taylor | first = Art | coauthors = Brian Buege, Randy Layman | title = Hacking Exposed J2EE & Java | year = 2006 | publisher = McGraw-Hill Primis | pages = 426 | isbn = 0390599751 | page = }} ==External links== *[http://www.safercode.com/blog/ Safer Code - Secure 