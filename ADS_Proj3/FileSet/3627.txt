commands. ==Syntax== ===pushd=== pushd [path | ..] Arguments: *<code>path</code> This optional [[command-line argument]] specifies the directory to make the current directory. If <code>path</code> is omitted, the path at the top of the directory stack is used. ===popd=== popd ==Examples== Unix: <source lang="bash"> [/usr/ports]$ pushd /etc /etc /usr/ports [/etc]$ popd /usr/ports [/usr/ports]$ </source> MS DOS: <source lang="dos"> C:\Users\root>pushd . C:\>popd C:\Users\root> </source> ==See also== *[[List of DOS commands]] *[[List of Unix programs]] ==References== *[http://technet.microsoft.com/en-us/library/bb490978.aspx Microsoft TechNet Pushd article] *[http://technet.microsoft.com/en-us/library/bb490969.aspx Microsoft TechNet Popd article] *[http://ftp.gnu.org/old-gnu/Manuals/bash-2.05a/html_node/bashref_73.html Bash Reference Manual: Directory Stack Builtins] {{reflist}} {{Unix commands}} {{Windows commands}} [[Category:DOS on IBM PC compatibles]] [[Category:Microcomputer software]] [[Category:Windows administration]] [[Category:Computing commands]] {{unix-stub}} {{windows-stub}}</text> </page> <page> <id>30578</id> <title>Pushdown automaton</title> <text>In [[automata theory]], a '''pushdown automaton''' (PDA) is a [[finite state machine|finite automaton]] that can make use of a [[Stack (data structure)|stack]] containing data. == Operation == [[Image:Pushdown-overview.svg|thumb|340px|a diagram of the pushdown automaton]] Pushdown automata differ from [[finite state machine]]s in two ways: # They can use the top of the stack to decide which transition to take. # They can manipulate the stack as part of performing a transition. Pushdown automata choose a transition by indexing a table by input signal, current state, and the symbol at the top of the stack. This means that those three parameters completely determine the transition path that is chosen. Finite state machines just look at the input signal and the current state: they have no stack to work with. Pushdown automata add the stack as a parameter for choice. Pushdown automata can also manipulate the stack, as part of performing a transition. Finite state machines choose a new state, the result of following the transition. The manipulation can be to push a particular symbol to the top of the stack, or to pop off the top of the stack. The automaton can alternatively ignore the stack, and leave it as it is. The choice of manipulation (or no manipulation) is determined by the transition table. Put together: Given an input signal, current state, and stack symbol, the automaton can follow a transition to another state, and optionally manipulate (push or pop) the stack. In general pushdown automata may have several computations on a given input string, some of which may be halting in accepting configurations while others are not. Thus we have a model which is technically known as a "nondeterministic pushdown automaton" (NPDA). Nondeterminism means that there may be more than just one transition available to follow, given an input signal, state, and stack symbol. If in every situation only one transition is available as continuation of the computation, then the result is a [[deterministic pushdown automaton]] (DPDA), a strictly weaker device. If we allow a finite automaton access to two stacks instead of just one, we obtain a more powerful device, equivalent in power to a [[Turing machine]]. A [[linear bounded automaton]] is a device which is more powerful than a pushdown automaton but less so than a Turing machine. Pushdown automata are equivalent to [[context-free grammars]]: for every context-free grammar, there exists a pushdown automaton such that the language generated by the grammar is identical with the language generated by the automaton, which is easy to prove. The reverse is true, though harder to prove: for every pushdown automaton there exists a context-free grammar such that the language generated by the automaton is identical with the language generated by the grammar. == Formal Definition == A PDA is formally defined as a 7-tuple: <math>M=(Q,\ \Sigma,\ \Gamma,\ \delta, \ q_{0},\ Z, \ F)</math> where *<math>\, Q </math> is a finite set of <em>states</em> *<math>\,\Sigma</math> is a finite set which is called the <em>input alphabet</em> *<math>\,\Gamma</math> is a finite set which is called the <em>stack alphabet</em> *<math>\,\delta</math> is a mapping of <math>Q \times (\Sigma \cup\{\varepsilon\}) \times \Gamma </math> into <math> Q \times \Gamma^* </math>, the <em>transition relation</em>, where <math>\Gamma^{*}</math> means "a finite (maybe empty) list of element of <math>\Gamma</math>" and <math>\varepsilon</math> denotes the [[empty string]]. *<math>\,q_{0}\in\, Q </math> is the <em>start state</em> *<math>\ Z\in\,\Gamma</math> is the <em>initial stack symbol</em> *<math>F\subseteq Q</math> is the set of <em>accepting states</em> An element <math>(p,a,A,q,\alpha) \in \delta</math> is a transition of <math>M</math>. It has the intended meaning that <math>M</math>, in state <math>p \in Q</math>, with <math>a \in \Sigma \cup\{\varepsilon\}</math> on the input and with <math>A \in \Gamma</math> as topmost stack symbol, may read <math>a</math>, change the state to <math>q</math>, pop <math>A</math>, replacing it by pushing <math>\alpha \in \Gamma^*</math>. The letter <math>\epsilon</math> (epsilon) denotes the [[empty string]] and the <math>(\Sigma \cup\{\varepsilon\})</math> component of the transition relation is used to formalize that the PDA can either read a letter from the input, or proceed leaving the input untouched. In many texts the transition relation is replaced by an (equivalent) formalization, where * <math>\,\delta</math> is the <em>transition function</em>, mapping <math>Q \times (\Sigma \cup\{\varepsilon\}) \times \Gamma</math> into finite subsets of <math>Q \times \Gamma^*</math>. Here <math>\delta(p,a,A)</math> contains all possible actions in state <math>p</math> with <math>A</math> on the stack, while reading <math>a</math> on the input. One writes <math>(q,\alpha) \in \delta(p,a,A)</math> for the function precisely when <math>(p,a,A,q,\alpha) \in\delta</math> for the relation. Note that <em>finite</em> in this definition is essential. ''' ''Computations'' ''' [[Image:Pushdown-step.svg|thumb|200px|a step of the pushdown automaton]] In order to formalize the semantics of the pushdown automaton a description of the current situation is introduced. Any 3-tuple <math>(p,w,\beta) \in Q \times \Sigma^* \times \Gamma^*</math> is called an instantaneous description (ID) of <math>M</math>, which includes the current state, the part of the input tape that has not been read, and the contents of the stack (topmost symbol written first). The transition relation <math>\delta</math> defines the step-relation <math>\vdash_{M}</math> of <math>M</math> on instantaneous descriptions. For instruction <math>(p,a,A,q,\alpha) \in \delta</math> there exists a step <math>(p,ax,A\gamma) \vdash_{M} (q,x,\alpha\gamma)</math>, for every <math>x\in\Sigma^*</math> and every <math>\gamma\in \Gamma^*</math>. In general pushdown automata are nondeterministic meaning that in a given instantaneous description <math>(p,w,\beta)</math> there may be several possible steps. Any of these steps can be chosen in a computation. With the above definition in each step always a single symbol (top of the stack) is popped, replacing it with 