the decimal point is not included on whole numbers. |- | <code>x</code>, <code>X</code> | Print an <code>unsigned int</code> as a [[hexadecimal]] number. 'x' uses lower-case letters and 'X' uses upper-case. |- | <code>o</code> | Print an <code>unsigned int</code> in octal. |- | <code>s</code> | Print a [[character string]]. |- | <code>c</code> | Print a <code>char</code> (character). |- | <code>p</code> | Print a <code>void *</code> (pointer to void) in an implementation-defined format. |- | <code>n</code> | Print nothing, but write number of characters successfully written so far into an integer pointer parameter. |- | <code>%</code> | Print a literal '%' character (this type doesn't accept any flags, width, precision or length). |} If the [[syntax]] of a conversion specification is invalid, behavior remains undefined, and in fact can cause program termination. If there are too few [[function argument]]s provided to supply values for all the conversion specifications in the template string, or if the arguments are not of the correct types, the results are also undefined. Excess arguments are ignored. In a number of cases, the undefined behavior has led to "[[Format string attack]]" security [[Exploit (computer science)|vulnerabilities]]. Note that some compilers, like [[GNU Compiler Collection|the GNU Compiler Collection]], will statically check the format strings of printf-like functions and warn about problems (when using the flags <code>-Wall</code> or <code>-Wformat</code>). GCC will also warn about user-defined printf-style functions if the non-standard "format" __attribute__ is applied to the function. ==Risks of using field width versus explicit delimiters in tabular output== Using only field widths to provide for tabulation, as with a format like "<code>%8d%8d%8d</code>" for three integers in three 8-character columns, will not guarantee that field separation will be retained if large numbers occur in the data. Loss of field separation can easily lead to corrupt output. In systems which encourage the use of programs as building blocks in scripts, such corrupt data can often be forwarded into and corrupt further processing, regardless of whether the original programmer expected the output would only be read by human eyes. Such problems can be eliminated by including explicit delimiters, even spaces, in all tabular output formats. Simply changing the dangerous example from before to "<code> %7d %7d %7d</code>" addresses this, formatting identically until numbers become larger, but then explicitly preventing them from becoming merged on output due to the explicitly-included spaces. Similar strategies apply to string data. ==Custom format placeholders== There are a few implementations of <code>printf</code>-like functions that allow extensions to the [[escape character|escape-character]]-based [[Domain-specific programming language|mini-language]], thus allowing the programmer to have a specific formatting function for non-builtin types. One of the most well-known is the (now deprecated) [[glibc|glibc's]] <code>[http://www.gnu.org/software/libc/manual/html_node/Customizing-Printf.html register_printf_function()]</code>. However, it is rarely used due to the fact that it conflicts with static format string checking. Another is [http://www.and.org/vstr/#cust-fmt Vstr custom formatters], which allows adding multi-character format names, and can work with static format checkers. Some applications (like the [[Apache HTTP Server]]) include their own <code>printf</code>-like function, and embed extensions into it. However these all tend to have the same problems that <code>register_printf_function()</code> has. Most non-C languages that have a <code>printf</code>-like function work around the lack of this feature by just using the "<code>%s</code>" format and converting the object to a string representation. [[C++]] offers a notable exception, in that it has a <code>printf</code> function inherited from its C history, but also has a completely different mechanism that is preferred. ==Programming languages with printf== *[[AMPL]] *[[awk]] *[[Bourne shell]] (sh) and derivatives such as [[Korn shell]] (ksh), [[Bourne again shell]] (bash), or [[Z shell]] (zsh) *[[C (programming language)|C]] **[[C++]] (also provides [[operator overloading|overloaded]] shift operators and manipulators as an alternative for formatted output - see [[iostream]] and [[iomanip]]) **[[Objective-C]] *[[Clojure]] *[[D (programming language)|D]] *[[F Sharp (programming language)|F#]] *[[GNU Linear Programming Kit|GNU MathProg]] *[[GNU Octave]] *[[Go (programming language)|Go]] *[[Haskell programming language|Haskell]] *[[Java (programming language)|Java]] (since version 1.5) *[[Maple (software)|Maple]] *[[Mathematica]] *[[MATLAB]] *[[Mythryl]] *[[Objective Caml]] *[[PHP]] *[[Python (programming language)|Python]] (using the % operator) *[[Perl]] *[[R (programming language)|R]] *[[Ruby (programming language)|Ruby]] *[[Vala (programming language)|Vala]] (via <code>print()</code> and <code>FileStream.printf()</code>) ==See also== *<code>[[scanf]]</code> *[[C standard library]] *[[Format string attack]] *<code>[[iostream]]</code> ==Notes== <references/> ==External links== *[http://www.pixelbeat.org/programming/gcc/format_specs.html gcc printf format specifications quick reference] *{{man|sh|printf|SUS|print formatted output}} *The [http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax <code>Formatter</code> specification] in Java 1.5 *[http://wiki.bash-hackers.org/commands/builtin/printf GNU Bash <code>printf(1)</code> builtin] *[http://www.and.org/vstr/printf_comparison C printf comparison page] *{{man|3|printf|OpenBSD|formatted output conversion}} *[http://msdn.microsoft.com/en-us/library/tcxf1dw6(VS.71).aspx Size Prefixes for <code>printf</code> and <code>wprintf</code> Format-Type Specifiers] *[http://www.thelinuxblog.com/linux-man-pages/1/printf GNU Bash printf Man Page] {{Unix commands}} [[Category:Articles with example C code]] [[Category:Stdio.h]] [[Category:Unix software]] {{Link GA|ru}} [[es:Printf]] [[fr:Printf]] [[it:Printf]] [[ja:Printf]] [[pl:Printf]] [[pt:Printf]] [[ro:Printf]] [[ru:Printf]]</text> </page> <page> <id>29994</id> <title>Private Network-to-Network Interface</title> <text>The '''Private Network-to-Network Interface''' (PNNI) is a link-state [[routing protocol]] used in [[Asynchronous Transfer Mode|ATM]] networks. [[Category:ITU-T recommendations]] [[Category:Networking standards]] [[Category:Routing protocols]]</text> </page> <page> <id>29997</id> <title>Private class data pattern</title> <text>{{notability|date=October 2009}} {{Lead too short|date=May 2009}} '''Private class data''' is a [[Design pattern (computer science)|design pattern]] in [[computer programming]] used to encapsulate class attributes and their manipulation. ==Standard documentation== {{Cleanup-rewrite|date=May 2009}} The following documentation categories for the ''private class data'' design pattern follows the design pattern documentation style precedent set by the [[Gang of Four (software)|Gang of Four]]. ===Name and classification=== ; Pattern Name : This pattern is known as the ''private class data'' design pattern. ; Pattern Classification : This pattern is a [[structural pattern]]. ===Intent=== The ''private class data'' design pattern seeks to reduce exposure of attributes by limiting their visibility. It reduces the number of class attributes by encapsulating them in single ''Data'' object. It allows the class designer to remove write privilege of attributes that are intended to be set only during construction, even from methods of the target class. ===Also known as=== PIMPL (Private IMPLementation) or [[Opaque pointer]] ===Motivation=== A class may expose its attributes (class variables) to manipulation when manipulation is no longer desirable, e.g. after construction. Using the private class data design pattern prevents that undesirable manipulation. A class may have one-time mutable attributes that cannot be declared ''final''. Using this design pattern allows one-time setting of those class attributes. The motivation for this design pattern comes from the design goal of protecting class state by 