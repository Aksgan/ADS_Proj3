| publisher = Osborne/McGraw-Hill | location = Berkeley | year = 2000 | isbn = 0072120487 }} page 65.</ref> ===Need for comments=== Technical commentators have documented varying viewpoints on whether and when comments are appropriate in source code.<ref name="BadComment000" /> <ref name="BadComments001">{{cite web | title = Worst Practice - Bad Comments | url = http://www.sqlservercentral.com/columnists/awarren/worstpracticebadcomments.asp | accessdate = 2007-07-24 }}</ref> Some commentators assert that source code should be written with few comments, on the basis that the source code should be self-explanatory.<ref name="BadComment000" /> Others suggest code should be extensively commented (it is not uncommon for over 50% of the non-[[whitespace (computer science)|whitespace]] characters in source code to be contained within comments).<ref name="Morelli000">{{cite book | title = Java, Java, Java: object-oriented problem solving | first = Ralph | last = Morelli | publisher = Prentice Hall College | year = 2006 | isbn = 0131474340 }}</ref><ref name="Javadoc000">{{cite web | title = How to Write Doc Comments for the Javadoc Tool | url = http://java.sun.com/j2se/javadoc/writingdoccomments/ | accessdate = 2007-07-24 }} Javadoc guidelines specify that comments are crucial to the platform. Further, the appropriate level of detail is fairly well-defined: "We spend time and effort focused on specifying boundary conditions, argument ranges and corner cases rather than defining common programming terms, writing conceptual overviews, and including examples for developers."</ref> In between these views is the assertion that comments are neither beneficial nor harmful by themselves, and what matters is that they are correct and kept in sync with the source code, and omitted if they are superfluous, excessive, difficult to maintain or otherwise unhelpful.<ref name="techniques001">{{cite book | title = Techniques of Program Structure and Design | first = Edward | last = Your | publisher = University of Michigan | year = 2007 | id = 013901702X }}Non-existent comments can make it difficult to comprehend code, but comments may be detrimental if they are obsolete, redundant, incorrect or otherwise make it more difficult to comprehend the intended purpose for the source code.</ref><ref name="CmmtPhilosophy">{{cite book | last = Dewhurst | first = Stephen C | title = C++ Gotchas: Avoiding Common Problems in Coding and Design | publisher = Addison-Wesley Professional | year = 2002 | isbn = 0321125185 }}</ref> === Level of detail === Depending on the intended audience of the code and other considerations, the level of detail and description may vary considerably. For example, the following Java comment would be suitable in an introductory text designed to teach beginning programming: <source lang="java"> String s = "Wikipedia"; /* Assigns the value "Wikipedia" to the variable s. */ </source> This level of detail, however, would not be appropriate in the context of production code, or other situations involving experienced developers. Such rudimentary descriptions are inconsistent with the guideline: "Good comments ... clarify intent."<ref name="GoodComment000" /> Further, for professional coding environments, the level of detail is ordinarily well-defined to meet a specific performance requirement defined by business operations.<ref name="Javadoc000" /> ===Offensive comments=== Sometimes comments in source code are used as a way to relieve stress or to speak unfavorably about development tools, competitors, employers, working conditions, or even the quality of the code itself. Some commentators deem this highly inappropriate and recommend against including potentially offensive remarks in comments, especially if there is any possibility that the source code may later be viewed by anyone besides the original developer responsible for it.<ref name="InsultComments">{{cite book | last = Doar | first = Matthew B. | title = Practical Development Environments | publisher = O'Reilly | year = 2005 | isbn = 0596007965 }}</ref> The occurrence of this phenomenon can be easily seen from online resources that track [[profanity]] in source code.<ref name="SwearWords">(see e.g., [http://www.vidarholen.net/contents/wordcount/ Linux Swear Count], [http://www.google.com/codesearch?hl=en&lr=&q=fucking Google Code Search]).</ref> === Comments in web templates === Web development presents a special security challenge related to comments, because it is not uncommon for HTML comments to be viewable in plain text by any user of the application. Sections of code that are "commented out" in HTML templates may therefore present a security [[vulnerability (computing)|vulnerability]].<ref name="InsecureComments">{{cite book | last = Andress | first = Mandy | title = Surviving Security: How to Integrate People, Process, and Technology | publisher = CRC Press | year = 2003 | isbn = 0849320429 }}</ref> ==Styles== There are many stylistic alternatives available when considering how comments should appear in source code. For larger projects involving a team of developers, comment styles are either agreed upon before a project starts, or evolve as a matter of convention or need as a project grows. Usually programmers prefer styles that are consistent, non-obstructive, easy to modify, and difficult to break.<ref name="gnome000">{{cite web | title = Coding Style | url = http://developer.gnome.org/doc/guides/programming-guidelines/code-style.html | accessdate = 2007-07-24 }}</ref> The following code fragments in C demonstrate just a tiny example of how comments can vary stylistically, while still conveying the same basic information: <source lang="c"> /* This is the comment body. Variation One. */ </source> <source lang="c"> /***************************\ * * * This is the comment body. * * Variation Two. * * * \***************************/ </source> Factors such as personal preference, flexibility of programming tools, and other considerations tend to influence the stylistic variants used in source code. For example, Variation Two might be disfavored among programmers who do not have [[source code editor]]s that can automate the alignment and visual appearance of text in comments. Software consultant and technology commentator Allen Holub<ref name="Holub000">{{cite web | title = Allen Holub | url = http://www.holub.com/company/allen_holub.html | accessdate = 2007-07-24 }}</ref> is one expert who advocates aligning the left edges of comments:<ref name="Holub001">Allen Holub, ''Enough Rope to Shoot Yourself in the Foot'', ISBN 0-07-029689-8, 1995, McGraw-Hill</ref> <source lang="c"> /* This is the style recommended by Holub for C and C++. * It is demonstrated in ''Enough Rope'', in rule 29. */ </source> <source lang="c"> /* This is another way to do it, also in C. ** It is easier to do in editors that do not automatically indent the second ** through last lines of the comment one 