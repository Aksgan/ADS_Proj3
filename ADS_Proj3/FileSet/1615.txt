Project, in order to have a compiler available that was [[free software]]. Its development was supervised by the [[Free Software Foundation]] (FSF).<ref>Stallman, Richard M. (2001) "[http://gcc.gnu.org/onlinedocs/gcc-2.95.3/gcc_23.html#SEC260 Contributors to GCC,]" in [http://gcc.gnu.org/onlinedocs/gcc-2.95.3/gcc.html#SEC_Top ''Using and Porting the GNU Compiler Collection (GCC)''] for gcc version 2.95 (Cambridge, Mass.: Free Software Foundation)</ref> By 1991, GCC 1.x had reached a point of stability, but architectural limitations prevented many desired improvements, so the FSF started work on GCC 2.x. As GCC was free software, programmers wanting to work in other directions—particularly those writing interfaces for languages other than [[C (programming language)|C]]—were free to develop their own [[fork (software)|fork]] of the compiler. Multiple forks proved inefficient and unwieldy, however, and the difficulty in getting work accepted by the official GCC project was greatly frustrating for many. The FSF kept such close control on what was added to the official version of GCC 2.x that GCC was used as one example of the "cathedral" development model in [[Eric S. Raymond]]'s essay ''[[The Cathedral and the Bazaar]]''. With the release of [[4.4BSD]] in 1994, GCC became the default compiler for BSD systems. ===EGCS fork=== In 1997, a group of developers formed EGCS (Experimental/Enhanced GNU Compiler System),<ref>{{cite web|title=Pentium Compiler FAQ|url=http://home.schmorp.de/pgcc-faq.html#egcs}}</ref> to merge several experimental forks into a single project. The basis of the merger was a GCC development snapshot taken between the 2.7 and 2.81 releases. Projects merged included g77 ([[Fortran|FORTRAN]]), PGCC ([[P5 (microarchitecture)|P5]] [[Pentium (brand)|Pentium]]-optimized GCC), many [[C++]] improvements, and many new architectures and [[operating system]] variants.<ref>{{cite web|title=A Brief History of GCC|url=http://gcc.gnu.org/wiki/History}}</ref><ref>{{cite web|title=The Short History of GCC development|url=http://www.softpanorama.org/People/Stallman/history_of_gcc_development.shtml}}</ref> EGCS development proved considerably more vigorous than GCC development, so much so that the FSF officially halted development on their GCC 2.x compiler, "blessed" EGCS as the official version of GCC and appointed the EGCS project as the GCC maintainers in April 1999. Furthermore, the project explicitly adopted the "bazaar" model over the "cathedral" model. With the release of GCC 2.95 in July 1999, the two projects were once again united. GCC is now maintained by a varied group of programmers from around the world, under the direction of a steering committee.<ref>{{cite web |url=http://gcc.gnu.org/steering.html |title=GCC steering committee}}</ref> It has been ported to more kinds of [[central processing unit|processors]] and [[operating system]]s than any other compiler.<ref>[http://www.linfo.org/gcc.html Linux Information Project] (LINFO) accessed 2010-04-27</ref> ==Uses== GCC is often the compiler of choice for developing software that is required to execute on a wide variety of hardware and/or operating systems. System-specific compilers provided by hardware or OS vendors can differ substantially, complicating both the software's source code and the scripts which invoke the compiler to build it. With GCC, most of the compiler is the same on every platform, so only code which explicitly uses platform-specific features must be rewritten for each system. ===Current GCC release=== The current stable release of GCC is '''4.5.2''', and was released on December 16, 2010. Version 4.5 includes several minor new features (new targets, new language dialects) and a couple major new features: * ''Link-time optimization'' optimizes across object file boundaries to directly improve the linked binary. Link-time optimization relies on an intermediate file containing the serialization of some -Gimple- representation included in the object file [http://gcc.gnu.org/wiki/LinkTimeOptimization]. The file is generated alongside the object file during source compilation. Each source compilation generates a separate object file and link-time helper file. When the object files are linked, the compiler is executed again and uses the helper files to optimize code across the separately compiled object files. * ''[[Plugins]]'' can extend the GCC compiler directly [http://gcc.gnu.org/onlinedocs/gccint/Plugins.html]. Plugins allow a stock compiler to be tailored to specific needs by external code loaded as plugins. For example, plugins can add, replace, or even remove middle–end passes operating on ''Gimple'' representations. Several GCC plugins have already been published, notably: ** [https://developer.mozilla.org/en/Treehydra TreeHydra] to help with Mozilla code development ** [http://dragonegg.llvm.org/ DragonEgg] to use the GCC front-end with [[LLVM]] ** [http://gcc.gnu.org/wiki/MiddleEndLispTranslator MELT] (site [http://gcc-melt.org/ GCC MELT]) to enable coding GCC extensions in a [[Lisp (programming language)|lisp]]y [[Domain Specific Language|domain-specific language]] providing powerful [[Pattern-matching]] ** [http://ctuning.org/wiki/index.php/CTools:MilepostGCC MILEPOST] [http://ctuning.org/ CTuning] to use [[machine learning]] techniques to tune the compiler. ===The GCC trunk (preparing next GCC release)=== Most of the development work happens inside the GCC '''trunk'''. The next major release of GCC should be '''4.6''' and is worked upon inside the ''GCC trunk''. It should notably provide support for the [[Go_(programming_language)|Go]] programming language and for quad-precision floating point. ''GCC 4.6'' will probably be released in 2011. ==Languages== <!-- dates of the first release for each language would be a useful add. --> The standard compiler release 4.3 includes front ends for [[C (programming language)|C]] (<tt>gcc</tt>), [[C++]] (<tt>g++</tt>), [[Java (programming language)|Java]] (<tt>[[gcj]]</tt>), [[Ada (programming language)|Ada]] ([[GNAT]]), [[Objective-C]] (<tt>gobjc</tt>), [[Objective-C#Objective-C++|Objective-C++]] (<tt>gobjc++</tt>), and [[Fortran]] (<tt>[[gfortran]]</tt>). Also available, but not in standard are [[Modula-2]], [[Modula-3]], [[Pascal (programming language)|Pascal]] (<tt>[[GNU Pascal|gpc]]</tt>), [[PL/I]], [[D (programming language)|D]] (<tt>gdc</tt>), [[Mercury (programming language)|Mercury]], and [[VHDL]] (<tt>ghdl</tt>).<ref>[http://gcc.gnu.org/frontends.html GCC Front Ends], GCC.org, Retrieved May 11, 2008.</ref> A popular parallel language extension, [[OpenMP]], is also supported. The GCC steering committee has recently announced that it will also support the [[Go (programming language)|Go]] programming language in GCC 4.5 or later.<ref>[http://article.gmane.org/gmane.comp.gcc.devel/111603 "gccgo language contribution accepted"], gmane.org, Retrieved January 26, 2010.</ref> The Fortran front end was <tt>g77</tt> before version 4.0, which only supports [[FORTRAN 77]]. In newer versions, <tt>g77</tt> is dropped in favor of the new <tt>[[gfortran]]</tt> front end that supports [[Fortran 95]] and parts of [[Fortran 2003]] as well.<ref>{{cite web|url=http://gcc.gnu.org/wiki/Fortran2003|title=Fortran 2003 Features in GNU Fortran}}</ref> As the later Fortran standards incorporate the F77 standard, standards-compliant F77 code is also standards-compliant F90\5 code, and so can be compiled without trouble in gfortran. A front-end for [[CHILL]] was dropped due to a lack of maintenance.<ref>[http://gcc.gnu.org/ml/gcc-patches/2002-04/msg00887.html [PATCH&#93; Remove chill], gcc.gnu.org, Retrieved July 29, 2010.</ref> A few experimental branches exist to support additional languages, such as the GCC [[Unified Parallel C|UPC]] compiler<ref>{{cite web|url=http://www.intrepid.com/upc.html |title=GCC UPC (GCC Unified Parallel C) &#124; intrepid.com |publisher=intrepid.com<! |date=2006-02-20 |accessdate=2009-03-11}}</ref> for [[Unified Parallel C]]. ==Architectures== GCC target processor families as of version 4.3 include: {{div col|colwidth=15em|small=no}} * [[DEC Alpha|Alpha]] * [[ARM 