needs to exist in a separate physical location than the original data. Depending on the [[Mirror (computing)#Reasons|reasons]] behind the shadow operation, this location may be as close as a second harddrive in the same chassis or as far away as the other side of the globe. == References == *[http://www.freepatentsonline.com/5043876.html N-level file shadowing and recovery in a shared file system], United States Patent 5043876 *[http://www.freepatentsonline.com/5276871.html Method of file shadowing among peer systems], United States Patent 5276871 *[http://www.ibexpert.info/documentation/%20%209.%20IBExpert%20Services%20Menu/%20%202.%20Restore%20Database/%20%201.%20Database%20Shadow%20Files/15713.html Database Shadow Files] == External links == *[http://www.gnu.org/software/emacs/manual/html_node/File-Shadowing.html Instructions on how to shadow files] for [[Emacs]] *[[Linux]] [http://tldp.org/HOWTO/Shadow-Password-HOWTO.html Shadow Password HOWTO] [[Category:Computer file systems]] {{compu-storage-stub}}</text> </page> <page> <id>13538</id> <title>File synchronization</title> <text>{{Refimprove|date=July 2009}} '''File synchronization''' (or 'syncing') in computing is the process of making sure that files in two or more locations are updated through certain rules.{{Citation needed|date=July 2009}} In ''one-way file synchronization'', also called [[Mirror (computing)|mirroring]], updated files are copied from a 'source' location to one or more 'target' locations, but no files are copied back to the source location. In ''two-way file synchronization'', updated files are copied in both directions, usually with the purpose of keeping the two locations identical to each other. In this article, the term synchronization refers exclusively to ''two-way file synchronization''. File synchronization is commonly used for home backups on external hard drives or updating for transport on [[USB flash drives]]. The automatic process prevents copying already identical files and thus can save considerable time from a manual copy, also being faster and less error prone.<ref>{{cite paper |author=A. Tridgell|authorlink=Andrew Tridgell |title=Efficient algorithms for sorting and synchronization |url=http://samba.org/~tridge/phd_thesis.pdf |date=February 1999 |version=PhD thesis |publisher=The Australian National University}}</ref> However this suffers from the limitation that the synchronized files have to physically fit in the portable drive. Synchronization software that only keeps a list of files and the changed files circumvents this problem (e.g. the "snapshot" feature in [[Beyond Compare]] or the "package" feature in [[Synchronize It|Synchronize It!]]). It is particularly useful for mobile workers, or others that work on multiple computers. It is possible to synchronize multiple locations by synchronizing them a pair at a time. ==Common features== * [[Encryption]] for [[Internet security|security]], particularly when synchronizing across the [[Internet]]. * [[Data compression|Compressing]] any data sent across a network. * ''Conflict detection'' where a file has been modified on both sources, as opposed to where it has only been modified on one. Undetected conflicts can lead to overwriting copies of the file with the most recent version, causing data loss. For conflict detection, the synchronization software needs to keep a database of the synchronized files. Distributed conflict detection can be achieved by [[version vector]]s. * ''Open Files Support'' ensures data integrity when copying data or application files that are in-use or database files that are exclusively [[File locking|locked]]. * Specific support for using an intermediate storage device, such as a removable flash disc, to synchronize two machines. Although most synchronizing programs can be used in this way, providing specific support for this can reduce the amount of data stored on the device. * The ability to preview any changes before they are made. * The ability to view differences in individual files. ==See also== * [[Comparison of File synchronization software]] * [[Comparison of online backup services]] * [[Data synchronization]] * [[File comparison]] * [[Mirror (computing)|Mirroring]] * [[Backup software]] * [[List of backup software]] * [[Remote backup service]] * [[Shared file access]] == References == {{reflist}} {{DEFAULTSORT:File Synchronization}} [[Category:Data synchronization|*]] [[Category:Storage software]] [[fr:Synchronisation de fichiers]] [[nl:Bestandssynchronisatie]] [[ja:ファイル同期]] [[pt:Sincronização de ficheiros]]</text> </page> <page> <id>13551</id> <title>Filesystem permissions</title> <text>{{Merge from|Share permissions|date=January 2010}} Most current [[file system]]s have methods of administering '''permissions''' or '''access rights''' to specific [[user (computing)|users]] and groups of users. These systems control the ability of the users affected to view or make changes to the contents of the [[filesystem]]. ==Differences between operating systems== [[Unix-like]] and otherwise [[POSIX]]-compliant systems, including [[Linux]]-based systems and all [[Mac OS X]] versions, have a simple system for managing individual file permissions, which in this article are called "traditional Unix permissions". Most of these systems also support some kind of [[access control list]]s, either proprietary (old HP-UX ACLs, for example), or POSIX.1e ACLs, based on an early POSIX draft that was abandoned, or NFSv4 ACLs, which are part of the [[NFSv4]] standard. [[DOS]] variants (including [[MS-DOS]], [[Windows 95]], [[Windows 98]], and [[Windows Me]]) do not have permissions, only [[file attribute]]s. There is a read-only attribute (R), which can be set or unset on a file by any user or program, and therefore does not prevent him/her from changing/deleting the file. There is no permission in these systems which would keep a user from reading a file. [[OpenVMS]] (a.k.a. VMS), as well as [[Windows NT|Microsoft Windows NT]] and its derivatives (including [[Windows 2000]] and [[Windows XP]]), use [[access control list]]s (ACLs)<ref>http://technet.microsoft.com/en-us/library/bb727008.aspx</ref> to administer a more complex and varied set of permissions. [[OpenVMS]] also uses a permission scheme similar to that of Unix, but more complex. There are four categories(System, Owner, Group, and World) and four types of access permissions (Read, Write, Execute, and Delete). The categories are not mutually disjoint: World includes Group which in turn includes Owner. The System category independently includes system users (similar to superusers in Unix).<ref>http://h71000.www7.hp.com/doc/731final/6489/6489pro_025.html#int_prot_code</ref> Classic [[Mac OS history|Mac]] OSes are similar to DOS variants and DOS-based Windows: they do not support permissions, but only a "Protected" file attribute. [[AmigaDOS|The AmigaOS Filesystem, AmigaDOS]] supports a relatively advanced permissions system, for a single-user OS. In AmigaOS 1.x, files had Archive, Read, Write, Execute and Delete (collectively known as ARWED) permissions/flags. In AmigaOS 2.x and higher, additional Hold, Script, and Pure permissions/flags were added. [[Mac OS X]] versions 10.3 ("Panther") and prior use POSIX-compliant permissions. [[Mac OS X]], beginning with version 10.4 ("Tiger"), also support the use of [[NFSv4]] [[access control list|ACL]]s. They still support "traditional Unix permissions" as used in previous versions of Mac OS X, and the ''Apple Mac OS X Server version 10.4+ File Services Administration Manual'' recommends using only traditional Unix permissions if possible. It also still supports the Mac OS Classic's "Protected" 