interface with which programmers interact to code their skeleton applications. These languages are diverse, encompassing paradigms such as: functional languages, coordination languages, markup languages, imperative languages, object oriented languages, and even graphical user interfaces. Inside the programming language, skeletons have been provided either as language constructs or libraries. Providing skeletons as language construct implies the development of a custom domain specific language and its compiler. This was clearly the stronger trend at the begging of skeleton research. The more recent trend is to provide skeletons as libraries, in particular with object oriented languages such as C++ and Java. * '''Execution Language''' is the language in which the skeleton applications are run or compiled. It was recognized very early that the programming languages (specially in the functional cases), were not efficient enough to execute the skeleton programs. Therefore, skeleton programming languages were simplified by executing skeleton application on other languages. Transformation processes were introduced to convert the skeleton applications (defined in the programming language) into an equivalent application on the target execution language. Different transformation processes were introduced, such as code generation or instantiation of lowerlevel skeletons (sometimes called operational skeletons) which were capable of interacting with a library in the execution language. The transformed application also gave the opportunity to introduce target architecture code, customized for performance, into the transformed application. Table 1 shows that a favorite for execution language has been the C language. * '''Distribution Library''' provides the functionality to achieve parallel/distributed computations. The big favorite in this sense has been MPI, which is not surprising since it integrates well with the C language, and is probably the most used tool for parallelism in cluster computing. The dangers of directly programming with the distribution library are, of course, safely hidden away from the programmers who never interact with the distribution library. Recently, the trend has been to develop skeleton frameworks capable of interacting with more than one distribution library. For example, CO2 P3 S can use Threads, RMI or Sockets; Mallba can use Netstream or MPI; or JaSkel which uses AspectJ to execute the skeleton applications on different skeleton frameworks. * '''Type Safety''' refers to the capability of detecting type incompatibility errors in skeleton program. Since the first skeleton frameworks were built on functional languages such as Haskell, type safety was simply inherited from the host language. Nevertheless, as custom languages were developed for skeleton programming, compilers had to be written to take type checking into consideration; which was not as difficult as skeleton nesting was not fully supported. Recently however, as we begun to host skeleton frameworks on object oriented languages with full nesting, the type safety issue has resurfaced. Unfortunately, type checking has been mostly overlooked (with the exception of QUAFF), and specially in Java based skeleton frameworks. * '''Skeleton Nesting''' is the capability of hierarchical composition of skeleton patterns. Skeleton Nesting was identified as an important feature in skeleton programming from the very beginning, because it allows the composition of more complex patterns starting from a basic set of simpler patterns. Nevertheless, it has taken the community a long time to fully support arbitrary nesting of skeletons, mainly because of the scheduling and type verification difficulties. The trend is clear that recent skeleton frameworks support full nesting of skeletons. * '''File Access''' is the capability to access and manipulate files from an application. In the past, skeleton programming has proven useful mostly for computational intensive applications, where small amounts of data require big amounts of computation time. Nevertheless, many distributed applications require or produce large amounts of data during their computation. This is the case for astrophysics, particle physics, bio-informatics, etc. Thus, providing file transfer support that integrates with skeleton programming is a key concern which has been mostly overlooked. * '''Skeleton Set''' is the list of supported skeleton patterns. Skeleton sets vary greatly from one framework to the other, and more shocking, some skeletons with the same name have different semantics on different frameworks. The most common skeleton patterns in the literature are probably farm, pipe, and map. {| class="wikitable" border="1" |+ Non-object oriented Algorithmic Skeleton Frameworks |- ! ! Activity Years ! Programming Language ! Execution Language ! Distribution Library ! Type Safe ! Skeleton Nesting ! File Access ! Skeleton Set |- | ASSIST | 2004–2007 | Custom Control Language | C++ | TCP/IP + ssh/scp | yes | no | explicit | seq, parmod |- | SBSACO | 2004–2006 | Custom Composition Language | C++ | MPI | yes | yes | no | farm, pipe, multi-block |- | eSkel | 2004–2005 | C | C | MPI | no | ? | no | pipeline, farm, deal, butterfly, hallowSwap |- | HDC | 2004–2005 | Haskell subset | C | MPI | yes | ? | no | dcA, dcB, dcD, dcE, dcF, map, red, scan, filter |- | SKELib | 2000-2000 | C | C | MPI | no | no | no | farm, pipe |- | SkiPPER | 1999–2002 | CAML | C | SynDex | yes | limited | no | scm, df, tf, intermem |- | SkIE | 1999-1999 | GUI/Custom Control Lang. | C++ | MPI | yes | limited | no | pipe,farm, map, reduce, loop |- | Eden | 1997–2010 | Haskell extension | C | MPVM/MPI | yes | ? | no | map,farm,workpool,nr,dc,pipe,iterUntil,torus,ring |- | P3L | 1995–1998 | Custom Control Lang. | C | MPI | yes | limited | no | map,reduce,scan,comp,pipe,farm,seq,loop |- | Skil | 1995–1998 | C subset | C | ? | yes | no | no | pardata,map,fold |- | SCL | 1993–1995 | Custom Control Lang. | Fortran | CS Tools | yes | limited | no | map,scan,fold,farm,SPMD,iterateUntil |} {| class="wikitable" border="1" |+ Object oriented Algorithmic Skeleton Frameworks |- ! ! Activity Years ! Programming Language ! Execution Language ! Distribution Library ! Type Safe ! Skeleton Nesting ! File Access ! Skeleton Set |- | Skandium | 2009–2010 | Java | 