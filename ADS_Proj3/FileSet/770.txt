of its intent; but others tasked with maintaining the code base may find such explanation crucial. This might especially be true in the case of highly-specialized problem domains; or rarely-used optimizations, constructs or function-calls.<ref name="AlgoComments">{{cite book | last = Spinellis | first = Diomidis | title = Code reading: The Open Source Perspective | publisher = Addison-Wesley | year = 2003 | isbn = 0201799405 }}</ref> For example, a programmer may add a comment to explain why an [[insertion sort]] was chosen instead of a [[quicksort]], as the former is, in theory, slower than the latter. This could be written as follows: <source lang="java"> list = [f (b), f (b), f (c), f (d), f (a), ...]; // Need a stable sort. Besides, the performance really does not matter. insertion_sort (list); </source> === Resource inclusion ===<!--This header is linked externally, pls. no changey unless you fixy--> [[Logo]]s, diagrams, and [[flowchart]]s consisting of [[ASCII art]] constructions can be inserted into source code formatted as a comment.<ref name="asciiart000">{{cite web | title = CodePlotter 1.6 - Add and edit diagrams in your code with this 'Visio-like' tool | url = http://www.codeproject.com/macro/codeplotter.asp | accessdate = 2007-07-24 }}</ref> Further, [[copyright]] notices can be embedded within source code as comments. Binary data may also be encoded in comments through a process known as [[binary-to-text encoding]], although such practice is uncommon and typically relegated to external resource files. The following code fragment is a simple ASCII diagram depicting the process flow for a [[system administration]] script contained in a [[Windows Script File]] running under [[Windows Script Host]]. Although a section marking the code appears as a comment, the diagram itself actually appears in an [[XML]] [[CDATA]] section, which is technically considered distinct from comments, but can serve similar purposes.<ref name="Niederst000">{{cite book | title = Web Design in a Nutshell: A Desktop Quick Reference | first = Jennifer | last = Niederst | publisher = O'Reilly | year = 2006 | isbn = 0596009879 }}Sometimes the difference between a "comment" and other syntax elements of a programming or markup language entails subtle nuances. Niederst indicates one such situation by stating: "Unfortunately, XML software thinks of comments as unimportant information and may simply remove the comments from a document before processing it. To avoid this problem, use an XML CDATA section instead."</ref> <source lang="xml"> <!-- begin: wsf_resource_nodes --> <resource id="ProcessDiagram000"> <![CDATA[ HostApp (Main_process) | V script.wsf (app_cmd) --> ClientApp (async_run, batch_process) | | V mru.ini (mru_history) ]]> </resource> </source> Although this identical diagram could easily have been included as a comment, the example illustrates one instance where a programmer may opt not to use comments as a way of including resources in source code.<ref name="Niederst000" /> {{anchor|Comment out}} <!-- [[Comment out]] redirects here --> === Debugging === {{Redirect3|Comment out}} A common developer practice is to ''comment out'' a [[snippet (programming)|code snippet]], so that it will not be executed in the final program. For example, one might write: <source lang="C"> if (opt.equals ("e")) opt_enabled = true; /* if (opt.equals ("d")) opt_debug = true; // */ //* if (opt.equals ("v")) opt_verbose = true; // */ </source> The above code fragment suggests that the programmer opted to disable the debugging option for some reason. This specific comment style is more suitable for debugging. A single slash character in front of the opening delimiter is the switch on en/disabling the block comments. ===Automatic documentation generation=== {{main|Documentation generator}} [[Programming tool]]s sometimes store documentation and [[metadata]] in comments.<ref>See e.g., {{cite book | last = Wynne-Powell | first = Rod | title = Mac Os X for Photographers: Optimized Image Workflow for the Mac User | publisher = Focal Press | location = Oxford | year = 2008 | isbn = 0240520270 }} page 243</ref> These may include insert positions for automatic header file inclusion, commands to set the file's [[syntax highlighting]] mode,<ref>{{cite book | last = Lamb | first = Linda | title = Learning the VI Editor | publisher = O'Reilly & Associates | location = Sebastopol | year = 1998 | isbn = 1565924266 }} describes the use of modeline syntax in Vim configuration files.</ref> or the file's [[revision control|revision number]].<ref>See e.g., {{cite book | last = Berlin | first = Daniel | title = Practical Subversion, Second Edition | publisher = APress | location = Berkeley | year = 2006 | isbn = 1590597532 }} page 168.</ref> These functional control comments are also commonly referred to as [[annotation]]s. Keeping documentation within source code comments is considered as one way to simplify the documentation process, as well as increase the chances that the documentation will be kept up to date with changes in the code.<ref name="Ambler000">{{cite book | title = The Object Primer: Agile Model-Driven Development with UML 2.0 | first = Scott | last = Ambler | publisher = Cambridge University Press | year = 2004 | isbn = 1397805218 }}</ref> Examples of documentation generators include the programs [[Javadoc]] for use with [[Java (programming language)|Java]], [[Ddoc]] for [[D (programming language)|D]], [[Doxygen]] for [[C (programming language)|C]], [[C++]], Java, [[interface description language|IDL]], and [[PHPDoc]] for [[PHP]]. [[C Sharp (programming language)|C#]] and [[Visual Basic]] implement a similar feature called "XML Comments" which are read by [[IntelliSense]] from the compiled [[.NET Framework|.NET]] assembly.<ref>{{cite book|last=Murach|title=C# 2005|pages=56}}</ref> ==Normative views== There are various normative views and long-standing opinions regarding the proper use of comments in source code.<ref>{{cite book | last = Goodliffe | first = Pete | title = Code Craft | publisher = No Starch Press | location = San Francisco | year = 2006 | isbn = 1593271190 }}, {{cite book | last = Smith | first = T. | title = Intermediate Programming Principles and Techniques Using Pascal | publisher = West Pub. Co | location = Belmont | year = 1991 | isbn = 0314663142 }}</ref> Some of these are informal and based on personal preference, while others are published or promulgated as formal guidelines.<ref>See e.g., {{cite book | last = Koletzke | first = Peter | title = Oracle Developer Advanced Forms & Reports 