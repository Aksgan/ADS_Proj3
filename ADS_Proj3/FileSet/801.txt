== b && c == d || e == f) { // multiple comparisons } </source> | <source lang=vbnet> If a = b And c = d Or e = f Then ' multiple comparisons End If </source> | |- | <source lang=csharp> if (a == b && c == d || e == f) { // short-circuiting comparisons } </source> | <source lang=vbnet> If a = b AndAlso c = d OrElse (e = f) Then ' short-circuiting comparisons End If </source> |- | |} ====Object types==== {| |[[C Sharp (programming language)|C#]] |[[Visual Basic .NET]] |- | <source lang=csharp> if (Object.ReferenceEquals(a, b)) { // variables refer to the same instance } </source> | <source lang=vbnet> If a Is b Then ' variables refer to the same instance End If </source> |- | <source lang=csharp> if (!Object.ReferenceEquals(a, b)) { // variables do not refer to the same instance } </source> | <source lang=vbnet> If a IsNot b Then ' variables do not refer to the same instance End If </source> |- | <source lang=csharp> if (a.Equals(b)) { // instances are equivalent } </source> | <source lang=vbnet> If a = b Then ' instances are equivalent End If </source> |- | <source lang=csharp> if ( ! a.Equals(b)) { // not equivalent } </source> | <source lang=vbnet> If a <> b Then ' not equivalent End If </source> |- | <source lang=csharp> var type = typeof(int); </source> | <source lang=vbnet> Dim type = GetType(Integer) </source> |- | <source lang=csharp> if (a is b) { // types of a and b are compatible } </source> | <source lang=vbnet> If TypeOf a Is b Then ' types of a and b are compatible End If </source> |- | <source lang=csharp> if (!(a is b)) { // types of a and b are not compatible } </source> | <source lang=vbnet> If Not TypeOf a Is b Then ' types of a and b are not compatible End If </source> |} Note: these examples for equivalence tests assume neither the variable "a" nor the variable "b" is a Null reference (''Nothing'' in Visual Basic.NET). If "a" were null, the C# evaluation of the .equals method would throw a NullReferenceException, whereas the VB.NET = operator would return true if both were null, or false if only one was null (and evaluate the equals method if neither were null). They also assume that the .equals method and the = operator are implemented for the class type in question. Omitted for clarity, the exact transliteration would be: C# <source lang=csharp> if(object.equals(a,b)) </source> VB.NET <source lang=vbnet> If a = b Then </source> // converting from Gregorian to Persian date Persia.Calendar.ConvertToPersian(DateTime dateTime); Persia.Calendar.ConvertToPersian(int year, int month, int day, Persia.DateType.Gerigorian); // converting from Islamic to Persian date Persia.Calendar.ConvertToPersian(Persia.MoonDate moonDate); Persia.Calendar.ConvertToPersian(int year, int month, int day, Persia.DateType.Islamic); ==Adoption and community support== Both C# and VB.NET have high adoption rates, and very active developer communities and [[Microsoft]] fully supports both communities. Most [[.NET Framework]] developers use C# as their primary language.<ref name="telerikwatch"/> C# has an advantage in terms of the level of community activity on the Internet and there are more books available for C#. Examples of community and industry adoption include: *A 2007 [[Forrester Research]] poll revealed that 59% of .NET developers used ''only'' [[VB.NET]] to create software.<ref name="forrester">{{cite web | url = http://www.linux-watch.com/news/NS5656359853.html | title = Mono brings Visual Basic programs to Linux | publisher = [[Linux-Watch]] | accessdate = 2010-03-25}}</ref> *[[Visual Basic Express]] is the most popular download of all the [[Visual Studio Express]] downloads.<ref name="VSMagNov2007" /> *An original C# language designer, Scott Wiltamuth, stated in a March 2010 blog that the "most reliable numbers we have... show roughly equal adoption" for VB.NET and C#.<ref name="Wiltamuth">{{cite web | url = http://blogs.msdn.com/scottwil/archive/2010/03/09/vb-and-c-coevolution.aspx | title = VB and C# Coevolution | publisher = [[MSDN]] | accessdate = 2010-03-27}}</ref> *According to a survey conducted by [[Visual Studio]] Magazine "41 percent said they used C#, 34 percent programmed in VB.NET, while 25 percent responded with 'other.'"<ref name="VSMagNov2007">{{cite web | url = http://visualstudiomagazine.com/columns/article.aspx?editorialsid=2333 | title = C#'s Exploding Mindshare | author = Patrick Meader | publisher = [[Visual Studio]] Magazine, November 2007 | accessdate = 2008-12-16}}</ref> * [[Stephen Wiley]], marketing product manager at [[Apress]] has reported "C# titles outsell VB.NET title books handily, by somewhere between a 2–1 and 3–1 margin."<ref name="VSMagNov2007" /> * [[MSDN Blogs]], the blogging site for Microsoft employees, has 27,500 posts that discuss C#, while only 8,880 mention VB.Net (as of November 15, 2007) * [[Google Groups]], a [[Usenet]] search engine, returns 36,900 hits for "VB .Net", and 65,700 for C# * [[Telerik]] Survey 2008 suggested that C# (63%) had surpassed VB.NET (34%) as the primary programming language.<ref name="telerikwatch">{{cite web | url = http://telerikwatch.com/2008/04/survey-says-c-more-popular-than-vb.html | title = Survey Says: C# more popular than VB | author = Todd Anglin | publisher = [[Telerik]] | accessdate = 2008-12-16}}</ref> * [[Telerik]] Survey 2009 suggested that C# (69%) further strengthens its dominance over VB.NET (30%) as the primary programming language.<ref name="telerikwatch"/> * TIOBE Programming Community Index for July 2010 show that C# finally surpassed Visual Basic<ref name="tiobe">{{cite web | url = http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html | title = C# is rated higher than Visual Basic for the first time in history}}</ref> ==Other languages== === C++/CLI (formerly Managed C++)=== [[C++/CLI]] (a replacement for [[Managed Extensions for C++]]) does not have the adoption rate of C# or VB.NET, but does have a significant following. C++/CLI syntactically, stylistically, and culturally is closest to C#. However, C++/CLI stays closer to its C++ roots than C# does. C++/CLI directly supports pointers, destructors, and other [[Unsafe programming language|unsafe]] program concepts which are not supported or limited in the other languages. It allows the direct use of both .NET code and standard C++ code. C++/CLI is used for porting native/legacy C++ applications into the .NET framework, or cases where the programmer wants to take more control of the code; but this control comes at a significant cost of ease of use and readability. Many of the automated tools that come with Visual Studio have reduced 