integrity, security, and reliability in software code development, including processes and procedures that diminish the possibilities of erroneous code, malicious code, or trap doors that could be introduced during development.”<ref>[https://buildsecurityin.us-cert.gov/portal Build Security In Home<!-- Bot generated title -->]</ref> ===United States Department of Defense (DoD)=== According to the [[United States Department of Defense|DoD]], software assurance relates to "the level of confidence that software functions as intended and is free of vulnerabilities, either intentionally or unintentionally designed or inserted as part of the software."<ref>[https://acc.dau.mil/CommunityBrowser.aspx?id=25749 DoD Software Assurance Initiative] 13 September 2005</ref> ===Software Assurance Metrics and Tool Evaluation (SAMATE) project=== According to the [[National Institute of Standards and Technology|NIST]] SAMATE project<ref>[http://samate.nist.gov/ Main Page - SAMATE project]</ref>, software assurance is "the planned and systematic set of activities that ensures that software processes and products conform to requirements, standards, and procedures to help achieve: * Trustworthiness - No exploitable vulnerabilities exist, either of malicious or unintentional origin, and * Predictable Execution - Justifiable confidence that software, when executed, functions as intended." ===National Aeronautics and Space Administration (NASA)=== According to [[National Aeronautics and Space Administration|NASA]], Software Assurance is a "planned and systematic set of activities that ensures that software processes and products conform to requirements, standards, and procedures. It includes the disciplines of Quality Assurance, Quality Engineering, Verification and Validation, Nonconformance Reporting and Corrective Action, Safety Assurance, and Security Assurance and their application during a software life cycle." The NASA Software Assurance Standard also states: "The application of these disciplines during a software development life cycle is called Software Assurance."<ref>[http://satc.gsfc.nasa.gov/assure/assurepage.html NASA-STD-2201-93] "Software Assurance Standard", 10 November 1992</ref> ===Object Management Group (OMG)=== According to the [[Object Management Group|OMG]], Software Assurance is “justifiable trustworthiness in meeting established business and security objectives.”<ref>OMG Software Assurance (SwA) Special Interest Group (SIG) http://adm.omg.org/SoftwareAssurance.pdf and http://swa.omg.org/docs/softwareassurance.v3.pdf</ref> OMG's SwA Special Interest Group (SIG),<ref>[http://swa.omg.org OMG SwA SIG<!-- Bot generated title -->]</ref> works with Platform and Domain Task Forces and other software industry entities and groups external to the OMG, to coordinate the establishment of a common framework for analysis and exchange of information related to software trustworthiness by facilitating the development of a specification for a Software Assurance Framework that will: * Establish a common framework of software properties that can be used to represent any/all classes of software so software suppliers and acquirers can represent their claims and arguments(respectively), along with the corresponding evidence, employing automated tools (to address scale) * Verify that products have sufficiently satisfied these characteristics in advance of product acquisition, so that system engineers/integrators can use these products to build (compose) larger assured systems with them * Enable industry to improve visibility into the current status of software assurance during development of its software * Enable industry to develop automated tools that support the common framework. ===Software Assurance Forum for Excellence in Code (SAFECode)=== According to [[SAFECode]], Software Assurance is “confidence that software, hardware and services are free from intentional and unintentional vulnerabilities and that the software functions as intended.”<ref>[http://www.safecode.org/publications/SAFECode_BestPractices0208.pdf “Software Assurance: An Overview of Current Industry Best Practices”, February 2008]</ref> ===Webopedia=== According to [[Webopedia]], Software Quality Assurance, abbreviated as SQA, and also called "software assurance", is a level of confidence that software is free from vulnerabilities, either intentionally designed into the software or inserted at anytime during its lifecycle, and that the software functions in the intended manner."<ref>[http://www.webopedia.com/TERM/S/Software_Quality_Assurance.html Webopedia on-line encyclopedia]</ref> As indicated in the Webopedia definition, the term "software assurance" has been used as a shorthand for Software Quality Assurance (SQA) when not necessarily considering security or trustworthiness. SQA is defined in the ''Handbook of Software Quality Assurance'' as: "the set of systematic activities providing evidence of the ability of the software process to produce a software product that is fit to use."<ref>G. Gordon Schulmeyer and James I. McManus, ''Handbook of Software Quality Assurance'', 3rd Edition (Prentice Hall PRT, 1998)</ref> ==See also== * [[Software Quality Assurance]] * '''Software Security Assurance''' State of the Art Report (SOAR): <ref>[http://iac.dtic.mil/iatac/download/security.pdf Software Security Assurance State of the Art Report (SOAR)]</ref> a comprehensive resource which represents an output of collaborative efforts of organizations and individuals in the SwA Forum and Working Groups. The SOAR provides an overview of the current state of the environment in which software must operate and surveys current and emerging activities and organizations involved in promoting various aspects of software security assurance. The report also describes the variety of techniques and technologies in use in government, industry, and academia for specifying, acquiring, producing, assessing, and deploying software that can, with a justifiable degree of confidence, be said to be secure. The report also presents observations about noteworthy trends in software security assurance as a discipline. {{Portal|Software Testing}} ==References== {{reflist}} ==External links== * [https://buildsecurityin.us-cert.gov/ DHS "Build Security In" information resource] * [http://www.us-cert.gov/swa/ DHS Software Assurance (SwA)] * [https://buildsecurityin.us-cert.gov/swa/index.html DHS SwA Community of Practice portal] * [http://samate.nist.gov/ NIST Software Assurance Metrics and Tool Evaluation (SAMATE) project] * [http://swa.omg.org/ Object Management Group SwA SIG] * [http://swaconsortium.org/ Software Assurance Consortium] * [http://www.safecode.org/ Software Assurance Forum for Excellence in Code (SAFECode)] * [http://satc.gsfc.nasa.gov/assure/assurepage.html NASA Software Assurance Guidebook and Standard] (see quality assurance in IEEE 610.12 IEEE Standard Glossary of Software Engineering Terminology). [[Category:Quality assurance]] [[Category:Software quality]]</text> </page> <page> <id>34968</id> <title>Software brittleness problem</title> <text>{{Unreferenced|date=December 2009}} The '''software brittleness''' problem is a consequence of the well-known fact that computers carry out commands, rather than exhibiting initiative. A computer system with true initiative would have large amounts of practical knowledge about the real world. When it could not carry out some instruction, it would look for an alternative method of accomplishing an equivalent result. Instead, {{As of|2008|alt=as of this date (2008)}} programs usually just fail with an error message. There are several approaches to solving the brittleness problem. ==Restricting the problem domain== Methods that limit the user's possible behaviors are arguably the most successful approach currently known to reducing software brittleness. In this way, the program can be designed to cope with all possible behaviors, and then tested to see if it meets its design. ==Goal seeking software== In this design, the user specifies an acceptable outcome. 