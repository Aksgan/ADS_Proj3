Pan. "Adaptive localization in a dynamic WiFi environment through multi-view learning". In ''Proceedings of the 22nd AAAI Conference on Artificial Intelligence'' (AAAI'07) Vancouver, British Columbia, Canada. July 2007. 1108-1113</ref> proposed to apply multi-view learning for migrating the labelled data to a new time period. ===Data mining based approach to activity recognition=== Different from traditional machine learning approaches, a novel approach based on data mining has been recently proposed by a research group led by Dr. Gu.<ref>Tao Gu, Zhanqing Wu, Xianping Tao, Hung Keng Pung, and Jian Lu. epSICAR: An Emerging Patterns based Approach to Sequential, Interleaved and Concurrent Activity Recognition. In Proc. of the 7th Annual IEEE International Conference on Pervasive Computing and Communications (Percom '09), Galveston, Texas, March 9–13, 2009.</ref> In this approach, the problem of activity recognition is formulated as a pattern-based classification problem. They proposed a novel data mining approach based on discriminative patterns which describe significant changes between any two activity classes of data to recognize sequential, interleaved and concurrent activities in a unified solution. The advantages of such an approach are: Firstly, they provide a solution which recognizes sequential, interleaved and concurrent activities in a unified computation framework. Secondly, no training is required for interleaved and concurrent activities since these two activity models can be derived directly from the sequential activity model. Thirdly, their solution is more noise tolerant because mining the differences of classes will not include noise patterns provided the noise distribution is random among classes. The noise-tolerant feature is particularly important in sensor-based activity recognition. ==Labs in the world== * [http://www.eecs.umich.edu/~pollackm/ Martha Pollack's research group] * [http://www.cse.ust.hk/~qyang/ Prof Qiang Yang's research group] * [http://www.cs.washington.edu/ai/Mobile_Robotics/ RSE Lab @ University of Washington, leading by Dieter Fox] * [http://www.igd.fhg.de/igd-a1/index.html Fraunhofer IGD Lab for Ambient Intelligence] * [http://www.imada.sdu.dk/~gu Dr. Tao Gu's Pervasive Computing and Information System Lab at University of Southern Denmark] * [http://www.pancube.com/MLMC/MLWSN.html Jeffrey Junfeng Pan's Sensor-based Localization and Tracking Project] * [http://www.cuslab.com/eng/template/vba.php Ajou University CUSLAB Vision-based Activity Awareness] * [http://pac.cs.dartmouth.edu/ Tanzeem Choudhury's People-Aware Computing (PAC) Group] * [http://www.wearable.ethz.ch/ Wearable Computing Lab at ETH Zurich] * [http://www.eng.yale.edu/enalab/behaviorscope.htm The BehaviorScope Project at ENALAB - Yale] * [http://www.ess.tu-darmstadt.de The Embedded Sensing Systems group] at [http://en.wikipedia.org/wiki/Darmstadt_University_of_Technology TU Darmstadt] * [http://ailab.wsu.edu/casas/ WSU CASAS Smart Home Project] * [http://www.kn-s.dlr.de/activity/ DLR Institute for Communications and Navigation Activity Recognition Project] ==Related conferences== * [http://www.aaai.org/ AAAI] * [http://vision.eecs.ucf.edu/ CVPR] * [http://www.iccv2009.org/ ICCV] * [http://www.ijcai.org/ IJCAI] * [http://nips.cc/ NIPS] * [http://www.pervasive2008.org/ PERVASIVE] * [http://www.ubicomp.org/ Ubicomp] * [http://www.percom.org/ PerCom] * [http://www.iswc.net/ ISWC] ==See also== * [[Planning]] * [[Naive Bayes classifier]] * [[Support vector machines]] * [[Hidden Markov model]] * [[Conditional random field]] ==References== {{reflist}} {{DEFAULTSORT:Activity Recognition}} [[Category:Cognition]] [[Category:Artificial intelligence applications]] [[Category:Machine learning]]</text> </page> <page> <id>908</id> <title>Actor model and process calculi</title> <text>{{Copy to Wikibooks}} In [[computer science]], the '''[[Actor model]]''' and [[Process calculi|'''process calculi''']] are two closely related approaches to the modelling of [[concurrency (computer science)|concurrent digital computation]]. See [[Actor model and process calculi history]]. There are many similarities between the two approaches, but also several differences (some philosophical, some technical): *There is only one [[Actor model]] (although it has numerous formal systems for design, analysis, verification, modeling, ''etc.''); there are numerous [[process calculi]], developed for reasoning about a variety of different kinds of concurrent systems at various levels of detail (including calculi that incorporate time, stochastic transitions, or constructs specific to application areas such as security analysis). *The Actor model was inspired by the laws of [[physics]] and depends on them for its fundamental axioms, ''i.e.'' [[physical law]]s (see [[Actor model theory]]); the process calculi were originally inspired by [[algebra]] {{harv|Milner|1993}}. *Processes in the process calculi are anonymous, and communicate by sending messages either through named [[Channel (communications)|channels]] (synchronous or asynchronous), or via [[Ambient calculus|ambients]] (which can also be used to model channel-like communications {{harv|Cardelli and Gordon|1998}}). In contrast, actors in the Actor model possess an identity, and communicate by sending messages to the mailing addresses of other actors (this style of communication can also be used to model channel-like communications &mdash; see below). The publications on the Actor model and on process calculi have a fair number of cross-references, acknowledgments, and reciprocal citations (see [[Actor model and process calculi history]]). ==How do channels work?== Indirect communication using channels (''e.g.'' Gilles Kahn and David MacQueen [1977]) has been an important issue for communication in parallel and concurrent computation affecting both semantics and performance. Some process calculi differ from the Actor model in their use of channels as opposed to direct communication. ==Issues with synchronous channels== Synchronous channels have the property that a sender putting a message in the channel must wait for a receiver to get the message out of the channel before the sender can proceed. ===Simple synchronous channels=== A synchronous channel can be modeled by an Actor that receives <tt>put</tt> and <tt>get</tt> communications. The following is the behavior of an Actor for a simple synchronous channel: *Each <tt>put</tt> communication has a message and an address to which an acknowledgment is sent when the message is received by a <tt>get</tt> communication from the channel in [[FIFO]] order. *Each <tt>get</tt> communication has an address to which the received message is sent. ===Synchronous channels in process calculi=== However, simple synchronous channels do not suffice for process calculi such as [[Communicating Sequential Processes]] (CSP) [Hoare 1978 and 1985] because use of the ''guarded choice'' (after Dijkstra) command (called the ''alternative'' command in CSP). In a guarded choice command multiple offers (called guards) can be made concurrently on multiple channels to <tt>put</tt> and <tt>get</tt> messages; however at most one of the guards can be chosen for each execution of the guarded choice command. Because only one guard can be chosen, a guarded choice command in general effectively requires a kind of [[two-phase commit protocol]] or perhaps even a [[three-phase commit protocol]] if [[Timeout (telecommunication)|time-outs]] are allowed in guards (as in Occam 3 [1992]). Consider the following program written in CSP [Hoare 1978]: [X :: Z!stop() || Y :: guard: boolean; guard := true; *[guard → Z!go(); Z?guard] || Z :: n: integer; n:= 0; *[X?stop() → Y!false; print!n; 