Systems Practice 4, (3) (215-235). * Tabbi, Joseph (2002). ''Cognitive Fictions''. University of Minnesota Press. ISBN 0-8166-3557-9 &mdash; draws on systems theory and cognitive science to introduce autopoiesis to literary studies * Varela, Francisco J.; Maturana, Humberto R.; & Uribe, R. (1974). Autopoiesis: the organization of living systems, its characterization and a model. ''Biosystems'' '''5''' 187&ndash;196. &mdash;one of the original papers on the concept of autopoiesis * [[Terry Winograd|Winograd, Terry]] and [[Fernando Flores]] (1990). ''Understanding Computers and Cognition: A New Foundation for Design''. Ablex Pub. Corp. &mdash;cognitive systems perspective on autopoiesis ==External links== * [http://www.enolagaia.com/AT.html ''The Observer Web: Autopoiesis and Enaction'': a website with more explanations] * [http://archonic.net Several papers on autopoietic theory are available through archonic.net] * [http://www.systems-thinking.de/selforganization.html. A mindmap-collection of links and papers visualized by Ragnar Heil] * [http://dx.doi.org/10.1002/sres.745 Autopoiesis and knowledge in the organization by Aquiles Limone, Luis E. Bastias] * [http://poietic-generator.net Poietic Generator: an autopoietic collective game] {{Neuroscience}} [[Category:Cybernetics]] [[Category:Systems theory]] [[Category:Philosophy of mind]] [[Category:Cognitive science literature]] [[Category:Consciousness studies]] [[Category:Self-organization]] [[Category:Thermodynamics]] [[Category:Non-equilibrium thermodynamics]] [[cs:Autopoiesis]] [[da:Autopoiese]] [[de:Autopoiesis]] [[el:Αυτοποίηση]] [[et:Autopoees]] [[es:Autopoiesis]] [[fr:Autopoïèse]] [[it:Autopoiesi]] [[nl:Autopoiese]] [[ja:オートポイエーシス]] [[pl:System autopoietyczny]] [[pt:Autopoiese]] [[ru:Аутопоэзис]] [[uk:Аутопоезис]] [[zh:自生系统论]]</text> </page> <page> <id>2960</id> <title>Autoroll</title> <text>{{Multiple issues|orphan =November 2010|refimprove =October 2010}} ''''Autoroll'''' (also: ''Key Autoroll'') refers to TV-signal decryption software that automatically updates a video receiver's or DVR/receiver's [[IDEA]] keys when the transmitting signal provider changes its block cipher algorithm.<ref>{{cite web |title = ''Glossary Terms & Definitions'' |website = ''Houston Media Systems'' |url = http://www.dbstv.com/glossary |accessdate = 2010-10-31}}</ref> Mention of ''autoroll'' software often figures in discussions of [[free-to-air]] satellite TV receivers, for which it is a vital component. Some form of autoroll software is also a standard component in pay-TV providers' [[smart cards]], which allow subscription TV services to guard against signal piracy. However, the term is most prevalently used by illegal TV pirates who attempt to use free-to-air hardware to view pay-only programming.<ref>{{cite web |title = ''How Can I Get Free DISH Network Programming'' |website = ''Internet Lion'' |url = http://www.internetlion.com/article/free-dish-network-programming |accessdate = 2010-11-29}}</ref> Often TV pirates will [[hack]] a TV subscription-service provider's smart cards and reprogram them with an autoroll for all the subscription service's channels. Though providers like [[DIRECTV]] and [[DISH Network]] have attempted to use weekly [[ECMs]], or "electronic countermeasures," to disrupt these illegal cards, many websites provide updated autoroll codes impervious to ECMs and offer this software for a monthly subscription fee less than the service provider's monthly fees.<ref name="Lieberman">{{cite news|last=Lieberman|first=David|url=http://www.usatoday.com/news/acovmon.htm |title=Millions of pirates are plundering satellite TV |publisher=USA Today |date=2002-12-02 |accessdate=2010-10-31}}</ref> Because subscription TV providers tend not to discuss the methods by which they encrypt and decrypt their signals, mention of "autoroll" software and "autorolling" on a website usually indicates that the website's owners are engaged in illegal TV piracy. Normally such sites claim they are not legally bound to reveal customers' identities;<ref>{{cite web |title = ''LEGAL SHIT @ PURPLEDISH.US '' |website = ''Purple Dish'' |url = http://www.purpledish.us/legal.html |accessdate = 2010-10-31}}</ref> often enough too, such sites will claim their activities are completely legal.<ref>{{cite web |title = ''Is this illegal?'' |website = ''SatelliteGuys.us'' |url = http://www.satelliteguys.us/fta-shack/124307-illegal.html |accessdate = 2010-10-31}}</ref> Yet according to both U.S. and Canadian laws neither claim is true. In fact, the U.S.'s Digital Millennium Copyright Act of 1998 compels equipment and coding providers to turn over their customers' records to subscription-service providers if the former is found to have engaged in or aided in stealing the latter's services.<ref name="Lieberman"/> ==References== {{Reflist|2}} [[Category:Cryptographic protocols]]</text> </page> <page> <id>2972</id> <title>Available expression</title> <text>In the field of [[compiler optimization]]s, '''available expressions''' is an analysis algorithm that determines for each point in the program the set of [[expression (programming)|expressions]] that need not be recomputed. Those expressions are said to be ''available'' at such a point. To be available on a program point, the operands of the expression should not be modified on any path from the occurrence of that expression to the program point. The analysis is an example of a forward [[data flow analysis]] problem. A set of available expressions is maintained. Each statement is analysed to see whether it changes the operands of one or more available expressions. This yields sets of available expressions at the end of each [[basic block]], known as the '''outset''' in data flow analysis terms. An expression is available at the start of a basic block if it is available at the end of each of the basic block's [[predecessor]]s. This gives a set of equations in terms of available sets, which can be solved by an iterative algorithm. ==References== * Aho, Sethi & Ullman: ''Compilers - Principles, Techniques, and Tools'' Addison-Wesley Publishing Company 1986 [[el:Ανάλυση διαθέσιμων εκφράσεων]] {{compsci-stub}} [[Category:Compiler optimizations]]</text> </page> <page> <id>2974</id> <title>Avalanche (dynamic analysis tool)</title> <text>''For other uses, see [[Avalanche (disambiguation)]]'' '''Avalanche''' is a [[dynamic program analysis]] tool developed in [[Institute_for_System_Programming|ISP RAS]] that performs [[symbolic execution]] in order to generate input data that causes an analysed program to [[Crash (computing)|crash]]. Avalanche uses [[Instrumentation_(computer_programming)|dynamic binary instrumentation]] framework provided by [[Valgrind]] to collect a set of [[Constraint_(mathematics)|constraints]] which are then [[Constraint_satisfaction|solved]] by [http://sites.google.com/site/stpfastprover/ STP] [[constraint solver]]. Avalanche is [[Open-source_software|open source]]. == External links == * [http://code.google.com/p/avalanche/ Avalanche Homepage] [[Category:Free computer programming tools]] [[Category:Dynamic code analysis]] [[Category:Software testing]] {{programming-software-stub}}</text> </page> <page> <id>2985</id> <title>Average-case complexity</title> <text>'''Average-case complexity''' is a subfield of [[computational complexity]] theory that studies the complexity of algorithms on random inputs. The study of average-case complexity has applications in the theory of [[cryptography]]. [[Leonid Levin]] presented the motivation for studying average-case complexity as follows:<ref>[http://www.cs.bu.edu/fac/lnd/research/hard.htm "Intractability Concepts for Concrete Problems", [[Leonid Levin]]]</ref>: :"Many combinatorial problems (called search or NP problems) have easy methods of checking solutions for correctness. Examples: finding factors of a long integer, or proofs of math theorems or short fast programs generating a given string. Such problems can be stated as a task to invert a given, easy to compute, function (multiplication or extraction of a theorem from its proof). In 1971 I noticed that many such problems can be proven to be as hard as the Tiling problem (which, I knew for a while, was universal, i.e. at least as hard as any search problem)... 