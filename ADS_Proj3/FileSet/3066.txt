using just NAND gates|NAND Gates|NAND gate|NAND in the purely logical sense|Logical NAND|logic gates generally|Logic gate}} {{Unreferenced|date=December 2009}} [[NAND gate]]s are one of the two basic [[logic gates]] (the other being [[NOR logic]]) from which any other logic gates can be built. Due to this property, NAND and [[NOR gate]]s are sometimes called "universal gates". However, modern [[integrated circuit]]s are not constructed exclusively from a single type of gate. Instead, [[Electronic design automation|EDA]] tools are used to convert the description of a logical circuit to a [[netlist]] of complex gates ([[standard cell]]s) or transistors ([[full custom]] approach). ==[[NOT]]== A NOT gate is made by joining the inputs of a NAND gate. Since a NAND gate is equivalent to an AND gate followed by a NOT gate, joining the inputs of a NAND gate leaves only the NOT part. {| align=center style="text-align:center" !width=150|Desired Gate!!width=150|NAND Construction |- |[[Image:NOT ANSI Labelled.svg]]||[[Image:NOT from NAND.svg]] |- |colspan=2 align=center| {| class='wikitable' style="text-align:center" align=center |+Truth Table ! Input A !! Output Q |- | 0 || 1 |- | 1 || 0 |} |} ==[[AND gate|AND]]== An AND gate is made by following a NAND gate with a NOT gate as shown below. This gives a NOT NAND, i.e. AND. {| align=center style="text-align:center" !width=150|Desired Gate!!width=150|NAND Construction |- |[[Image:AND ANSI Labelled.svg]]||[[Image:AND from NAND.svg]] |- |colspan=2 align=center| {| class='wikitable' style="text-align:center" align=center |+Truth Table ! Input A !! Input B !! !! Output Q |- | 0 || 0 || || 0 |- | 0 || 1 || || 0 |- | 1 || 0 || || 0 |- | 1 || 1 || || 1 |} |} ==[[OR gate|OR]]== If the truth table for a NAND gate is examined, it can be seen that if any of the inputs are 0, then the output will be 1. However to be an OR gate, if any input is 1, the output must also be 1. Therefore, if the inputs are inverted, any high input will trigger a high output. {| align=center style="text-align:center" !width=150|Desired Gate!!width=150|NAND Construction |- |[[Image:OR ANSI Labelled.svg]]||[[Image:OR from NAND.svg]] |- |colspan=2 align=center| {| class='wikitable' style="text-align:center" align=center |+Truth Table ! Input A !! Input B !! !! Output Q |- | 0 || 0 || || 0 |- | 0 || 1 || || 1 |- | 1 || 0 || || 1 |- | 1 || 1 || || 1 |} |} ==[[NOR gate|NOR]]== A NOR gate is simply an OR gate with an inverted output: {| align=center style="text-align:center" !width=150|Desired Gate!!width=150|NAND Construction |- |[[Image:NOR ANSI Labelled.svg]]||[[Image:NOR from NAND.svg]] |- |colspan=2 align=center| {| class='wikitable' style="text-align:center" align=center |+Truth Table ! Input A !! Input B !! !! Output Q |- | 0 || 0 || || 1 |- | 0 || 1 || || 0 |- | 1 || 0 || || 0 |- | 1 || 1 || || 0 |} |} ==[[XOR]]== An XOR gate is constructed similarly to an OR gate, except with an additional NAND gate inserted such that if both inputs are high, the inputs to the final NAND gate will also be high, and the output will be low. This effectively represents the formula: "(A NAND (A NAND B)) NAND (B NAND (A NAND B))". {| align=center style="text-align:center" !width=150|Desired Gate!!width=150|NAND Construction |- |[[Image:XOR ANSI Labelled.svg]]||[[Image:XOR from NAND.svg]] |- |colspan=2 align=center| {| class='wikitable' style="text-align:center" align=center |+Truth Table ! Input A !! Input B !! !! Output Q |- | 0 || 0 || || 0 |- | 0 || 1 || || 1 |- | 1 || 0 || || 1 |- | 1 || 1 || || 0 |} |} ==[[XNOR]]== An XNOR gate is simply an XOR gate with an inverted output: {| align=center style="text-align:center" !width=150|Desired Gate!!width=150|NAND Construction |- |[[Image:XNOR ANSI Labelled.svg]]||[[Image:XNOR from NAND.svg]] |- |colspan=2 align=center| {| class='wikitable' style="text-align:center" align=center |+Truth Table ! Input A !! Input B !! !! Output Q |- | 0 || 0 || || 1 |- | 0 || 1 || || 0 |- | 1 || 0 || || 0 |- | 1 || 1 || || 1 |} |} ==External links== * [http://knol.google.com/k/max-iskram/digital-electronic-design-for-beginners/1f4zs8p9zgq0e/23 Using Logic Gates] ==See also== *[[NOR logic]]. Like NAND gates, NOR gates are also universal gates. {{DEFAULTSORT:Nand Logic}} [[Category:Logic gates]]</text> </page> <page> <id>25551</id> <title>NAR 1</title> <text>{{Unreferenced|date=December 2009}} '''NAR 1''' or just '''NAR''' ([[Serbian language|Serbian]] '''Na'''stavni '''R'''ačunar, [[English language|en.]] ''Educational Computer'') was a theoretical model of a computer created by Faculty of Mathematics of [[University of Belgrade]] professor [[Nedeljko Parezanović]]. It was used for [[Assembly language]] and [[Computer architecture]] courses. ==Specifications== NAR 1 [[Central Processing Unit|processor]] has a 5-[[bit]] [[address bus]] (32 [[byte]]s of addressable memory) and 8-bit [[data bus]]. [[machine language|Machine]] [[instruction (computer science)|instruction]]s were single-byte with three [[most significant bit]]s specifying the [[opcode]] and 5 [[least significant bit]]s the parameter - [[memory address]]. A single 8-bit [[Accumulator (computing)|accumulator register]] was available and there were no [[Flag (computing)|flags or flag registers]]. Only [[Addressing mode#Absolute|absolute addressing mode]] was available and all others were achieved by [[self-modifying code]]. Even though this is only a theoretical computer the following physical characteristics were given: * Memory cycle: 1μs * Arithmetic operation (SABF) cycle: 0.9μs (900ns) * Control panel facilitates power on and off, memory data entry and readout, instruction counter entry and selection of either program execution mode or control panel mode. ==Instruction coding and set== * '''SABF''' (001aaaaa, [[Serbian language|sr.]] '''Sab'''eri u '''F'''iksnom zarezu, [[English language|en.]] Add Fixed point) loads the content of memory location specified by the address parameter, adds it to the current value of the accumulator and stores the result into the accumulator * '''PZAF''' (010xxxxx, [[Serbian language|sr.]] '''P'''romeni '''Z'''nak '''A'''kumulatora u '''F'''iksnom zarezu, [[English language|en.]] Change the sign of the accumulator in fixed point) Negates the fixed point (such as integer) value in the accumulator * '''AUM''' (011aaaaa, [[Serbian language|sr.]] '''A'''kumulator '''U''' '''M'''emoriju, [[English language|en.]] Accumulator Into Memory) stores the content of the accumulator into memory location specified by the address parameter * '''MUA''' (100aaaaa, [[Serbian language|sr.]] '''M'''emorija '''U''' '''A'''kumulator, [[English language|en.]] Memory Into Accumulator) loads the content of memory location specified 