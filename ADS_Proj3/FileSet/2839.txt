case 9600/10 bytes per second (960 byte/s), which is considerably slower than expected. It can get worse. If parity is specified and we use 2 stop bits, the overhead for carrying one 8 bit character is 4 bits (one start bit, one parity bit and two stop bits) - or 50%! In this case a 9600 bit/s connection will carry 9600/12 byte/s (800 byte/s). [[Asynchronous serial communication|Asynchronous serial interfaces]] commonly will support bit transmission speeds of up to 230.4 kbit/s. If it is set up to have no parity and one stop bit, this means the byte transmission rate is 23.04 kbyte/s. The advantage of the asynchronous serial connection is its simplicity. One disadvantage is its low efficiency in carrying data. This can be overcome by using a [[Synchronization (computer science)|synchronous]] interface. In this type of interface, a clock signal is added on a separate wire, and the bits are transmitted in synchrony with the clock &mdash; the interface no longer has to look for the start and stop bits of each individual character &mdash; however, it is necessary to have a mechanism to ensure the sending and receiving clocks are kept in synchrony, so data is divided up into frames of multiple characters separated by known delimiters. There are three common coding schemes for framed communications &mdash; [[HDLC]], [[Point-to-Point Protocol|PPP]], and [[Ethernet]] ===HDLC=== When using [[HDLC]], rather than each byte having a start, optional parity, and one or two stop bits, the bytes are gathered together into a [[data frame|frame]]. The start and end of the frame are signalled by the 'flag', and error detection is carried out by the frame check sequence. If the frame has a maximum sized address of 32 bits, a maximum sized control part of 16 bits and a maximum sized frame check sequence of 16 bits, the overhead per frame could be as high as 64 bits. If each frame carried but a single byte, the data throughput efficiency would be extremely low. However, the bytes are normally gathered together, so that even with a maximal overhead of 64 bits, frames carrying more than 24 bytes are more efficient than asynchronous serial connections. As frames can vary in size because they can have different numbers of bytes being carried as data, this means the overhead of an HDLC connection is not fixed. ===PPP=== The "[[point-to-point protocol]]" (PPP) is defined by the Internet Request For Comment documents RFC 1570, RFC 1661 and RFC 1662. With respect to the framing of packets, PPP is quite similar to HDLC, but supports both bit-oriented as well as byte-oriented ("octet-stuffed") methods of delimiting frames while maintaining data transparency. ===Ethernet=== [[Ethernet]] is a "[[local area network]]" (LAN) technology, which is also framed. The way the frame is electrically defined on a connection between two systems is different from the typically wide-area networking technology that uses HDLC or PPP implemented, but these details are not important for throughput calculations. Ethernet is a shared medium, so that it is not guaranteed that only the two systems that are transferring a file between themselves will have exclusive access to the connection. If several systems are attempting to communicate simultaneously, the throughput between any pair can be substantially lower than the nominal bandwidth available. ===Other low-level protocols=== Dedicated point-to-point links are not the only option for many connections between systems. [[Frame Relay]], [[Asynchronous Transfer Mode|ATM]], and [[MPLS]] based services can also be used. When calculating or estimating data throughputs, the details of the frame/cell/packet format and the technology's detailed implementation need to be understood. ====Frame Relay==== [[Frame Relay]] uses a modified HDLC format to define the frame format that carries data. ====ATM==== The "[[asynchronous transfer mode]]" (ATM) uses a radically different method of carrying data. Rather than using variable length frames or packets, data is carried in fixed size cells. Each cell is 53 bytes long, with the first 5 bytes defined as the header, and the following 48 bytes as payload. [[Computer networking|Data networking]] commonly requires packets of data that are larger than 48 bytes, so there is a defined adaptation process that specifies how larger packets of data should be divided up in a standard manner to be carried by the smaller cells. This process varies according to the data carried, so in ATM nomenclature, there are different [[ATM Adaptation Layers]]. The process defined for most data is named ATM Adaptation Layer No. 5 or [[AAL5]]. Understanding throughput on ATM links requires a knowledge of which ATM adaptation layer has been used for the data being carried. ====MPLS==== [[Multiprotocol Label Switching]] (MPLS) adds a standard tag or header known as a 'label' to existing packets of data. In certain situations it is possible to use MPLS in a 'stacked' manner, so that labels are added to packets that have already been labelled. Connections between MPLS systems can also be 'native', with no underlying transport protocol, or MPLS labelled packets can be carried inside frame relay or HDLC packets as payloads. Correct thoughput calculations need to take such configurations into account. For example, a data packet could have two MPLS labels attached via 'label-stacking', then be placed as payload inside an HDLC frame. This generates more overhead that has to be taken into account that a single MPLS label attached to a packet which is then sent 'natively', with no underlying protocol to a receiving system. ==Higher-level protocols== Few systems transfer files and data by simply copying the contents of the file into the 'Data' field of HDLC or PPP frames &mdash; another protocol layer is used to format the data inside the 'Data' field of the HDLC or PPP frame. The most commonly used such protocol is [[Internet Protocol]] (IP), defined by RFC 791. This imposes its own overheads. Again, few systems simply copy the contents of files into IP packets, but use yet another protocol that manages the connection between two systems &mdash; TCP ([[Transmission Control Protocol]]), defined by RFC 1812. This adds its own overhead. Finally, a final protocol 