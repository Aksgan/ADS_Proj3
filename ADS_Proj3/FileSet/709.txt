the actual request. This requires Circuit Breaker to use a persistent storage layer, e.g. a network cache such as [[Memcached]] or [[Redis (data store)|Redis]], or local cache (disk or memory based) to record the availability of a, to the application, external service. Circuit Breaker records the state of the external service on a given interval. Before the external service is used from the application, the storage layer is queried to retrieve the current state. ==Performance Implication== While it's save to say that the benefits outweigh the consequences, implementing Circuit Breaker will of course affect the performance. By how much depends on the storage layer used and generally available resources. The largest factors in this regard are the type of cache, for example, disk-based vs. memory-based and local vs. network. ==Example Implementation== ===PHP=== The following is a [[Proof of concept|POC]] example implementation in PHP. The POC stores the status of a MySQL server into a shared memory cache ([[Alternative PHP Cache|APC]]). ==== Check ==== The following script could be run on a set interval through [[crontab]]. <source lang="php"> $db = mysql_connect('localhost','root','pass'); if ($db === false) { apc_store('dbUp', 'up'); } else { apc_store('dbUp', 'down'); @mysql_close($db); } </source> ====Usage in an application==== <source lang="php"> if (apc_fetch('dbUp') === 'down') { echo "The database server is currently not available. Please try again in a minute."; exit; } $db = mysql_connect('localhost', 'root', 'pass'); $res = mysql_db_query('database', 'SELECT * FROM table'); </source> ==External links== *[http://artur.ejsmont.org/blog/PHP-Circuit-Breaker-initial-Zend-Framework-proposal Example of PHP implementation with diagrams] [[Category:Software design patterns]] [[Category:Articles with example PHP code]]</text> </page> <page> <id>6281</id> <title>Circuit minimization</title> <text>In [[Boolean algebra (logic)|Boolean algebra]], '''circuit minimization''' is the problem of obtaining the smallest [[logic circuit]] (Boolean formula) that represents a given [[Boolean function]] or [[truth table]]. The general circuit minimization problem is believed to be [[Computational_complexity_theory#Intractability|intractable]],<ref>{{Citation | first =Valentine | last =Kabanets | author-link = | first2 =Jin-Yi | last2 =Cai | contribution = Circuit minimization problem | title = [[Symposium on Theory of Computing|Proc. 32nd Symposium on Theory of Computing]] | id = {{ECCC|1999|99|045}} | year =2000 | pages =73–79 | place = Portland, Oregon, USA | doi = 10.1145/335305.335314}}.</ref> but there are effective heuristics such as [[Karnaugh map]]s and the [[Quine–McCluskey algorithm]] that facilitate the process. ==Purpose== The problem with having a complicated [[Electronic circuit| circuit]] (i.e. one with many elements, such as [[logic gate| logical gates]]) is that each element takes up physical space in its implementation and costs time and money to produce in itself. ==Example== While there are many ways to minimize a circuit, this is an example that minimizes (or simplifies) a boolean function. Note that the boolean function carried out by the circuit is directly related to the algebraic expression from which the function is implemented.<ref>M. Mano, C. Kime. "Logic and Computer Design Fundamentals" (Fourth Edition). Pg 54</ref> Consider the circuit used to represent <math>(A \wedge \bar{B}) \vee (\bar{A} \wedge B)</math>. It is evident that two negations, two conjunctions, and a disjunction are used in this statement. This means that to build the circuit one would need two [[Inverter (logic gate)|inverters]], two [[AND gate]]s, and an [[OR gate]]. We can simplify (minimize) the circuit by applying logical identities or using intuition. Since the example states that A is true when B is false or the other way around, we can conclude that this simply means <math>A \neq B</math>. In terms of logical gates, [[inequality (mathematics)|inequality]] simply means an [[XOR gate]] (exclusive or). Therefore, <math>(A \wedge \bar{B}) \vee (\bar{A} \wedge B) \iff A \neq B</math>. Then the two circuits shown below are equivalent: [[Image:Circuit-minimization.svg]] You can additionally check the correctness of the result using a [[truth table]]. ==See also== * [[Binary decision diagram]] * [[Karnaugh map]] * [[Circuit complexity]] * [[Function composition]] * [[Function decomposition]] ==References== {{reflist}} === Bibliography === * {{Citation | first =M. Morris | last =Mano | author-link = | first2 =Charles R. | last2 =Kime | editor-last = | editor-first = | editor2-last = | editor2-first = | contribution = | contribution-url = | title = Logic and Computer Design Fundamentals; Fourth Edition | year =2008 | pages =54 | place = | publisher =Pearson Education Inc. | url = | doi = | id = }} [[Category:Boolean algebra]] [[Category:Circuit complexity]] [[Category:Logic in computer science]] [[Category:Electronics optimization]] {{comp-sci-stub}}</text> </page> <page> <id>6283</id> <title>Circuit rider (technology)</title> <text>{{refimprove|date=November 2009}} {{this|the technology consultants|circuit rider}} The term '''circuit rider''', which has its [[circuit rider (Religious)|roots]] in [[Methodist]] preaching, has more recently been applied to technology assistance providers who travel to small [[non-profit organizations]] in a particular sector to troubleshoot or support particular technology needs in those organizations. Another term for these people is '''eRider'''. In this context, a circuit rider is part trainer, part [[management consultant]], part [[computer]] expert. They provide consulting and assistance with technology strategy development, make multiple visits to the organizations they serve, and provide advice and information by phone and [[e-mail]]. They can serve regional constituencies by travel from a central location. Additionally, circuit riders can "cross-pollinate" the groups they service, transmitting insights, tools, and tips as they travel throughout the sector. In addition, training materials and resources can be used at multiple sites thereby spreading the development cost out across a number of organizations. The umbrella term for this field is [[nonprofit technology]], and Circuit Riders are a form of [[NTAP|Nonprofit Technology Assistance Provider (NTAP)]] == History == Modern technology circuit riding for nonprofits began in the [[U. S.]] in the mid-1990s when Gavin Clabaugh at the Telecommunications Cooperative Network approached the W. Alton Jones Foundation to get funding for technology services for a group of the foundation's grantees. The making of a request directly from a service provider to a funding source (the foundation) to serve a group of grantees was a novel approach for technology provision in the nonprofit sector. To differentiate the approach it was given the name ''circuit riding''<ref>Paul-Brian McInerney, ''Nonprofits and Technology:Emerging Research for Usable Knowledge'', editors Michael Cortes and Kevin M. Rafter, Lyceum Books, 2007. pp 150 - 152. ISBN 978-1-933478-06-7</ref> ==See also== *[[NTAP|Nonprofit Technology Assistance 