Oral Argument] (PDF) in ''In re Bilski'' (Retrieved November 10, 2009)</ref><ref>http://www.scotuswiki.com/index.php?title=Bilski_v._Kappos Links to Briefs in ''In re Bilski'' (Retrieved November 10, 2009)</ref>) that affirmed the judgment of the CAFC, but revised many aspects of the CAFC's decision. In [[Bilski v. Kappos#Majority opinion|their decision]], handed down on June 28, 2010, the Supreme Court rejected the machine-or-transformation test as the sole test of process patent eligibility based on an interpretation of the language of § 101.<ref>''Bilski v. Kappos'', No. 08-964, 561 U.S. ___ (2010), slip op. at 8.</ref> The majority, however, had high praise for the Federal Circuit opinions, advising that "[s]tudents of patent law would be well advised to study these scholarly opinions."<ref>''Bilski v. Kappos'', slip op. at 3.</ref> Although the ruling in the Circuit Court made special effort to avoid language that would indicate the validity of software patents, many people such as the Free Software Foundation view Bilski as a deciding factor in the legality of patenting software.<ref>[http://cyberlaw.stanford.edu/node/6351 The Bilski Case and the Future of Software Patents](retrieved December 7, 2009)</ref> == See also == * [[Criticism of patents]] * [[Debates within software engineering]] * [[European Information, Communications and Consumer Electronics Technology Industry Associations]] (EICTA) * [[Foundation for a Free Information Infrastructure]] (FFII) * [[Free Software Foundation]] * [[In re Bilski]] * [[Irish Free Software Organisation]] * [[List of software patents]] * [[Public Patent Foundation]] * [[Software patent]] * [[Software patents and free software]] * [[Software patents under the European Patent Convention]] * [[Software patents under United Kingdom patent law]] * [[Software patents under United States patent law]] * [[W3C]] == References == {{Reflist|2}} == External links == {{external links|date=September 2010}} ==== Papers ==== *[http://digital.library.unt.edu/ark:/67531/metacrs5959/m1/1/high_res_d/ "Intellectual Property, Computer Software and the Open Source Movement"], United States Congressional Research Service, March 11, 2004 *[http://digital.library.unt.edu/ark:/67531/metacrs9214/m1/1/high_res_d/ "Patent Reform: Issues in the Biomedical and Software Industries"], United States Congressional Research Service, December 14, 2007 *[http://www.researchoninnovation.org/patent.pdf Sequential Innovation, Patents, and Imitation], by James Bessen and [[Eric Maskin]], Discussion paper, MIT (2000) *[http://ijlit.oxfordjournals.org/cgi/content/full/14/3/257?ijkey=rF2MI0t8NYrGuJJ&keytype=ref Software Patents – Boon or Bane for Europe?] by Andreas Grosche, ''International Journal of Law and Information Technology'' 2006 ====Articles==== * Musker, David, [http://jiplp.oxfordjournals.org/content/2/12/799.full.pdf "The Great Free Beer Debate"] [[Journal of Intellectual Property Law & Practice]], 2007, Vol. 2, No. 12, p799 ==== Neutral sites ==== *[http://www.bitlaw.com/software-patent/index.html Software Patent Index] - History and current practice of the [[United States Patent and Trademark Office|USPTO]] to granting software patents. *[http://www.iusmentis.com/patents/software/epc/ Software patents under the European Patent Convention] explains [[European Patent Office]] practice when examining patent applications involving software. *[http://www.jpo.go.jp/tetuzuki_e/t_tokkyo_e/Guidelines/PartVII-1.pdf Examination Guidelines for Software patents in Japan, Japanese Patent Office] ==== Sites in favor of patents on computer-implemented inventions ==== * [http://www.bakosenterprises.com/IP/B-10152005/prior-issue-links.html Insurance IP Bulletin] Articles regarding patents in business, which use software. ==== Sites against software patents ==== * [http://stopsoftwarepatents.eu Stop Software Patents] * [http://endsoftpatents.org End Software Patents] (campaign by [[Free Software Foundation]]) * [http://www.nosoftwarepatents.com No Software Patents - a web campaign supported by companies] * [http://perens.com/Articles/Patents.html Software Patents vs. Free Software] by [[Bruce Perens]] * [http://www.advogato.org/article/7.html Patent information for free software developers] - an analysis of the situation in the US from a patent attorney. * [http://w2.eff.org/patent/ EFF: Patent Busting Project] *[http://patentabsurdity.com/watch.html Patent Absurdity: how software patents broke the system] (Documentary Film) {{Intellectual property activism}} [[fr:Controverse sur la brevetabilité du logiciel]] {{DEFAULTSORT:Software Patent Debate}} [[Category:Computer-related patent law|Debate]] [[Category:Intellectual property activism]] [[Category:Discovery and invention controversies]] [[Category:Legal disputes]]</text> </page> <page> <id>35017</id> <title>Software project management</title> <text>{{refimprove|date=August 2010}} '''Software project management''' is the art and science of planning and leading software projects<ref name="Stellman05">{{cite book | last=Stellman | first=Andrew | last2=Greene | first2=Jennifer | title=Applied Software Project Management | url=http://www.stellman-greene.com/aspm/ | publisher=O'Reilly Media | year=2005 | isbn=978-0-596-00948-9 }}</ref>. It is a sub-discipline of [[project management]] in which [[software]] projects are planned, monitored and controlled. ==History== The history of software project management is closely related to the history of software. Software was developed for dedicated purposes for dedicated machines until the concept of [[object-oriented programming]] began to become popular in the 1960's, making ''repeatable solutions'' possible for the software industry. Dedicated systems could be adapted to other uses thanks to [[component-based software engineering]]. Companies quickly understood the relative ease of use that software programming had over hardware circuitry, and the software industry grew very quickly in the 1970's and 1980's. To manage new development efforts, companies applied proven project management methods, but project schedules slipped during test runs, especially when confusion occurred in the gray zone between the user specifications and the delivered software. To be able to avoid these problems, software project management methods focused on matching user requirements to delivered products, in a method known now as the [[waterfall model]]. Since then, analysis of software project management failures has shown that the following are the most common causes:<ref>[http://spectrum.ieee.org/computing/software/why-software-fails/5 IEEE] magazine article "Why Software Fails"</ref> # Unrealistic or unarticulated project goals # Inaccurate estimates of needed resources # Badly defined system requirements # Poor reporting of the project's status # Unmanaged risks # Poor communication among customers, developers, and users # Use of immature technology # Inability to handle the project's complexity # Sloppy development practices # Poor project management # Stakeholder politics # Commercial pressures The first three items in the list above show the difficulties articulating the needs of the client in such a way that proper resources can deliver the proper project goals. Specific software project management tools are useful and often necessary, but the true art in software project management is applying the correct method and then using tools to support the method. Without a method, tools are worthless. Since the 1960's, several proprietary software project management methods have been developed by software manufacturers for their own use, while computer consulting firms have also developed similar methods for their clients. Today software project management methods are still evolving, but the current trend leads away from the waterfall model to a more cyclic project delivery model that imitates a [[Software release life cycle]]. ==Software development process== A [[software development process]] is concerned primarily with the production aspect of [[software development]], as opposed to the technical aspect, 