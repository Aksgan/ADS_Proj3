branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | if_icmpeq || align="center" | 9f || branchbyte1, branchbyte2 || value1, value2 &rarr; || if ints are equal, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | if_icmpne || align="center" | a0 || branchbyte1, branchbyte2 || value1, value2 &rarr; || if ints are not equal, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | if_icmplt || align="center" | a1 || branchbyte1, branchbyte2 || value1, value2 &rarr; || if ''value1'' is less than ''value2'', branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | if_icmpge || align="center" | a2 || branchbyte1, branchbyte2 || value1, value2 &rarr; || if ''value1'' is greater than or equal to ''value2'', branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | if_icmpgt || align="center" | a3 || branchbyte1, branchbyte2 || value1, value2 &rarr; || if ''value1'' is greater than ''value2'', branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | if_icmple || align="center" | a4 || branchbyte1, branchbyte2 || value1, value2 &rarr; || if ''value1'' is less than or equal to ''value2'', branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | ifeq || align="center" | 99 || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is 0, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | ifne || align="center" | 9a || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is not 0, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | iflt || align="center" | 9b || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is less than 0, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | ifge || align="center" | 9c || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is greater than or equal to 0, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | ifgt || align="center" | 9d || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is greater than 0, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | ifle || align="center" | 9e || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is less than or equal to 0, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | ifnonnull || align="center" | c7 || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is not null, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | ifnull || align="center" | c6 || branchbyte1, branchbyte2 || value &rarr; || if ''value'' is null, branch to instruction at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') |- | iinc || align="center" | 84 || index, const || [No change] || increment local variable ''#index'' by signed byte ''const'' |- | iload || align="center" | 15 || index || &rarr; value || loads an int ''value'' from a local variable ''#index'' |- | iload_0 || align="center" | 1a || || &rarr; value || loads an int ''value'' from local variable 0 |- | iload_1 || align="center" | 1b || || &rarr; value || loads an int ''value'' from local variable 1 |- | iload_2 || align="center" | 1c || || &rarr; value || loads an int ''value'' from local variable 2 |- | iload_3 || align="center" | 1d || || &rarr; value || loads an int ''value'' from local variable 3 |- | imul || align="center" | 68 || || value1, value2 &rarr; result || multiply two integers |- | ineg || align="center" | 74 || || value &rarr; result || negate int |- | instanceof || align="center" | c1 || indexbyte1, indexbyte2 || objectref &rarr; result || determines if an object ''objectref'' is of a given type, identified by class reference ''index'' in constant pool (''indexbyte1 << 8 + indexbyte2'') |- | invokeinterface || align="center" | b9 || indexbyte1, indexbyte2, count, 0 || objectref, [arg1, arg2, ...] &rarr; || invokes an interface method on object ''objectref'', where the interface method is identified by method reference ''index'' in constant pool (''indexbyte1 << 8 + indexbyte2'') |- | invokespecial || align="center" | b7 || indexbyte1, indexbyte2 || objectref, [arg1, arg2, ...] &rarr; || invoke instance method on object ''objectref'', where the method is identified by method reference ''index'' in constant pool (''indexbyte1 << 8 + indexbyte2'') |- | invokestatic || align="center" | b8 || indexbyte1, indexbyte2 || [arg1, arg2, ...] &rarr; || invoke a static method, where the method is identified by method reference ''index'' in constant pool (''indexbyte1 << 8 + indexbyte2'') |- | invokevirtual || align="center" | b6 || indexbyte1, indexbyte2 || objectref, [arg1, arg2, ...] &rarr; || invoke virtual method on object ''objectref'', where the method is identified by method reference ''index'' in constant pool (''indexbyte1 << 8 + indexbyte2'') |- | ior || align="center" | 80 || || value1, value2 &rarr; result || bitwise int or |- | irem || align="center" | 70 || || value1, value2 &rarr; result || logical int remainder |- | ireturn || align="center" | ac || || value &rarr; [empty] || returns an integer from a method |- | ishl || align="center" | 78 || || value1, value2 &rarr; result || int shift left |- | ishr || align="center" | 7a || || value1, value2 &rarr; result || int arithmetic shift right |- | istore || align="center" | 36 || index || value &rarr; || store int ''value'' into variable ''#index'' |- | istore_0 || align="center" | 3b || || 