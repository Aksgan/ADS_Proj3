Systems]]|date=2010-07-10|accessdate=2010-09-10}}</ref> ==See also== * [[icacls]] * [[Security Identifier]] * [[Mandatory access control]] ==References== {{reflist}} ==External links== * [http://msdn.microsoft.com/en-us/library/ms537319(VS.85).aspx Introduction to the Protected Mode API] * [http://msdn2.microsoft.com/en-us/library/bb625964.aspx Windows Vista Integrity Mechanism technical reference on MSDN] * [http://www.securityfocus.com/print/infocus/1887 Introduction to Windows Integrity Control: Security Focus article] *[http://www.verizonbusiness.com/resources/whitepapers/wp_escapingmicrosoftprotectedmodeinternetexplorer_en_xg.pdf Escaping from Microsoft’s Protected Mode Internet Explorer] {{Windows Components}} [[Category:Windows Vista]] [[Category:Microsoft Windows security technology]] [[Category:Access control]] [[Category:Computer security]] [[Category:Windows 7]] [[Category:Internet Explorer]] [[fr:Mandatory Integrity Control]] [[ms:Mandatory Integrity Control]]</text> </page> <page> <id>23379</id> <title>Manfred Trenz</title> <text>'''Manfred Trenz ''' (born November 29, 1965, [[Saarbrücken]]) is a [[Germany|German]] computer game developer. He was the developer of the popular ''[[Turrican]]'' video game series, the [[Commodore 64]] version of the game ''[[R-Type]]'' and also ''[[The Great Giana Sisters]]''. Several of his games have achieved cult status. He is currently developing several games for his own company, Denaris Entertainment Software. == External links == * [http://www.mt-fanpage.de The Manfred Trenz Fanpage] * [http://web.archive.org/web/20040317202540/http://www.retrogaming.it/interviste/intervista_a_manfred_trenz2.htm Interview with Manfred Trenz] * [http://www.denarisoftware.com Denaris Entertainment Software] * {{moby developer|id=63025|name=Manfred Trenz}} * {{imdb name|id=1866499|name=Manfred Trenz}} {{Persondata <!-- Metadata: see [[Wikipedia:Persondata]]. --> | NAME = Trenz, Manfred | ALTERNATIVE NAMES = | SHORT DESCRIPTION = | DATE OF BIRTH = November 29, 1965 | PLACE OF BIRTH = | DATE OF DEATH = | PLACE OF DEATH = }} {{DEFAULTSORT:Trenz, Manfred}} [[Category:1965 births]] [[Category:Living people]] [[Category:German inventors]] [[Category:Video game programmers]] [[Category:German video game designers]] {{videogame-bio-stub}} {{germany-bio-stub}} [[cs:Manfred Trenz]] [[de:Manfred Trenz]] [[it:Manfred Trenz]] [[sv:Manfred Trenz]]</text> </page> <page> <id>23380</id> <title>Mangler Pattern</title> <text>{{Orphan|date=February 2009}} {{Unreferenced|date=October 2007}} '''Mangler''' is a software [[design pattern (computer science)|design pattern]]. A Mangler is a pattern that performs multiple operations over a series of data, similar to the [[MapReduce]] function inside of [[BigTable]] and [[Amazon's Dynamo]]. Typically, a mangler is fed a series of Maps from which it performs its internal operations and passes its internal state/data to an external Filter. A typical usage of the Mangler Pattern is during internal search operations. When parsing a query from an end-user, the system will try and strip out a series of un-needed tokens, reassembling the original query into a more usable, functional query. An important distinction between the Mangler and other patterns is the "Modify in place" optimization, pioneered by the pattern's creator. This pattern was created by [[John Watson (Programmer)|Dr. John Watson]], during his tenure at TransUnion's Research and Development Lab. == Java == <source lang="java"> // This is a trivial implementation of Mangler in Java. public interface TokenMangler { List<String> mangleTokens (List<String> tokens); } public class LowerCasingTokenMangler implements TokenMangler { List<String> mangleTokens (List<String> tokens) { List<String> results = new ArrayList<String>(); for (String token : tokens) { results.add(token.toLowerCase()); } return results; } } </source> [[Category:Software design patterns]]</text> </page> <page> <id>23382</id> <title>Manifest (.NET Framework)</title> <text>An '''assembly manifest''' is a text file containing [[metadata]] about [[.NET assembly|.NET assemblies]]. It describes the relationship and dependencies of the components in the assembly, versioning information, scope information and the security permissions required by the assembly. The manifest information embedded within an assembly can be viewed using IL Disassembler (ILDASM.exe) which is available as part of Microsoft Windows SDK. Assembly Manifest Every assembly, whether static or dynamic, contains a collection of data that describes how the elements in the assembly relate to each other. The assembly manifest contains this assembly metadata. An assembly manifest contains all the metadata needed to specify the assembly's version requirements and security identity, and all metadata needed to define the scope of the assembly and resolve references to resources and classes. The assembly manifest can be stored in either a PE file (an .exe or .dll) with Microsoft intermediate language (MSIL) code or in a standalone PE file that contains only assembly manifest information. The following illustration shows the different ways the manifest can be stored. Types of assemblies For an assembly with one associated file, the manifest is incorporated into the PE file to form a single-file assembly. You can create a multifile assembly with a standalone manifest file or with the manifest incorporated into one of the PE files in the assembly. Each assembly's manifest performs the following functions: • Enumerates the files that make up the assembly. • Governs how references to the assembly's types and resources map to the files that contain their declarations and implementations. • Enumerates other assemblies on which the assembly depends. • Provides a level of indirection between consumers of the assembly and the assembly's implementation details. • Renders the assembly self-describing. Assembly Manifest Contents The following table shows the information contained in the assembly manifest. The first four items — the assembly name, version number, culture, and strong name information — make up the assembly's identity. Information Description Assembly name A text string specifying the assembly's name. Version number A major and minor version number, and a revision and build number. The common language runtime uses these numbers to enforce version policy. Culture Information on the culture or language the assembly supports. This information should be used only to designate an assembly as a satellite assembly containing culture- or language-specific information. (An assembly with culture information is automatically assumed to be a satellite assembly.) Strong name information The public key from the publisher if the assembly has been given a strong name. List of all files in the assembly A hash of each file contained in the assembly and a file name. Note that all files that make up the assembly must be in the same directory as the file containing the assembly manifest. Type reference information Information used by the runtime to map a type reference to the file that contains its declaration and implementation. This is used for types that are exported from the assembly. Information on referenced assemblies A list of other assemblies that are statically referenced by the assembly. Each reference includes the dependent assembly's name, assembly metadata (version, culture, operating system, and so on), and public key, if the assembly is strong named. ==External links== *[http://msdn2.microsoft.com/en-us/library/1w45z383(vs.71).aspx Assembly Manifest at MSDN] {{Microsoft-software-stub}} [[Category:.NET framework]]</text> </page> <page> <id>23390</id> <title>Manipulability ellipsoid</title> <text>{{orphan|date=February 2009}} In [[robotics]], the '''manipulability 