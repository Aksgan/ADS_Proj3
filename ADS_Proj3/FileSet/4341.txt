real to extended integer, 990/12) *CDE (convert double to extended integer, 990/12) *CER (convert extended integer to real, 990/12) *CED (convert extended integer to double, 990/12) *XIT (exit floating point - nop, 990/12) <div style="font-size:116%;font-weight:bold;">Type 8 instructions</div> The first part specifies the operation, the second part specifies the register or mask. The third part, if present, specifies an immediate operand in a second word. *LIMI (load interrupt mask immediate) *LI (load immediate) *AI (add immediate) *ANDI (and immediate) *ORI (or immediate) *CI (compare immediate) *STWP (store workspace pointer) *STST (store status) *LWPI (load workspace pointer immediate) *BLSK (branch immediate push link onto stack, 990/12) <div style="font-size:116%;font-weight:bold;">Type 9 instructions</div> One part of the word specifies the operation, the second part provides the register, the third part provides information for locating the second operand. *MPY (unsigned multiply) *DIV (unsigned divide) <div style="font-size:116%;font-weight:bold;">Type 10 instruction</div> The first part specifies the operation, the second part specifies the map file (0=kernel, 1=user) and the third specifies a register. This instruction supported on the 990/10, 990/10A and 990/12. *LMF (load map file) <div style="font-size:116%;font-weight:bold;">Type 11 instructions</div> The first word is the opcode; the first part of the second word is the byte count field, the second part is the destination operand and the third part is the source operand. These instructions supported on the 990/12. *NRM (normalize) *RTO (right test for ones) *LTO (left test for ones) *CNTO (count ones) *BDC (binary to decimal conversion) *DBC (decimal to binary conversion) *SWPM (swap multiple) *XORM (xor multiple) *ORM (or multiple) *ANDM (and multiple) *SM (subtract multiple) *AM (add multiple) <div style="font-size:116%;font-weight:bold;">Type 12 instructions</div> The first part of the first word is the opcode, the second part of the first word indicates a checkpoint register; the first part of the second word is the byte count field, the second part is the destination operand and the third part is the source operand. These instruction supported on the 990/12. *SNEB (search string for not equal byte) *CRC (cyclic redundancy code calculation) *TS (translate string) *CS (compare string) *SEQB (search string for equal byte) *MOVS (move string) *MVSR (move string reversed) *MVSK (move string from stack) *POPS (pop string from stack) *PSHS (push string to stack) <div style="font-size:116%;font-weight:bold;">Type 13 instructions</div> The first word is the opcode; the first part of the second word is the byte count field, the second part is the shift count and the third part is the source operand. These instructions supported on the 990/12. *SRAM (shift right arithmetic multiple) *SLAM (shift left arithmetic multiple) <div style="font-size:116%;font-weight:bold;">Type 14 instructions</div> The first word is the opcode; the first part of the second word is the position field and the second part is the source operand. These instructions supported on the 990/12. *TMB (test memory bit) *TCMB (test and clear memory bit) *TSMB (test and set memory bit) <div style="font-size:116%;font-weight:bold;">Type 15 instruction</div> The first part of the first word is the opcode, the second part of the first word indicates a width; the first part of the second word is the position, the second part is the source operand. This instruction supported on the 990/12. *IOF (invert order of field) <div style="font-size:116%;font-weight:bold;">Type 16 instructions</div> The first part of the first word is the opcode, the second part of the first word indicates a width; the first part of the second word is the position, the second part is the destination operand and the third part is the source operand. These instructions supported on the 990/12. *INSF (insert field) *XV (extract value) *XF (extract field) <div style="font-size:116%;font-weight:bold;">Type 17 instructions</div> The first word is the opcode; the first part of the second word is the value field and the second part is the register and the third part is the relative offset. These instructions supported on the 990/12. *SRJ (subtract value from register and jump) *ARJ (add value to register and jump) <div style="font-size:116%;font-weight:bold;">Type 18 instructions</div> The first part of the word is the opcode and the second part is the register specification. These instructions supported on the 990/12. *STPC (store PC in register) *LIM (load interrupt mask from register) *LST (load status register) *LWP (load workspace pointer) *LCS (load control store) <div style="font-size:116%;font-weight:bold;">Type 19 instruction</div> The first word is the opcode; the first part of the second word is the is the destination operand and the second part is the source operand. This instruction supported on the 990/12. *MOVA (move address) <div style="font-size:116%;font-weight:bold;">Type 20 instructions</div> The first word is the opcode; the first part of the second word is the condition code field, the second part is the destination operand and the third part is the source operand. These instructions supported on the 990/12. *SLSL (search list logical address) *SLSP (search list physical address) <div style="font-size:116%;font-weight:bold;">Type 21 instruction</div> The first part of the first word is the opcode, the second part of the first word specifies the destination length; the first part of the second word specifies the source length, the second part is the destination operand and the third part is the source operand. This instruction supported on the 990/12. *EP (extend precision) == Assembly Language Programming Example == A complete "[[Hello world program|Hello, world!]]" program in TI-990 assembler, to run under [[DX10_operating_system|DX10]]: IDT 'HELLO' TITL 'HELLO - hello world program' * DXOP SVC,15 Define SVC TMLUNO EQU 0 Terminal LUNO * R0 EQU 0 R1 EQU 1 R2 EQU 2 R3 EQU 3 R4 EQU 4 R5 EQU 5 R6 EQU 6 R7 EQU 7 R8 EQU 8 R9 EQU 9 R10 EQU 10 R11 EQU 11 R12 EQU 12 R13 EQU 13 R14 EQU 14 R15 EQU 15 * DATA WP,ENTRY,0 * * Workspace (On the 990 we can "preload" registers) * WP DATA 0 R0 DATA 0 R1 DATA >1600 R2 - End of program SVC DATA >0000 R3 - Open I/O opcode DATA >0B00 R4 - Write I/O opcode DATA >0100 R5 - Close I/O opcode DATA STRING R6 - Message address DATA STRLEN R7 - Message length DATA 0 R8 DATA 0 R9 