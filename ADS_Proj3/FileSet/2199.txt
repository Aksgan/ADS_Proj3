program which uses a modified version of [[ANSI C]] with several libraries and features that allow hobbyists to program small robotics platforms. ==Version by Newton Research Labs== Newton Research Labs developed Interactive C as a compiling environment for robots using the [[Freescale 68HC11|Motorola 6811]] processor. The MIT LEGO Robot Design Contest (6.270) was the original purpose for the software<ref>[http://spacecats.mit.edu/ MIT's Autonomous Robot Design Competition]</ref>. It became popular, however, due to its ability to compile [[on the fly]] rather than taking time to compile beforehand as other languages had done. The programming environment's newest version is IC Version 8.0.2, which supports these [[operating system]]s: *[[Microsoft Windows]] [[Windows XP|XP]], [[Windows 2000|2000]], [[Windows Vista|Vista]] *[[Macintosh]] *[[Unix]] and [[Unix-like]]: [[IRIX]], [[Solaris (operating system)|Solaris]], [[SunOS]]; [[Linux]] The screenshot to the right shows Interactive C running on a Windows [[operating system]]. The program features an ''Interaction Window'' where one-line C commands can be sent to the connected controller as well as an editing window, here titled ''main.c'', where a program file is being edited and can be sent to the attached controller. Here is the basic "Hello World" example for IC programming: <source lang="c"> void main() { printf("Hello World"); } </source> Here is another example using motor ports 1 and 3: <source lang="c"> void main() { motor(1,100); motor(3,100); sleep(2.0); ao(); } </source> <source lang="c"> void main { while(1) { beep(); } } </source> a basic [[infinite loop]] that will beep for ever. Interactive C is used by [[The Ohio State University]] to program [[Handy Board|MIT Handy Board]]s in its Fundamentals of Engineering for Honors Program. [http://feh.osu.edu/Lectures/192wi06/Lecture%2026%20-%20Handy%20Board%20-%2006.ppt#263,11,Interactive_C|1] ==Version by KISS Institute for Practical Robotics== KISS Institute for Practical Robotics developed a third-party alternative to the Newton Labs version of Interactive C for their [[Botball]] Educational Robotics Program. The latest version of Interactive C by KISS Institute for Practical Robotics is IC 8.0.2, which supports these operating systems: *Windows 2000, XP, Vista *[[Mac OS X]] 10.3, 10.4, 10.5 *Linux (with gcc 3.3) IC8 supports the following robotics controllers: *Xport Botball Controller ([[XBC]]) versions 1, 2, and 3 *Xport Botball Controller ([[XBC]]) with iRobot Create *MIT [[Handy Board]] with [[Expansion card|Expansion Board]] *[[Lego_Mindstorms#RCX| Lego RCX]] using the serial IR tower ==References== {{Reflist}} ==External links== *[http://www.botball.org/ic Botball IC page] *[http://www.kipr.org/icbeta/ KISS Institute for Practical Robotics IC Beta page] *[http://www.newtonlabs.com/ic/ Newton Labs IC page] *[http://handyboard.com/software/icmanual/icmain.pdf Interactive C Manual] from handyboard.com [[Category:C programming language]]</text> </page> <page> <id>18825</id> <title>Interactive Ruby Shell</title> <text>{{Infobox Software | name = Interactive Ruby Shell | logo = | screenshot = [[Image:Interactive Ruby Shell.png|300px|]] | caption = The screenshot session as same as the article example | collapsible = yes | developer = [[Keiju Ishitsuka]] <!--keiju@ishitsuka.com--> | latest release version = 0.9.5 | latest release date = {{release date|2007|02|13}} | operating system = [[Cross-platform]] | platform = [[Ruby programming language|Ruby interpreter]] | programming language = [[Ruby programming language|Ruby]] | genre = [[Ruby (programming language)|Ruby]] [[shell (computing)|shell]] | license = [http://www.ruby-lang.org/en/about/license.txt/ Ruby License]<br />[[GNU General Public License]] | website = http://www.ruby-lang.org/en/ }} '''Interactive Ruby Shell''' ('''IRB''') is a [[shell (computing)|shell]] for programming in the [[Object-oriented programming|object-oriented]] [[scripting language]] [[Ruby programming language|Ruby]]. The program is launched from a [[Command line interface|command line]] and allows the execution of Ruby commands with immediate response, experimenting in real-time. It features [[command history]], line editing capabilities, and [[job control (Unix)|job control]], and is able to communicate directly as a [[shell script]] over the Internet and interact with a live server. It was developed by [[Keiju Ishitsuka]]. Program usage: irb [ options ] [ ''programfile'' ] [ ''argument...'' ] Example usage: <source lang="ruby"> irb(main):001:0> n = 5 => 5 irb(main):002:0> def fact(n) irb(main):003:1> if n <= 1 irb(main):004:2> 1 irb(main):005:2> else irb(main):006:2* n * fact(n - 1) irb(main):007:2> end irb(main):008:1> end => nil irb(main):009:0> fact(n) => 120 </source> ==See also== * [[Comparison of computer shells]] ==External links== *[http://tryruby.org/ "Try Ruby"] Online IRB *[http://ruby-doc.org/docs/ProgrammingRuby/html/trouble.html "When Trouble Strikes"] chapter from ''[[Programming Ruby]]'' *[http://ruby-doc.org/docs/ProgrammingRuby/html/irb.html "Interactive Ruby Shell"] chapter from ''[[Programming Ruby]]'' *[http://showmedo.com/videos/video?name=rubyLakeIrbCompletion Enabling Tab Completion in IRB] video tutorial at [[showmedo]] {{Ruby programming language}} {{Compu-lang-stub}} [[Category:Ruby programming language]] [[el:Interactive Ruby Shell]] [[fr:Interactive Ruby]] [[ru:Interactive Ruby Shell]]</text> </page> <page> <id>18832</id> <title>Interactive programming</title> <text>[[Image:JITvsStandardProgramming.png|thumb|200px|right|Interactive programming vs. standard programming]] '''Interactive programming''' is the procedure of writing parts of a program while it is already active. This focuses on the program text as the main [[User interface|interface]] for a running process, rather than an [[Interactive computing|interactive application]], where the program is designed in [[development cycle]]s and used thereafter (usually by a so-called "user", in distinction to the "developer"). Consequently, here, ''the activity of writing a program becomes part of the program itself.'' It thus forms a specific instance of [[interactive computation]] as an extreme opposite to [[batch processing]], where neither writing the program nor its use happens in an interactive way. The principle of ''rapid feedback'' in [[Extreme Programming]] is radicalized and becomes more explicit. '''Synonyms:''' live coding, on-the-fly-programming, just in time programming, conversational programming == Application fields == Interactive programming techniques are especially useful in cases where no clear specification of the problem that is to be solved can be given in advance. In such situations (which are not unusual in research), the formal language provides the necessary environment for the development of an appropriate question or problem formulation. Interactive programming has been also used in applications that need to be rewritten without stopping them, a feature which the computer language [[Smalltalk]] is famous for. Generally, [[dynamic programming language]]s provide the environment for such an interaction, so that typically [[Software prototyping|prototyping]] and [[iterative and incremental development]] is done while other parts of the program are running. As this feature is an apparent need in sound design and algorithmic composition, it has evolved significantly there. More recently, researchers have been using this method to develop [[sonification]] algorithms. Using dynamic programming languages for sound and graphics, interactive programming is also used as an improvisational performance style '''[[live coding]]''', mainly in algorithmic music and video. == Example code == *An example of some code in the dynamic programming language [[SuperCollider]] is available [http://swiki.hfbk-hamburg.de:8888/MusicTechnology/739 here]. *Another 