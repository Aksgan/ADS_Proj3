1993 and does not incorporate subsequent improvements in authentication systems, such as the development of keyed-hash message authentication code ([[HMAC]]). Although the [[cryptography|cryptographic]] construction that is used is based on the [[MD5]] hash function, [[collision attack]]s were in 2004 generally believed to not affect applications where the plaintext (i.e. password) is not known.<ref name="CryptoRes-2004">{{cite web | title = Hash Collision Q&A | url = http://www.cryptography.com/cnews/hash.html | date = (date unidentified) | publisher = [[Cryptography Research]] | accessdate = 2010-07-02 | archiveurl = http://web.archive.org/web/20040901184053/http://www.cryptography.com/cnews/hash.html | archivedate = 2004-09-01 }} ''NOTE: Specific information not given; needs quote from exact version of this page originally cited.''</ref>{{fact|date=June 2010}} However, claims in 2006 (Kim, Biryukov2, Preneel, Hong, [http://eprint.iacr.org/2006/187.pdf "On the Security of HMAC and NMAC Based on HAVAL MD4 MD5 SHA-0 and SHA-1"]) cause some doubt over other MD5 applications as well. So far, however, MD5 collision attacks have not been shown to pose a threat to digest authentication, and the RFC 2617 allows servers to implement mechanisms to detect some collision and replay attacks. == HTTP digest authentication considerations == === Advantages === HTTP digest authentication is designed to be more secure than traditional digest authentication schemes; e.g., "significantly stronger than (e.g.) [[CRAM-MD5]] ..." ([http://www.ietf.org/rfc/rfc2617.txt RFC2617]). Some of the security strengths of HTTP digest authentication are: * The password is not used directly in the digest, but rather HA1 = MD5(username:realm:password). This allows some implementations (e.g. [[JBoss]] [http://wiki.jboss.org/wiki/Wiki.jsp?page=DIGESTAuth DIGESTAuth]) to store HA1 rather than the [[cleartext]] password. * Client [[Cryptographic_nonce|nonce]] was introduced in RFC2617, which allows the client to prevent [[chosen plaintext]] attacks (which otherwise makes e.g. [[rainbow table]]s a threat to digest authentication schemes). * Server nonce is allowed to contain timestamps. Therefore the server may inspect nonce attributes submitted by clients, to prevent replay attacks. * Server is also allowed to maintain a list of recently issued or used server nonce values to prevent reuse. === Disadvantages === Digest access authentication is intended as a security trade-off. It is intended to replace unencrypted HTTP [[basic access authentication]]. It is not, however, intended to replace strong authentication protocols, such as [[Public-key cryptography|public-key]] or [[Kerberos (protocol)|Kerberos]] authentication. In terms of security, there are several drawbacks with digest access authentication: * Many of the security options in RFC 2617 are optional. If quality-of-protection (qop) is not specified by the server, the client will operate in a security-reduced legacy RFC 2069 mode. * Digest access authentication is vulnerable to a [[Man-in-the-middle attack|man-in-the-middle (MitM) attack]]. For example, a MitM attacker could tell clients to use basic access authentication or legacy RFC2069 digest access authentication mode. To extend this further, digest access authentication provides no mechanism for clients to verify the server's identity. * Some servers require passwords to be stored using reversible encryption. However, it is possible to instead store the digested value of the username, realm, and password.<ref name="rfc2617-s4.13">http://tools.ietf.org/html/rfc2617#section-4.13</ref> === Alternative authentication protocols === Some strong authentication protocols for web-based applications include: * [[Public key]] authentication (usually implemented with [[HTTPS]] / [[Secure Sockets Layer|SSL]] client certificates). * [[Kerberos (protocol)|Kerberos]] or [[SPNEGO]] authentication, primarily employed by [[Microsoft IIS]] running configured for "[[Integrated Windows Authentication]]". * [[Secure Remote Password protocol]] (preferably within the [[HTTPS]] / [[Transport Layer Security|TLS]] layer). Weak cleartext protocols are also often in use: * [[Basic access authentication]] scheme * [[HTTP+HTML form-based authentication]] These weak cleartext protocols used together with HTTPS network encryption resolve many of the threats that digest access authentication is designed to prevent. == Example with explanation == The following example was originally given in RFC 2617 and is expanded here to show the full text expected for each request and response. Note that only the "auth" (authentication) quality of protection code is covered â€“ at the time of writing, only the [[Opera (web browser)|Opera]] and [[Konqueror]] [[web browser]]s are known to support "auth-int" (authentication with integrity protection). Although the specification mentions HTTP version 1.1, the scheme can be successfully added to a version 1.0 server, as shown here. This typical transaction consists of the following steps. * The client asks for a page that requires authentication but does not provide a [[username]] and password. Typically this is because the user simply entered the address or followed a [[hyperlink|link]] to the page. * The server responds with the [[HTTP_401#4xx_Client_Error|401]] "client-error" response code, providing the authentication realm and a randomly-generated, single-use value called a [[cryptographic nonce|nonce]]. * At this point, the client will present the authentication realm (typically a description of the computer or system being accessed) to the user and prompt for a username and password. The user may decide to cancel at this point. * Once a username and password have been supplied, the client re-sends the same request but adds an authentication header that includes the response code. * In this example, the server accepts the authentication and the page is returned. If the username is invalid and/or the password is incorrect, the server might return the "401" response code and the client would prompt the user again. Note: A client may already have the required username and password without needing to prompt the user, e.g. if they have previously been stored by a web browser. ---- ; Client request (no authentication): GET /dir/index.html HTTP/1.0 Host: localhost (followed by a [[Newline|new line]], in the form of a [[carriage return]] followed by a [[line feed]]).{{fact|date=July 2010}} ; Server response: HTTP/1.0 401 Unauthorized Server: HTTPd/0.9 Date: Sun, 10 Apr 2005 20:26:47 GMT WWW-Authenticate: Digest realm="testrealm@host.com", qop="auth,auth-int", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093", opaque="5ccc069c403ebaf9f0171e9517f40e41" Content-Type: text/html Content-Length: 311 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd"> <HTML> <HEAD> <TITLE>Error</TITLE> <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1"> </HEAD> <nowiki><BODY><H1>401 Unauthorized.</H1></BODY></nowiki> </HTML> ; Client request (username "Mufasa", password "Circle Of Life"): GET /dir/index.html HTTP/1.0 Host: localhost Authorization: Digest username="Mufasa", realm="testrealm@host.com", nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093", uri="/dir/index.html", qop=auth, nc=00000001, cnonce="0a4f113b", response="6629fae49393a05397450978507c4ef1", opaque="5ccc069c403ebaf9f0171e9517f40e41" (followed by a blank line, as before). ; Server response: HTTP/1.0 200 OK Server: HTTPd/0.9 Date: Sun, 10 Apr 2005 20:27:03 GMT Content-Type: text/html Content-Length: 7984 (followed by a blank line and HTML text of the restricted page). ---- The "response" value is calculated in three 