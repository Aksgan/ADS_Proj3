store it in a consecutive array in preorder. This function accomplishes this: '''function''' EncodeSuccinct(''node'' n, ''bitstring'' structure, ''array'' data) { '''if''' n = ''nil'' '''then''' append 0 to structure; '''else''' append 1 to structure; append n.data to data; EncodeSuccinct(n.left, structure, data); EncodeSuccinct(n.right, structure, data); } The string ''structure'' has only <math>2n + 1</math> bits in the end, where <math>n</math> is the number of (internal) nodes; we don't even have to store its length. To show that no information is lost, we can convert the output back to the original tree like this: '''function''' DecodeSuccinct(''bitstring'' structure, ''array'' data) { remove first bit of ''structure'' and put it in ''b'' '''if''' b = 1 '''then''' create a new node ''n'' remove first element of data and put it in n.data n.left = DecodeSuccinct(structure, data) n.right = DecodeSuccinct(structure, data) '''return''' n '''else''' '''return''' nil } More sophisticated succinct representations allow not only compact storage of trees but even useful operations on those trees directly while they're still in their succinct form. === Encoding general trees as binary trees === There is a one-to-one mapping between general ordered trees and binary trees, which in particular is used by [[Lisp (programming language)|Lisp]] to represent general ordered trees as binary trees. To convert a general ordered tree to binary tree, we only need to represent the general tree in left child-sibling way. The result of this representation will be automatically binary tree, if viewed from a different perspective. Each node ''N'' in the ordered tree corresponds to a node ''N' '' in the binary tree; the ''left'' child of ''N' '' is the node corresponding to the first child of ''N'', and the ''right'' child of ''N' '' is the node corresponding to ''N'' 's next sibling --- that is, the next node in order among the children of the parent of ''N''. This binary tree representation of a general order tree is sometimes also referred to as a [[left child-right sibling binary tree]] (LCRS tree), or a [[doubly-chained tree]], or a [[Filial-Heir chain]]. One way of thinking about this is that each node's children are in a [[linked list]], chained together with their ''right'' fields, and the node only has a pointer to the beginning or head of this list, through its ''left'' field. For example, in the tree on the left, A has the 6 children {B,C,D,E,F,G}. It can be converted into the binary tree on the right. <center> [[Image:N-ary to binary.svg|400x240px|An example of converting an n-ary tree to a binary tree]] </center> The binary tree can be thought of as the original tree tilted sideways, with the black left edges representing ''first child'' and the blue right edges representing ''next sibling''. The leaves of the tree on the left would be written in Lisp as: :(((N O) I J) C D ((P) (Q)) F (M)) which would be implemented in memory as the binary tree on the right, without any letters on those nodes that have a left child. ==See also== * [[2-3 tree]] * [[2-3-4 tree]] * [[AA tree]] * [[B-tree]] * [[Binary space partitioning]] * [[Elastic binary tree]] * [[Kraft's inequality]] * [[Random binary tree]] * [[Recursion (computer science)]] * [[Red-black tree]] * [[Rope (computer science)]] * [[Self-balancing binary search tree]] * [[Strahler number]] * [[Threaded binary]] * [[Unrooted binary tree]] ==Notes== {{reflist|2}} == References == * [[Donald Knuth]]. ''The art of computer programming vol 1. Fundamental Algorithms'', Third Edition. Addison-Wesley, 1997. ISBN 0-201-89683-4. Section 2.3, especially subsections 2.3.1&ndash;2.3.2 (pp. 318&ndash;348). * [[Kenneth A Berman]], [[Jerome L Paul]]. ''Algorithms: Parallel, Sequential and Distributed''. Course Technology, 2005. ISBN 0-534-42057-5. Chapter 4. (pp. 113&ndash;166). ==External links== *[http://www.dpdk.nl/opensource flash actionscript 3 opensource implementation of binary tree] &mdash; opensource library *[http://www.gamedev.net/reference/programming/features/trees2/] &mdash; GameDev.net's article about binary trees *[http://www.brpreiss.com/books/opus4/html/page355.html] &mdash; Binary Tree Proof by Induction *[http://piergiu.wordpress.com/2010/02/21/balanced-binary-search-tree-on-array/ Balanced binary search tree on array] How to create bottom-up an Ahnentafel list, or a balanced binary search tree on array {{CS-Trees}} {{DEFAULTSORT:Binary Tree}} [[Category:Binary trees|*]] [[Category:Data structures]] [[bg:Двоично дърво]] [[ca:Arbre binari]] [[cs:Binární strom]] [[de:Binärbaum]] [[es:Árbol binario]] [[eo:Duuma arbo]] [[fr:Arbre binaire]] [[ko:이진 트리]] [[id:Pohon biner]] [[is:Tvíundartré]] [[it:Albero binario]] [[he:עץ בינארי]] [[ja:二分木]] [[pl:Drzewo binarne]] [[pt:Árvore binária]] [[ro:Arbore binar]] [[ru:Двоичное дерево]] [[sk:Binárny strom (teória grafov)]] [[sl:Dvojiško drevo]] [[sr:Бинарно стабло]] [[fi:Binääripuu]] [[sv:Binärträd]] [[uk:Бінарне дерево]] [[zh:二叉树]]</text> </page> <page> <id>3840</id> <title>Binaural fusion</title> <text>{{Orphan|date=October 2006}} '''Binaural fusion''' is a [[cognitive]] process that involves the "fusion" or integration of different auditory information presented binaurally, or to each [[ear]]. In humans, this process is essential in understanding speech as one ear may pick up more information about the speech stimuli than the other. Each ear sends the signal it receives up the "central auditory nervous system" or CANS where it is fused as one complete "auditory picture" at the level of the brainstem. This process is also used by both humans and animals to determine the direction from which [[sound]]s are heard, wherein the brain compares information from each ear and then translates the differences into a unified perception of the point in space from which a sound originates. The spatial cues include differences in the [[arrival time]] and the intensity, or force, of sound waves reaching the ears from a specific point in space. These cues are processed in parallel as a series of distinct steps, eventually converging as the perception of a single sound. The difference in arrival time of sounds between the ears is used to determine the direction of a sound source in the horizontal plane. The auditory system derives the [[pitch (music)|pitch]] of complex tones from the tone's [[harmonic]]s. The processing of pitch in the [[auditory cortex]], via binaural fusion, enables locations to be determined. ==Binaural fusion in (C)APD testing== Many tests have been created to try and diagnose (C)APD ([central] auditory processing disorder) by assessing the CANS' binaural fusion ability. These tests have been shown to be moderately sensitive for diagnosing brainstem lesions. ==See also== * [[Holonomic brain theory]] ==External links== * [http://www.pnas.org/cgi/content/full/95/11/6465?ck=nck PNAS.org] - 'How do owls localize interaurally phase-ambiguous signals?' Kourosh Saberi, Haleh Farahbod, Masakazu Konishi, [[California Institute of Technology]], 