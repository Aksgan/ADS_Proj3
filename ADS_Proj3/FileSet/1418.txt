to any test technique, at any stage in the development process. The key is not the test technique nor the item being tested or reviewed; the key is the cognitive engagement of the tester, and the tester's responsibility for managing his or her time.<ref>Cem Kaner, ''[http://www.kaner.com/pdfs/QAIExploring.pdf A Tutorial in Exploratory Testing]'', p. 37-39, 40- .</ref> == History == Exploratory testing has always been performed by skilled testers. In the early 1990s, [[ad hoc]] was too often synonymous with sloppy and careless work. As a result, a group of test methodologists (now calling themselves the [[Context-Driven School]]) began using the term "exploratory" seeking to emphasize the dominant thought process involved in unscripted testing, and to begin to develop the practice into a teachable discipline. This new terminology was first published by [[Cem Kaner]] in his book ''Testing Computer Software''<ref name=Kaner7-11 /> and expanded upon in ''Lessons Learned in Software Testing''.<ref> {{cite book |last = Kaner |first = Cem |authorlink = Cem Kaner |coauthors= Bach, James; Pettichord, Bret |title = Lessons Learned in Software Testing |publisher = [[John Wiley & Sons]] |year = 2001 |isbn = 0471081124}} </ref><!--The entire book discusses techniques used in Exploratory testing. They can also be used in other types of testing.--> Exploratory testing can be as disciplined as any other intellectual activity. == Description == Exploratory testing seeks to find out how the software actually works, and to ask questions about how it will handle difficult and easy cases. The quality of the testing is dependent on the tester's skill of inventing [[test case]]s and finding [[software bug|defects]]. The more the tester knows about the product and different [[test method]]s, the better the testing will be. To further explain, comparison can be made of freestyle exploratory testing to its antithesis [[test script|scripted testing]]. In this activity test cases are designed in advance. This includes both the individual steps and the expected results. These tests are later performed by a tester who compares the actual result with the expected. When performing exploratory testing, expectations are open. Some results may be predicted and expected; others may not. The tester configures, operates, observes, and evaluates the product and its behaviour, critically investigating the result, and reporting information that seems like to be a bug (which threatens the value of the product to some person) or an issue (which threatens the quality of the testing effort). In reality, testing almost always is a combination of exploratory and scripted testing, but with a tendency towards either one, depending on context. According to [[Cem Kaner]] & [[James Bach]], exploratory testing is more a [[mindset]] or "...a way of thinking about testing" than a methodology.<ref>Cem Kaner, James Bach, ''Exploratory & Risk Based Testing'', [http://www.testingeducation.org www.testingeducation.org], 2004, p. 10{{Citation broken|date=July 2009}}</ref> They also say that it crosses a continuum from slightly exploratory (slightly ambiguous or vaguely scripted testing) to highly exploratory (freestyle exploratory testing).<ref>Cem Kaner, James Bach, ''Exploratory & Risk Based Testing'', [http://www.testingeducation.org www.testingeducation.org], 2004, p. 14{{Citation broken|date=July 2009}}</ref> The documentation of exploratory testing ranges from documenting all tests performed to just documenting the [[software bug|bugs]]. During [[pair testing]], two persons create test cases together; one performs them, and the other documents. [[Session-based test]]ing is a method specifically designed to make exploratory testing auditable and measurable on a wider scale. Exploratory testers often use tools, including screen capture or video tools as a record of the exploratory session, or tools to quickly help generate situations of interest, e.g. James Bach's Perlclip. == Benefits and drawbacks == The main advantage of exploratory testing is that less preparation is needed, important bugs are found quickly, and at execution time, the approach tends to be more intellectually stimulating than execution of scripted tests. Another major benefit is that testers can use [[deductive reasoning]] based on the results of previous results to guide their future testing on the fly. They do not have to complete a current series of scripted tests before focusing in on or moving on to exploring a more target rich environment. This also accelerates bug detection when used intelligently. Another benefit is that, after initial testing, most bugs are discovered by some sort of exploratory testing. This can be demonstrated logically by stating, "Programs that pass certain tests tend to continue to pass the same tests and are more likely to fail other tests or scenarios that are yet to be explored." Disadvantages are that tests invented and performed on the fly can't be reviewed in advance (and by that prevent errors in code and test cases), and that it can be difficult to show exactly which tests have been run. Freestyle exploratory test ideas, when revisited, are unlikely to be performed in exactly the same manner, which can be an advantage if it is important to find new errors; or a disadvantage if it is more important to repeat specific details of the earlier tests. This can be controlled with specific instruction to the tester, or by preparing automated tests where feasible, appropriate, and necessary, and ideally as close to the unit level as possible. == Usage == Exploratory testing is particularly suitable if [[software requirement|requirements]] and [[Program specification|specifications]] are incomplete, or if there is lack of time.<ref name=Bach-ETE>{{Cite web | last = Bach | first = James | title = Exploratory Testing Explained | publisher = satisfice.com | year = 2003 | page = 7 | url = http://www.satisfice.com/articles/et-article.pdf | accessdate = October 23, 2010}}</ref><ref name=Kaner-TET>{{Cite web | last = Kaner | first = Cem | title = A Tutorial in Exploratory Testing | publisher = kaner.com | year = 2008 | url = http://www.kaner.com/pdfs/QAIExploring.pdf | page = 37, 118 | accessdate = October 23, 2010}}</ref> The approach can also be used to verify that previous testing has found the most important defects.<ref name=Bach-ETE /> == See also == {{portal|Software Testing}} * [[Ad hoc testing]] * [[Software testing controversies|Context-Driven School]] * [[San Francisco depot]] * [[Session-based test]]ing * [[Software testing]] * [[Test case]] * [[Test script]] == References == <references/> == External links 