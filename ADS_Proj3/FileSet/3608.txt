or application on ''C''. Often an even higher-level protocol will sit on top, and incur further processing. An example protocol stack and the corresponding layers: {|class="wikitable" border="1" ! Protocol ! Layer |- | [[HTTP]] | [[Application Layer|Application]] |- | [[Transmission Control Protocol|TCP]] | [[Transport Layer|Transport]] |- | [[Internet Protocol|IP]] | [[Internet Layer|Internet]] |- | [[Ethernet]] | [[Link Layer|Link]] |- | [[802.3u|IEEE 802.3u]] | [[Physical Layer|Physical]] |} ==See also== *[[Cross-layer optimization]] *[[G.hn]] *[[Hierarchical internetworking model]] *[[Internet protocol suite]] *[[Network protocol design principles]] *[[OSI protocol suite]] *[[Service layer]] *[[Solution stack]] *[[TCP/IP model]] *[[WAP protocol suite]] *[[X.25 protocol suite]] {{DEFAULTSORT:Protocol Stack}} [[Category:Network protocols]] [[Category:Wikipedia articles with ASCII art]] [[de:Protokollstapel]] [[fr:Pile de protocoles]] [[nl:Protocolstack]] [[ja:プロトコルスタック]] [[ru:Стек протоколов]] [[sl:Protokolski sklad]] [[th:โพรโทคอลสแตก]] [[vi:Chồng giao thức]] [[zh:协议栈]]</text> </page> <page> <id>30382</id> <title>Protomap (proteomics)</title> <text>{{about|[[proteomics]]|the Protomap hypothesis (neuroscience)|Protomap (neuroscience)}} '''PROTOMAP''' is a recently developed [[proteomic]] technology for identifying changes to proteins that manifest in altered migration by one-dimensional [[SDS-PAGE]]. It is similar, conceptually, to [[two-dimensional gel electrophoresis]] and [[difference gel electrophoresis]] in that it enables global identification of proteins that undergo altered [[electrophoresis|electrophoretic]] migration resulting from, for example, [[proteolysis]] or [[post-translational modification]]. However, it is unique in that all proteins are sequenced using [[mass spectrometry]] which provides information on the sequence coverage detected in each isoform of each protein thereby facilitating interpretation of proteolytic events. <ref name="pmid18775303">{{cite journal |author=Johnson CE, Kornbluth S |title=Caspase cleavage is not for everyone |journal=Cell |volume=134 |issue=5 |pages=720–1 |year=2008 |month=September |pmid=18775303 |doi=10.1016/j.cell.2008.08.019 |url=http://openurl.ebscohost.com/linksvc/linking.aspx?genre=article&sid=PubMed&issn=0092-8674&title=Cell&volume=134&issue=5&spage=720&atitle=Caspase%20cleavage%20is%20not%20for%20everyone.&aulast=Johnson&date=2008}}</ref> PROTOMAP is performed by resolving control and experimental samples in separate lanes of a 1D [[SDS-PAGE]] gel. Each lane is cut into evenly spaced bands (usually 15-30 bands) and proteins in these bands are sequenced using [[shotgun proteomics]]. Sequence information from all of these bands are [[bioinformatics|bioinformatically]] integrated into a visual format called a '''peptograph''' which plots gel-migration in the vertical dimension (high- to low-molecular weight, top to bottom) and sequence coverage in the horizontal dimension (N- to C-terminus, left to right). A peptograph is generated for each protein the sample (thousands of peptographs are generated from a single experiment) and this data format enables rapid identification of proteins undergoing proteolytic cleavage by making evident changes in gel-migration that are accompanied by altered topography. PROTOMAP stands for '''PRotein TOpography and Migration Analysis Platform''' and was invented and developed by [[Ben Cravatt]] and colleagues at [[The Scripps Research Institute]].<ref name="pmid18724940">{{cite journal |author=Dix MM, Simon GM, Cravatt BF |title=Global mapping of the topography and magnitude of proteolytic events in apoptosis |journal=Cell |volume=134 |issue=4 |pages=679–91 |year=2008 |month=August |pmid=18724940 |doi=10.1016/j.cell.2008.06.038 |url=http://www.cell.com/retrieve/pii/S0092867408008258 |pmc=2597167}}</ref> ==See also== * [[Two dimensional SDS-PAGE]] * [[Difference gel electrophoresis]] * [[Proteomics]] * [[Shotgun proteomics]] * [[Mass spectrometry]] * [[Protease]] * [[Benjamin Cravatt III|Benjamin Cravatt]] ==External links== * [http://www.scripps.edu/chemphys/cravatt/protomap The PROTOMAP website] - provides access to publicly available PROTOMAP data as well as software and protocols for running PROTOMAP experiments. * [http://www.scripps.edu/chemphys/cravatt/research.html#protomap PROTOMAP Description] - on the Cravatt Lab website ==References== {{Reflist|2}} [[Category:Laboratory techniques]] [[Category:Electrophoresis]] [[Category:Proteomics]] [[Category:Bioinformatics]] [[Category:Bioinformatics software]] [[Category:Proteins]] [[Category:Mass spectrometry]] [[Category:Mass spectrometry software]] [[Category:The Scripps Research Institute]]</text> </page> <page> <id>30386</id> <title>Prototype Verification System</title> <text>The '''Prototype Verification System''' ('''PVS''') is a [[specification language]] integrated with support tools and a [[theorem prover]]. It was developed at the Computer Science Laboratory of [[SRI International]] in [[California]]. PVS is based on a kernel consisting of an extension of [[Alonzo Church|Church]]'s theory of types with [[dependent types]], and is fundamentally a classical typed higher-order logic. The base types include uninterpreted types that may be introduced by the user, and built-in types such as the booleans, integers, reals, and the ordinals. Type-constructors include functions, sets, tuples, records, enumerations, and abstract data types. Predicate subtypes and dependent types can be used to introduce constraints; these constrained types may incur proof obligations (called type-correctness conditions or TCCs) during typechecking. PVS specifications are organized into parameterized theories. The system is implemented in [[Common Lisp]], and is released under the [[GNU General Public License]] (GPL). ==References== * [[Sam Owre|Owre]], [[Natarajan Shankar|Shankar]], and [[John Rushby|Rushby]], [[1992]]. ''PVS: A Prototype Verification System''. Published in the ''CADE 11'' conference proceedings. ==See also== *[[Formal methods]] ==External links== * [http://pvs.csl.sri.com/ PVS website] at the Computer Science Laboratory, SRI. * [http://www-formal.stanford.edu/clt/ARS/Entries/pvs Summary of PVS] by [[John Rushby]] at the ''Mechanized Reasoning'' database of [[Michael Kohlhase]] and Carolyn Talcott [http://www-formal.stanford.edu/clt/ARS/ars-db.html]. [[Category:Formal specification languages]] [[Category:Interactive theorem proving software]] [[Category:Dependently typed formal languages]] [[Category:Lisp programming language]] [[Category:Common Lisp software]] [[Category:Free theorem provers]] [[Category:Free software programmed in Lisp]] {{compu-lang-stub}} {{logic-stub}} [[fr:Prototype Verification System]]</text> </page> <page> <id>30402</id> <title>Proximative case</title> <text>{{Notability|date=October 2009}} The '''proximative case''' is used to describe a meaning similar to that of the English preposition "near to" or "close to". It is used in the [[logical language]] "Gimív". An example of its use is ‘basúnid’ which the creator has given to mean ‘near a school.’ ==Sources== *http://www.angelfire.com/fang/gimiv/Homepage.html {{Grammatical cases}} [[Category:Grammatical cases]] {{ling-stub}} [[br:Troad proksimativel]]</text> </page> <page> <id>30409</id> <title>Proxy pattern</title> <text>[[Image:proxy_pattern_diagram.svg|thumb|400px|Proxy in [[Unified Modeling Language|UML]]]] [[Image:Proxy pattern in LePUS3.gif|thumb|400px|Proxy in [[Lepus3|LePUS3]] ([http://lepus.org.uk/ref/legend/legend.xml legend]) ]] In [[computer programming]], the '''proxy pattern''' is a [[software design pattern]]. A proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate. A well-known example of the proxy pattern is a [[reference counting]] [[smart pointer|pointer]] object. In situations where multiple copies of a complex object must exist the proxy pattern can be adapted to incorporate the [[flyweight pattern]] in order to reduce the application's memory footprint. Typically one instance of the complex object is created, and multiple proxy objects are created, all of which contain a reference to the single original complex object. Any operations performed on the proxies are forwarded to the original object. Once all instances of the proxy are out of scope, the complex object's memory may be deallocated. ==Example== <!-- Wikipedia is not a list of examples. Do not add examples from your favorite programming language here; this page exists to explain the design pattern, not to show how it interacts 