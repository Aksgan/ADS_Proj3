Class populated with sample data * '''[[Object Constraint Language]] (OCL)''' - a declarative language for describing rules and constraints that apply to UML models * '''[[Object diagram]]''' * '''Operation''' - the signature of a Method of a Class; consists of the Operation Name, Visibility, Parameter list, Return Type, and Property-string * '''Operator''' - an algorithmic feature of Interaction Frame that defines the behavior of that frame. Examples include: ** '''alt''' - multiple alternatives each with a [[guard condition]]. Only one alternative can be true. ** '''critical''' - a fragment within a larger parallel Interaction Frame that when entered suspends the interleaving of events from the other fragments. ** '''loop''' - the fragment iterates according to a [[guard condition]]. ** '''neg''' - an invalid interaction. ** '''opt''' - single alternative with a [[guard condition]]. ** '''par''' - each fragment is run in parallel. ** '''ref''' - an interaction defined in another diagram. ** '''strict''' - a fragment with the ordering of reception events across multiple lifelines follow strictly their graphical arrangement. {{compactTOC2}} ==P== * '''Package''' - A package is a collection or grouping of related classes or of classes with related functionality. * '''[[Package diagram]]''' * '''Parameter''' - data passed in a Message to be used within the Method * '''Partition''' - section of an [[Activity diagram]] or [[Sequence diagram]] occupied by a single Class or Object * '''Pin''' - a parameter of an Action * '''Polymorphism''' - the ability of Objects belonging to different Classes to respond to Operations of the same name, each one according to the right Class-specific behaviour * '''[[profile (UML)|Profile]]''' - Provides a generic extension mechanism for building UML models. Other extension mechanisms include [[Stereotype_(UML)|stereotype]]s. * '''Property''' - an Attribute or an Association * '''Property-string''' - a qualifier for Attributes and Operations. Examples include {ordered}, {readonly}, {unique}. ==Q== * '''Qualified association''' - tightens the [[multiplicity]] or [[role]] of an [[Association (object-oriented programming)|association]] between 2 [[Class (computer science)|classes]] by dividing the set of objects into subsets based on a value of the qualifierâ€”an attribute of the target objects, association objects, or some a derived attribute of the target or association objects. ==R== * '''Realization''' - Realization shows the relationship between an Interface and the class that provides the implementation for the interface. * '''Reference''' - * '''Relation''' - * '''Return''' - a reply that may be issued from a Method following a Message * '''Role''' - description of the part played in an Association by one of the Classes in the Association {{compactTOC2}} ==S== * '''[[Scenario (computing)|Scenario]]''' - a narrative describing foreseeable interactions * '''Self-call''' - a Message from an Object to one of its own Methods * '''[[Sequence diagram]]''' - describes the Messages sent between a number of participating Objects in a Scenario * '''Signal''' - an Event which can occur in an [[Activity diagram]] in three different ways: as a Time Signal, as a signal which an Activity can listen for and a signal which an Activity can send * '''State''' - an Object exists at one of the [[State (computer science)|State]]s described in a [[State diagram|State machine diagram]] * '''State diagram''' - synonym for [[State diagram|State machine diagram]] * '''[[State diagram#UML state diagram|State machine diagram]]''' - describes the lifetime behaviour of a single Object in terms of in which State it exists and the Transition between those States * '''Static attribute''' - an [[Property|attribute]] that does not relate to a specific [[Object (computer science)|object]] but is at [[Class (computer science)|class]] level; that is, an attribute that is common among all objects of that class * '''Static modeling''' - use of [[class diagram]]s to describe structure * '''Static operation''' - an [[Instruction (computer science)|operation]] that does not relate to a specific [[Object (computer science)|object]] but is at [[Class (computer science)|class]] level * '''[[Stereotype (computing)|Stereotype]]''' - a notation allowing the extension of UML symbols. Some are defined within [[Profile]]s. Examples of predefined UML stereotypes are [[Actor (UML)|Actor]], [[Exception]], [[Powertype (UML)|Powertype]] and [[Utility]]. * '''[[Structure diagram (UML)|Structure diagram]]''' * '''Superstate''' - construct allowing several States which share common Transitions and Internal Activities * '''[[Swim lane]]''' - synonym for Partition * '''System model''' - The logical UML model being represented through one or more UML diagrams {{compactTOC2}} ==T== * '''Tagged values''' - In extensibility * '''Template''' - a Class that accepts a compile-time parameter defining the Type to be used within the Class; often to implement Collections of any Type * '''[[Thread (computer science)|Thread]]''' - a sequence of instructions whose execution is being scheduled by the Operating System and may run in parallel with other threads * '''[[UML Timing Diagram|Timing Diagram]]''' * '''Token''' - symbolises the Thread of an [[Activity diagram]] * '''Transition''' - movement from one State to another in a [[State diagram|State machine diagram]]. The transition is specified by its ''Trigger-signature [Guard]/Activity'' * '''Type''' - the options are: an elementary Value type such as integer, string, date, or boolean or a Reference type defined in a Class ==U== * '''[[Use case]]''' - a technique for capturing functional requirements of systems * '''[[Use case diagram]]''' * '''Uses dependency''' - ==V== * '''Visibility''' - the availability for access of elements in a model. Typically used to limit the visibility of features defined by a Class (e.g., attributes, operations). When applied to features defined by a class, the standard options are: ** private (-): available only within the Class in which it was defined. This is the most limited visibility ** protected (#): available within the Class in which it was defined, and within any subclass of this class ** package (~): available only within the Package which directly contains the defining Class ** public (+): available to any Class that can see the defining Class. The is the least limited visibility. ==W== * '''Workflow''' - Set of sequential steps which must be done to get a job done ==X== * '''[[XMI]]''' - An OMG standard for exchanging metadata information via Extensible Markup Language (XML). {{compactTOC2}} ==See also == * [[Class-Responsibility-Collaboration card]] (CRC) * [[Code generation]] * [[Data mapping]] 