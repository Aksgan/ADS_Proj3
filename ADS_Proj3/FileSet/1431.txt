within the system cease to be clear. One can avoid this by creating a design structure that organizes the logic in the system. Good design will avoid lots of dependencies within a system; this means that changing one part of the system will not affect other parts of the system.{{Facts|date=June 2009}} === Values === Extreme Programming initially recognized four values in 1999. A new value was added in the second edition of ''Extreme Programming Explained''. The five values are: ==== Communication ==== Building software systems requires communicating system requirements to the developers of the system. In formal software development methodologies, this task is accomplished through documentation. Extreme programming techniques can be viewed as methods for rapidly building and disseminating institutional knowledge among members of a development team. The goal is to give all developers a shared view of the system which matches the view held by the users of the system. To this end, extreme programming favors simple designs, common metaphors, collaboration of users and programmers, frequent verbal communication, and feedback. ==== Simplicity ==== Extreme Programming encourages starting with the simplest solution. Extra functionality can then be added later. The difference between this approach and more conventional system development methods is the focus on designing and coding for the needs of today instead of those of tomorrow, next week, or next month. This is sometimes summed up as the [[You ain't gonna need it|"you ain't gonna need it"]] (YAGNI) approach.<ref name="tr">"Everyone's a Programmer" by Clair Tristram. ''Technology Review'', Nov 2003. p. 39</ref> Proponents of XP acknowledge the disadvantage that this can sometimes entail more effort tomorrow to change the system; their claim is that this is more than compensated for by the advantage of not investing in possible future requirements that might change before they become relevant. Coding and designing for uncertain future requirements implies the risk of spending resources on something that might not be needed. Related to the "communication" value, simplicity in design and coding should improve the quality of communication. A simple design with very simple code could be easily understood by most programmers in the team. ==== Feedback ==== Within extreme programming, feedback relates to different dimensions of the system development: *Feedback from the system: by writing [[unit test]]s,<small><ref name=Cworld92/></small> or running periodic integration tests, the programmers have direct feedback from the state of the system after implementing changes. *Feedback from the customer: The functional tests (aka [[acceptance tests]]) are written by the customer and the testers. They will get concrete feedback about the current state of their system. This review is planned once in every two or three weeks so the customer can easily steer the development. *Feedback from the team: When customers come up with new requirements in the planning game the team directly gives an estimation of the time that it will take to implement. Feedback is closely related to communication and simplicity. Flaws in the system are easily communicated by writing a unit test that proves a certain piece of code will break. The direct feedback from the system tells programmers to recode this part. A customer is able to test the system periodically according to the functional requirements, known as ''[[user story|user stories]]''.<ref name=Cworld92/> To quote [[Kent Beck]], "Optimism is an occupational hazard of programming, feedback is the treatment."{{Citation needed|date=June 2007}} {{anchor|courage}} ==== Courage ==== Several practices embody courage. One is the commandment to always design and code for today and not for tomorrow. This is an effort to avoid getting bogged down in design and requiring a lot of effort to implement anything else. Courage enables developers to feel comfortable with [[refactoring]] their code when necessary.<ref name=Cworld92/> This means reviewing the existing system and modifying it so that future changes can be implemented more easily. Another example of courage is knowing when to throw code away: courage to remove source code that is obsolete, no matter how much effort was used to create that source code. Also, courage means persistence: A programmer might be stuck on a complex problem for an entire day, then solve the problem quickly the next day, if only they are persistent. ==== Respect ==== The respect value includes respect for others as well as self-respect. Programmers should never commit changes that break compilation, that make existing unit-tests fail, or that otherwise delay the work of their peers. Members respect their own work by always striving for high quality and seeking for the best design for the solution at hand through refactoring. Adopting the four earlier values leads to respect gained from others in the team. Nobody on the team should feel unappreciated or ignored. This ensures a high level of motivation and encourages loyalty toward the team and toward the goal of the project. This value is very dependent upon the other values, and is very much oriented toward people in a team. === Rules === The first version of rules for XP was published in 1999 by Don Wells<ref>[http://www.extremeprogramming.org/rules.html Don Wells]</ref> at the XP website. 29 rules are given in the categories of planning, managing, designing, coding, and testing. Planning, managing and designing are called out explicitly to counter claims that XP doesn't support those activities. Another version of XP rules was proposed by Ken Auer<ref>[http://www.rolemodelsoftware.com/moreAboutUs/publications/rulesOfXp.php Ken Auer]</ref> in XP/Agile Universe 2003. He felt XP was defined by its rules, not its practices (which are subject to more variation and ambiguity). He defined two categories: "Rules of Engagement" which dictate the environment in which software development can take place effectively, and "Rules of Play" which define the minute-by-minute activities and rules within the framework of the Rules of Engagement. In the APSO workshop at ICSE 2008 Conference, Mehdi Mirakhorli proposed a new and more precise and comprehensive version of the Extreme Programming Rules, more independent of the practices, and intended to be more "agile". ==== Rules of engagement ==== According to Mehdi Mirakhorli, these are:{{Citation needed|date=June 2009}} * Business people and developers do joint work: Business people and developers must work together daily throughout 