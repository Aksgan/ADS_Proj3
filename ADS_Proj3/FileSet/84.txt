|date=May 11, 2010}}</ref>. ActiveVideo also announced a joint initiative with advanced advertising technology provider This Technology at The Cable Show that the companies said would enable cable operators and programmers to derive increased monetization and control over iVOD advertising. Under the initiative, ActiveVideo's CloudTV platform and This Technology's Metamore and Spotbuilder software will be paired to create an SCTE-130-compliant ad serving and delivery solution for operators and programmers that dynamically targets traditional, Web-based and interactive advertising in conjunction with viewers' VOD activity <ref>{{cite web |url=http://itvt.com/story/6764/activevideo-networks-technology-team-dynamic-advertising-solution-ivod |title=ActiveVideo Networks, This Technology Team on Dynamic Advertising Solution for "iVOD" |publisher=ITVT |date=May 12, 2010}}</ref>. == References == {{Reflist}} == External links == * [http://www.activevideo.com ActiveVideo Networks homepage] {{DEFAULTSORT:Activevideo Networks}} [[Category:Interactive television]] [[Category:Cloud computing]]</text> </page> <page> <id>865</id> <title>ActiveX Document</title> <text>{{Context|date=January 2008}} {{Expert-subject-multiple|Computing|Microsoft Windows|date=February 2009}} '''ActiveX Document''' (also known as '''DocObject''' or '''DocObj''')<ref>[http://www.pcmag.com/encyclopedia_term/0,2542,t=ActiveX+Documents&i=37473,00.asp Definition of ActiveX Documents]</ref> is a [[computer file]] in the form of a [[compound document|compound (text-based)]] document that allows{{Clarify|date=February 2009}} a container application{{Vague|date=February 2009}} to use the full capabilities of server applications.{{ambig}} This approach{{Clarify|date=February 2009}} distinguishes between a document, such as a word document or [[video clip]], and the software that can be [[Application software|applied]] (open, edit, display, save) to the document. [[ActiveX]] documents consist of two components: the 'document' itself ''and'' the 'ActiveX DLL or EXE server' that supports it. A single [[server (computing)|server]] can support an unlimited number of documents, just as [[Microsoft Word]] can support any number of document files. The server for an ActiveX document can be an EXE or a DLL server. The document generally has the extension .VBD, though ActiveX documents can be stored within other files as well, using a mechanism{{ambig}} called [[Object Linking and Embedding|OLE]] [[structured storage]]. ==References== {{reflist}} ==External links== *[http://pntpm3.ulb.ac.be/Info/Activex/ch23.htm ActiveX document fundamentals] {{Microsoft Windows components}} [[Category:Microsoft initiatives]] [[Category:Windows software]] [[Category:Windows software stubs]] {{Windows-software-stub}}</text> </page> <page> <id>875</id> <title>Active database</title> <text>{{orphan|date=November 2009}} An '''Active Database''' is a [[database]] that includes an event driven architecture (often in the form of [[Event Condition Action|ECA rules]]) which can respond to conditions both inside and outside the database. Possible uses include security monitoring, alerting, statistics gathering and authorization. Most modern relational databases include active database features in the form of [[Database trigger|SQL Triggers]]. ==See also== *[[Event-driven architecture]] ==References== *{{cite journal|last=Paton|first=Norman W|coauthors=Díaz, Oscar|title=Active database systems|journal=ACM Computing Surveys |year=1999|volume=31|issue=1|pages=63–103|doi=10.1145/311531.311623|url=http://portal.acm.org/citation.cfm?id=311623|accessdate=8 July 2010|publisher=ACM|location=NY, USA|issn=0360-0300}} *{{cite web|title=Active Database|url=http://it.toolbox.com/wiki/index.php/Active_Database|publisher=IT Toolbox|accessdate=8 July 2010}} {{Use dmy dates|date=October 2010}} {{DEFAULTSORT:Active Database}} [[Category:Databases]] {{Database-stub}}</text> </page> <page> <id>897</id> <title>Activity diagram</title> <text>[[Image:Activity conducting.svg|thumb|upright=2|UML 1.x Activity diagram for a guided [[brainstorming]] [[process]]]] '''Activity diagrams''' are graphical representations of [[workflow]]s of stepwise activities and actions with support for choice, iteration and concurrency.<ref>[http://highered.mcgraw-hill.com/sites/0077110005/student_view0/glossary.html Glossary of Key Terms] at McGraw-hill.com. Retrieved 20 July 2008.</ref> In the [[Unified Modeling Language]], activity diagrams can be used to describe the business and operational step-by-step [[workflow]]s of components in a system. An activity diagram shows the overall flow of control. == Construction == Activity diagrams are constructed from a limited repertoire of shapes, connected with arrows. The most important shape types: * ''rounded rectangles'' represent ''activities''; * ''diamonds'' represent ''decisions''; * ''bars'' represent the start (''split'') or end (''join'') of concurrent activities; * a ''black circle'' represents the start (''initial state'') of the workflow; * an ''encircled black circle'' represents the end (''final state''). Arrows run from the start towards the end and represent the order in which activities happen. Hence they can be regarded as a form of [[flowchart]]. Typical flowchart techniques lack constructs for expressing concurrency. However, the join and split symbols in activity diagrams only resolve this for simple cases; the meaning of the model is not clear when they are arbitrarily combined with decisions or loops. While in UML 1.x, activity diagrams were a specialized form of state diagrams, in UML 2.x, the activity diagrams were reformalized to be based on [[Petri net]]-like semantics, increasing the scope of situations that can be modeled using activity diagrams. These changes cause many UML 1.x activity diagrams to be interpreted differently in UML 2.x == '''Applications''' == In [[Systems Modeling Language|SysML]] the activity diagram has been extended to indicate flows among steps that convey physical matter (e.g., gasoline) or energy (e.g., torque, pressure). Additional changes allow the diagram to better support continuous behaviors and continuous data flows. == Alternatives == In UML 1.x, an alternative to activity diagrams is the [[State_diagram#UML state diagram|UML State diagram]], in which states can be used to represent activities (namely the state of that activity being performed), and transitions represent the start or completion of activities. This mapping of activity diagram features to state diagram were formalized in UML 1.x, leaving activity diagrams little more that the use of state machines to capture behavior and partially concurrent behavior within a work flow. Despite the (small) advantages of using UML 1.x activity diagram over state machines, such as the ability to cover the behaviors of collaborating elements, while state machines are limited to a single element, many modelers continued using state diagrams. State machines were attractive to use as the states may also represent conditions that hold before or after the activities. Activity diagrams and state diagram had similar abilities to express concurrency, though the run-to-completion (RTC) semantics of State machines limited the expressiveness of the concurrency. Perhaps the most important reason why state machines were more popular in UML 1.x over activity diagrams was that the tool vendors were slow to implement robust activity diagram capabilities. With UML 2.x, the foundation of activity diagram changed from being based on state-machine semantics to now being based on [[Petri net]] semantics. This vastly expand the number of circumstances where activity diagrams are more appropriate to capture the paths of work flow in a system. Now with the advent of robust activity diagram implementations, activity diagrams are now generally used more than state machine diagrams. ==See also== * [[Control flow graph]] * [[Data flow diagram]] * [[Event-driven process chain]] * [[Petri net]] * [[List of UML tools]] * [[State diagram]] * [[Pseudocode]] * [[Business Process Modeling Notation]] == References == {{reflist}} == External links == 