copies of [[data]] so that these additional copies may be used to ''restore'' the original after a [[data loss]] event. The verb form is ''back up'' in two words, whereas the noun is ''backup'' (often used like an adjective in compound nouns).<ref>English native speakers never say or write "she backups" or "he backuped" and instead always say and write the verb in two parts, in other words "(she) backs up" and "(he) backed up". Surprisingly, many even professional websites nevertheless confuse the noun and the verb and often misspell the verb in other situations, for example "to backup" ("will/must backup") instead of "to back up" etc. See also: [http://education.yahoo.com/reference/dictionary/entry/backup American Heritage Dictionary entry for ''backup''], [http://education.yahoo.com/reference/dictionary/entry/back American Heritage Dictionary entry for ''back up''], [http://en.wiktionary.org/wiki/backup Wiktionary entry for ''backup''], [http://en.wiktionary.org/wiki/back_up Wiktionary entry for ''back up''].</ref> Backups have two distinct purposes. The primary purpose is to recover data as a reaction to data loss, be it by data deletion or [[Data corruption|corrupted]] data. Data loss is a very common experience of computer users. 67% of internet users have suffered serious data loss.<ref>[http://www.kabooza.com/globalsurvey.html Global Backup Survey]. Retrieved on 15 February 2009 </ref> The secondary purpose of backups is to recover data from a historical period of time within the constraints of a user-defined [[data retention]] policy, typically configured within a backup application for how long copies of data are required. Though backups popularly represent a simple form of [[disaster recovery]], and should be part of a disaster recovery plan, by themselves, backups should not alone be considered disaster recovery. <ref>[http://www.drj.com/new2dr/w2_002.htm]</ref> Not all backup systems and/or backup applications are able to reconstitute a computer system, or in turn other complex configurations such as a [[computer cluster]], [[active directory]] servers, or a [[database server]], by restoring only data from a backup. Since a backup system contains at least one copy of all data worth saving, the [[computer data storage|data storage]] requirements are considerable. Organizing this storage space and managing the backup process is a complicated undertaking. A data repository model can be used to provide structure to the storage. In the modern era of computing there are many different types of [[data storage device]]s that are useful for making backups. There are also many different ways in which these devices can be arranged to provide geographic redundancy, [[data security]], and portability. Before data is sent to its storage location, it is selected, extracted, and manipulated. Many different techniques have been developed to optimize the backup procedure. These include optimizations for dealing with open files and live data sources as well as compression, encryption, and de-duplication, among others. Many organizations and individuals try to have confidence that the process is working as expected and work to define measurements and validation techniques. It is also important to recognize the limitations and human factors involved in any backup scheme. ==Storage, the base of a backup system== ===Data repository models=== Any backup strategy starts with a concept of a data repository. The backup data needs to be stored somehow and probably should be organized to a degree. It can be as simple as a sheet of paper with a list of all backup tapes and the dates they were written or a more sophisticated setup with a computerized index, catalog, or relational database. Different repository models have different advantages. This is closely related to choosing a [[backup rotation scheme]]. ; '''Unstructured''' : An unstructured repository may simply be a stack of floppy disks or CD-R/DVD-R media with minimal information about what was backed up and when. This is the easiest to implement, but probably the least likely to achieve a high level of recoverability. ; '''Full + [[Incremental backup|incrementals]]''' : A full + incremental repository aims to make it more feasible to store several copies of the source data. At first, a ''full'' backup (of all files) is made. After that, any number of ''incremental'' backups can be made. There are many different types of incremental backups, but they all attempt to only back up a small amount of data (when compared to the size of a full backup). An incremental backup copies everything that has changed since the last backup (full, differential or incremental). Restoring a whole system to a certain point in time would require locating the last full backup taken previous to that time and all the incremental backups that cover the period of time between the full backup and the particular point in time to which the system is supposed to be restored.<ref>[http://www.tech-faq.com/incremental-backup.shtml Incremental Backup]. Retrieved on 10 March 2006 </ref> The scope of an incremental backup is typically defined as the period of time between other full or incremental backups. Different implementations of backup systems frequently use specialized or conflicting definitions of these terms. ; '''Differential backup''' : A differential backup copies files that have been created or changed since the last full backup. It does not mark files as having been backed up (in other words, the archive attribute is not cleared). If you are performing a combination of full and differential backups, restoring files and folders requires that you have the last full as well as the last differential backup. ; '''Reverse delta''' : A reverse delta system stores the differences between current versions of a system and previous versions. A reverse delta backup will start with a normal full backup. After the full backup is performed, the system will periodically synchronize the full backup with the live copy, while storing the data necessary to reconstruct older versions. This can either be done using [[hard links]], or using binary [[diffs]]. This system works particularly well for large, slowly changing, data sets. Examples of programs that use this method are [[rdiff-backup]] and [[Time Machine (Apple software)|Time Machine]] ; '''[[Continuous data protection]]''' : Instead of scheduling periodic backups, the system immediately logs every change on the host system. This is generally done by saving byte or block-level differences rather than file-level differences.<ref>[http://www.emc.com/analyst/pdf/Ovum200510.pdf Continuous Protection white paper]. (1 October 2005). Retrieved on 10 March 2007 