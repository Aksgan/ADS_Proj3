classes{{Citation needed|date=September 2009}}: [[system software]], [[programming software]] and [[application software]], although the distinction is arbitrary, and often blurred. === System software === [[System software]] provides the basic functions for computer usage and helps run the [[computer]] [[hardware]] and system. It includes a combination of the following: * [[device driver]]s * [[operating system]]s * [[server (computing)|server]]s * [[software utility|utilities]] * [[window system]]s System software is responsible for managing a variety of independent hardware components, so that they can work together harmoniously. Its purpose is to unburden the [[application software]] [[programmer]] from the often complex details of the particular computer being used, including such accessories as [[communications device]]s, [[printer]]s, device readers, displays and keyboards, and also to partition the computer's resources such as memory and processor time in a safe and stable manner. === Programming software === [[Programming software]] usually provides tools to assist a programmer in writing [[computer program]]s, and software using different programming languages in a more convenient way. The tools include: * [[compiler]]s * [[debugger]]s * [[interpreter (computing)|interpreters]] * [[linker (computing)|linkers]] * [[text editor]]s An [[Integrated development environment]] (IDE) is a single application that attempts to manage all these functions. === Application software === [[System software]] does not aim at a certain application [[field]]s. In contrast,different [[application]] software offers different [[Function (engineering)|functions]] based on users and the area it served.[[Application software]] is developed for some certain [[purpose]],which either can be a certain program or a [[collection]] of some [[programmes]],such as a graphic browser or the [[data base]] [[management system]]. [[Application software]] allows end users to accomplish one or more specific (not directly computer development related) [[wikt:task|tasks]]. Typical applications include: * [[automation|industrial automation]] * [[business software]] * [[video game]]s * [[List of quantum chemistry and solid state physics software|quantum chemistry and solid state physics software]] * [[telecommunication]]s (i.e., [[Internet|the Internet]] and everything that flows on it) * [[database]]s * [[educational software]] * [[Mathematical software]] * [[medical software]] * [[List of software for molecular mechanics modeling|molecular modeling software]] * [[image editing]] * [[spreadsheet]] * [[simulation software]] * [[Word processing]] * [[Decision making software]] Application software exists for and has impacted a wide variety of topics. == Software topics == === Architecture === {{See also|Software architecture}} Users often see things differently than programmers. People who use modern general purpose computers (as opposed to [[embedded system]]s, [[analog computer]]s and [[supercomputer]]s) usually see three layers of software performing a variety of tasks: platform, application, and user software. * Platform software: [[Platform (computing)|Platform]] includes the [[firmware]], [[device driver]]s, an [[operating system]], and typically a [[graphical user interface]] which, in total, allow a user to interact with the computer and its [[peripheral]]s (associated equipment). Platform software often comes bundled with the computer. On a [[Personal computer|PC]] you will usually have the ability to change the platform software. * Application software: [[Application software]] or Applications are what most people think of when they think of software. Typical examples include office suites and video games. Application software is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other "system software" as applications. * User-written software: [[End-user development]] tailors systems to meet users' specific needs. User software include spreadsheet templates and [[word processor]] templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers. === Documentation === {{main|Software documentation}} Most software has [[software documentation]] so that the [[end user]] can understand the program, what it does, and how to use it. Without clear documentation, software can be hard to useâ€”especially if it is very specialized and relatively complex like [[Photoshop]] or [[AutoCAD]]. Developer documentation may also exist, either with the code as comments and/or as separate files, detailing how the programs works and can be modified. === Library === {{main|Software library}} An executable is almost always not sufficiently complete for direct execution. [[Software library|Software libraries]] include collections of [[function (computer science)|function]]s and functionality that may be embedded in other applications. Operating systems include many standard Software libraries, and applications are often distributed with their own libraries. === Standard === {{main|Software standard}} Since software can be designed using many different [[programming languages]] and in many different [[operating systems]] and [[operating environment]]s, [[software standard]] is needed so that different software can understand and exchange information between each other. For instance, an [[email]] sent from a [[Microsoft Outlook]] should be readable from [[Yahoo! Mail]] and vice versa. === Execution === {{main|Execution (computing)}} Computer software has to be "loaded" into the [[computer storage|computer's storage]] (such as the [[hard drive]] or [[Computer memory|memory]]). Once the software has loaded, the computer is able to ''execute'' the software. This involves passing [[instruction (computer science)|instructions]] from the application software, through the system software, to the [[hardware]] which ultimately receives the instruction as [[machine language|machine code]]. Each instruction causes the computer to carry out an operation &ndash; moving [[data (computing)|data]], carrying out a [[computation]], or altering the [[control flow]] of instructions. Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using "pointers" to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together. <!-- This section is simply to long for this article and needs to be compressed into the intro above, or moved to the articlee itselve .... Instructions may be performed sequentially, conditionally, or iteratively. Sequential instructions are 