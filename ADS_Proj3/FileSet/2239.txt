function makes Φ True, then ~Φ is made False by the negation connective. Since the disjunct Φ of ''F'' is True under that interpretation, ''F'' is True. Now the only other possible interpretation of Φ makes it False, and if so, ~Φ is made True by the negation function. That would make ''F'' True again, since one of ''F''s disjuncts, ~Φ, would be true under this interpretation. Since these two interpretations for ''F'' are the only possible logical interpretations, and since ''F'' comes out True for both, we say that it is logically valid or tautologous. == Interpretation of a theory == {{Main|Theory (mathematical logic)}} An ''interpretation of a theory'' is the relationship between a theory and some subject matter when there is a [[many-to-one]] correspondence between certain elementary statements of the theory, and certain statements related to the subject matter. If every elementary statement in the theory has a correspondent it is called a '''full interpretation''', otherwise it is called a '''partial interpretation'''.<ref>Curry, Haskell, ''Foundations of Mathematical Logic'' p.48</ref> == Interpretations for propositional logic == The formal language for propositional logic consists of formulas built up from propositional symbols (also called sentential symbols, sentential variables, and propositional variables) and logical connectives. The only [[non-logical symbol]]s in a formal language for propositional logic are the propositional symbols, which are often denoted by capital letters. To make the formal language precise, a specific set of propositional symbols must be fixed. The standard kind of interpretation in this setting is a function that maps each propositional symbol to one of the [[truth value]]s true and false. This function is known as a '''truth assignment''' or '''valuation''' function. In many presentations, it is literally a truth value that is assigned, but some presentations assign [[truthbearer]]s instead. For a language with ''n'' distinct propositional variables there are 2<sup>''n''</sup> distinct possible interpretations. For any particular variable ''a'', for example, there are 2<sup>1</sup>=2 possible interpretations: 1) ''a'' is assigned '''T''', or 2) ''a'' is assigned '''F'''. For the pair ''a'', ''b'' there are 2<sup>2</sup>=4 possible interpretations: 1) both are assigned '''T''', 2) both are assigned '''F''', 3) ''a'' is assigned '''T''' and ''b'' is assigned '''F''', or 4) ''a'' is assigned '''F''' and ''b'' is assigned '''T'''. Given any truth assignment for a set of propositional symbols, there is a unique extension to an interpretation for all the propositional formulas built up from those variables. This extended interpretation is defined inductively, using the truth-table definitions of the logical connectives discussed above. == First-order logic == Unlike propositional logic, where every language is the same apart from a choice of a different set of propositional variables, there are many different first-order languages. Each first-order language is defined by a [[signature (mathematical logic)|signature]]. The signature consists of a set of non-logical symbols and an identification of each of these symbols as a constant symbol, a function symbol, or a predicate symbol. In the case of function and predicate symbols, a natural number [[arity]] is also assigned. The alphabet for the formal language consists of logical constants, the equality relation symbol =, all the symbols from the signature, and an additional infinite set of symbols known as variables. For example, in the language of [[ring (mathematics)|rings]], there are constant symbols 0 and 1, two binary function symbols + and ·, and no binary relation symbols. (Here the equality relation is taken as a logical constant.) Again, we might define a first-order language '''L''', as consisting of individual symbols a, b, and c; predicate symbols F,G, H, I and J; variables x,y,z; no function letters; no sentential symbols. === Formal languages for first-order logic === Given a signature σ, the corresponding formal language is known as the set of σ-formulas. Each σ-formula is built up out of atomic formulas by means of logical connectives; atomic formulas are built from terms using predicate symbols. The formal definition of the set of σ-formulas proceeds in the other direction: first, terms are assembled from the constant and function symbols together with the variables. Then, terms can be combined into an atomic formula using a predicate symbol (relation symbol) from the signature or the special predicate symbol "=" for equality (see the section "[[#Interpreting equality|Interpreting equality"]] below). Finally, the formulas of the language are assembled from atomic formulas using the logical connectives and quantifiers. === Interpretations of a first-order language === To ascribe meaning to all sentences of a first-order language, the following information is needed. * A [[domain of discourse]]<ref>Sometimes called the "universe of disourse"</ref> ''D'', usually required to be non-empty (see below). * For every constant symbol, an element of ''D'' as its interpretation. * For every ''n''-ary function symbol, an ''n''-ary function from ''D'' to ''D'' as its interpretation (that is, a function ''D<sup>n</sup>'' → ''D''). * For every ''n''-ary predicate symbol, an ''n''-ary relation on ''D'' as its interpretation (that is, a subset of ''D<sup>n</sup>''). An object carrying this information is known as a [[structure (mathematical logic)|structure]] (of signature σ, or σ-structure, or ''L''-structure), or as a "model". The information specified in the interpretation provides enough information to give a truth value to any atomic formula, after each of its [[free variable]]s, if any, has been replaced by an element of the domain. The truth value of an arbitrary sentence is then defined inductively using the [[T-schema]], which is a definition of first-order semantics developed by Alfred Tarski. The T-schema interprets the logical connectives using truth tables, as discussed above. Thus, for example, {{nowrap|&phi; & &psi;}} is satisfied if and only if both &phi; and &psi; are satisfied. This leaves the issue of how to interpret formulas of the form {{nowrap|&forall; ''x'' &phi;(''x'')}} and {{nowrap|&exist; ''x'' &phi;(''x'')}}. The domain of discourse forms the [[range (mathematics)|range]] for these quantifiers. The idea is that the sentence {{nowrap|&forall; ''x'' &phi;(''x'')}} is true under an interpretation exactly when every substitution instance of &phi;(''x''), where ''x'' is replaced by some element of the domain, is satisfied. The formula {{nowrap|&exist; ''x'' &phi;(''x'')}} is satisfied if there 