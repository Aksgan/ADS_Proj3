he says. He does not expect too many people to heed this advice, as our culture, accompanied by various thinking tendencies, is against this method of decision making. Also, Gilbert covers the topic of 'filling in' or the frequent use of patterns, by the mind, to connect events which we do actually recall with other events we expect or anticipate fit into the expected experience. This 'filling in' is also used by our eyes and optic nerves to remove our blind spot or [[scotoma]], and instead substitute what our mind expects to be present in the blind spot. The book is written accessibly for the layperson, generally avoiding abstruse terminology and explaining common quirks of reasoning through the simple experiments that exploited them. ==Recognition== In 2007, the book was awarded the [[Royal Society Prizes for Science Books]] general prize for the best science writing for a non-specialist audience. == See also == * [[Positive psychology]] * [[The Black Swan (Taleb book)]] ==Notes== {{Reflist}} == References == * {{citation|title=Stumbling on Happiness|last=Gilbert|first=Daniel|publisher=Knopf|year=2006|isbn=1400042666}} ==External links== *[http://www.stumblingonhappiness.com Stumbling on Happiness web site.] includes a [http://www.randomhouse.com/kvpa/gilbert/blog blog] *[http://www.wjh.harvard.edu/~dtg/sohreviews.htm Reviews of Stumbling on Happiness] *[http://www.randomhouse.com/knopf/catalog/display.pperl?isbn=9781400042661 Publisher's website for Stumbling on Happiness] *[http://2006.sxsw.com/bits_n_bytes/pivot/entry.php?id=79#body Short interview about the book from [[SXSW]]i 2006] *[http://www.powells.com/authors/danielgilbert.html Comprehensive interview on the book] *[http://ted.com/tedtalks/tedtalksplayer.cfm?key=d_gilbert Video] of Gilbert discussing humans' failure to predict what makes us happy. Presented July 2005 at the [[TED Conference]] in Oxford, UK. Duration: 22:02 *[http://fifthestate.co.uk/author/danielgilbert/ Gilbert's Profile Page on UK publisher's blog, fifthestate.co.uk] [[Category:2006 books]] [[Category:Psychology books]] [[nl:Stumbling on Happiness]]</text> </page> <page> <id>36017</id> <title>StyleCop</title> <text>{{notability|Products|date=September 2010}} {{unreferenced|date=September 2010}} '''StyleCop''' is an open source [[static code analysis]] tool from [[Microsoft]] that checks [[C Sharp (programming language)|C#]] code for conformance to StyleCop's recommended coding styles and a subset of Microsoft's .NET Framework Design Guidelines. StyleCop analyzes the [[source code]], allowing it to enforce a different set of rules from [[FxCop]]. The rules are classified into the following categories: * Documentation * Layout * Maintainability * Naming * Ordering * Readability * Spacing StyleCop includes both [[GUI]] and command line versions of the tool. It is possible to create new rules to be used. StyleCop was re-released as an open source project in April of 2010, at http://stylecop.codeplex.com. ==See also== * [[FxCop]] * [[List of tools for static code analysis]] ==External links== *[http://stylecop.codeplex.com StyleCop homepage] *[http://blogs.msdn.com/sourceanalysis StyleCop blog] *[http://stylecopforresharper.codeplex.com StyleCop For ReSharper]. An third party tool which integrates StyleCop into the [[ReSharper]] toolset. [[Category:.NET programming tools]] [[Category:Static code analysis]] [[Category:Microsoft development tools]] [[Category:Visual Studio extensions]]</text> </page> <page> <id>36033</id> <title>Subdivision surface</title> <text>A '''subdivision surface''', in the field of [[3D computer graphics]], is a method of representing a smooth [[surface]] via the specification of a coarser [[piecewise linear]] [[polygon mesh]]. The smooth surface can be calculated from the coarse mesh as the [[Limit of a sequence|limit]] of a [[Recursion|recursive]] process of subdividing each polygonal [[Face (geometry)|face]] into smaller faces that better approximate the smooth surface. [[Image:Catmull-Clark_subdivision_of_a_cube.svg|thumbnail|First three steps of [[Catmull–Clark]] subdivision of a cube with subdivision surface below]] ==Overview== The subdivision surfaces are defined recursively. The process starts with a given polygonal mesh. A '''refinement scheme''' is then applied to this mesh. This process takes that mesh and subdivides it, creating new vertices and new faces. The positions of the new vertices in the mesh are computed based on the positions of nearby old vertices. In some refinement schemes, the positions of old vertices might also be altered (possibly based on the positions of new vertices). This process produces a denser mesh than the original one, containing more polygonal faces. This resulting mesh can be passed through the same refinement scheme again and so on. The limit subdivision surface is the surface produced from this process being iteratively applied infinitely many times. In practical use however, this algorithm is only applied a limited number of times. The limit surface can also be calculated directly for most subdivision surfaces using the technique of Jos Stam <ref name=Stam/>, which eliminates the need for recursive refinement. ==Refinement schemes== Subdivision surface refinement schemes can be broadly classified into two categories: interpolating and approximating. Interpolating schemes are required to match the original position of vertices in the original mesh. Approximating schemes are not; they can and will adjust these positions as needed. In general, approximating schemes have greater smoothness, but editing applications that allow users to set exact surface constraints require an optimization step. This is analogous to [[Spline (mathematics)|spline]] surfaces and curves, where [[Bézier splines]] are required to interpolate certain control points, while [[B-spline]]s are not. There is another division in subdivision surface schemes as well, the type of polygon that they operate on. Some function for quadrilaterals (quads), while others operate on triangles. ===Approximating schemes=== Approximating means that the limit surfaces approximate the initial meshes and that after subdivision, the newly generated control points are not in the limit surfaces. Examples of approximating subdivision schemes are: * [[Catmull–Clark subdivision surface|Catmull and Clark]] (1978) generalized [[bi-cubic uniform B-spline]] to produce their subdivision scheme. For arbitrary initial meshes, this scheme generates limit surfaces that are [[Parametric continuity|C<sup>2</sup>]] continuous everywhere except at extraordinary vertices where they are [[Parametric continuity|C<sup>1</sup>]] continuous (Peters and Reif 1998). * [[Doo–Sabin subdivision surface|Doo–Sabin]] - The second subdivision scheme was developed by Doo and Sabin (1978) who successfully extended Chaikin's corner-cutting method for curves to surfaces. They used the analytical expression of [[bi-quadratic uniform B-spline]] surface to generate their subdivision procedure to produce [[Parametric continuity|C<sup>1</sup>]] limit surfaces with arbitrary topology for arbitrary initial meshes. * [[Loop subdivision surface|Loop]], Triangles - Loop (1987) proposed his subdivision scheme based on a quartic [[box-spline]] of six direction vectors to provide a rule to generate [[Parametric continuity|C<sup>2</sup>]] continuous limit surfaces everywhere except at extraordinary vertices where they are [[Parametric continuity|C<sup>1</sup>]] continuous. * [[Mid-Edge subdivision scheme]] - The mid-edge subdivision scheme was proposed independently by Peters-Reif (1997) and Habib-Warren (1999). The former used the mid-point of each edge to build the new mesh. The latter used a four-directional [[box spline]] to build the scheme. This scheme generates [[Parametric continuity|C<sup>1</sup>]] continuous limit 