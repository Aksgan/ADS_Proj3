Processing]] * Editorial board of [[Applied and Computational Harmonic Analysis]] * Technical committee for the IEEE [[International Conference on Acoustics, Speech, and Signal Processing]] (ICASSP) * Technical committee for the [[Data Compression Conference]] (DCC) * Advisory committee for the [[National Science Foundation]] Directorate for Computer & Information Science & Engineering == Titles and awards == Malvar holds the following prestigious titles and awards:<ref name="PressPass" /> * 1981: The Young Scientist Award from the Marconi International Fellowship Foundation * 1992: Best Paper Award in Image Processing from the [[IEEE Signal Processing Society]]<ref name="MSR Press Resources" /> * 1997: Fellow of the [[Institute of Electrical and Electronics Engineers]] (IEEE) * 2002: Technical Achievement Award from the IEEE Signal Processing Society * 2004: Wavelet Pioneer Award from [[SPIE]] == References == {{reflist}} == External links == {{commonscat}} * Bill Hinchberger. {{cite web |url=http://www.brazilmax.com/news.cfm/tborigem/fe_business/id/3 |title=Riding the Malvar Wave |accessdate=5 December 2008 |work=Business & Economy |publisher=brazilmax.com |date=9 September 2001}} * Marcela Heitor. {{cite web |url=http://www.secom.unb.br/unbagencia/ag0907-51.htm |title=Da UnB para a diretoria da Microsoft |accessdate=5 December 2008 |work=secom |date=20 September 2007}} {{Persondata |NAME = Malvar, Rico |ALTERNATIVE NAMES = Henrique Sarmento Malvar, Henrique Malvar |SHORT DESCRIPTION = Managing Director of [[Microsoft Research]], signal processing researcher |DATE OF BIRTH = 1957 |PLACE OF BIRTH = [[Rio de Janeiro]], [[Brazil]] |DATE OF DEATH = |PLACE OF DEATH = }} {{DEFAULTSORT:Malvar, Rico}} [[Category:Living people]] [[Category:1957 births]] <!-- [[Category:Universidade de Brasília alumni]] --> [[Category:Federal University of Rio de Janeiro alumni]] [[Category:Massachusetts Institute of Technology alumni]] [[Category:Microsoft employees]] [[Category:People from Rio de Janeiro (city)]] [[Category:Brazilian computer scientists]]</text> </page> <page> <id>32108</id> <title>Rigid origami</title> <text>'''Rigid origami''' is a branch of [[origami]] which is concerned with folding structures using flat rigid sheets joined by hinges. It is a part of the study of the [[mathematics of paper folding]], it can be considered as a type of [[Linkage (mechanical)|mechanical linkage]], and has great practical utility. For instance it was used in the construction of large [[solar panel]] arrays that have to be folded before deployment. There is no requirement that the structure start as a flat sheet &mdash; for instance [[shopping bag]]s with flat bottoms and [[airbag]]s are studied as part of rigid origami. ==Mathematics== The number of standard origami bases that can be folded using rigid origami is restricted by its rules. <ref>{{cite book| author=Demaine, E. D |authorlink=Erik Demaine|title=Folding and Unfolding. Doctoral Thesis |place=University of Waterloo, Canada |year=2001 |url=http://etd.uwaterloo.ca/etd/eddemaine2001.pdf }}</ref> Rigid origami does not have to follow the [[Huzita–Hatori axioms]], the fold lines can be calculated rather than having to be constructed from existing lines and points. However [[Kawasaki's Theorem]] and [[Maekawa's Theorem]] are still applicable. The [[Bellows conjecture|Bellows theorem]] says that a [[flexible polyhedron]] has constant volume when flexed. <ref>{{cite journal |title=The bellows conjecture |journal=Beiträge zur Algebra und Geometrie |volume=38 |issue=1 |pages=1&ndash;10 |year=1997 |author=R. Connelly, I. Sabitov, A. Walz }}</ref> The [[napkin folding problem]] asks whether it is possible to fold a square so the perimeter of the resulting flat figure is increased. That this can be solved within rigid origami was proved by A.S. Tarasov in 2004. ==Applications== The [[Miura fold]] is a rigid fold that has been used to deploy large solar panel arrays for space satellites. [[Robert J. Lang]] has applied origami to the problem of folding [[airbag]]s <ref>{{cite web |author=Robert J. Lang |url=http://www.langorigami.com/science/airbag/airbag.php4 |title=Airbag folding }}</ref> and to folding a space telescope. <ref>{{cite web |url=https://lasers.llnl.gov/programs/psa/pdfs/technologies/eyeglass_space_telescope.pdf |title=The Eyeglass Space Telescope }}</ref> Folding paper [[shopping bag]]s is a problem where the rigidity requirement means the classic solution does not work. <ref>{{cite journal |title=Folding Paper Shopping Bags |url=http://martindemaine.org/papers/PaperBag_CGW2004/ |journal=Abstracts from the 14th Annual Fall Workshop on Computational Geometry |publisher=Cambridge, Massachusetts |year=2004 |month=November |pages=14–15| author=Devin. J. Balkcom, [[Erik Demaine|Erik D. Demaine]], [[Martin Demaine|Martin L. Demaine]] }}</ref> ==Recreational uses== [[Martin Gardner]] has popularised [[flexagon]]s which are a form of rigid origami and the flexatube. <ref>{{cite journal|journal= Wolfram MathWorld|title=Flexatube|author=Weisstein, Eric W.|url=http://mathworld.wolfram.com/Flexatube.html}}</ref> ==References== {{reflist}} ==External links== * {{Cite web|url=http://mars.wnec.edu/~th297133/rigid/rigid.html| title=Rigid Origami| author=[[Tom Hull|Dr. Tom Hull]] }} [[Category:Geometry]] [[Category:Origami]] [[Category:Paper folding]] [[Category:Recreational mathematics]] [[Category:Linkages]]</text> </page> <page> <id>32112</id> <title>Rinda (Ruby programming language)</title> <text>'''Rinda''' is a [[Ruby (programming language)|Ruby]] implementation of [[Linda_(coordination_language)|Linda]] [[distributed computing]] paradigm. Linda defines a set of atomic operations on shared, virtual, (global) associative memory, called a tuplespace. In essence, it is like a distributed blackboard system for decoupled processes. Processes may add tuples to the blackboard or read/remove from the blackboard tuples that match a certain pattern. Rinda builds on Linda/tuplespaces paradigm by offering some interesting additions. In particular, the Rinda implementation uses the case comparison (===) operator to match tuples. This means that tuples may be matched using regular expressions, the classes of their elements, and the element values. DRb server that offers a shared tuplespace: <source lang="ruby"> require 'rinda/tuplespace' URI = "druby://localhost:67671" DRb.start_service(URI, Rinda::TupleSpace.new) DRb.thread.join </source> Computational agent that accepts messages containing an arithmetic operator and two numbers, computes the result and stores it in tuplespace: <source lang="ruby"> require 'rinda/rinda' URI = "druby://localhost:67671" DRb.start_service ts = Rinda::TupleSpaceProxy.new(DRbObject.new(nil, URI)) loop do ops, a, b = ts.take([ %r{^[-+/*]$}, Numeric, Numeric]) ts.write(["result", a.send(ops, b)]) end </source> The client submits tuples to the tuplespace and consumes the result when it is ready: <source lang="ruby"> require 'rinda/rinda' URI = "druby://localhost:67671" DRb.start_service ts = Rinda::TupleSpaceProxy.new(DRbObject.new(nil, URI)) tuples = [[ "*", 2, 2 ], [ "+", 2, 5 ], [ "-", 9, 3 ]] tuples.each do |t| ts.write(t) res = ts.take(["result", nil]) puts "#{res[1]} = #{t[1]} #{t[0]} #{t[2]}" end </source> ==External links== *[http://ruby-doc.org/stdlib/libdoc/rinda/rdoc/index.html Rinda library reference] [[Category:Tree programming languages]]</text> </page> <page> <id>32147</id> <title>Ro-Busters</title> <text>{{Infobox comics organization <!--Wikipedia:WikiProject Comics--> |name = Ro-Busters |image = |noimage=yes |imagesize = <!-- default 250 --> |caption = |publisher = ''[[Fleetway]]'' |debut = ''[[Starlord]]'' #1 |debutmo = May |debutyr = 1978 |debuthead = Starlord |debut1 = ''[[2000 AD (comics)|2000 AD]]'' #86 |debutmo1 = October |debutyr1 = 1978 |debuthead1 = 2000 AD |creators = [[Pat Mills]]<br />[[Kevin O'Neill (comics)|Kevin O'Neill]] |type = |business = |organisation = |organization = |team = y |base = |owners = Howard Quartz |employees = |members = [[Hammerstein (robot)|Hammerstein]]<br />[[Ro-Jaws]]<br />Mek-Quake<br />Chatterbox |fullroster = |cat = |subcat = 2000 AD |hero = y |villain 