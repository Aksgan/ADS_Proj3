Computing Machinery]] [[Category:Fellows of the Association for the Advancement of Artificial Intelligence]] [[Category:Living people]] [[Category:1956 births]] [[bn:পিটার নরভিগ]] [[de:Peter Norvig]] [[ja:ピーター・ノーヴィグ]] [[ru:Норвиг, Питер]] [[sv:Peter Norvig]] [[vi:Peter Norvig]]</text> </page> <page> <id>29007</id> <title>Petname</title> <text>'''Petname systems''' are naming systems that claim to possess all three naming properties - global, secure, and memorable <ref name=petname>{{cite web| url=http://www.skyhunter.com/marcs/petnames/IntroPetNames.html| title=An Introduction to Petname Systems }}</ref>. Software that uses such a system can satisfy all three requirements. Such systems can be used to enhance security, such as preventing [[phishing]] attacks<ref>{{cite book |coauthors= Sadek Ferdous, Audun Jøsang, Kuldeep Singh, Ravishankar Borgaonkar |title = Security Usability of Petname Systems |series = Lecture Notes in Computer Science |publisher = [[Springer Science+Business Media]] |year = 2009 |isbn = 9783642047657 |url=http://books.google.com/books?id=mSMsqoqufMoC&lpg=PP1&dq=isbn%3A9783642047657&pg=PP1#v=onepage&q&f=false}}</ref>. ==Examples== ===General software=== *[[CapDesk]] *[[HP Polaris (computer security)|Polaris]] ===Firefox Extension=== {{Infobox_Software | name = Firefox Petname Tool | <!-- logo = --> <!-- screenshot = | --> caption = Petname | developer = Tyler Close | latest_release_version = 1.7 | latest_release_date = July 14, 2009 | operating_system = [[Cross-platform]] | genre = [[Extension (Mozilla)|Mozilla extension]] | license = MIT/X11 | website = https://addons.mozilla.org/en-US/firefox/addon/957 | }} There is a [https://addons.mozilla.org/en-US/firefox/addon/957/ Petname Tool extension] available for [[Firefox]] that allows petnames to be assigned to secure websites. Use of this extension can help prevent phishing attacks <ref>{{cite book | coauthors= Markus Jakobsson, Steven Myers |title = Phishing and Countermeasures: Understanding the Increasing Problem of Electronic Identity Theft |publisher = [[Wiley-Interscience]] |year = 2006 |isbn = 0471782459 |url=http://books.google.com/books?id=xxAbEcNlIwwC&lpg=PP1&pg=PP1#v=onepage&q&f=false}}</ref> <ref>{{cite web| url=http://www.linux.com/archive/feature/121738| title=Ten Firefox extensions to keep your browsing private and secure}}</ref>. ==PetName Markup Language== The '''PetName Markup Language''' (PNML) is an [[XML]] proposal for using petname systems ubiquitously<ref name=pnml>{{cite web| url=http://www.erights.org/elib/capability/pnml.html| title=The PetName Markup Language }}</ref>. ===Tags=== PNML consists of two tags: <blockquote><pn>pet-name-string</pn></blockquote> <blockquote><key>stringified-cryptographic-key</key></blockquote> ==See also== * [[Zooko's triangle]] ==References== {{Reflist}} ==External links== * [http://petname.mozdev.org/ Petname Site] * [http://www.skyhunter.com/marcs/petnames/IntroPetNames.html An Introduction to Petname Systems] * [http://www.erights.org/elib/capability/pnml.html The PetName Markup Language] {{Object-capability security}} [[Category:Computer security software]] [[Category:Secure communication]] [[Category:Mozilla add-ons]] [[Category:Mozilla Firefox add-ons]] {{crypto-stub}} {{free-software-stub}}</text> </page> <page> <id>29013</id> <title>Petriscript</title> <text>{{Orphan|date=February 2009}} '''PetriScript''' is a modelling language for [[Petri Nets]], designed by [http://lip6.fr/Alexandre.Hamez Alexandre Hamez] and [http://www-src.lip6.fr/~Xavier.Renault Xavier Renault]. The [[CPN-AMI]] platform provides many tools to work on [[Petri net]] such as verifying or model-checking tools. It was easily possible to graphically design simple Petri nets with [http://www-src.lip6.fr/logiciels/mars/MACAO Macao], but various works made internally at [http://www.lip6.fr LIP6] reveal that it was needed to automate such task. Therefore PetriScript has been designed to provide some facilities in modelling places-transition and coloured Petri nets within the CPN-AMI platform. Its main purpose is to automate modelling operations on Petri nets such as merging, creating, and connecting nodes. Thus, it supports almost everything needed like macros, loops control, lists, string and arithmetic expressions,..., and avoids to the maximum the intervention of the user. Its syntax is more or less Ada-like. For example, the following script produces a FIFO with 3 sections: define(FIFO_SIZE,3) define(FIFO_BASE_X,100) define(FIFO_BASE_Y,100) define(FIFO_STEP,120) int $wave := 0; for $wave in 1..FIFO_SIZE loop create place "Slot_" & '$wave' (x FIFO_BASE_X + FIFO_STEP * $wave, y FIFO_BASE_Y); create place "Empty_" & '$wave' (x FIFO_BASE_X + FIFO_STEP * $wave, y FIFO_BASE_Y + 100, marking "1"); end loop; for $wave in 1..FIFO_SIZE+1 loop create transition "t" & '$wave -1' & "_to_" & '$wave' (x FIFO_BASE_X + FIFO_STEP * $wave - FIFO_STEP / 2, y FIFO_BASE_Y + 50); if $wave < FIFO_SIZE+1 then connect "1" transition "t" &'$wave -1' & "_to_" & '$wave' to place "Slot_" & '$wave'; connect "1" place "Empty_" & '$wave' to transition "t" &'$wave -1' & "_to_" & '$wave'; end if; if $wave > 1 then connect "1" transition "t" &'$wave -1' & "_to_" & '$wave' to place "Empty_" & '$wave - 1'; connect "1" place "Slot_" & '$wave - 1' to transition "t" &'$wave -1' & "_to_" & '$wave'; end if; end loop; set transition "t0_to_1" to (name "FIFO_Start"); set transition "t" & 'FIFO_SIZE' & "_to_" & 'FIFO_SIZE + 1' to (name "FIFO_End"); Which produces the following graph: [[Image:Petriscript_fifo.png|400px]] Here is another example that shows the power of PetriScript: define(X,250) define(Y,350) define(radius,50) define(R,150) define(SECTIONS,15) define(INNER_ANGLE,360/SECTIONS) define(OUTTER_ANGLE,360/(2*SECTIONS)) int $i := 0; int $j := 0; for $i in 1.. SECTIONS loop create place "F" & '$i' ( x X, y Y, r radius, t $i * INNER_ANGLE); create place "Section_" & '$i' ( x X, y Y, r R, t $i * INNER_ANGLE); create transition "t" & '$i' & "_to_" & '$i mod SECTIONS + 1' ( x X, y Y, r R, t $i * INNER_ANGLE + OUTTER_ANGLE); end loop; for $i in 1.. SECTIONS loop connect place "Section_" & '$i' to transition "t"&'$i' & "_to_" & '$i mod SECTIONS + 1'; connect transition "t" & '$i' & "_to_" & '$i mod SECTIONS + 1' to place "Section_" & '$i mod SECTIONS + 1'; if $i /= 1 then connect place "F" & '$i' to transition "t" & '$i-1' & "_to_" & '$i'; else connect place "F1" to transition "t" & 'SECTIONS' & "_to_" & '1'; end if; connect transition "t" &'$i mod SECTIONS + 1' & "_to_" & '($i+1) mod SECTIONS + 1' to place "F" & '$i'; end loop; for $i in 1.. SECTIONS loop if $i mod 3 = 0 then set place "Section_" & '$i' to marking "1"; else set place "F" & '$i' to marking "1"; end if; end loop; Which produces the following graph: [[Image:trains.png|400px]] A full documentation is available [http://www-src.lip6.fr/logiciels/mars/CPNAMI/MANUAL_SERV/PetriScript_Reference_Manual.pdf here] [[Category:Specification languages]]</text> </page> <page> <id>29025</id> <title>Pg (Unix)</title> <text>{{lowercase}} [[Image:Pg (Unix)-screenshot.png|thumbnail|Example output of the <tt>pg</tt> command in [[xterm]].]] '''pg''' is a [[terminal pager]] program on [[Unix]] and [[Unix-like]] systems for viewing [[text file]]s. It can also be used to page through the output of a command via a [[pipe (Unix)|pipe]]. pg uses an interface similar to [[vi]], but commands are different.<ref>[http://www.computerhope.com/unix/upg.htm Linux / Unix pg command]</ref> [[more (command)|more]], and [[less (Unix)|less]] are more commonly used paging programs. ==See also== *[[less (Unix)|less]] *[[more (command)|more]] ==References== {{reflist}} {{Unix commands}} {{unix-stub}} [[Category:Terminal pagers]]</text> </page> <page> <id>29033</id> <title>Phantom automation language</title> <text>{{Primary sources|date=June 2009}} {{ infobox software 