of the <tt>getInstance</tt> will return the same correctly initialized <tt>INSTANCE</tt> without incurring any additional synchronization overhead. === When to use it === Use this pattern if the initialization of the class is ''expensive'' and it cannot be done safely at ''class-loading'' time and the initialization is highly concurrent. The crux of the pattern is the safe removal of the synchronization overhead associated with accessing a singleton instance. === When not to use it === Avoid this idiom if the construction of <tt>INSTANCE</tt> can fail. If construction of <tt>INSTANCE</tt> fails, an invocation of <tt>Something.getInstance()</tt> will result in a <tt>java.lang.NoClassDefFoundError</tt> error. Handling, or mishandling, of these types of construction initialization failures is a common criticism of this idiom and the singleton pattern in general. == See also == * [[Singleton pattern|Singleton Pattern]] * [[Double-checked locking|Double Checked Locking Idiom]] * [[Multiton pattern|Multiton Pattern]] == External links == * http://www.cs.umd.edu/~pugh/java/memoryModel/ * http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html * http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html [[Category:Software design patterns]] [[Category:Articles with example Java code]] [[fr:Support d'initialisation à la demande]]</text> </page> <page> <id>18420</id> <title>Initialization vector</title> <text>In [[cryptography]], an '''initialization vector''' ('''IV''') is a block of bits that is required to allow a [[stream cipher]] or a [[block cipher]] to be executed in any of several [[block cipher modes of operation|modes of operation]] to produce a unique stream independent from other streams produced by the same [[encryption]] key, without having to go through a (usually lengthy) re-keying process. The size of the IV depends on the encryption algorithm and on the cryptographic protocol in use and is normally as large as the block size of the cipher or as large as the encryption key. The IV must be known to the recipient of the encrypted information to be able to decrypt it. This can be ensured in a number of ways: by transmitting the IV along with the [[ciphertext]], by agreeing on it beforehand during the key exchange or the handshake, by calculating it (usually incrementally), or by measuring such parameters as current time (used in hardware authentication tokens such as [[RSA SecurID]], [[VASCO_Data_Security_International|VASCO]] [[Digipass]], etc.), [[Digital identity|IDs]] such as sender's and/or recipient's address or ID, file ID, the packet, sector or cluster number, etc. A number of variables can be combined or [[Cryptographic hash function|hashed]] together, depending on the protocol. If the IV is chosen at [[random]], the cryptographer must take into consideration the probability of collisions, and if an incremental IV is used as a [[cryptographic nonce|nonce]], the algorithm's resistance to related-IV attacks must also be considered. ==Block Ciphers== IVs are implemented differently in [[block ciphers]] than in [[stream ciphers]]. In straight-forward operation of block ciphers or so-called Electronic Code Book (ECB) mode, encryption of the same plain text with the same key results in the same cipher text, which is a considerable threat to security. Use of an initialization vector linearly added to ([[XOR]]ed with) the first block of plain text or included in front of the plain text prior to encryption solves this problem. ==Stream Ciphers== In stream ciphers, IVs are loaded into the keyed internal secret state of the cipher, after which a number of cipher rounds is executed prior to releasing the first bit of output. For performance reasons, designers of stream ciphers try to keep that number of rounds as small as possible, but because determining the minimal secure number of rounds for stream ciphers is not a trivial task, and considering other issues such as [[Information entropy|entropy]] loss, unique to each cipher construction, related-IVs and other IV-related attacks are a known security issue for stream ciphers, which makes IV loading in stream ciphers a serious concern and a subject of ongoing research. == WEP IV == The [[802.11]] [[encryption]] [[algorithm]] called WEP (short for [[Wired Equivalent Privacy]]) used a short, 24-bit IV, leading to reused IVs with the same key, which led to it being easily cracked.<ref name="Intercepting_Mobile_Comm_Nik_Ian_Dav">{{cite paper| author=[[Nikita Borisov]], [[Ian Goldberg]], [[David A. Wagner|David Wagner]]| title=Intercepting Mobile Communications: The Insecurity of 802.11|url=http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf | accessdate=2006-09-12}}</ref> [[Packet injection]] allowed for WEP to be cracked in times as short as several seconds. This ultimately led to the deprecation of WEP. == See also == * [[Cryptographic nonce]] * [[Salt (cryptography)]] * [[Block cipher modes of operation]] * [[CipherSaber]] (RC4 with IV) == References == {{reflist|1}} * B. [[Schneier]], 'Applied Cryptography', Wiley 1996 * N. Ferguson and B. [[Schneier]], 'Practical Cryptography', Wiley 2003 {{Crypto navbox | block | stream}} [[Category:Cryptography]] [[Category:Block cipher modes of operation]] [[de:Initialisierungsvektor]] [[es:Vector de inicialización]] [[fr:Vecteur d'initialisation]] [[it:Vettore di inizializzazione]] [[ja:初期化ベクトル]] [[lt:Inicializacijos vektorius]]</text> </page> <page> <id>18426</id> <title>Inkwell (Macintosh)</title> <text>{{Refimprove|date=November 2009}} [[Image:Ink icon.png|right|Ink icon.]] '''Inkwell''', or simply '''Ink''', is the name of the [[handwriting recognition]] technology developed by [[Apple Inc.]] and built into the [[Mac OS X]] operating system. Introduced in an update to [[Mac OS X v10.2]] "Jaguar", Inkwell can translate [[English language|English]], [[French language|French]], and [[German language|German]] writing. The technology made its debut as "[[Apple Newton OS#Handwriting recognition|Rosetta]]", an integral feature of [[Apple Newton OS]], the operating system of the short-lived [[Apple Newton]] personal digital assistant. Inkwell's inclusion in to Mac OS X led many to believe Apple would be using this technology in a new PDA or other portable [[tablet PC|tablet computer]]. However, the only currently available tablet Mac is the [[Axiotron Modbook]], an aftermarket [[MacBook]] with a replacement screen that allows utilization of Inkwell. Inkwell, when activated, appears as semi-transparent yellow lined paper, on which the user sees his or her writing appear. When the user stops writing, his or her writing is interpreted by Inkwell and pasted into the current application (wherever the active text cursor is), as if the user had simply typed the words. The user can also force Inkwell to not interpret his or her writing, instead using it to paste a hand-drawn sketch into the [[active window]]. Inkwell was developed by [[Larry Yaeger]], [[Brandyn Webb]], and [[Richard Francis Lyon|Richard Lyon]].<ref>http://www.beanblossom.in.us/larryy/ANHR.html</ref> ==References== {{reflist}} ==External links== *[http://inkspatter.blogspot.com InkSpatter], a blog which discusses pros and cons of Inkwell {{Mac OS X}} [[Category:Mac OS X user interface]] [[Category:Handwriting recognition]] {{mac-stub}} [[de:Inkwell]] [[it:Inkwell]] [[ja:Inkwell]]</text> </page> 