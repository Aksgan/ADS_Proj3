computer is a key ingredient in [[digital control|digital control systems]]. == Time and space domains == {{Main|Time domain}} The most common processing approach in the time or space domain is enhancement of the input signal through a method called filtering. [[Digital filter]]ing generally consists of some linear transformation of a number of surrounding samples around the current sample of the input or output signal. There are various ways to characterize filters; for example: * A "linear" filter is a [[linear transformation]] of input samples; other filters are "non-linear". Linear filters satisfy the superposition condition, i.e. if an input is a weighted linear combination of different signals, the output is an equally weighted linear combination of the corresponding output signals. * A "causal" filter uses only previous samples of the input or output signals; while a "non-causal" filter uses future input samples. A non-causal filter can usually be changed into a causal filter by adding a delay to it. * A "time-invariant" filter has constant properties over time; other filters such as [[adaptive filter]]s change in time. * Some filters are "stable", others are "unstable". A stable filter produces an output that converges to a constant value with time, or remains bounded within a finite interval. An unstable filter can produce an output that grows without bounds, with bounded or even zero input. * A "finite impulse response" ([[Finite impulse response|FIR]]) filter uses only the input signals, while an "infinite impulse response" filter ([[IIR]]) uses both the input signal and previous samples of the output signal. FIR filters are always stable, while IIR filters may be unstable. Filters can be represented by block diagrams which can then be used to derive a sample processing [[algorithm]] to implement the filter using hardware instructions. A filter may also be described as a [[difference equation]], a collection of [[Zero (complex analysis)|zeroes]] and [[pole (complex analysis)|pole]]s or, if it is an FIR filter, an [[impulse response]] or [[step response]]. The output of a digital filter to any given input may be calculated by [[convolution|convolving]] the input signal with the [[impulse response]]. == Frequency domain == {{Main|Frequency domain}} Signals are converted from time or space domain to the frequency domain usually through the [[Fourier transform]]. The Fourier transform converts the signal information to a magnitude and phase component of each frequency. Often the Fourier transform is converted to the power spectrum, which is the magnitude of each frequency component squared. The most common purpose for analysis of signals in the frequency domain is analysis of signal properties. The engineer can study the spectrum to determine which frequencies are present in the input signal and which are missing. In addition to frequency information, phase information is often needed. This can be obtained from the Fourier transform. With some applications, how the phase varies with frequency can be a significant consideration. Filtering, particularly in non-realtime work can also be achieved by converting to the frequency domain, applying the filter and then converting back to the time domain. This is a fast, O(n log n) operation, and can give essentially any filter shape including excellent approximations to [[brickwall filter]]s. There are some commonly used frequency domain transformations. For example, the [[cepstrum]] converts a signal to the frequency domain through Fourier transform, takes the logarithm, then applies another Fourier transform. This emphasizes the frequency components with smaller magnitude while retaining the order of magnitudes of frequency components. Frequency domain analysis is also called ''spectrum-'' or ''spectral analysis''. ==Z-plane analysis== Whereas analog filters are usually analysed in terms of [[transfer function]]s in the [[s plane]] using [[Laplace transform]]s, digital filters are analysed in the z plane in terms of [[Z-transform]]s. A digital filter may be described in the z plane by its characteristic collection of [[Zero (complex analysis)|zeroes]] and [[pole (complex analysis)|poles]]. == Applications == The main applications of DSP are [[audio signal processing]], [[audio compression]], [[digital image processing]], [[video compression]], [[speech processing]], [[speech recognition]], [[digital communication]]s, [[RADAR]], [[SONAR]], [[seismology]], and [[biomedicine]]. Specific examples are [[speech compression]] and transmission in digital [[mobile phone]]s, [[digital room correction|room correction]] of sound in [[hi-fi]] and [[sound reinforcement]] applications, [[weather forecasting]], [[economic forecasting]], [[seismology|seismic]] data processing, analysis and control of [[industrial process]]es, [[medical imaging]] such as [[CAT]] scans and [[MRI]], [[MP3]] compression, [[computer graphics]], [[image manipulation]], hi-fi [[loudspeaker]] [[audio crossover|crossovers]] and [[equalization]], and [[audio effect]]s for use with [[electric guitar]] [[amplifiers]]. == Implementation == Digital signal processing is often implemented using [[Digital signal processor|specialised microprocessors]] such as the [[Motorola 56000|DSP56000]], the [[TMS320]], or the [[Super Harvard Architecture Single-Chip Computer|SHARC]]. These often process data using [[fixed-point arithmetic]], although some versions are available which use [[floating point arithmetic]] and are more powerful. For faster applications [[FPGA]]s<ref>{{cite web | last = JpFix | title = FPGA-Based Image Processing Accelerator | url = http://www.jpfix.com/About_Us/Articles/FPGA-Based_Image_Processing_Ac/fpga-based_image_processing_ac.html | accessdate = 2008-05-10 }}</ref> might be used. Beginning in 2007, multicore implementations of DSPs have started to emerge from companies including [[Freescale]] and [[Stream Processors, Inc]]. For faster applications with vast usage, [[Application-specific integrated circuit|ASIC]]s might be designed specifically. For slow applications, a traditional slower processor such as a microcontroller may be adequate. Also a growing number of DSP applications are now being implemented on [[Embedded Systems]] using powerful PCs with a [[Multi-core processor]]. == Techniques == <div style="-moz-column-count:2; column-count:2;"> * [[Bilinear transform]] * [[Discrete Fourier transform]] * [[Discrete-time Fourier transform]] * [[Filter design]] * [[LTI system theory]] * [[Minimum phase]] * [[Transfer function]] * [[Z-transform]] * [[Goertzel algorithm]] * [[s-plane]] </div> == Related fields == * [[Analog signal processing]] * [[Automatic control]] * [[Computer Engineering]] * [[Computer Science]] * [[Data compression]] * [[Dataflow programming]] * [[Electrical engineering]] * [[Information theory]] * [[Telecommunication]] * [[Machine Learning]] * [[Stream processing]] * [[Wavelet]] * [[Fourier Analysis]] * [[Time series]] == References == {{Reflist}} == Further reading == {{wikibooks|Digital Signal Processing}} <div class="references-small"> *[[Alan V Oppenheim|Alan V. Oppenheim]], [[Ronald W Schafer|Ronald W. Schafer]], John R. Buck : ''Discrete-Time Signal Processing'', Prentice Hall, ISBN 0-13-754920-2 *Boaz Porat: ''A Course in Digital Signal Processing'', Wiley, ISBN 0471149616 *Richard G. 