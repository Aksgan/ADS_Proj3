on the circulation of blood]], Galileo ’s ''[[Sidereus Nuncius]]'', the first printing of the [[United States Bill of Rights]], and the [[Magna Carta]]. ==External links== *[http://www.rarebookroom.org Rare Book Room], website. *[http://www.rarebookroom.org/indexA.html List of all titles] [[Category:Book websites]] [[Category:Discipline-oriented digital libraries]] [[fr:Rare book room]]</text> </page> <page> <id>31305</id> <title>Rasterisation</title> <text>'''Rasterisation''' (or '''rasterization''') is the task of taking an image described in a [[vector graphics]] format (shapes) and converting it into a [[raster image]] ([[pixel]]s or dots) for output on a [[computer display|video display]] or [[computer printer|printer]], or for storage in a bitmap file format. ==Introduction== The term "''rasterization''" can in general be applied to any process by which [[vector graphics|vector]] information can be converted into a [[raster graphics|raster]] format. In normal usage, the term refers to the popular [[rendering (computer graphics)|rendering]] algorithm for displaying three-dimensional shapes on a computer. Rasterization is currently the most popular technique for producing real-time [[3D computer graphics]]. Real-time applications need to respond immediately to user input, and generally need to produce frame rates of at least 25 frames per second to achieve [[persistence of vision|smooth animation]]. Compared with other rendering techniques such as [[Ray tracing (graphics)|ray tracing]], rasterization is extremely fast. However, rasterization is simply the process of computing the mapping from scene geometry to pixels and does not prescribe a particular way to compute the color of those pixels. [[Shading]], including [[Shading language|programmable shading]], may be based on physical light transport, or artistic intent. The process of rasterising 3D models onto a 2D plane for display on a computer screen is often carried out by fixed function hardware within the [[graphics pipeline]]. This is because there is no motivation for modifying the techniques for rasterisation used at render time - a non configurable system allows for high efficiency. == Basic approach == The most basic rasterization algorithm takes a 3D scene, described as [[polygon]]s, and renders it onto a 2D surface, usually a computer monitor. Polygons are themselves represented as collections of triangles. Triangles are represented by 3 vertices in 3D-space. At a very basic level, rasterizers simply take a stream of vertices, transform them into corresponding 2-dimensional points on the viewer’s monitor and fill in the transformed 2-dimensional triangles as appropriate. ===Transformations=== [[Transformation (geometry)|Transformations]] are usually performed by [[matrix multiplication]]. [[quaternions|Quaternion]] math may also be used but that is outside the scope of this article. The main transformations are [[Translation (geometry)|translation]], [[Scaling (geometry)|scaling]], [[Rotation (mathematics)|rotation]], and [[Projection (mathematics)|projection]]. A 3 dimensional vertex may be transformed by augmenting an extra variable (known as a "homogeneous variable") and left multiplying the resulting 4-component vertex by a 4 x 4 transformation matrix. A '''translation''' is simply the movement of a point from its original location to another location in 3-space by a constant offset. Translations can be represented by the following matrix: : <math> \begin{bmatrix} 1 & 0 & 0 & X \\ 0 & 1 & 0 & Y \\ 0 & 0 & 1 & Z \\ 0 & 0 & 0 & 1 \end{bmatrix} </math> X, Y, and Z are the offsets in the 3 dimensions, respectively. A '''scaling''' transformation is performed by multiplying the position of a vertex by a scalar value. This has the effect of scaling a vertex with respect to the origin. Scaling can be represented by the following matrix: : <math> \begin{bmatrix} X & 0 & 0 & 0 \\ 0 & Y & 0 & 0 \\ 0 & 0 & Z & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix} </math> X, Y, and Z are the values by which each of the 3-dimensions are multiplied. Asymmetric scaling can be accomplished by varying the values of X, Y, and Z. '''Rotation''' matrices depend on the axis around which a point is to be rotated. Rotation about the X-axis: : <math> \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & \cos{\theta} & -\sin{\theta} & 0 \\ 0 & \sin{\theta} & \cos{\theta} & 0 \\ 0 & 0 & 0 & 1 \\ \end{bmatrix} </math> Rotation about the Y-axis: : <math> \begin{bmatrix} \cos{\theta} & 0 & \sin{\theta} & 0 \\ 0 & 1 & 0 & 0 \\ - \sin{\theta} & 0 & \cos{\theta} & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix} </math> Rotation about the Z-axis: : <math> \begin{bmatrix} \cos{\theta} & -\sin{\theta} & 0 & 0 \\ \sin{\theta} & \cos{\theta} & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix} </math> θ in all each of these cases represent the angle of rotation. A series of translation, scaling, and rotation matrices can logically describe most transformations. Rasterization systems generally use a '''transformation stack''' to move the stream of input vertices into place. The transformation stack is a standard [[Stack (data structure)|stack]] which stores matrices. Incoming vertices are multiplied by the matrix stack. As an illustrative example of how the transformation stack is used, imagine a simple scene with a single model of a person. The person is standing upright, facing an arbitrary direction while his head is turned in another direction. The person is also located at a certain offset from the origin. A stream of vertices, the model, would be loaded to represent the person. First, a translation matrix would be pushed onto the stack to move the model to the correct location. A scaling matrix would be pushed onto the stack to size the model correctly. A rotation about the y-axis would be pushed onto the stack to orient the model properly. Then, the stream of vertices representing the body would be sent through the rasterizer. Since the head is facing a different direction, the rotation matrix would be popped off the top of the stack and a different rotation matrix about the y-axis with a different angle would be pushed. Finally the stream of vertices representing the head would be sent to the rasterizer. After all points have been transformed to their desired locations in 3-space with respect 