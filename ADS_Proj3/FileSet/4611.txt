that most data traffic uses TC0 and that the network has congestion, this helps ensure that TC1 data frames arrive at their destination faster than TC0 data frames (analogous to emergency vehicles and normal road traffic). Furthermore, L2 can even interrupt or "preempt" an outgoing TC0 data frame to transmit a TC1 data frame. Additional arbitration rules apply to control frames: in essence these receive higher priority than data frames because they are small and essential for keeping traffic flowing. In a multi-hop network, the arbitration is done within every L2 transmitter at every hop. The Traffic Class assigned to data does not normally change as data progresses through the network. It is up to the applications to decide how to use the priority system. ===L2 single Traffic Class option=== In UniPro version 1.1, an option was introduced to allow simple endpoint devices to implement only one of the two Traffic Classes if they choose to. This can be useful when device designers are more concerned with implementation cost than with control over frame arbitration. The connected L2 peer device detects such devices during the link initialization phase and can avoid using the missing Traffic Class. ===L2 guarantees=== The various L2 mechanisms provide a number of guarantees to higher layer protocols: * a received data frame will contain the correct payload (checked using a checksum) * a transmitted data frame will reach the peer's receiver (after potential retransmissions) * there will be room to accommodate received data frames (L2 flow control) * the content of a data frame will be only passed once to the upper protocol layer (duplicate data frames are discarded) * data frames within the same Traffic Class will be received and passed to the upper protocol layers in order Thus individual links autonomously provide reliable data transfer. This is different from, for example, the widely used [[Transmission Control Protocol|TCP protocol]] that detects errors at the endpoints and relies on end-to-end retransmission in case of corrupted or missing data. ==Network Layer (L3)== [[Image:UniPro network.png|500px|thumb|Example system architecture showing multiple UniPro devices connected via UniPro switches]] The network layer is intended to route packets through the network toward their destination. Switches within a multi-hop network use this address to decide in which direction to route individual packets. To enable this, a header containing a 7-bit destination address is added by L3 to all L2 data frames. In the example shown in the figure, this allows Device #3 to not only communicate with Device #1, #2 and #5, but also enables it to communicate with Devices #4 and #6. Version 1.1 of the UniPro spec does not specify the details of a switch, but does specify enough to allow a device to work in a future networked environment. ===L3 addressing=== Although the role of the L3 address is the same as the IP address in packets on the Internet, a UniPro DeviceID address is only 7 bit long. A network can thus have up to 128 different UniPro devices. Note that, as far as UniPro is concerned, all UniPro devices are created equal: unlike PCI Express or USB, any device can take the initiative to communicate with any other device. This makes UniPro a true network rather than a bus with one master. ===L3 packets=== The diagram shows an example of an L3 packet which starts at the first L2 payload byte of an L2 frame and ends at the last L2 payload byte of an L2 frame. For simplicity and efficiency, an L3 packet cannot span multiple L2 frames and an multiple L3 packets cannot be squeezed onto one frame. This implies that, in UniPro, the concepts of an L2 Frame, an L3 Packet and an L4 Segment (see below) are so closely aligned that they are almost synonyms. The distinction (and "coloring") is however still made to ensure that the specification can be described in a strictly layered fashion. ===L3 short-header packet structure=== UniPro short-header packets use a single header byte for L3 information. It includes the 7-bit L3 destination address. The remaining bit indicates the short-header packet format. For short-header packets, the L3 source address is not included in the header because it is assumed that the two communicating devices have exchanged such information beforehand ([[Connection-oriented|connection-oriended]] communication). {| border="1" cellpadding="3" style="margin: 1em auto 1em auto" |+ ''UniPro Short-Header Packet within a Data Frame'' |- style="background:#D8D8D8; color:black" | align="center background:#FF1804;" | ctl || b15 || b14 || b13 || b12 || b11 || b10 || b09 || b08 || b07 || b06 || b05 || b04 || b03 || b02 || b01 || b00 |- style="background:#FF9400; color:black" align="center" | style="background:#FF1804; color:white" | 1 | colspan="16" | Start-of-Data-Frame control symbol (header) |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="8" style="background:#FAF931" | L3 short-header | colspan="8" | Packet payload |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | Packet payload |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | : |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | Packet payload |- style="background:#FF9400; color:black" align="center" | style="background:#FF1804; color:white" | 1 | colspan="16" | End-of-Data-Frame control symbol (trailer) |- style="background:#FF9400; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | 16-bit checksum |} ===L3 long-header packets=== Long-header packets are intended to be introduced in a future version of the UniPro specification, so their format is undefined (except for one bit) in the current UniPro v1.1 specification. However, UniPro v1.1 defines a hook that allows long-header packets to be received or transmitted by a UniPro v1.1 conformant-device assuming the latter can be upgraded via software. The "long-header trap" mechanism of UniPro v1.1 simply passes the payload of a received L2 data frame (being the L3 packet with its header and payload) to software for processing. The mechanism can also accept L2 frame payload from software for transmission. This mechanism aims to allow UniPro v1.1 devices to be able to be upgraded in order to support protocols that require the as-yet 