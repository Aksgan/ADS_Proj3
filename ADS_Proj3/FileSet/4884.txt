URIs, so that these components can be directly accessed by clients using HTTP protocol. An XCAP server is used by XCAP clients to store data like buddy lists and presence policy in combination with a SIP Presence server that supports PUBLISH, SUBSCRIBE and NOTIFY methods to provide a complete [[Session Initiation Protocol|SIP]] SIMPLE server solution. == Features == The following operations are supported via XCAP protocol in a client-server interaction: * Retrieve an item * Delete an item * Modify an item * Add an item The operations above can be executed on the following items: * Document * Element * Attribute The XCAP addressing mechanism is based on [[XPath]], that provides the ability to navigate around the XML tree. == Application Usages == The following applications are provided by XCAP, by using specific '''auid''' (Application Unique Id): * XCAP capabilities (auid = '''xcap-caps'''). * Resource lists (auid = '''resource-lists'''). A resource lists application is any application that needs access to a list of resources, identified by a URI, to which operations, such as subscriptions, can be applied. * Presence rules (auid = '''pres-rules''', '''org.openmobilealliance.pres-rules'''). A Presence Rules application is an application which uses authorization policies, also known as authorization rules, to specify what presence information can be given to which watchers, and when. * RLS services (auid = '''rls-services'''). A Resource List Server (RLS) services application is Session Initiation Protocol (SIP) application whereby a server receives SIP SUBSCRIBE requests for resource, and generates subscriptions towards the resource list. * PIDF manipulation (auid = '''pidf-manipulation'''). Pidf-manipulation application usage defines how XCAP is used to manipulate the contents of PIDF based presence documents. == Standards == The XCAP protocol is based on the following [[IETF]] standards: RFC4825 <ref>[http://www.ietf.org/rfc/rfc4825.txt RFC4825] </ref>, RFC4826 <ref>[http://www.ietf.org/rfc/rfc4826.txt RFC4826] </ref>, RFC4827 <ref>[http://www.ietf.org/rfc/rfc4827.txt RFC4827] </ref>, RFC5025<ref>[http://www.ietf.org/rfc/rfc5025.txt RFC5025] </ref> ==References== {{Reflist}} ==External links== * [http://www.jdrosen.net/papers/xcap-tutorial.ppt XCAP Tutorial] * [http://openxcap.org/ OpenXCAP] [[Category:XML| ]] [[Category:Application layer protocols]] [[fr:XML Configuration Access Protocol]]</text> </page> <page> <id>40692</id> <title>XML Pretty Printer</title> <text>{{Orphan|date=October 2008}} {{Merge|pretty printer|date=December 2009}} '''XML Pretty Printers''' are a type of [[Prettyprint]] or code beautifier that specifically improve the readability of [[XML]]. XML as a standard is designed to be human readable, but is sometimes generated by a computer as tightly compressed or compacted, and hence more difficult to read and edit. Running the XML file through a pretty printer will improve its readability and editability. ==Examples of XML Pretty Printers== * [http://prettydiff.com/markup_beauty.js markup_beauty.js] (component of [http://prettydiff.com/ Pretty Diff]) * [[xmllint]] (utility in [[open source]] library [[libxml2]]) * [[xmlindent]] [[open source]] tool, more information on the homepage [http://xmlindent.sourceforge.net/ here]. * [[xmlpp]] (command line) (Windows) ==See also== * [[Prettyprint]] * [[XML]] ==External links== * [http://tools.decisionsoft.com/xmlpp.html DecisionSoft XML Pretty Printer] * [http://www.cheztabor.com/xmlpp/index.htm xmlpp pretty printer] * [http://xmlindent.sourceforge.net/ XML Indent], an XML stream reformatter [[Category:XML]] [[Category:Source code]] {{compu-prog-stub}}</text> </page> <page> <id>40708</id> <title>XML pipeline</title> <text>In [[software]], an '''XML Pipeline''' is formed when [[XML]] (Extensible Markup Language) processes, especially [[XML transformation language|XML transformations]] and [[XML validation]]s, are connected together. For instance, given two transformations T<sub>1</sub> and T<sub>2</sub>, the two can be connected together so that an input XML document is transformed by T<sub>1</sub> and then the output of T<sub>1</sub> is fed as input document to T<sub>2</sub>. Simple pipelines like the one described above are called ''linear''; a single input document always goes through the same sequence of transformations to produce a single output document. == Linear Operations == Linear operations can be divided in at least two parts === Micro-operations === They operate at the inner document level * '''Rename''' - renames elements or attributes without modifying the content * '''Replace''' - replaces elements or attributes * '''Insert''' - adds a new data element to the output stream at a specified point * '''Delete''' - removes an element or attribute (also known as pruning the input tree) * '''Wrap''' - wraps elements with additional elements * '''Reorder''' - changes the order of elements === Document operations === They take the input document as a whole * '''[[Identity transform]]''' - makes a verbatim copy of its input to the output * '''Compare''' - it takes two documents and compare them * '''Transform''' - execute a transform on the input file using a specified [[XSLT]] file. Version 1.0 or 2.0 should be specified. * '''Split''' - take a single XML document and split it into distinct documents === Sequence operations === They are mainly introduced in [[XProc]] and help to handle the sequence of document as a whole * '''Count''' - it takes a sequence of documents and counts them * '''[[Identity transform]]''' - makes a verbatim copy of its input sequence of documents to the output * '''split-sequence''' - takes a sequence of documents as input and routes them to different outputs depending on matching rules * '''wrap-sequence''' - takes a sequence of documents as input and wraps them into one or more documents ==Non-linear== Non-linear operations on pipelines may include: * '''Conditionals''' &mdash; where a given transformation is executed if a condition is met while another transformation is executed otherwise * '''Loops''' &mdash; where a transformation is executed on each node of a node set selected from a document or a transformation is executed until a condition evaluates to false * '''Tees''' &mdash; where a document is fed to multiple transformations potentially happening in parallel * '''Aggregations''' &mdash; where multiple documents are aggregated into a single document * '''Exception Handling''' &mdash; where failures in processing can result an alternate pipeline being processed Some standards also categorize transformation as macro (changes impacting an entire file) or micro (impacting only an element or attribute) == XML Pipeline languages == XML pipeline languages are used to define pipelines. A program written with an XML pipeline language is implemented by software known as an XML pipeline engine, which creates processes, connects them together and finally executes the pipeline. Existing XML pipeline languages include: === Standards === * '''[[XProc|XProc: An XML Pipeline Language]]''' is a W3C Recommendation [http://www.w3.org/TR/xproc] for defining linear and non-linear XML pipelines. === Product-specific === * '''W3C XML Pipeline Definition 