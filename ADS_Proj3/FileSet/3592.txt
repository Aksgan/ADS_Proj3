code produced -- it is the polar opposite of [[Formal verification]]. Programmers are often compelled to program by permutation when an [[API]] is insufficiently documented. This lack of clarity drives others to [[Copy_and_paste_programming|copy and paste]] from reference code which is assumed to be correct, but was itself written as a result of programming by permutation. In some cases where the programmer can logically explain that exactly one out of a small set of variations must work, programming by permutation leads to correct code (which then can be verified) and makes it unnecessary to think about the other (wrong) variations. == Example == For example, the following code sample in [[C (programming language)|C]] (intended to find and copy a series of digits from a larger string) has several problems: <source lang="c"> char* buffer = "123abc"; char destination[10]; int i = 0; int j = 0; int l = strlen(buffer); while (i < l) { if (isdigit(buffer[i])) destination[j++] = buffer[i++]; i++; } destination[j] = '\0'; printf("%s\n", destination); </source> First of all, it doesn't give the right answer. With the given starting string, it produces the output "13", when the correct answer is "123". A programmer who does not recognize the structural problems may seize on one statement, saying "ah, there's an extra increment". The line "i++" is removed; but testing the code results in an infinite loop. "Oops, wrong increment." The former statement is added back, and the line above it is changed to remove the post-increment of variable i: <source lang="c"> if (isdigit(buffer[i])) destination[j++] = buffer[i]; </source> Testing the code now produces the correct answer, "123". The programmer sighs in contentment: "There, that did it. All finished now." Additional testing with various other input strings bears out this conclusion. Of course, other problems remain. Because the programmer does not take the trouble to fully understand the code, they go unrecognized: * If the input contains several numbers separated by non-digit characters, such as "123ab456", the destination receives all the digits, concatenated together * If the input string is larger than the destination array, a buffer overflow will occur * If the input string is longer than INT_MAX, the behaviour is undefined as strlen() returns a value of type size_t which is an unsigned integer and may be wider than int. * If char is a signed type and the input string contains characters that are not in the range of 0..UCHAR_MAX after integer promotion, the call to isdigit() has undefined behaviour. While the solution is correct for a limited set of input strings, it is not fully correct, and since the programmer did not bother to understand the code, the errors will not be discovered until a later testing stage, if at all. Also known as "Trial and Error", "Generate and Test", "Poke and Hope" [http://www.galactic-guide.com/articles/2U22.html], "The Birdshot Method" and the "Million Monkeys Programming Style". [[Category:Anti-patterns]]</text> </page> <page> <id>30228</id> <title>Programming language reference</title> <text>A '''programming language reference''' (or '''language reference manual''') is an artifact that describes a [[programming language]] so that [[user (computing)|user]]s and [[programmer|developer]]s can understand the basic elements of and write [[computer program]]s in the target language. A programming language reference manual is one form of [[documentation]] that is associated with most mainstream programming languages. A reference manual is ordinarily separate and distinct from a [[programming language specification]], which is usually more detailed and intended for use by [[Programming language implementation|implementor]]s of the language itself, rather than those who simply use the language to accomplish some processing task. ==External links== *[http://www.adaic.com/standards/ada05.html Ada 2005 Language Reference Manual] * [http://www.network-theory.co.uk/python/language/ The Python Language Reference Manual] by Guido van Rossum and Fred L. Drake, Jr. (ISBN 0-9541617-8-5) ==References== <references/> {{compu-lang-stub}} [[Category:Programming language topics|Specification]]</text> </page> <page> <id>30235</id> <title>Programming the Universe</title> <text>{{Infobox Book | name = Programming the Universe: A Quantum Computer Scientist Takes On the Cosmos | title_orig = | translator = | image = | image_caption = | author = [[Seth Lloyd]] | illustrator = | cover_artist = | country = | language = | series = | subject = [[Quantum mechanics]], [[Quantum computers]] | genre = | publisher = [[Alfred A. Knopf]] | pub_date = 2006 | isbn = 978-1400040926 | dewey = 530.12 22 | congress = QC174.12 .L57 2006 | oclc = 423500375 }} '''''Programming the Universe''''' is a 2006 [[popular science]] book by [[Seth Lloyd]], professor of mechanical engineering at the [[Massachusetts Institute of Technology]]. The book proposes that the universe is a [[quantum computer]], and advances in the understanding of physics may come from viewing [[entropy]] as a phenomenon of information, rather than simply [[thermodynamics]]. Lloyd also postulates that the universe can be fully simulated using a quantum computer, however in the absence of a theory of [[quantum gravity]], such a simulation is not yet possible. ==Reaction== Reviewer Corey S. Powell of ''The New York Times'' writes: <blockquote>In the space of 221 dense, frequently thrilling and occasionally exasperating pages, … tackles computer logic, thermodynamics, chaos theory, complexity, quantum mechanics, cosmology, consciousness, sex and the origin of life — throwing in, for good measure, a heartbreaking afterword that repaints the significance of all that has come before. The source of all this intellectual mayhem is the kind of Big Idea so prevalent in popular science books these days. Lloyd, a professor of mechanical engineering at M.I.T., takes as his topic the fundamental workings of the universe…, which he thinks has been horribly misunderstood. Scientists have looked at it as a ragtag collection of particles and fields while failing to see what it is as a majestic whole: an enormous computer.<ref>{{cite news | last = Powell | first = Corey S. | title = Welcome to the Machine | work = | publisher = ''The New York Times'' | date = April 2, 2006 | url = http://www.nytimes.com/2006/04/02/books/review/02powell.html?_r=1&partner=rssnyt&emc=rss&oref=slogin | accessdate = 2009-06-08}} </ref> </blockquote> Lloyd, wrote Powell, is "one of the world's experts in a new kind of computing device, called a quantum computer, which . . . mimic the natural world perfectly," In an interview with ''[[Wired (magazine)|Wired]]'' magazine, 