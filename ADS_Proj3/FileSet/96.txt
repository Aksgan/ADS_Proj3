<math>A_0</math> and <math>\phi_n^{k}</math> respectively. [[Fourier transform]] the wave in ''k''-space to ''x'' space. : <math>A_0e^{i\phi_n^{k}} \xrightarrow{FFT} A_n^fe^{i\phi_n^{f}}</math> Then compare the transformed [[intensity (physics)|intensity]] <math>I_n^f</math> with the desired intensity <math>I_0^f</math>, where : <math> I_n^f = \left(A_n^f\right)^2, </math> : <math> \varepsilon = \sqrt{\left(I_n^f\right)^2 - \left(I_0\right)^2}. </math> Check <math>\varepsilon</math> against the convergence requirements. If the requirements are not met then mix the transformed [[amplitude]] <math>A_n^f</math> with desired amplitude <math>A^f</math>. : <math>\bar{A}^f_n = \left[a A^f + (1-a) A_n^f\right],</math> where ''a'' is mixing ratio and : <math>A^f = \sqrt{I_0}</math>. ''Note that ''a'' is a percentage, defined on the interval 0 ≤ ''a'' ≤ 1. Combine mixed amplitude with the ''x''-space phase and [[inverse Fourier transform]]. : <math>\bar{A}^{f}e^{i\phi_n^f} \xrightarrow{iFFT} \bar{A}_n^ke^{i\phi_n^k}.</math> Separate <math>\bar{A}_n^k</math> and <math>\phi^k_n</math> and combine <math>A_0</math> with <math>\phi^k_n</math>. Increase loop by one <math> n \to n + 1</math> and repeat. ====Limits==== * If <math>a = 1</math> then the AA algorithm becomes the [[Gerchberg–Saxton algorithm]]. * If <math>a = 0</math> then <math>\bar{A}^k_n = A_0</math>. ==See also== * [[Gerchberg–Saxton algorithm]] * [[Fourier optics]] * [[Holography]] * [[Interferometry]] * [[Synthesizer|Sound Synthesis]] ==References== * {{citation | last=Dufresne | first=Eric | last2=Grier | first2=David G | last3=Spalding | title=Computer-Generated Holographic Optical Tweezer Arrays | journal=Review of Scientific Instruments | volume=72 | issue=3 | month=December | year=2000}}. * {{citation | last=Grier | first=David G | title=Adaptive-Additive Algorithm | date=October 10, 2000 | url=http://www.physics.nyu.edu/~dg86/cgh2b/node6.html}}. * {{citation | last=Robel | first=Axel | title=Adaptive Additive Modeling With Continuous Parameter Trajectories | url=http://ieeexplore.ieee.org/iel5/10376/32978/101109TSA2005858529.pdf?arnumber=101109TSA2005858529}}. * {{citation | last=Robel | first=Axel | title=Adaptive-Additive Synthesis of Sound Technical | place=University of Berlin Germany | publisher=Einsteinufer 17, 10587 | location=Berlin, Germany. | url=http://i2pi.com/PAPERS/music-dsp/adaptive-additive-synthesis-of.pdf | format= }}{{dead link|date=April 2009}} * {{Citation | last=Soifer | first=V. Kotlyar | last2=Doskolovich, | first2=L. | title=Iterative Methods for Diffractive Optical Elements Computation | year=1997 | publisher=Taylor & Francis | location=Bristol, PA | isbn=978-0-7484-0634-0}} ==External links== * [http://staff.chess.cornell.edu/~shen/workshop2003/presentations/Talk_DiFabrizio.pdf A PDF/Power Point Presentation that describes the uses and variations of the AA algorithm] ''Berkeley, Ca''. * [http://physics.nyu.edu/grierlab/cgh2b/node6.html David Grier's Lab] Presentation on optical tweezers and fabrication of AA algorithm. * [http://www-ccrma.stanford.edu/~roebel/addsyn/index.html Adaptive Additive Synthesis for Non Stationary Sound] Dr. Axel Robel. * [http://hillslab.umd.edu/ Hill Labs] ''University of Maryland College Park''. {{DEFAULTSORT:Adaptive-Additive Algorithm}} [[Category:Digital signal processing]] [[Category:Physical optics]]</text> </page> <page> <id>956</id> <title>Adaptive Behavior</title> <text>{{Infobox Journal | title = Adaptive Behavior | cover = | editor = | discipline = Adaptive behavior, ethology, cognitive science, robotics, neuroscience | language = English | abbreviation = | publisher = International Society for Adaptive Behavior | country = [[United States|USA]] | frequency = bi-monthly | history = | openaccess = | impact = | impact-year = | website = http://adb.sagepub.com/ | link1 = | link1-name = | link2 = | link2-name = | RSS = | atom = | JSTOR = | OCLC = | LCCN = | CODEN = | ISSN = 1059-7123 | eISSN = }} '''''Adaptive Behavior''''' was founded in 1992 and is the official journal of the [[International Society for Adaptive Behavior]]. It specializes in research on adaptive behavior in both living and artificial systems. The journal is interdisciplinary in scope and publishes research in [[biologically inspired computing]], [[computational neuroscience]], [[evolutionary robotics]], [[autonomous robotics]], the [[animat]] approach, and [[embodied cognition]]. ''Adaptive Behavior'' is published online and in hard copy by [[SAGE Publications]]. == External links == *[http://adb.sagepub.com/ ''Adaptive Behavior'' on the SAGE website] *[http://www.isab.org.uk/ International Society for Adaptive Behavior] [[Category:ethology journals]] [[Category:Neuroscience journals]] [[Category:Computer science journals]] [[Category:Robotics journals]] [[Category:English-language journals]] [[Category:Bimonthly journals]]</text> </page> <page> <id>988</id> <title>Adaptive sort</title> <text>A [[sorting algorithm]] falls into the '''adaptive sort''' family if it takes advantage of existing order in its input. It benefits from the presortedness in the input sequence – or a limited amount of [[randomness|disorder]] for various definitions of measures of disorder – and sorts faster. Adaptive sorting is usually performed by modifying existing sorting algorithms. == Motivation == [[Comparison sort|Comparison-based sorting algorithms]] have traditionally dealt with achieving an optimal bound of [[Big O notation|O]](n logn) when dealing with [[time complexity]]. Adaptive sort takes advantage of the existing order of the input to try to achieve better times, so that the time taken by the algorithm to sort is a smoothly growing function of the size of the sequence ''and'' the disorder in the sequence. In other words, the more presorted the input is, the faster it should be sorted. This is an attractive algorithm because nearly sorted sequences are common in practice. Thus, the performance of existing sort algorithms can be improved by taking into account the existing order in the input. Note that the most worst-case sorting algorithms that do optimally well in the worst-case, notably [[heap sort]] and [[merge sort]], do not take existing order within their input into account, although this deficiency is easily rectified in the case of [[merge sort]] by checking if left.last_item ≤ right.first_item, in which case a merge operation may be replaced by simple concatenation – a modification that is well within the scope of making an algorithm adaptive. == Examples == A classic example of an adaptive sorting algorithm is ''Straight Insertion Sort''. In this sorting algorithm, we scan the input from left to right, repeatedly finding the position of the current item, and insert it into an array of previously sorted items. In [[pseudo-code]] form, the ''Straight Insertion Sort'' algorithm could look something like this: '''procedure''' ''Straight Insertion Sort (X, n)'': ''X[0]'' := − ∞; '''for''' j := 2 '''to''' n '''do''' '''begin''' i := j − 1; t := ''X[j]''; '''while''' t < ''X[i]'' '''do''' '''begin''' ''X[i + 1]'' := ''X[i]''; i := i - 1 '''end'''; ''X[i + 1]'' := t; '''end;''' The performance of this algorithm can be described in terms of the number of [[Inversion (discrete mathematics)|inversions]] in the input, and then T(n) will be roughly equal to I(A) + (n - 1), where I(A) is the number of Inversions. Using this measure of presortedness – being relative to the number of inversions – ''Straight Insertion Sort'' takes less time to sort the closer it is to being sorted. Other examples of adaptive sorting algorithms are 