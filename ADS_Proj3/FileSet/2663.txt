the local kernel element associated with each point is a local [[convex polygon]] constructed from the point and its ''k''-1 nearest neighbors, then the method is nonparametric and referred to as a ''k''-LoCoH or ''fixed point'' LoCoH method. This is in contrast to ''r''-LoCoH (fixed radius) and ''a''-LoCoH (adaptive radius) methods. In the case of LoCoH utilization distribution constructions, the home range can be taken as the outer boundary of the distribution (i.e. the 100th percentile). In the case of utilization distributions constructed from unbounded kernel elements, such as bivariate normal distributions, the utilization distribution is itself unbounded. In this case the most often used convention is to regard the 95th percentile of the utilization distribution as the boundary of the home range. To construct a ''k''-LoCoH utilization distribution you simply: # Locate the ''k'' &minus; 1 nearest neighbors for each point in the dataset. # Construct a convex hull for each set of nearest neighbors and the original data point. # Merge these hulls together from smallest to largest. # Divide the merged hulls into isopleths where the 10% isopleth contains 10% of the original data points, the 100% isopleth contains all the points, etc. In this sense, LoCoH methods are a generalization of the home range estimator method based on constructing the [[minimum convex polygon]] (MCP) associated with the data. The LoCoH method has a number of advantages over parametric kernel methods. In particular: * As more data are added, the estimates of the home range become more accurate than for bivariate normal kernel constructions. * LoCoH handles 'sharp' features such as lakes and fences much better than parametric kernal constructions. * As mentioned above, the home range is a finite region without having to resort to an ad-hoc choice, such as the 95th percentile to obtain bounded region. LoCoH has a number of implementations including a [http://locoh.palary.org LoCoH Web Application]. LoCoH was formerly known as ''k''-NNCH, for ''k''-Nearest Neighbor Convex Hulls. It has recently been shown that the ''a''-LoCoH is the best of the three LoCoH methods mentioned above (see Getz et al. in the references below). ==References== <references/> [[Category:Data analysis]]</text> </page> <page> <id>22472</id> <title>Locale</title> <text>{{about|computing|the usage in mathematics|Complete Heyting algebra|other uses|Location (disambiguation)}} In [[computing]], '''locale''' is a set of [[parameter]]s that defines the user's language, country and any special variant preferences that the user wants to see in their [[user interface]]. Usually a locale identifier consists of at least a language identifier and a region identifier. On [[Unix]], [[Linux]] and other [[POSIX]]-type platforms, locale identifiers are defined similar to the [[BCP 47]] definition of language tags, but the locale variant modifier is defined differently, and the [[character set]] is included as a part of the identifier. It is defined in this format: <tt><nowiki>[language[_territory][.codeset][@modifier]]</nowiki></tt>. (For example, [[Australian English]] using the [[UTF-8]] encoding is <tt>en_AU.UTF-8</tt>.) == General locale settings == These settings usually include the following display (output) format settings: * Number format setting * Character classification, case conversion settings * Date/Time format setting * String collation setting * Currency format setting * Paper size setting * other minor settings ... The locale settings are about formatting output given a locale. So, the timezone information and daylight saving time are not usually part of the locale settings. Less usual, but worth mentioning, is the input format setting. This is mostly defined on a per application basis. Furthermore, the General settings usually include the [[keyboard layout]] setting. == Programming/markup language support == In these environments, {{multicol}} * [[C (programming language)|C]] * [[C++ (programming language)|C++]] * [[Eiffel (programming language)|Eiffel]] * [[Java (programming language)|Java]] {{multicol-break}} * [[Microsoft .NET]] framework * [[REBOL]] * [[Ruby (programming language)|Ruby]] * [[Perl (programming language)|Perl]] {{multicol-break}} * [[PHP]] * [[Python (programming language)|Python]] * [[XML]] {{multicol-end}} and other (nowadays) [[Unicode]]-based environments, they are defined in a format similar to [[BCP 47]]. They are usually defined with just [[ISO 639]] and [[ISO 3166-1 alpha-2]] codes. == POSIX-type platforms == On [[Unix]], [[Linux]] and other [[POSIX]]-type platforms, locale identifiers are defined similar to the [[BCP 47]] definition of language tags, but the locale variant modifier is defined differently, and the [[character set]] is included as a part of the identifier. In the next example there is an output of command <code>locale</code> for [[Czech language]] (cs), [[Czech Republic]] (CZ) with explicit [[UTF-8]] encoding: $ '''locale''' LANG=cs_CZ.UTF-8 LC_CTYPE="cs_CZ.UTF-8" LC_NUMERIC="cs_CZ.UTF-8" LC_TIME="cs_CZ.UTF-8" LC_COLLATE="cs_CZ.UTF-8" LC_MONETARY="cs_CZ.UTF-8" LC_MESSAGES="cs_CZ.UTF-8" LC_PAPER="cs_CZ.UTF-8" LC_NAME="cs_CZ.UTF-8" LC_ADDRESS="cs_CZ.UTF-8" LC_TELEPHONE="cs_CZ.UTF-8" LC_MEASUREMENT="cs_CZ.UTF-8" LC_IDENTIFICATION="cs_CZ.UTF-8" LC_ALL= == Specifics for Microsoft platforms == Locale identifier (LCID) for [[Managed code|unmanaged code]] on [[Microsoft Windows]], a number such as 1033 for English (United States) or 1041 for Japanese (Japan). These numbers consist of a language code (lower 10 bits) and culture code (upper bits) and are therefore often written in [[hexadecimal]] notation, such as 0x0409 or 0x0411. The list of those codesets are described in [[character encoding]]. [[Microsoft]] is beginning to introduce unmanaged code [[Application programming interface]]s (APIs) for .NET that use this format. One of the first to be generally released is a function to mitigate issues with [[internationalized domain name]]s,[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_DownlevelGetLocaleScripts.asp] but more are in [[Windows Vista]] Beta 1. Beginning with [[Windows Vista]], [http://msdn.microsoft.com/en-us/library/dd373814(v=VS.85).aspx new functions] that use [[BCP 47]] locale names have been introduced to replace nearly all LCID-based APIs. ==See also== * [[Internationalization and localization]] * [[ISO 639]] [[language code]]s * [[ISO 3166-1 alpha-2]] [[country code]]s * [[IETF language tag]] * [[Common Locale Data Repository]] * [[Date and time notation by country]] * [[AppLocale]] == External links == {{wiktionary|locale}} * [http://tools.ietf.org/html/bcp47 BCP 47] * [http://www.iana.org/assignments/language-subtag-registry Language Subtag Registry] * [http://www.unicode.org/cldr/ Common Locale Data Repository] * {{Javadoc:SE|package=java.util|java/util|Locale}} [[Javadoc]] API documentation * [http://msdn.microsoft.com/en-us/library/dd318716 Locale and Language information from Microsoft] * [http://msdn.microsoft.com/en-us/library/cc233965.aspx MS-LCID: Windows Language Code Identifier (LCID) Reference from Microsoft] * [http://msdn.microsoft.com/en-us/library/cc233968.aspx Microsoft LCID list] * [http://msdn.microsoft.com/en-us/library/0h88fahh.aspx Microsoft LCID chart with decimal equivalents] * [http://www.opengroup.org/onlinepubs/007908799/xbd/envvar.html POSIX Environment Variables] * [http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap07.html Low Level Technical details on defining a POSIX locale] * [http://demo.icu-project.org/icu-bin/locexp ICU Locale Explorer] * [http://wiki.debian.org/Locale Debian Wiki on Locales] * Article "[http://cantrip.org/locale.html The Standard C++ Locale]" by [[Nathan C. Myers]] * [http://docs.python.org/lib/module-locale.html Internationalization services] - Python Library Reference * 