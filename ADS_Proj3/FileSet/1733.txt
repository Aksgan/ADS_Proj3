{{DEFAULTSORT:Global Filesystem}} [[Category:Computer file systems]]</text> </page> <page> <id>15412</id> <title>Glossary of Unified Modeling Language terms</title> <text>This '''glossary of [[Unified Modeling Language]] terms''' covers all versions of UML. Individual entries will point out any distinctions that exist between versions. {{compactTOC2}} ==A== * '''Abstract''' - An indicator applied to a [[classifier]] (e.g., [[Actor (UML)|actor]], [[Class (computer science)|class]], [[use case]]) or to some features of a classifier (e.g., a class's operations) showing that the feature is incomplete and is intended not to be instantiated, but to be specialized by other definitions. * '''[[Abstraction (computer science)|Abstract class]]''' - A class that does not provide a complete declaration, perhaps because it has no implementation method identified for an operation. By declaring a class as ''abstract'', one intends to prohibit direct instantiation of the class. An abstract class cannot directly instantiate [[Object (computer science)|object]]s; it must be inherited from before it can be used. *[[Abstract data type]] * '''Abstract operation''' - Unlike attributes, class operations can be abstract, meaning that there is no provided implementation. Generally, a class containing an abstract operation should be marked as an abstract class. An Operation must have a method supplied in some specialized Class before it can be used. * '''Abstraction''' is the process of picking out common features and deriving essential characteristics from [[Object (computer science)|object]]s and [[procedure]] [[entity|entities]] that distinguish it from other kinds of entities. * '''Action''' - An action is the fundamental unit of behaviour specification and represents some transformation or processing in the modeled system, such as invoking a method of a class or a sub activity * '''Action sequence''' - * '''Action state''' - * '''Action steps''' - * '''Activation''' - the time during which an object has a method executing. It is often indicated by a thin box or bar superimposed on the Object's lifeline in a Sequence Diagram * '''[[Activity diagram]]''' - a diagram that describes procedural logic, business process or work flow. An activity diagram contains a number of Activities and connected by Control Flows and Object Flows. * '''Active class''' - a [[Class (computer science)|class]] defining active objects * '''Active object''' - an [[Object (computer science)|object]] running under its own [[Thread (computer science)|thread]] * '''Activity''' - carrying out behaviour in a [[State diagram|State machine diagram]] ** '''Do''' - a type of Activity which may be interrupted, as opposed to normal Activities which may not be interrupted ** '''Internal''' - an Activity that is executed within a State *** '''Entry''' - an Activity that is executed when a State is entered *** '''Exit''' - an Activity that is executed when a State is exited * '''Activity final''' - the end point of an [[activity diagram]]. When a thread reaches an Activity Final node, all the threads of the activity terminate. (Contrast with Flow Final node, which marks the end of one thread.) * '''[[Actor (UML)|Actor]]''' - a [[role]] that a [[User (computing)|user]] takes when invoking a [[use case]]. Also see [[actor modeling]]. * '''[[Object composition#Aggregation|Aggregation]]''' - a special type of association used to represent a stronger relationship between two classes than a regular association; typically read as "owns a", as in, "Class A owns a Class B". A [[hierarchy]] of [[Class (computer science)|class]]es where the child [[Object (computer science)|object]] may or may not continue to exist if the parent object is destroyed; see 'composition' * '''Artifact''' - items that model physical pieces of information in your system, such as a user's manual, training material, or password file * '''[[Association (object-oriented programming)|Association]]''' - a relationship with 2 or more ends, where each end is on a class (or other classifier). Each end is called a Role, and may have a role name, Multiplicity, and may be Navigable. * '''Association class''' - a [[Class (computer science)|class]] that describes an association. * '''Asynchronous''' - The sender of an asynchronous message does not wait for a response. * '''[[attribute (computing)|Attribute]]''' - a significant piece of data owned by a Class, often containing values describing each instance of the class. Besides the attribute name and a slot for the attribute value, an attribute may have specified Visibility, Type, Multiplicity, Default value, and Property-string. {{compactTOC2}} ==C== * '''Call''' - * '''Cardinality''' - the current number of occurrences of a Property. The cardinality must be a value that is allowed by the multiplicity * '''Child''' - * '''[[Class (computer science)|Class]]''' - the primary declarative construct of [[Object-Oriented Programming]]; a cohesive unit of Attributes and Operations; a compile-time template for an Object * '''[[Class diagram]]''' - a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes and the relationships between the classes. * '''[[classifier (UML)|Classifier]]''' - a category of UML elements that have some common features, such as attributes or methods. * '''Client''' - * '''Collaborate''' - * '''[[Communication diagram]]''' * '''Component''' - A component represents a software module (source code, binary code, executable, DLL, etc.) with a well-defined interface. The interface of a component is represented by one or several interface elements that the component provides. Components are used to show compiler and run-time dependencies, as well as interface and calling dependencies among software modules. They also show which components implement a specific class. * '''[[Component diagram]]''' * '''[[Composite structure diagram]]''' * '''[[Object composition|Composition]]''' - a specific type of relationship describing how one Object is ''composed of'' another Object; a form of [[Aggregation]] where the child [[Object (computer science)|object]] is destroyed if the parent object is destroyed. * '''Condition''' - * '''Connection''' - * '''Constraint''' - natural language, programming language or Object Constraint Language boolean condition which may not be false if a Class is to be considered valid * '''Containment''' - containment by value and containment by reference. Containment by value implies that an object contains another object; containment by reference implies that an object contains a pointer to another object. {{compactTOC2}} ==D== * '''Decision''' - a point in an [[Activity diagram]] where a Flow splits into several, mutually exclusive, Guarded flows. A Merge marks the end of 