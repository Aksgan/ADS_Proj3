primitive GUI elements such as sliders, check boxes, text lines, buttons or graphics. The background or invisible areas of a window don't need to be saved in a separate bitmap buffer. If an area needs to be restored on the display, its contents will be redrawn instead. This makes SymbOS GUI much more memory-friendly compared to most other 8-bit GUIs. ==File system management== SymbOS supports the file systems [[CP/M]], [[AMSDOS]], [[File Allocation Table|FAT 12-16-32]], on all platforms. With the last one SymbOS is able to address mass storage devices with a capacity of up to 128 GB. Also the ability to administer files with a size of up to 2 GB is uncommon for an 8-bit system. Because of the FAT support data exchange with other computers is quite easy, as most 32 and 64 bit operating systems do support the three FAT file systems. ==Applications== There are several standard applications available for SymbOS, which most resemble their well-known Windows and Mac OS counterparts. Few examples are SymCommander (similar to [[Norton Commander]]), SymShell ([[cmd.exe]]), SymZilla ([[Mozilla Firefox]]), SymPlay ([[QuickTime]]), SymAmp ([[Winamp]]) and [[Minesweeper (computer game)|Minesweeper]]. ==Porting and cross platform ability== SymbOS was originally developed for the Amstrad CPC. Owing to its modular structure, with the strict separation of general and hardware components, porting to other Z80-based systems is quite easy. The [[MSX]] computers starting with the MSX2 standard have been supported since summer 2006. The [[Amstrad PCW]] port has been available since August 2007. Versions for the [[Enterprise 128]] and the [[SAM Coup√©]] are possible, too, as they fulfill the requirements for SymbOS. By keeping a basic condition for an operating system, the strict separation of hardware and application software by an intermediate layer, SymbOS applications run platform-independently on each computer and do not have to be adapted for a special system, with the obvious exception of applications that directly access particular hardware. ==Motivation== SymbOS was originally started as an experiment to find out to what extent it is possible to implement a multitasking based operating system with a windowed GUI on an 8-bit computer from 1985. [[GEOS (8-bit operating system)|GEOS]] contributed to the motivation, but the structure and features of SymbOS aren't similar to that system. The release in 2006 proved that such a "mini windows" system is possible on a 20 year-old home computer with only quantitative limitations. SymbOS is one of the largest retro computing software projects of recent years. One of the goals of the project is to allow these old machines to be used like a modern PC, using hardware extensions. ==See also== * [[Amstrad CPC]] * [[MSX]] * [[Amstrad PCW]] * [[Contiki]] * [[MSX-DOS]] * [[OS-9]] ==External links== * [http://www.symbos.de/ Official SymbOS homepage] * [http://groups.yahoo.com/group/symbos8bit/ SymbOS mailing list] * [http://www.cpcwiki.eu/index.php/SymbOS Page at the CPCWiki] * [http://www.youtube.com/group/symbos SymbOS video collection on YouTube] * [http://video.google.com/videoplay?docid=-8517523543573905150 SymbOS demo video running on a real MSX turboR GT with MP3MSX cartridge] [[Category:Amstrad CPC]] [[Category:MSX]] [[Category:Free software operating systems]] [[es:SymbOS]] [[it:SymbOS]] [[ru:SymbOS]]</text> </page> <page> <id>36335</id> <title>Symbol table</title> <text>In [[computer science]], a '''symbol table''' is a [[data structure]] used by a language translator such as a [[compiler]] or [[interpreter (computing)|interpreter]], where each [[identifier]] in a program's [[source code]] is associated with information relating to its declaration or appearance in the source, such as its [[data type|type]], [[scope (programming)|scope]] level and sometimes its [[Memory address|location]]. ==Implementation== A common implementation technique is to use a [[hash table]] implementation. A compiler may use one large symbol table for all symbols or use separated, hierarchical symbol tables for different [[Scope (programming)|scopes]]. ==Uses== An [[object file]] will contain a symbol table of the identifiers it contains that are externally visible. During the linking of different object files, a [[Linker (computing)|linker]] will use these symbol tables to resolve any unresolved references. A symbol table may only exist during the translation process, or it may be embedded in the output of that process for later exploitation, for example, during an interactive [[debugger|debugging session]], or as a resource for formatting a diagnostic report during or after [[execution (computers)|execution]] of a program. While reverse engineering an executable a lot of tools refer the symbol table to check what addresses have been assigned to global variables and known functions. If the symbol table has been [[strip (Unix)|stripped]] or cleaned out before converting it into an executable tools will find it hard to find out addresses and understand anything about the program. ==Example== The symbol table of a small program is listed below. The table itself was generated using the [[GNU Binary Utilities|GNU binutils']] [[nm (Unix)|nm]] utility. There is one data symbol, holaamigosh (noted by the "D" type), and many functions (self defined as well as from the standard library). The first column is where the symbol is located in the memory, the second is "[http://sourceware.org/binutils/docs-2.17/binutils/nm.html#nm The symbol type]" and the third is the name of the symbol. By passing suitable parameters, the symbol table was made to sort on basis of address. {| class="wikitable" style="text-align:center" |+Example table |- ! Address !! Type !! Name |- |00000020 || a || T_BIT |- |00000040 || a || F_BIT |- |00000080 || a || I_BIT |- |20000004 || t || irqvec |- |20000008 || t || fiqvec |- |2000000c || t || InitReset |- |20000018 || T || _main |- |20000024 || t || End |- |20000030 || T || AT91F_US3_CfgPIO_useB |- |2000005c || t || AT91F_PIO_CfgPeriph |- |200000b0 || T || main |- |20000120 || T || AT91F_DBGU_Printk |- |20000190 || t || AT91F_US_TxReady |- |200001c0 || t || AT91F_US_PutChar |- |200001f8 || T || AT91F_SpuriousHandler |- |20000214 || T || AT91F_DataAbort |- |20000230 || T || AT91F_FetchAbort |- |2000024c || T || AT91F_Undef |- |20000268 || T || AT91F_UndefHandler |- |20000284 || T || AT91F_LowLevelInit |- |200002e0 || t || AT91F_DBGU_CfgPIO |- |2000030c || t || AT91F_PIO_CfgPeriph |- |20000360 || t || AT91F_US_Configure |- |200003dc || t || AT91F_US_SetBaudrate |- |2000041c || t || AT91F_US_Baudrate |- |200004ec || t || AT91F_US_SetTimeguard |- |2000051c || t || AT91F_PDC_Open |- |2000059c || t || 