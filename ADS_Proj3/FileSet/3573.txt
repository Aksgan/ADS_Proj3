of: :{| class="wikitable" |- ! Character ! Description |- | ''a number'' | Causes <code>printf</code> to left-pad the output with spaces until the required length of output is attained. If combined with '0' (see below), it will cause the sign to become a space when positive, but the remaining characters will be zero-padded |- | + | Causes <code>printf</code> to always denote the sign '+' or '-' of a number (the default is to omit the sign for positive numbers). Only applicable to numeric types. |- | - | Causes <code>printf</code> to left-align the output of this placeholder (the default is to right-align the output). |- | # | Alternate form. For 'g' and 'G', trailing zeros are not removed. For 'f', 'F', 'e', 'E', 'g', 'G', the output always contains a decimal point. For 'o', 'x', and 'X', a 0, 0x, and 0X, respectively, is prepended to non-zero numbers. |- | 0 | Causes <code>printf</code> to use 0 instead of spaces to left-fill a fixed-length field. For example, <code>printf("%2d", 3)</code> results in " 3", while <code>printf("%02d", 3)</code> results in "03". |} *'''Width''' can be omitted or be any of: :{| class="wikitable" |- ! Character ! Description |- | ''a number'' | Causes <code>printf</code> to pad the output of this placeholder with spaces until it is at least ''number'' characters wide. As mentioned above, if ''number'' has a leading '0', that is interpreted as a flag, and the padding is done with '0' characters instead of spaces. |- | * | Causes <code>printf</code> to pad the output until it is ''n'' characters wide, where n is an integer value stored in the a function argument just preceding that represented by the modified type. For example <code>printf("%*d", 5, 10)</code> will result in "10" being printed with a width of 5. |} *'''Precision''' can be omitted or be any of: :{| class="wikitable" |- ! Character ! Description |- | ''a number'' | For non-integral numeric types, causes the decimal portion of the output to be expressed in at least ''number'' digits. For the string type, causes the output to be truncated at ''number'' characters. If the precision is zero, nothing is printed for the corresponding argument. |- | * | Same as the above, but uses an integer value in the intaken argument to determine the number of decimal places or maximum string length. For example, <code>printf("%.*s", 3, "abcdef")</code> will result in "abc" being printed. |} *'''Length''' can be omitted or be any of: :{| class="wikitable" |- ! Character ! Description |- | <code>hh</code> | For integer types, causes <code>printf</code> to expect an <code>int</code> sized integer argument which was promoted from a <code>char</code>. |- | <code>h</code> | For integer types, causes <code>printf</code> to expect a <code>int</code> sized integer argument which was promoted from a <code>short</code>. |- | <code>l</code> | For integer types, causes <code>printf</code> to expect a <code>long</code> sized integer argument. |- | <code>ll</code> | For integer types, causes <code>printf</code> to expect a <code>long long</code> sized integer argument. |- | <code>L</code> | For floating point types, causes <code>printf</code> to expect a <code>long double</code> argument. |- | <code>z</code> | For integer types, causes <code>printf</code> to expect a <code>size_t</code> sized integer argument. |- | <code>j</code> | For integer types, causes <code>printf</code> to expect a <code>intmax_t</code> sized integer argument. |- | <code>t</code> | For integer types, causes <code>printf</code> to expect a <code>ptrdiff_t</code> sized integer argument. |} Additionally, several platform specific length options came to exist prior to widespread use of the ISO C99 extensions: :{| class="wikitable" |- ! Characters ! Description |- | <code>I</code> | For signed integer types, causes <code>printf</code> to expect <code>ptrdiff_t</code> sized integer argument; for unsigned integer types, causes <code>printf</code> to expect <code>size_t</code> sized integer argument. ''Commonly found in Win32/Win64 platforms.'' |- | <code>I32</code> | For integer types, causes <code>printf</code> to expect a 32-bit (double word) integer argument. ''Commonly found in Win32/Win64 platforms.'' |- | <code>I64</code> | For integer types, causes <code>printf</code> to expect a 64-bit (quad word) integer argument. ''Commonly found in Win32/Win64 platforms.'' |- | <code>q</code> | For integer types, causes <code>printf</code> to expect a 64-bit (quad word) integer argument. ''Commonly found in BSD platforms.'' |} ISO C99 includes the <code>[[inttypes.h]]</code> header file that includes a number of macros for use in platform-independent <code>printf</code> coding. Example macros include: :{| class="wikitable" |- ! Characters ! Description |- | <code>"PRId32"</code> | Typically equivalent to <code>I32d</code> (''Win32/Win64'') or <code>d</code> |- | <code>"PRId64"</code> | Typically equivalent to <code>I64d</code> (''Win32/Win64''), <code>lld</code> (''32-bit platforms'') or <code>ld</code> (''64-bit platforms'') |- | <code>"PRIi32"</code> | Typically equivalent to <code>I32i</code> (''Win32/Win64'') or <code>i</code> |- | <code>"PRIi64"</code> | Typically equivalent to <code>I64i</code> (''Win32/Win64''), <code>lli</code> (''32-bit platforms'') or <code>li</code> (''64-bit platforms'') |- | <code>"PRIu32"</code> | Typically equivalent to <code>I32u</code> (''Win32/Win64'') or <code>u</code> |- | <code>"PRIu64"</code> | Typically equivalent to <code>I64u</code> (''Win32/Win64''), <code>llu</code> (''32-bit platforms'') or <code>lu</code> (''64-bit platforms'') |- | <code>"PRIx64"</code> | Typically equivalent to <code>I64x</code> (''Win32/Win64''), <code>llx</code> (''32-bit platforms'') or <code>lx</code> (''64-bit platforms'') |} *'''Type''' can be any of: :{| class="wikitable" |- ! Character ! Description |- | <code>d</code>, <code>i</code> | Print an <code>int</code> as a signed [[decimal]] number. '<code>%d</code>' and '<code>%i</code>' are synonymous for output, but are different when used with <code>[[scanf]]()</code> for input. |- | <code>u</code> | Print decimal <code>unsigned int</code>. |- | <code>f</code>, <code>F</code> | Print a <code>double</code> in normal ([[Fixed-point arithmetic|fixed-point]]) notation. 'f' and 'F' only differs in how the strings for an infinite number or NaN are printed ('inf', 'infinity' and 'nan' for 'f', 'INF', 'INFINITY' and 'NAN' for 'F'). |- | <code>e</code>, <code>E</code> | Print a <code>double</code> value in standard form ([-]d.ddd e[+/-]ddd). An E conversion uses the letter E (rather than e) to introduce the exponent. The exponent always contains at least two digits; if the value is zero, the exponent is 00. |- | <code>g</code>, <code>G</code> | Print a <code>double</code> in either normal or exponential notation, whichever is more appropriate for its magnitude. 'g' uses lower-case letters, 'G' uses upper-case letters. This type differs slightly from fixed-point notation in that insignificant zeroes to the right of the decimal point are not included. Also, 