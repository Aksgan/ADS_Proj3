system, but here are a few: * If an attacker obtains most of the stream of random bits, it should be infeasible for them to compute any additional parts of the stream. * If an attacker observes the internal state of the random number generator, they should not be able to work backwards and deduce previous random values. * If an attacker observes the internal state of the random number generator, they will necessarily be able to predict the output until enough additional entropy is obtained. However, if entropy is added incrementally, the attacker may be able to deduce the values of the random bits that were added and obtain the new internal state of the random number generator (a [[state compromise extension attack]]). * If an attacker can control the supposedly random inputs to the generator, they may be able to "flush" all the existing entropy out of the system and put it into a known state. * When a generator starts up, it will often have little or no entropy (especially if the computer has just been booted and followed a very standard sequence of operations), so an attacker may be able to obtain an initial guess at the state. ==Attacks on hardware random number generators== A number of attacks on [[hardware random number generator]]s are possible, including trying to capture radio-frequency emissions from the computer (obtaining hard drive interrupt times from motor noise, for example), or trying to feed controlled signals into a supposedly random source (such as turning off the lights in a lava lamp or feeding a strong, known signal into a sound card). ==RNG subversion== Subverted random numbers can be created using a [[cryptographically secure pseudorandom number generator]] with a [[random seed|seed value]] known to the attacker but concealed in the software. A relatively short, say 24 to 40 bit, portion of the seed can be truly random to prevent tell-tale repetitions, but not long enough to prevent the attacker from recovering, say, a "randomly" produced key. Random numbers typically go through several layers of hardware and software before they are used. Bits may be generated in a peripheral device, sent over a serial cable, collected in an operating system utility and retrieved by a system call. The subverted bits can be substituted at any point in this process with little likelihood of detection. A hardware circuit to produce subverted bits can be built on an [[integrated circuit]] a few millimeters square. The most sophisticated hardware random number generator can be subverted by placing such a chip anywhere upstream of where the source of randomness is digitized, say in an output driver chip or even in the cable connecting the RNG to the computer. The subversion chip can include a clock to limit the start of operation to some time after the unit is first turned on and run through acceptance tests, or it can contain a radio receiver for on/off control. It could be installed by the manufacturer at the behest of his national signals intelligence service, or added later by anyone with physical access. [[Central processing unit|CPU]] chips with built-in hardware random number generators can be replaced by compatible chips with a subverted RNG in the chips firmware. ==Defenses== * Mix (with, for example, [[xor]]) hardware generated random numbers with the output of a good quality [[stream cipher]], as close to the point of use as possible. The stream cipher key or seed should be changeable in a way that can be audited and derived from a trustworthy source, e.g. dice throws. The [[Fortuna (PRNG)|Fortuna]] random number generator is an example of an algorithm which uses this mechanism. * Generate passwords and [[passphrase]]s using a true random source. Some systems select random passwords for the user rather than let users propose their own. * Use encryption systems that document how they generate random numbers and provide a method to audit the generation process. * Build security systems with off the shelf hardware, preferably purchased in ways that do not reveal its intended use, e.g. off the floor at a large retail establishment. From this perspective, [[sound card]]s and [[webcam]]s may be a better source of randomness than hardware made for that purpose. ''See:'' [[Hardware random number generator]]. * Maintain complete physical control over the hardware after it has been purchased. Designing a secure random number generator requires at least as high a level of care as designing other elements of a cryptographic system. ==References== {{Reflist}} * [http://www.cs.berkeley.edu/~daw/papers/ddj-netscape.html Randomness and the Netscape Browser], Ian Goldberg and David Wagner, ''Dr. Dobb's Journal'', January 1996, pp66–70. * [http://www.schneier.com/paper-prngs.html Cryptanalytic Attacks on Pseudorandom Number Generators], J. Kelsey, [[Bruce Schneier]], David Wagner, and C. Hall, Fast Software Encryption, Fifth International Workshop Proceedings (March 1998), Springer-Verlag, 1998, pp. 168–188. * [http://eprint.iacr.org/2006/086.pdf Analysis of the Linux Random Number Generator] Zvi Gutterman, Benny Pinkas and Tzachy Reinman, in IEEE S&P (Oakland Conference), May 2006, pp. 371–385. * Randomness Requirements for Security. D. Eastlake, J. Schiller, S. Crocker, RFC 4086 (obsoletes RFC1750), 2006. * [http://csrc.nist.gov/publications/nistpubs/800-90/SP800-90revised_March2007.pdf Recommendation for Random Number Generation Using Deterministic Random Bit Generators], Elaine Barker and John Kelsey, NIST Special Publication 800-90. Revised March 2007 [[Category:Cryptographic attacks]] [[Category:Pseudorandom number generators]]</text> </page> <page> <id>31243</id> <title>Random stimulus</title> <text>{{Wikify|date=April 2010}} {{Orphan|date=December 2008}} A '''random stimulus''' is any of a class of creativity techniques that explore randomization. Most of their names start with word "random"; random word, random heuristic, random picture, random sound, etc. In each random creativity technique the user is presented with a random stimulus and explores associations that has a potential to bring novel ideas. The power of random stimulus is that it can lead you to explore some useful associations that could never be explored intentionally. Random Word technique is the simplest technique of this class where a randomly picked word is used to generate new associations. By getting a random word and thinking how you can use it to solve your problem you are practically guaranteed to attack the problem from a different direction from that you would 