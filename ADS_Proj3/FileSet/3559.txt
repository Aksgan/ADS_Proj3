to be derived from an informal, more intuitive development.<ref>Among these authors is Stolyar, p. 166. Hamilton considers both to be calculi but divides them into an informal calculus and a formal calculus.</ref> == Syntax == Predicate calculus symbols may represent either variables, constants, functions or predicates. # Constants name specific objects or properties in the [[domain of discourse]]. Thus george, tree, tall and blue are examples of well formed constant symbols. The constants <math>\top</math> (true) and <math>\bot</math> (false) are sometimes included. # Variable symbols are used to designate general classes or objects or properties in the domain of discourse. # Functions denote a mapping of one or more elements in a set(called the ''domain'' of the function) into a unique element of another set(the ''range'' of the function). Elements of the domain and range are objects in the world of discourse. Every function symbol has an associated ''arity'', indicating the number of elements in the domain mapped onto each element of range. A <i>function expression<i> is a function symbol followed by its arguments. The arguments are elements from the domain of the function; the number of arguments is equal to the arity of the function. The arguments are enclosed in parentheses and separated by commas. eg: f(X,Y)<br /> father(david)<br /> price(apple) are all well-formed function expressions. Predicate Logic can be used for more than simply symbolizing arguments or mathematical statements. While using logic to find solutions to problems in Mathematics is one application of logic, it can also be used in the field of computer science where software programs can be converted from their prescriptive language into a descriptive calculus or vice-versa. Logic, when applied to computer science allows logicians to structure the processes of software based on the instantiation of variables in the descriptive calculus. In order to prove decidability, or the ability for the logical model to be successfully implemented, one can, depending on the system of logic being used, convert the descriptive language into a Context-Free Grammar (CFG). CFG's are a form of computational languages that are recognizable by certain computational automaton. The descriptive calculus models a process of transitioning from a beginning state to an accept state, usually resulting in output of some kind. Converting the descriptive calculus to a CFG allows decidability to be proven because the processes between variables can be traced according to the syntax of the CFG. Once it has been shown that the model allows a correct inference to the accept state from a beginning state decidability has been proven. Thus the syntax of the predicate calculus is integral to applications of logic, being that the syntax proven by the logical system's rules and operators is key to implementing the descriptive calculus into a prescriptive language. However, if the logical model can be converted to a CFG then it can also be converted into a string of conditional statements using the rule, 'implication.' While this may allow for an easier implemntation, the logical programming platfrom SWI-ProLog, along with other forms of ProLog, struggle to implement 'either/or' statements and multiple strings of condtionals. It may be best to use the proven syntax of the model in conjunction with the semantics of predication to implement the descriptive calculus successfully. Thus, in Applied Logic used for Computer Science, syntax alone is necessary but insufficient for implementation in some cases. The well-formed expressions are recognizable by ProLog as 'facts,' 'rules' in ProLog make up the other form of clauses and when used in conjunction with facts ProLog is able to make logical inferences and respond to queries based upon the clauses written. Using a predicate calculus in place of directly writing the software in ProLog allows one to prove the soundness of the clauses when in the form of theorems. This, in turn, allows multiple theorems to be strung together to model software before the code is written. This is advantageous because there are only two methods to checking the correctness of software, one is writing it prescriptively and debugging it and the other is modeling it with logic and, based upon the syntax, proving decidability. ==Footnotes== <references/> ==References== {{Portal|Logic}} * A. G. Hamilton 1978, ''Logic for Mathematicians'', Cambridge University Press, Cambridge UK ISBN 0-521-21838-1. *Abram Aronovic Stolyar 1970, ''Introduction to Elementary Mathematical Logic'', Dover Publications, Inc. NY. ISBN 0-486-64561 * George F Luger, ''Artificial Intelligence'', Pearson Education, ISBN 978-81-317-2327-2 {{Logic}} {{DEFAULTSORT:Predicate Logic}} [[Category:Predicate logic]] [[Category:Systems of formal logic]] {{logic-stub}} [[af:Predikaatlogika]] [[cs:Predikátová logika]] [[de:Prädikatenlogik]] [[et:Predikaatloogika]] [[el:Κατηγορηματική λογική]] [[fa:منطق محمولات]] [[fr:Calcul des prédicats]] [[hu:Elsőrendű logika]] [[mk:Предикатна логика]] [[nl:Predicatenlogica]] [[ja:一階述語論理]] [[simple:Predicate logic]] [[sk:Predikátová logika]] [[fi:Predikaattilogiikka]] [[sv:Predikatlogik]] [[zh:謂詞邏輯]]</text> </page> <page> <id>29824</id> <title>Predicative verb</title> <text>{{Refimprove|date=December 2009}} A '''predicative verb''' is a verb that behaves as a grammatical [[adjective]]; that is, it predicates (qualifies or informs about the properties of its argument). It is a special kind of [[stative verb]]. Many languages do not use the present forms of the verb "to be" to separate an adjective from its noun: instead, these forms of the verb "to be" are understood as part of the adjective. <!-- Isn't that zero-copula? Especially if the example is Semitic... --> [[Egyptian language|Egyptian]] uses this structure: "my mouth is red" is written as "red my mouth" (/dSr=f r=i/). Other languages to use this structure include the [[Northwest Caucasian languages]], the [[Thai language]], [[Indonesian language|Indonesian]], the [[East Slavic languages]], the [[Semitic languages]], some [[Nilotic languages]] and the [[Athabaskan languages]]. In the [[Akkadian language]]s, the "predicative" (also called the "permansive" or "stative") is a set of pronominal inflections used to convert noun stems into effective sentences, so that the form ''šarrāku'' is a single word more or less equivalent to either of the sentences ''šarrum anāku'' "I am king" or ''šarratum anāku'' "I am queen".<ref>"Akkadian and Eblaite" by John Huehnergaard and Christopher Woods" in ''The Cambridge Encyclopedia of the World's Ancient Languages'', edited by Roger D. Woodard (2004) ISBN 0-521-56256-2, pages 245, 264, and 267.</ref> <references/> {{lexical categories|state=collapsed}} {{DEFAULTSORT:Predicative Verb}} [[Category:Parts of speech]] [[Category:Verb types]] {{Syntax-stub}} [[es:Verbo predicativo]] [[sl:Povedkovnik]]</text> </page> <page> <id>29827</id> <title>Prediction Suffix Tree</title> <text>{{cleanup|date=August 2008}} 