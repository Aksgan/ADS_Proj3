exist, in particular the [[Real-time operating system|real-time systems]] [[QNX]] and [[Integrity (operating system)|Integrity]]. No comprehensive comparison of performance relative to monolithic systems has been published for those multiserver systems. Furthermore, performance does not seem to be the overriding concern for those commercial systems, which instead emphasize reliably quick interrupt handling response times (QNX) and simplicity for the sake of robustness. An attempt to build a high-performance multiserver operating system was the IBM Sawmill Linux project.<ref name="Gefflaut_JPLEUTDR_00"> {{ cite conference | first = Alain | last = Gefflaut | coauthors = Jaeger, Trent; Park, Yoonho; [[Jochen Liedtke|Liedtke, Jochen]]; Elphinstone, Kevin J.; Uhlig, Volkmar; Tidswell, Jonathon E.; Deller, Luke; Reuther, Lars | title = The Sawmill multiserver approach | booktitle = 9th ACM SIGOPS European Worshop | location = Kolding, Denmark | pages = 109&ndash;114 | year = 2000 }}</ref> However, this project was never completed. It has been shown in the meantime that user-level device drivers can come close to the performance of in-kernel drivers even for such high-throughput, high-interrupt devices as Gigabit Ethernet.<ref name="Leslie_CFGGMPSEH_05">{{cite journal |last=Leslie |first=Ben |coauthors=Chubb, Peter; FitzRoy-Dale, Nicholas; Götz, Stefan; Gray, Charles; Macpherson, Luke; Potts, Daniel; Shen, Yueting; Elphinstone, Kevin; [[Gernot Heiser|Heiser, Gernot]] |year=2005 |month=September |title=User-level device drivers: achieved performance |journal=Journal of Computer Science and Technology |volume=5 |issue=20 |pages=654&ndash;664 |doi=10.1007/s11390-005-0654-4}}</ref> This seems to imply that high-performance multi-server systems are possible. == Security == The security benefits of microkernels have been frequently discussed.<ref>[[Andrew S. Tanenbaum|Tanenbaum, Andrew S.]], [http://www.cs.vu.nl/~ast/reliable-os/ Tanenbaum-Torvalds debate, part II]</ref><ref>Tanenbaum, A., Herder, J. and Bos, H. (May 2006).</ref> In the context of security the minimality principle of microkernels is a direct consequence of the principle of [[least privilege]], according to which all code should have only the privileges needed to provide required functionality. Minimality requires that a system's [[trusted computing base]] (TCB) should be kept minimal. As the kernel (the code that executes in the privileged mode of the hardware) is always part of the TCB, minimizing it is natural in a security-driven design. Consequently, microkernel designs have been used for systems designed for high-security applications, including [[KeyKOS]], [[Extremely Reliable Operating System|EROS]] and military systems. In fact [[common criteria]] (CC) at the highest assurance level ([[Evaluation Assurance Level|EAL7]]) has an explicit requirement that the target of evaluation be “simple”, an acknowledgment of the practical impossibility of establishing true trustworthiness for a complex system. ==Third generation== Recent work on microkernels has been focusing on formal specifications of the kernel API, and formal proofs of security properties of the API. The first example of this is a mathematical proof of the confinement mechanisms in EROS, based on a simplified model of the EROS API.<ref>{{cite conference | first = Jonathan S. | last = Shapiro | coauthors = Weber, Samuel | title = Verifying the EROS Confinement Mechanism | booktitle = IEEE Conference on Security and Privacy | pages = | publisher = | date = | location = | url = http://www.eros-os.org/papers/oakland2000.ps | doi = | id = | accessdate = }}</ref> More recently, a comprehensive set of machine-checked proofs has been performed of the properties of the protection model of [http://ertos.org/research/l4.verified seL4], a version of L4.<ref>{{Cite book | first = Dhammika | last = Elkaduwe | author-link = | first2 = Gerwin | last2 = Klein | first3 = Kevin | last3 = Elphinstone | author2-link = | editor-last = | editor-first = | editor2-last = | editor2-first = | contribution = | contribution-url = | title =Verified Protection Model of the seL4 Microkernel | year = 2007 | pages = | place = | publisher = submitted for publication | url = http://ertos.org/publications/papers/Elkaduwe_GE_07.abstract | doi = | id = }}</ref> This has led to what is referred to as '''third-generation microkernels''',<ref Name="Klein_EHACDEEKNSTW_09"> {{ cite conference | first = Gerwin | last = Klein | coauthors = Elphinstone, Kevin; Heiser, Gernot; Andronick, June; Cock, David; Derrin, Philip; Elkaduwe, Dhammika; Engelhardt, Kai; Kolanski, Rafal; Norrish, Michael; Sewell, Thomas; Tuch, Harvey; Winwood, Simon | title = seL4: Formal verification of an OS kernel | booktitle = 22nd ACM Symposium on Operating System Principles | pages = | month = October | year = 2009 | location = Big Sky, MT, USA | doi = | url = http://www.sigops.org/sosp/sosp09/papers/klein-sosp09.pdf }}</ref> characterised by a security-oriented API with resource access controlled by [[capability-based security|capabilities]], [[virtual machines#System virtual machines|virtualization]] as a first-class concern, novel approaches to kernel resource management,<ref Name="Elkaduwe_DE_08"> {{ cite conference | first = Dhammika | last = Elkaduwe | coauthors = Derrin, Philip; Elphinstone, Kevin | title = Kernel design for isolation and assurance of physical memory | booktitle = 1st Workshop on Isolation and Integration in Embedded Systems | month = April | year = 2008 | location = Glasgow, UK | doi = 10.1145/1435458 | url = http://ertos.nicta.com.au/publications/papers/Elkaduwe_DE_08.abstract }}</ref> and a design goal of suitability for [[formal methods|formal analysis]], besides the usual goal of high performance. Examples are [[Coyotos]], seL4 and [http://www.inf.tu-dresden.de/index.php?node_id=1429&ln=en#T2008120109 Nova]. In the case of seL4, complete formal verification of the implementation has been achieved,<ref Name="Klein_EHACDEEKNSTW_09"/> i.e. a mathematical proof that the kernel's implementation is consistent with its formal specification. This provides a guarantee that the properties proved about the API actually hold for the real kernel, a degree of assurance which goes beyond even CC EAL7. == Nanokernel == The term '''nanokernel''' or '''picokernel''' historically referred to: # A kernel where the total amount of kernel code, i.e. code executing in the privileged mode of the hardware, is very small. The term '''picokernel''' was sometimes used to further emphasize small size. The term '''nanokernel''' was coined by Jonathan S. Shapiro in the paper [http://citeseer.ist.psu.edu/135535.html ''The KeyKOS NanoKernel Architecture'']. It was a sardonic response to Mach, which claimed to be a microkernel while being monolithic, was essentially unstructured, and slower than the systems it sought to replace. Subsequent reuse of and response to the term, including the picokernel coinage, suggest that the point was largely missed. Both '''nanokernel''' and '''picokernel''' have subsequently come to have the same meaning expressed by the term microkernel. # A virtualization 