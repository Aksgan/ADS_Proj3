declaration by using the fully qualified name of the class. For example, <source lang="java"> java.awt.event.ActionEvent myEvent = new java.awt.event.ActionEvent(); </source> does not require a preceding import declaration. Note that if you do not use a package declaration, your class ends up in an unnamed package.<ref>http://java.sun.com/docs/books/tutorial/java/package/createpkgs.html</ref><ref>http://java.sun.com/docs/books/jls/second_edition/html/packages.doc.html#26639</ref> == Package access protection == Classes within a package can access classes and members declared with ''default access'' and class members declared with the ''<code>protected</code>'' access modifier. Default access is enforced when neither the <code>public</code>, <code>protected</code> nor <code>private</code> access modifier is specified in the declaration. By contrast, classes in other packages cannot access classes and members declared with default access. Class members declared as <code>protected</code> can be accessed from the classes in the same package as well as classes in other packages that are subclasses of the declaring class. == Creation of JAR files == JAR Files are created with the jar command-line utility. The command jar cf myPackage.jar *.class compresses all .class files into the JAR file ''myPackage.jar''. The ' c ' option on the command line tells the jar command to "create new archive." The ' f ' option tells it to create a file. The file's name comes next before the contents of the JAR file. == Package naming conventions == Packages are usually defined using a [[hierarchical]] naming [[pattern]], with levels in the hierarchy separated by periods (<code>.</code>) (pronounced "dot"). Although packages lower in the naming hierarchy are often referred to as "subpackages" of the corresponding packages higher in the hierarchy, there is no semantic relationship between packages. The Java Language Specification establishes package naming conventions to avoid the possibility of two published packages having the same name. The naming conventions describe how to create unique package names, so that packages that are widely distributed will have unique namespaces. This allows packages to be separately, easily and automatically installed and catalogued. In general, a package name begins with the [[top level domain]] name of the organization and then the organization's domain and then any subdomains listed in reverse order. The organization can then choose a specific name for their package. Package names should be all lowercase characters whenever possible. For example, if an organization in Canada called MySoft creates a package to deal with fractions, naming the package <tt>ca.mysoft.fractions</tt> distinguishes the fractions package from another similar package created by another company. If a US company named MySoft also creates a fractions package, but names it <tt>us.mysoft.fractions</tt>, then the classes in these two packages are defined in a unique and separate namespace. Complete conventions for disambiguating package names and rules for naming packages when the Internet domain name cannot be directly used as a package name are described in section 7.7 of the Java Language Specification. == Core packages in Java SE 6 == {{main|Java Platform, Standard Edition}} {| | {{Javadoc:SE|package=java.lang|java/lang}} || — basic language functionality and fundamental types |- | {{Javadoc:SE|package=java.util|java/util}} || — collection [[data structure]] classes |- | {{Javadoc:SE|package=java.io|java/io}} || — file operations |- | {{Javadoc:SE|package=java.math|/java/math}} || — multiprecision arithmetics |- | {{Javadoc:SE|package=java.nio|java/nio}} || — the [[New I/O]] framework for Java |- | {{Javadoc:SE|package=java.net|java/net}} || — networking operations, sockets, [[DNS lookup]]s, ... |- | {{Javadoc:SE|package=java.security|java/security}} || — key generation, encryption and decryption |- | {{Javadoc:SE|package=java.sql|java/sql}} || — [[Java Database Connectivity]] (JDBC) to access databases |- | {{Javadoc:SE|package=java.awt|java/awt}} || — basic hierarchy of packages for native GUI components |- | {{Javadoc:SE|package=javax.swing|javax/swing}} || — hierarchy of packages for platform-independent rich [[GUI]] components |- | {{Javadoc:SE|package=java.applet|java/applet}} || — classes for creating an applet |} The {{Javadoc:SE|package=java.lang|java/lang}} package is available without the use of an import statement. == External links == * {{Javadoc:SE}} * Java Language Specification, 3rd Edition, Chapter 7: [http://java.sun.com/docs/books/jls/third_edition/html/packages.html Packages] * Code Conventions for the Java Programming Language, Chapter 9: [http://java.sun.com/docs/codeconv/html/CodeConventions.doc8.html Naming conventions] (mentions packages) * Sun's "Java Tutorials" [http://java.sun.com/docs/books/tutorial/java/package/index.html Lesson: Packages] ==References== {{reflist|1}} [[Category:Java programming language|Package]] [[es:Paquete Java]] [[it:Package (Java)]] [[nl:Java package]] [[ja:パッケージ (Java)]] [[ru:Package (Java)]]</text> </page> <page> <id>19810</id> <title>Jay Earley</title> <text>'''Jay Earley''' invented the [[Earley parser]] in his early career in computer science. Later he became a clinical psychologist specializing in group therapy and [[Internal Family Systems Model|Internal Family Systems Therapy]] (IFS). ==External links== * [http://www.jayearley.com Jay Earley's website] * [http://www.personal-growth-programs.com Jay Earley's IFS website] * [http://www.personal-growth-programs.com/about/jay-earley Biography of Jay Earley] ==References== * Earley, Jay, 2000, ''Interactive Group Therapy'', Taylor and Francis * Earley, Jay, 2009, ''Self-Therapy: A Step-by-Step Guide to Inner Wholeness Using IFS'', Mill City Press * Earley, Jay & Weiss, Bonnie, 2010, ''Self-Therapy for Your Inner Critic'', Pattern System Books. {{compu-scientist-stub}} {{US-psychologist-stub}} {{DEFAULTSORT:Earley, Jay}} [[Category:American computer scientists]] [[Category:American psychologists]] [[Category:Living people]] [[fr:Jay Earley]]</text> </page> <page> <id>19816</id> <title>Jazz DSP</title> <text><!-- Deleted image removed: [[Image:jazzdspbd.gif|right|280px|thumb|Jazz DSP Block Diagram]] --> '''The Jazz DSP''', by [http://www.improvsys.com Improv Systems], is a [[VLIW]] embedded digital siginal processor architecture with a 2-stage instruction pipeline, and single-cycle execution units. The baseline [[digital signal processor|DSP]] includes one [[arithmetic logic unit]] (ALU), dual memory interfaces, and the [[control unit]] (instruction decoder, branch control, task control). Most aspects of the architecture, such as the number and sizes of Memory Interface Units (MIU) or the types and number of Computation Units (CU), datapath width (16 or 32-bit), the number of interrupts and priority levels, and [[debugging]] support may be independently configured using a proprietary [[graphical user interface]] (GUI) tool. A key feature of the architecture allows the user to add custom instructions and/or custom [[execution unit]]s to enhance the performance of their application. Typical Jazz DSP performance can exceed 1000 million operations per second (MOPS) at a modest 100 MHz clock frequency. Please refer to the [http://www.eembc.org EEMBC Benchmark] site for more details on Jazz DSP performance as compared to other benchmarked processors. [[Category:Parallel computing]] [[Category:Digital signal processors]]</text> </page> <page> <id>19820</id> <title>Jean-Marie Hullot</title> <text>{{Infobox person | name = Jean-Marie Hullot | image = Jean-Marie_Hullot.jpg | caption = Jean-Marie Hullot in January 2008 | birth_date = {{Birth date and age|1954|2|16}} | birth_place = {{Flag icon|France}} [[Paris, France]] | residence = [[France]] | nationality = [[French people|French]] | known_for = [[Interface Builder]], [[NeXTSTEP]], [[iCal]], [[iSync]] | occupation = }} '''Jean-Marie 