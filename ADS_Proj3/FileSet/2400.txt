Steel). * a concrete syntax that fits well to model and metamodel writing. * two paradigms: the object, and the model. * a bridge towards the Eclipse [[ECore]] formalism ==Characteristics == The main characteristics of the Kermeta language are : *[[imperative programming|imperative]]: traditional structures of control *[[object-oriented]]: multiple inheritance, late binding *[[model-oriented]]: first-class concepts of associations and composition *[[aspect-oriented]]: integrate a simple but powerful weaver for simple meta-modeling tasks. Arbitrary complex weaving is achieved using a dedicated composer written in Kermeta. This allows to extend existing metamodel. Especially in order to add behavior to them by weaving behavioral [[Formal semantics of programming languages|semantic]] (operational or translational). *[[design by contract]]: operations support pre and post conditions, classes use invariants. *[[functional programming|functional]]: functions and first class lambda-expressions *statically typed: genericity for the classes and the operations, function types... *complete [[Type introspection|introspection]]: the complete model of the program is available during execution. ==Syntax== The curious reader will find further information on the [http://www.kermeta.org Kermeta website]. ==Example== <code java> package fsm; require kermeta using kermeta::standard class FSM { attribute ownedState : set State[0..*]#owningFSM reference initialState : State[1..1] reference currentState : State /** * Print the FSM on the standard output */ operation printFSM() is do self.ownedState.each { s | stdio.writeln("State : " + s.name) s.outgoingTransition.each { t | stdio.writeln(" Transition : " + t.source.name + "-(" + t.input + "/" + t.output + ")->" + t.target.name) } } end } class State { attribute name : String reference owningFSM : FSM#ownedState attribute outgoingTransition : set Transition[0..*]#source reference incomingTransition : set Transition[0..*]#target operation step(c : String) : String is do // Get the valid transitions var validTransitions : Collection<Transition> validTransitions := outgoingTransition.select { t | t.input.equals(c) } // Check if there is one and only one valid transition if validTransitions.empty then raise "No Transition!" end if validTransitions.size > 1 then raise "Non Determinism" end // fire the transition result := validTransitions.one.fire end } class Transition { reference source : State[1..1]#outgoingTransition reference target : State[1..1]#incomingTransition attribute output : String attribute input : String operation fire() : String is do // update FSM current state source.owningFSM.currentState := target result := output end } </code> ==See also== *[[Model Driven Engineering]] *[[Domain Specific Language]] *[[Domain-specific modelling|Domain Specific Modelling]] *[[Model-based testing|Model-Based Testing]] *[[Meta-modeling|Metamodeling]] *[[OCL]] *[[Model Transformation Language]] *[[Meta-Object Facility]] ==References== *[http://www.irisa.fr/triskell/publis/2005/Muller05a.pdf Weaving Executability into Object-Oriented Meta-Languages] Pierre-Alain Muller, Franck Fleurey, and Jean-Marc Jézéquel. In S. Kent L. Briand, editor, Proceedings of MODELS/UML'2005, LNCS, Montego Bay, Jamaica, October 2005. Springer. ==External links== *[http://www.kermeta.org/ Kermeta official website] *[http://www.kermeta.org/documents/articles/ article list] [[Category:Unified Modeling Language]] [[Category:Java platform software]] [[Category:Free UML tools]] [[fr:Kermeta]]</text> </page> <page> <id>20542</id> <title>Kernel (linear operator)</title> <text>{{Unreferenced|date=December 2009}} {{Main|Kernel (mathematics)}} In [[linear algebra]] and [[functional analysis]], the '''kernel''' of a linear [[Operator (mathematics)|operator]] ''L'' is the set of all [[operand]]s ''v'' for which ''L''(''v'') = 0. That is, if ''L'': ''V'' → ''W'', then :<math>\ker(L) = \left\{ v\in V : L(v)=0 \right\}\text{,}</math> where 0 denotes the [[null vector]] in ''W''. The kernel of ''L'' is a [[linear subspace]] of the [[Domain of a function|domain]] ''V''. The kernel of a linear operator '''R'''<sup>''m''</sup> → '''R'''<sup>''n''</sup> is the same as the [[null space]] of the corresponding ''n'' &times; ''m'' [[matrix (mathematics)|matrix]]. Sometimes the kernel of a linear operator is referred to as the '''null space''' of the operator, and the [[dimension (vector space)|dimension]] of the kernel is referred to as the operator's nullity. ==Examples== <ol> <li>If ''L'': '''R'''<sup>''m''</sup> → '''R'''<sup>''n''</sup>, then the kernel of ''L'' is the solution set to a homogeneous [[system of linear equations]]. For example, if ''L'' is the operator: :<math>L(x_1,x_2,x_3) = (2x_1 + 5x_2 - 3x_3,\; 4x_1 + 2x_2 + 7x_3)</math> then the kernel of ''L'' is the set of solutions to the equations :<math>\begin{alignat}{7} 2x_1 &&\; + \;&& 5x_2 &&\; - \;&& 3x_3 &&\; = \;&& 0 \\ 4x_1 &&\; + \;&& 2x_2 &&\; + \;&& 7x_3 &&\; = \;&& 0 \end{alignat}\text{.}</math> </li> <li>Let ''C''[0,1] denote the [[vector space]] of all continuous real-valued functions on the interval [0,1], and define ''L'': ''C''[0,1] → '''R''' by the rule :<math>L(f) = f(0.3)\text{.}\,</math> Then the kernel of ''L'' consists of all functions ''f'' ∈ ''C''[0,1] for which ''f''(0.3) = 0.</li> <li>Let ''C''<sup>∞</sup>('''R''') be the vector space of all infinitely differentiable functions '''R''' → '''R''', and let ''D'': ''C''<sup>∞</sup>('''R''') → ''C''<sup>∞</sup>('''R''') be the [[differential operator|differentiation operator]]: :<math>D(f) = \frac{df}{dx}\text{.}</math> Then the kernel of ''D'' consists of all functions in ''C''<sup>∞</sup>('''R''') whose derivatives are zero, i.e. the set of all [[constant function]]s.</li> <li>Let '''R'''<sup>∞</sup> be the [[direct product]] of infinitely many copies of '''R''', and let ''s'': '''R'''<sup>∞</sup> → '''R'''<sup>∞</sup> be the [[shift operator]] :<math>s(x_1,x_2,x_3,x_4,\ldots) = (x_2,x_3,x_4,\ldots)\text{.}</math> Then the kernel of ''s'' is the one-dimensional subspace consisting of all vectors (''x''<sub>1</sub>, 0, 0, ...). Note that ''s'' is [[surjective function|onto]], despite having nontrivial kernel.</li> <li>If ''V'' is an [[inner product space]] and ''W'' is a subspace, the kernel of the [[projection (linear algebra)|orthogonal projection]] ''V'' → ''W'' is the [[orthogonal complement]] to ''W'' in ''V''.</li> </ol> ==Properties== If ''L'': ''V'' → ''W'', then two elements of ''V'' have the same [[image (mathematics)|image]] in ''W'' if and only if their difference lies in the kernel of ''L'': :<math>L(v) = L(w)\;\;\;\;\Leftrightarrow\;\;\;\;L(v-w)=0\text{.}</math> It follows that the image of ''L'' is [[isomorphism|isomorphic]] to the [[quotient space (linear algebra)|quotient]] of ''V'' by the kernel: :<math>\text{im}(L) \cong V / \ker(L)\text{.}</math> This implies the [[rank-nullity theorem]]: :<math>\dim(\ker L) + \dim(\text{im}\,L) = \dim(V)\text{.}\,</math> When ''V'' is an [[inner product space]], the quotient ''V'' / ker(''L'') can be identified with the [[orthogonal complement]] in ''V'' of ker(''L''). This is the generalization to linear operators of the [[row space]] of a matrix. ==Kernels in functional analysis== If ''V'' and ''W'' are [[topological vector space]]s (and ''W'' is finite-dimensional) then a linear operator ''L'': ''V'' → ''W'' is [[continuous linear operator|continuous]] if and only if the kernel of ''L'' is a [[closed set|closed]] subspace of ''V''. ==See also== * [[Kernel (mathematics)]] * [[Null space]] * [[Vector space]] * [[Linear subspace]] * [[Linear operator]] * [[Function space]] * [[Fredholm alternative]] {{DEFAULTSORT:Kernel (Linear Operator)}} [[Category:Linear algebra]] [[Category:Functional 