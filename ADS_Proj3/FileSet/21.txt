Operating depth: 100 meters (when operating as an [[Autonomous underwater vehicle|AUV]]) ==References== {{Reflist}} ==External links== * [http://www.ise.bc.ca/hysub10.html Hysub 10 ROUVs] (Canada) * [http://www.ise.bc.ca/hysub40.html Hysub 40 ROUVs] (Canada) * [http://www.ise.bc.ca/ International Submarine Engineering] (Canada) * [http://www.sia.ac.cn/en/ Shenyang Institute of Automation] (沈阳自动化所) * [http://english.hrbeu.edu.cn Shipbuilding Engineering Institute] (船舶工程学院) * [http://www2.sjtu.edu.cn/newweb/english/admission/schools/15.htm Institute of Underwater Engineering] (水下工程研究所) {{DEFAULTSORT:8a4 Class Rouv}} [[Category:Diving equipment]] [[Category:Unmanned vehicles]] [[Category:Robotic submarines]]</text> </page> <page> <id>204</id> <title>8BF</title> <text>{{Unreferenced|date=February 2007}} '''8BF''', sometimes known as a '''Photoshop plugin''', is a file format for [[plugin]]s used by many [[Comparison of raster graphics editors|raster graphics editors]] including [[Adobe Photoshop]], [[Helicon Filter]] and [[Corel Paint Shop Pro]]. 8BF files can be opened with these programs and act like mini-editors which can modify images for use in the parent program. ==Support== 8BF plugins are generally intended specifically for Photoshop. While some other programs are designed to support this file type, there are known issues with opening many 8BF plugins in programs other than Photoshop. ==See also== *[[Adobe Photoshop]] *[[Plugin]] *[[File format]] {{DEFAULTSORT:8bf}} [[Category:Computer file formats]] [[Category:Digital photography]] {{Multimedia-software-stub}} {{Photo-stub}}</text> </page> <page> <id>214</id> <title>A* search algorithm</title> <text>{{dablink|For other uses of "A*" and "A star", see [[A* (disambiguation)]].}} {{graph search algorithm}} In [[computer science]], '''A*''' (pronounced "A star") is a [[computer algorithm]] that is widely used in [[pathfinding]] and [[graph traversal]], the process of plotting an efficiently traversable path between points, called nodes. Noted for its [[Computer performance|performance]] and accuracy, it enjoys widespread use. [[Peter E. Hart|Peter Hart]], [[Nils Nilsson (researcher)|Nils Nilsson]], and [[Bertram Raphael]] first described the algorithm in 1968<ref>{{cite journal | first = P. E. | last = Hart | coauthors = Nilsson, N. J.; Raphael, B. | title = A Formal Basis for the Heuristic Determination of Minimum Cost Paths | journal = [[Institute of Electrical and Electronics Engineers|IEEE]] Transactions on Systems Science and Cybernetics SSC4 | issue = 2 | pages = 100–107 | year = 1968 | doi = 10.1109/TSSC.1968.300136 | volume = 4 }} </ref>. It is an extension of Edsger Dijkstra's [[Dijkstra's algorithm|1959 algorithm]]. A* achieves better performance (with respect to time) by using [[heuristics]]. ==Description== A* uses a [[best-first search|best-first]] search and finds the least-cost path from a given initial [[node (graph theory)|node]] to one [[goal node]] (out of one or more possible goals). It uses a distance-plus-cost [[heuristic]] function (usually denoted <math>f(x)</math>) to determine the order in which the search visits nodes in the tree. The distance-plus-cost heuristic is a sum of two functions: * the path-cost function, which is the cost from the starting node to the current node (usually denoted <math>g(x)</math>) * and an [[Admissible heuristic|admissible]] "heuristic estimate" of the distance to the goal (usually denoted <math>h(x)</math>). The <math>h(x)</math> part of the <math>f(x)</math> function must be an [[admissible heuristic]]; that is, it must not overestimate the distance to the goal. Thus, for an application like [[routing]], <math>h(x)</math> might represent the straight-line distance to the goal, since that is physically the smallest possible distance between any two points or nodes. If the [[heuristic]] ''h'' satisfies the additional condition <math>h(x) \le d(x,y) + h(y)</math> for every edge ''x, y'' of the graph (where ''d'' denotes the length of that edge), then ''h'' is called [[Consistent heuristic|monotone, or consistent]]. In such a case, A* can be implemented more efficiently—roughly speaking, no node needs to be processed more than once (see ''closed set'' below)—and A* is equivalent to running [[Dijkstra's algorithm]] with the [[reduced cost]] <math>d'(x, y) := d(x, y) - h(x) + h(y)</math>. Note that A* has been generalized into a bidirectional heuristic search algorithm; see [[bidirectional search]]. ==History== In 1964 Nils Nilsson invented a heuristic based approach to increase the speed of Dijkstra's algorithm. This algorithm was called A1. In 1967 Bertram Raphael made dramatic improvements upon this algorithm, but failed to show optimality. He called this algorithm A2. Then in 1968 Peter E. Hart introduced an argument that proved A2 was optimal when using a consistent heuristic with only minor changes. His proof of the algorithm also included a section that showed that the new A2 algorithm was the best algorithm possible given the conditions. He thus named the new algorithm in [[Kleene star]] syntax to be the algorithm that starts with A and includes all possible version numbers or A*. <ref>http://www.eecs.berkeley.edu/~klein/ </ref> ==Concepts== As A* traverses the graph, it follows a path of the lowest ''known'' cost, keeping a sorted [[priority queue]] of alternate path segments along the way. If, at any point, a segment of the path being traversed has a higher cost than another encountered path segment, it abandons the higher-cost path segment and traverses the lower-cost path segment instead. This process continues until the goal is reached. ==Process== [[Image:A+ Pathfinding Algorithm.png|thumb|A single-step simulation]] Like all [[informed search algorithm]]s, it first searches the routes that ''appear'' to be most likely to lead towards the goal. What sets A* apart from a [[greedy algorithm|greedy]] [[best-first search]] is that it also takes the distance already traveled into account; the <math>g(x)</math> part of the heuristic is the cost from the start, not simply the local cost from the previously expanded node. Starting with the initial node, it maintains a [[priority queue]] of nodes to be traversed, known as the ''open set'' (not to be confused with [[open set]]s in [[topology]]). The lower <math>f(x)</math> for a given node <math>x</math>, the higher its priority. At each step of the algorithm, the node with the lowest <math>f(x)</math> value is removed from the queue, the <math>f</math> and <math>h</math> values of its neighbors are updated accordingly, and these neighbors are added to the queue. The algorithm continues until a goal node has a lower <math>f</math> value than any node in the queue (or until the queue is empty). (Goal nodes may be passed over multiple times if there remain other nodes with lower <math>f</math> values, as they may lead to a shorter path to a goal.) The <math>f</math> value of the goal is then the length of the shortest path, since <math>h</math> at the goal is zero in an admissible heuristic. If the actual 