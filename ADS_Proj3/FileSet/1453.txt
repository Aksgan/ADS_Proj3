is one [[Network administrator|administrator]]. # Transport cost is zero. # The network is homogeneous. ==History== The list of fallacies generally came about at [[Sun Microsystems]]. [[L. Peter Deutsch|Peter Deutsch]], one of the original Sun "[[Fellow]]s," is credited with penning the first seven fallacies in 1994; however, [[Bill Joy]] and Tom Lyon had already identified the first four as "The Fallacies of Networked Computing"<ref name="NetworkFallacies">{{cite web |url=http://java.sys-con.com/read/38665.htm |title=Deutsch's Fallacies, 10 Years After}}</ref> (the article claims "Dave Lyon", but this is considered a mistake). Around 1997, [[James Gosling]], another Sun Fellow and the inventor of [[Java (programming language)|Java]], added the eighth fallacy.<ref name="NetworkFallacies"/> ==See also== * [[Distributed computing]] * [[IBZL|Infinite Bandwidth Zero Latency]] ===External links=== * [http://blogs.sun.com/jag/resource/Fallacies.html The Eight Fallacies of Distributed Computing] * [http://www.rgoarchitects.com/Files/fallacies.pdf Fallacies of Distributed Computing Explained] by Arnon Rotem-Gal-Oz ===References=== <references/> [[Category:Distributed computing architecture]] [[Category:Distributed computing problems]] {{compu-network-stub}} [[de:Fallacies of Distributed Computing]] [[fr:Illusions de l'informatique distribuée]] [[lt:Lygiagretaus programavimo mitai]] [[ja:分散コンピューティングの落とし穴]]</text> </page> <page> <id>13273</id> <title>False sharing</title> <text>{{Unreferenced|date=April 2010}} In [[computer science]], '''false sharing''' is a performance degrading usage pattern that can arise in systems with distributed, [[cache coherency|coherent caches]] at the size of the smallest resource block managed by the caching mechanism. When a system participant attempts to periodically access data that will never be altered by another party, but that data shares a cache block with data that ''is'' altered, the caching protocol may force the first participant to reload the whole unit despite a lack of logical necessity. The caching system is unaware of activity within this block and forces the first participant to bear the caching system overhead required by true shared access of a resource. By far the most common usage of this term is in modern [[multiprocessor]] [[CPU cache]]s, where [[Random access memory|memory]] is cached in [[Cache line|lines]] of some small [[power of two]] [[word (computer science)|word]] size (e.g., 64 [[Data structure alignment|aligned]], contiguous [[byte]]s). If two processors operate on independent data in the same [[memory address]] region storable in a single line, the cache coherency mechanisms in the system may force the whole line across the [[Bus (computing)|bus]] or interconnect with every data write, forcing memory stalls in addition to wasting system [[Bandwidth (computing)|bandwidth]]. False sharing is an inherent artifact of automatically synchronized cache protocols and can also exist in environments such as distributed file system or databases, but current prevalence is limited to RAM caches. ==Example== <source lang="cpp"> struct foo { volatile int x; volatile int y; }; foo f; int sum_a() { int s = 0; for (int i = 0; i < 1000000; ++i) s += f.x; return s; } void inc_b() { for (int i = 0; i < 1000000; ++i) ++f.y; } </source> Here, <code>sum_a</code> may need to continually re-read <code>x</code> from main memory (instead of from cache) even though <code>inc_b</code>'s modification of <code>y</code> should be irrelevant. ==Tools== * [[Acumem SlowSpotter|Acumem SlowSpotter and ThreadSpotter]], tools which diagnose performance problems related to [[Locality of reference|data locality]], [[CPU Cache|cache utilization]] and [[Thread (computer science)|thread]] interactions. ==References== * Bolosky, W. J. and Scott, M. L. 1993. <cite>False sharing and its effect on shared memory performance</cite> In USENIX Symposium on Experiences with Distributed and Multiprocessor Systems - Volume 4 (San Diego, California, September 22–23, 1993). USENIX Association, Berkeley, CA, 3-3. [[Category:Cache coherency]] [[Category:Computer memory]]</text> </page> <page> <id>13311</id> <title>FastTrack</title> <text>{{Other uses|Fast Track (disambiguation)}} {{Filesharing}} {{Update|date=January 2008}} '''FastTrack''' is a [[peer-to-peer]] (P2P) [[Protocol (computing)|protocol]] that was used by the [[Kazaa]], [[Grokster]], [[iMesh]], and [[Morpheus (computer program)|Morpheus]] [[file sharing]] programs. FastTrack was the most popular file sharing network in 2003, and used mainly for the exchange of music [[mp3]] files. The network had approximately 2.4 million concurrent users in 2003. It is estimated that the total number of users was greater than that of [[Napster]] at its peak. ==History== The FastTrack protocol and Kazaa were created and developed by [[Estonia]]n programmers of BlueMoon Interactive headed by [[Jaan Tallinn]], the same team that later created [[Skype]]. After selling it to [[Niklas Zennström]] from Sweden and [[Janus Friis]] from Denmark, it was introduced in March 2001 by their [[Netherlands|Dutch]] company Consumer Empowerment. It appeared during the end of the first generation of P2P networks &ndash; [[Napster]] shut down in July of that year. There are three FastTrack-based networks, and they use mutually incompatible versions of the protocol. The most popular clients on each are Kazaa (and its variations), Grokster, and iMesh. For more information about the various lawsuits surrounding Kazaa and Sharman Networks, see [[Kazaa]]. ==Technology== FastTrack uses [[supernode (networking)|supernode]]s to improve scalability. To allow downloading from multiple sources, FastTrack employs the [[UUHash]] hashing algorithm. While UUHash allows very large files to be checksummed in a short time, even on slow computers, it also allows for massive corruption of a file to go unnoticed. Many people, as well as the [[RIAA]], have exploited this vulnerability to spread corrupt and fake files on the network.{{Citation needed|date=September 2010}} ==Clients== The FastTrack protocol uses [[encryption]] and was not documented by its creators, and the first clients were all closed source software. However, initialization data for the encryption algorithms is sent in the clear and no [[public key]] encryption is used, so reverse engineering was made comparatively easy. In 2003, [[open source]] programmers succeeded in reverse-engineering the portion of the protocol dealing with client-supernode communication, but the supernode-supernode communication protocol remains largely unknown. The following programs are or have been FastTrack clients: * '''[[Kazaa]]''' and variants * '''[[KCeasy]]''' (requires the gIFT-fasttrack plugin) * '''[[Grokster]]''' * '''[[iMesh]]''' * '''[[Morpheus (computer program)|Morpheus]]''', until 2002 * '''Apollon''' - KDE-Based * [[giFT-FastTrack]] [http://developer.berlios.de/projects/gift-fasttrack/] &ndash; a [[giFT]] plugin * [[MLDonkey]], a free multi-platform multi-network file sharing client ==See also== * [[Kad network]] * [[Overnet]] * [[Open Music Model]] * [[Comparison of file sharing applications]] ==External links== * [http://developer.berlios.de/projects/gift-fasttrack/ giFT-FastTrack home page] * [http://cvs.berlios.de/cgi-bin/viewcvs.cgi/gift-fasttrack/giFT-FastTrack/PROTOCOL?rev=HEAD&content-type=text/vnd.viewcvs-markup Documentation of the known parts of the FastTrack protocol], from giFT-FastTrack * Boardwatch [http://www.boardwatch.com/document.asp?doc_id=36886&site=boardwatch Interview with Niklas Zennstrom], July 17, 2003 * [http://www.lowth.com/p2pwall FTWall] - A firewalling technique for blocking the fast-track protocol. * ''[http://shumans.com/p2p-business-models.pdf Advanced Peer-Based Technology Business Models]''. [[Shuman Ghosemajumder|Ghosemajumder, Shuman]]. 