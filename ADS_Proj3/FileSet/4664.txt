User Account Control |first=Mark |last=Russinovich |work=[[Microsoft TechNet|TechNet Magazine]] |publisher=[[Microsoft]] |month=June | year=2007 |accessdate=2007-12-08 }}</ref> Since toolbars and ActiveX controls run within the Internet Explorer process, they will run with low privileges as well, and will be severely limited in what damage they can do to the system.<ref>{{cite web |url=http://blogs.msdn.com/ie/archive/2006/02/09/528963.aspx |title=Protected Mode in Vista IE7 |first=Mike |last=Friedman |publisher=IEBlog}}</ref> ==Requesting elevation== A program can request elevation in a number of different ways. One way for program developers is to add a requestedPrivileges section to an XML document, known as the [[Manifest (.NET Framework)|manifest]], that is then embedded into the application. A manifest can specify dependencies, visual styles, and now the appropriate security context: <source lang="xml"> <?xml version="1.0" encoding="UTF-8" standalone="yes"?> <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"> <v3:trustInfo xmlns:v3="urn:schemas-microsoft-com:asm.v3"> <v3:security> <v3:requestedPrivileges> <v3:requestedExecutionLevel level="highestAvailable"/> </v3:requestedPrivileges> </v3:security> </v3:trustInfo> </assembly> </source> Setting the level attribute for requestedExecutionLevel to "asInvoker" will make the application run with the token that started it, "highestAvailable" will present a UAC prompt for administrators and run with the usual reduced privileges for standard users, and "requireAdministrator" will require elevation.<ref>{{cite web |url=http://www.codeproject.com/KB/vista-security/MakingAppsUACAware.aspx |title=Making Your Application UAC Aware |date=2007-03-10 |accessdate=2007-03-15 |author=Mike Carlisle |publisher=The Code Project }}</ref> In both highestAvailable and requireAdministrator modes, failure to provide confirmation results in the program not being launched. An executable that is marked as "<code>requireAdministrator</code>" in its manifest cannot be started from a non-elevated process using <code>CreateProcess()</code>. Instead, <code>ERROR_ELEVATION_REQUIRED</code> will be returned. <code>ShellExecute()</code> or <code>ShellExecuteEx()</code> must be used instead. If an <code>HWND</code> is not supplied, then the dialog will show up as a blinking item in the taskbar. Inspecting an executable's manifest to determine if it requires elevation is not recommended, as elevation may be required for other reasons (setup executables, application compatibility). However, it is possible to programmatically detect if an executable will require elevation by using <code>CreateProcess()</code> and setting the <code>dwCreationFlags</code> parameter to <code>CREATE_SUSPENDED</code>. If elevation is required, then <code>ERROR_ELEVATION_REQUIRED</code> will be returned.<ref>{{cite web |url=http://blogs.msdn.com/junfeng/archive/2006/10/18/programmatically-determine-if-an-application-requires-elevation-in-windows-vista.aspx |title=Programmatically determine if an application requires elevation in Windows Vista |date=2006-10-18 |accessdate=2008-01-24 |author=Junfeng Zhang |publisher=MSDN Blogs }}</ref> If elevation is not required, a success return code will be returned at which point you can use <code>TerminateProcess()</code> on the newly created, suspended process. This will not allow you to detect that an executable requires elevation if you are already executing in an elevated process, however. A new process with elevated privileges can be spawned from within a .NET application using the "<code>runas</code>" verb. An example using [[C_Sharp_(programming_language)|C#]]: <source lang="csharp"> System.Diagnostics.Process proc = new System.Diagnostics.Process(); proc.StartInfo.FileName = "C:\\Windows\\system32\\notepad.exe"; proc.StartInfo.Verb = "runas"; // Elevate the application proc.Start(); </source> In a native [[Win32]] application the same "<code>runas</code>" verb can be added to a <code>ShellExecute()</code> or <code>ShellExecuteEx()</code> call.<ref name="kennykerr" /> <source lang="cpp"> ShellExecute(hwnd, "runas", "C:\\Windows\\Notepad.exe", 0, 0, SW_SHOWNORMAL); </source> In the absence of a specific directive stating what privileges the application requests, UAC will apply [[Heuristic algorithm|heuristic]]s, to determine whether or not the application needs administrator privileges. For example, if UAC detects that the application is a setup program, from clues such as the filename, versioning fields, or the presence of certain sequences of bytes within the executable, in the absence of a manifest it will assume that the application needs administrator privileges.<ref>{{cite web |url=http://technet2.microsoft.com/WindowsVista/en/library/00d04415-2b2f-422c-b70e-b18ff918c2811033.mspx?mfr=true |title=Understanding and Configuring User Account Control in Windows Vista |publisher=[[Microsoft]] |accessdate=2007-07-05 }}</ref> ==Criticism== There have been complaints that UAC notifications slow down various tasks on the computer such as the initial installation of software onto Windows Vista.<ref>{{cite web |url=http://lifehacker.com/software/vista/geek-to-live-windows-vista-upgrade-power-tips-231922.php |title=Disabling the UAC feature |accessdate=2007-03-10 |date=2007-03-10 }}</ref> It is possible to turn off UAC while installing software, and reenable it at a later time.<ref>{{cite web |url=http://www.youtube.com/watch?v=M7Uwx_yaxUM |title=Disable UAC in Vista }}</ref> However, this is not recommended since, as File & Registry Virtualization is only active when UAC is turned on, user settings and configuration files may be installed to a different place (a system directory rather than a user-specific directory) if UAC is switched off than they would be otherwise.<ref>{{cite web |url=http://www.edbott.com/weblog/?p=1600 |title=Why you need to be discriminating with those Vista tips |last=Bott |first=Ed |work=Ed Bott's Windows Expertise |date=2007-02-02 |accessdate=2007-07-05 }}</ref> Also note that [[Internet Explorer 7]]'s "Protected Mode", whereby the browser runs in a sandbox with lower privileges than the standard user, relies on UAC; and will not function if UAC is disabled.<ref name="MRtechnet"/> [[Yankee Group]] analyst Andrew Jaquith stated that "while the new security system shows promise, it is far too chatty and annoying."<ref name="pcworlduac">{{cite web | url=http://news.zdnet.com/2100-1009_22-6069464.html | title=Report: Vista to hit anti-spyware, firewall markets | last=Evers | first=Joris | date=2006-05-07 | accessdate=2007-01-21 | work=[[ZDNet]] News | publisher=CNet |archiveurl = http://web.archive.org/web/20061210153354/http://news.zdnet.com/2100-1009_22-6069464.html <!-- Bot retrieved archive --> |archivedate = 2006-12-10}}</ref> However, this statement was made over six months before Vista was actually released (even before [[Development of Windows Vista#Beta 2|Beta 2]] was released). By the time Windows Vista was released in November 2006, Microsoft had drastically reduced the number of operating system tasks that triggered UAC prompts, and added file and registry virtualization to reduce the number of [[Legacy system|legacy]] applications that trigger UAC prompts.<ref name="Channel 9"/> However, David Cross, a product unit manager at Microsoft, stated during the RSA Conference 2008 that UAC was in fact designed to "annoy users," and force independent software vendors to make their programs more secure so that UAC prompts would not be triggered.<ref>[http://news.zdnet.com/2100-9590_22-6237191.html Microsoft: Vista feature designed to 'annoy users' | Tech News on ZDNet<!-- Bot generated title -->]</ref> In response to these criticisms, Microsoft has altered UAC activity in [[Windows 7]]. For example, by default users are not prompted to confirm actions initiated with the mouse and keyboard alone such as operating Control Panel applets. New York Times [[Gadgetwise]] writer Stephen Williams says: "One recommended way to wring more speed from Vista is to turn off the overly protective User Account Control whose pop-ups are like having your mother hover over your shoulder while you work."<ref>Gadgetwise, New York Times, May 14, 2008.</ref>. A study by [[Sophos]] using 10 unique samples which had arrived in their labs, showed that UAC , on its default level, could not protect [[Windows 7]] from 8 of the samples. <ref>http://www.sophos.com/blogs/chetw/g/2009/11/03/windows-7-vulnerable-8-10-viruses/</ref> ==See also== 