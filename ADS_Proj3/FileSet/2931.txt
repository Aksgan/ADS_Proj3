tens of megahertz. For microwave frequencies, thin film technologies such as [[surface acoustic wave|surface acoustic wave (SAW)]] and, bulk acoustic wave (BAW) have been used for filters. ==See also== *[[Distributed element filter]] == External links== * [http://www.microwaves101.com/encyclopedia/filters.cfm Article on microwave filter at Microwaves 101] ==Notes== {{reflist}} [[Category:Electronic circuits]] [[Category:Distributed element circuits]] [[Category:Wireless tuning and filtering]]</text> </page> <page> <id>24532</id> <title>MidnightBSD</title> <text>{{Infobox OS| | name = MidnightBSD | logo = [[Image:MidnightBSDLogo.svg|128px|MidnightBSD Logo]] | screenshot = [[Image:MidnightBSD.jpg|200px]] | caption = MidnightBSD 0.1 | developer = The MidnightBSD project | family = [[BSD]] | source_model = [[Open source]] | latest_release_version = 0.2.1-RELEASE | latest_release_date = September 1, 2008 | kernel_type = [[Monolithic kernel]] | ui = [[GNUstep]] | license = [[BSD license]] | working_state = Current | website = [http://www.midnightbsd.org/ www.midnightbsd.org] | supported_platforms = [[i386]], [[SPARC64]], [[AMD64]] | package_manager = MidnightBSD mports/Packages }} '''MidnightBSD''' is a free [[Unix-like]], desktop-oriented [[operating system]] based on [[FreeBSD]] 6.1. It borrows heavily from the [[NEXTSTEP]] [[graphical user interface]]. == History and development == MidnightBSD began as a fork from [[FreeBSD]] in 2005. The founder of the project, Lucas Holt, wished to create a BSD derived desktop operating system. He was familiar with several live CD projects, but not the work on [[PC-BSD]] or [[DesktopBSD]]. At the same time, he also had an interest in [[GNUstep]]. The two ideas were folded into a plan to create a user friendly desktop environment. MidnightBSD 0.1 was released based on the efforts of Lucas Holt, Caryn Holt, D. Adam Karim, Phil Pereira of bsdnexus, and Christian Reinhardt. This release features a modified version of the FreeBSD ports system. The ports system evolved into "mports" which includes fake support, generation of packages before installation, license tagging, and strict rules about package list generation and modification of files outside the destination. Many of these features were introduced in MidnightBSD 0.1.1. Christian Reinhardt replaced Phil Pereira as the lead "mports" maintainer prior to the release of MidnightBSD 0.1. D. Adam Karim acted as the security officer for the first release. All [[release engineering]] is handled by Lucas Holt. 0.2 introduced a refined mports system with over 2000 packages. The [[Portable C Compiler]] was added on i386 in addition to the [[GNU Compiler Collection]]. Other changes include enabling ipfw and sound card detection on startup, newer versions of many software packages including Bind, GCC, OpenSSH, and Sendmail, as well as a Live CD creation system. Currently, the project is focusing on finishing the Magus build cluster software, creating a new installer, finishing the new package installation and management tools called mport, and beginning work on the 0.3 release. The next release will feature some enhancements found in [[FreeBSD]] 7.0 and [[DragonFly BSD]]. == Etymology == MidnightBSD is named after Lucas and Caryn Holt's cat, Midnight. Midnight is a ten pound black [[Turkish Angora]]. == License == MidnightBSD is released under several licenses. The kernel code and most newly created code is released under the two-clause [[BSD license]]. There are parts under the [[GNU General Public License|GPL]], [[GNU Lesser General Public License|LGPL]], [[ISC license|ISC]], and [[Beerware]] licenses, along with three- and four-clause BSD licenses. ==External links== *[http://www.midnightbsd.org/ MidnightBSD Home Page] *[http://www.midnightbsd.org/wiki/ MidnightBSD Wiki] *[http://www.midnightbsd.org/magus/ Magus: The MidnightBSD build cluster] *[http://www.justjournal.com/users/mbsd MidnightBSD Developer Blog] [[Category:FreeBSD]] [[pl:MidnightBSD]] [[ru:MidnightBSD]]</text> </page> <page> <id>24537</id> <title>Midpoint method</title> <text>{{For|the midpoint rule in numerical [[quadrature]]|rectangle method}} [[Image:Midpoint method illustration.png|right|thumb|Illustration of the midpoint method assuming that <math>y_n</math> equals the exact value <math>y(t_n).</math> The midpoint method computes <math>y_{n+1}</math> so that the red chord is approximately parallel to the tangent line at the midpoint (the green line).]] In [[numerical analysis]], a branch of [[applied mathematics]], the '''midpoint method''' is a one-step method for solving the [[ordinary differential equation|differential equation]] :<math> y'(t) = f(t, y(t)), \quad y(t_0) = y_0 </math> [[Numerical ordinary differential equations|numerically]], and is given by the formula :<math> y_{n+1} = y_n + hf\left(t_n+\frac{h}{2},y_n+\frac{h}{2}f(t_n, y_n)\right), \qquad\qquad (1)</math> for <math>n=0, 1, 2, \dots</math> Here, <math>h</math> is the ''step size'' &mdash; a small positive number, <math>t_n=t_0 + n h,</math> and <math>y_n</math> is the computed approximate value of <math>y(t_n).</math> The name of the method comes from the fact that in the formula above the function <math>f</math> is evaluated at <math>t=t_n+h/2,</math> which is the midpoint between <math>t_n</math> at which the value of ''y''(''t'') is known and <math>t_{n+1}</math> at which the value of ''y''(''t'') needs to be found. The error at each step of the midpoint method is of order <math>O\left(h^3\right).</math> Thus, while more computationally intensive than [[Euler's method]], the midpoint method generally gives more accurate results. The method is an example of a class of higher-order methods known as [[Runge-Kutta methods]]. ==Derivation of the midpoint method== [[Image:Numerical integration illustration, h=1.png|right|thumb|Illustration of numerical integration for the equation <math>y'=y, y(0)=1.</math> Blue: the [[Euler method]], green: the midpoint method, red: the exact solution, <math>y=e^t.</math> The step size is <math>h=1.0.</math>]] [[Image:Numerical integration illustration, h=0.25.png|right|thumb|The same illustration for <math>h=0.25.</math> It is seen that the midpoint method converges faster than the Euler method.]] The midpoint method is a refinement of the Euler's method :<math> y_{n+1} = y_n + hf(t_n,y_n),\, </math> and is derived in a similar manner. The key to deriving Euler's method is the approximate equality :<math> y(t+h) \approx y(t) + hf(t,y(t)) \qquad\qquad (2)</math> which is obtained from the slope formula :<math> y'(t) \approx \frac{y(t+h) - y(t)}{h} \qquad\qquad (3)</math> and keeping in mind that <math> y' = f(t, y).</math> For the midpoint method, one replaces (3) with the more accurate :<math> y'\left(t+\frac{h}{2}\right) \approx \frac{y(t+h) - y(t)}{h} </math> when instead of (2) we find :<math> y(t+h) \approx y(t) + hf\left(t+\frac{h}{2},y\left(t+\frac{h}{2}\right)\right). \qquad\qquad (4)</math> One cannot use this equation to find <math> y(t+h)</math> as one does not know <math>y</math> at <math>t+h/2.</math> The solution is then to use a [[Taylor series]] expansion exactly as if using the [[Euler method]] to solve for <math>y(t+h/2)</math>: :<math>y\left(t + \frac{h}{2}\right) \approx y(t) + \frac{h}{2}y'(t)=y(t) + \frac{h}{2}f(t, y(t)),</math> which, when plugged in (4), gives us :<math>y(t + h) \approx y(t) + hf\left(t + \frac{h}{2}, y(t) + \frac{h}{2}f(t, y(t))\right)</math> and the midpoint method (1). ==See also== * [[Rectangle method]] * [[Heun's method]] * [[Leapfrog integration]] and 