examples use the syntax of [[Standard ML]]. The other most widely-used ML dialect, [[OCaml]], differs, in these simple examples, in various insubstantial ways. ===Factorial=== The [[factorial]] function expressed as pure ML: <source lang="ocaml"> fun fac (0 : int) : int = 1 | fac (n : int) : int = n * fac (n - 1) </source> This describes the factorial as a recursive function, with a single terminating base case. It is similar to the descriptions of factorials found in mathematics textbooks. Much of ML code is similar to mathematics in facility and syntax. Part of the definition shown is optional, and describes the ''types'' of this function. The notation E : t can be read as ''expression E has type t''. For instance, the argument n is assigned type ''integer'' (int), and fac (n : int), the result of applying fac to the integer n, also has type integer. The function fac as a whole then has type ''function from integer to integer'' (int -> int). Thanks to [[type inference]], the type annotations can be omitted and will be derived by the compiler. Rewritten without the type annotations, the example looks like: <source lang="ocaml"> fun fac 0 = 1 | fac n = n * fac (n - 1) </source> The function also relies on [[pattern matching]], an important part of ML programming. Note that parameters of a function are not necessarily in parentheses but separated by spaces. When the function's argument is 0 (zero) it will return the integer 1 (one). For all other cases the second line is tried. This is the [[recursion]], and executes the function again until the base case is reached. This implementation of the factorial function is not guaranteed to terminate, since a negative argument causes an [[infinite descending chain]] of recursive calls. A more robust implementation would check for a nonnegative argument before recursing, as follows: <source lang="ocaml"> fun fact n = let fun fac 0 = 1 | fac n = n * fac (n - 1) in if (n < 0) then raise Fail "negative argument" else fac n end </source> The problematic case (when n is negative) demonstrates a use of ML's [[exception]] system. The function can be improved further by writing its inner loop in a [[tail-recursive]] style, such that the [[stack]] need not grow in proportion to the number of function calls. This is achieved by adding an extra, "accumulator", parameter to the inner function. At last, we arrive at <source lang="ocaml"> fun factorial n = let fun fac (0, acc) = acc | fac (n, acc) = fac (n - 1, n*acc) in if (n < 0) then raise Fail "negative argument" else fac (n, 1) end </source> ===List Reverse=== The following function "reverses" the elements in a list. More precisely, it returns a new list whose elements are in reverse order compared to the given list. <source lang="ocaml"> fun reverse [] = [] | reverse (x::xs) = (reverse xs) @ [x] </source> This implementation of reverse, while correct and clear, is inefficient, requiring [[quadratic time]] for execution. The function can be rewritten to execute in [[linear time]] in the following more efficient, though less easy-to-read, style: <source lang="ocaml"> fun reverse xs = let fun rev nil acc = acc | rev (hd::tl) acc = rev tl (hd::acc) in rev xs nil end </source> Notably, this function is an example of [[parametric polymorphism]]. That is, it can consume lists whose elements have any type, and return lists of the same type. ==See also== * [[LCF theorem prover]] * [[ISWIM]] * [[F Sharp programming language|F#]] * [[Haskell (programming language)|Haskell]] * [[Cyclone programming language|Cyclone]] * [[Scala programming language|Scala]] * [[Nemerle]] ===Dialects=== {{See also|Category:ML programming language family}} * [[Caml]], a dialect of ML, which became... :* [[Objective Caml]], the famous dialect of Caml with support for object-oriented programming :* [[Moscow ML]] - a popular implementation of Standard ML descended from Caml light * [[Standard ML]], a dialect of ML with a formal semantics * [[Alice (programming language)|Alice]] * [[F Sharp (programming language)|F#]] * [[Rpal]] * [[Lazy ML|LML (Lazy ML)]] * [[Mythryl]] == Books == * ''The Definition of Standard ML'', Robin Milner, [[Mads Tofte]], Robert Harper, MIT Press 1990; (Revised edition adds author David MacQueen), MIT Press 1997. ISBN 0-262-63181-4 * ''Commentary on Standard ML'', Robin Milner, [[Mads Tofte]], MIT Press 1997. ISBN 0-262-63137-7 * ''ML for the Working Programmer'', L.C. Paulson, Cambridge University Press 1991, 1996, ISBN 0-521-57050-6 * [http://www.cs.cmu.edu/~rwh/smlbook/online.pdf Robert Harper: "Programming in Standard ML", Carnegie Mellon University, 2005.] == References == <references/> ==External links== * [http://smlnj.sf.net/ Standard ML of New Jersey, another popular implementation] * [http://msdn.microsoft.com/en-us/fsharp/default.aspx F#, an ML implementation using the Microsoft .NET framework] * [http://mlton.org/ MLton, a whole-program optimizing Standard ML compiler] * [http://mythryl.org/ Mythryl, "SML with a Posix face"] * [http://successor-ml.org/ sML, Successor ML] {{DEFAULTSORT:Ml (Programming Language)}} [[Category:Functional languages]] [[Category:Procedural programming languages]] [[Category:ML programming language family]] [[Category:Statically typed programming languages]] [[Category:Programming languages created in the 1970s]] [[an:ML]] [[ca:ML]] [[de:ML (Programmiersprache)]] [[el:ML (γλώσσα προγραμματισμού)]] [[es:Meta Lenguaje]] [[fa:زبان برنامه‌نویسی ام‌ال]] [[fr:ML (langage)]] [[ko:ML (프로그래밍 언어)]] [[hr:ML (programski jezik)]] [[it:ML programming language]] [[nl:ML (programmeertaal)]] [[ja:ML (プログラミング言語)]] [[pl:Meta Language]] [[pt:ML (linguagem de programação)]] [[ru:ML]] [[fi:ML (ohjelmointikieli)]] [[sv:ML (programspråk)]] [[tg:ML]] [[zh:ML语言]]</text> </page> <page> <id>22999</id> <title>MODAF Meta-Model</title> <text>==MODAF Meta-Model== The '''MODAF Meta-Model''' (or M3, for short) is the underlying model for the [[UK Ministry of Defence|UK MoD]] Architecture Framework ([[MODAF]]). It defines a [[Unified Modeling Language|UML]] profile (abstract syntax only) by extending the UML 2.1 Meta-Model. The M3 was one of the key inputs to the [[Object Management Group|OMG]] [[UPDM]] specification. Version 1.1 of the M3 was released on 18 May 2007. The current version 1.2.004, was released in May 2010. ==External links== * [http://www.mod.uk/DefenceInternet/AboutDefence/CorporatePublications/InformationManagement/MODAF/ModafMetaModel.htm The official MODAF Meta-Model website] with downloads in [[Sparx]]; [[HTML]] and [[XMI]] formats. [[Category:Unified Modeling Language]] [[Category:Enterprise architecture]] {{uml-stub}}</text> </page> <page> <id>23003</id> <title>MOD (file format)</title> <text>{{Refimprove|date=January 2010}} {{For|the video file format used on many digital camcorders|MOD (video format)}} {{Infobox file format | name = MOD | icon = | logo = | screenshot 