'''return''' (n); } == External links == * Homepage of the [http://www.grgen.net GrGen.NET]-project * [http://www.info.uni-karlsruhe.de/software/grgen/GrGenNET-Manual.pdf GrGen.NET User Manual] * [http://www.info.uni-karlsruhe.de/software/grgen/agtive_2007_grgennet.pdf Short introduction into GrGen.NET] == Conference papers == * [http://www.springerlink.com/content/291511p891rn6616 GrGen: A Fast SPO-Based Graph Rewriting Tool]/[http://www.info.uni-karlsruhe.de/papers/grgen_icgt2006.pdf] - ICGT 06 * [http://www-users.cs.york.ac.uk/~det/Papers/agtive.07.pdf Generation of Sierpinski Triangles: A Case Study for Graph Transformation Tools] - AGTIVE 07 * [http://www.info.uni-karlsruhe.de/papers/agtive_2007_firm.pdf Graph Rewriting for Hardware Dependent Program Optimizations] - AGTIVE 07 * [http://www.info.uni-karlsruhe.de/papers/agtive_2007_search_plan.pdf A First Experimental Evaluation of Search Plan Driven Graph Pattern Matching] - AGTIVE 07 * [http://www.ipd.uka.de/Tichy/uploads/publikationen/180/gramot2-gelhausen.pdf Customizing GrGen.NET for Model Transformation] - GraMoT 08 * [http://www.informatik.uni-bremen.de/~hof/papers/08-GCM.pdf Graph Rewrite Rules with Structural Recursion] - ICGT/GCM 08 == See also == * [[Graph transformation| Graph transformation / rewriting]] * [[Domain Specific Language]] (DSL) * [[Automatic programming|Source Code Generation]] [[Category:Domain-specific programming languages]] [[Category:Graph rewriting]] [[de:GrGen]] [[pt:GrGen]]</text> </page> <page> <id>15630</id> <title>Gradually varied surface</title> <text>In mathematics, a '''gradually varied surface''' is a special type of [[digital surface]]s. It is a function from a 2D digital space (see [[digital geometry]]) to an ordered set or a chain. A gradually varied function is a function from a digital space <math>\Sigma</math> to <math>\{ A_1, ...,A_m \}</math> where <math> A_1< ...<A_m </math> and <math> A_i</math> are real numbers. This function possesses the following property: If ''x'' and ''y'' are two adjacent points in <math>\Sigma</math>, assume <math>f(x)=A_{i}</math>, then <math>f(y)=A_{i}</math>, <math>f(x)=A_{i+1}</math>, or <math>A_{i-1}</math>. The concept of the continuous function in digital space (can be called digitally continuous functions) was proposed by [[Azriel Rosenfeld]] in 1986. It is a function in which the value (an integer) at a digital point is the same or almost the same as its neighbors. In other words, if ''x'' and ''y'' are two adjacent points in a digital space, ''|f(x)-f(y)|≤1''. So we can see that the gradually varied function is defined to be more general than the digitally continuous function. The gradually varied function was defined by L. Chen in 1989. An extension theorem related to above functions was mentioned by Rosenfeld (1986) and completed by Chen (1989). This theorem states: Let <math>D \subset \Sigma</math> and <math>f: D\rightarrow \{ A_1, ...,A_m \}</math>. The necessary and sufficient condition for the existence of the gradually varied extension <math>F</math> of <math>f</math> is : for each pair of points <math>x</math> and <math>y</math> in <math>D</math>, assume <math>f(x)=A_i</math> and <math>f(y)=A_j</math>, we have <math>|i-j|\le d(x,y)</math>, where <math>d(x,y)</math> is the (digital) distance between <math>x</math> and <math>y</math>. The gradually varied surface has direct relationship to [[graph homomorphism]]. ==References== *L. Chen, The necessary and sufficient condition and the efficient algorithms for gradually varied fill, Chinese Sci. Bull. 35 (10), pp 870–873, 1990. *A Rosenfeld, `Continuous' functions on digital pictures, Pattern Recognition Letters, v.4 n.3, p. 177-184, 1986. *G. Agnarsson and L. Chen, On the extension of vertex maps to graph homomorphisms, Discrete Mathematics, Vol 306, No 17, pp. 2021–2030, 2006. *L. Boxer, Digitally continuous functions, Pattern Recognition Letters, Vol 15, No 8, pp 833–839, 1994. {{DEFAULTSORT:Gradually Varied Surface}} [[Category:Digital geometry]]</text> </page> <page> <id>15632</id> <title>Grady Booch</title> <text>[[File:GradyBooch.gif|thumb|Grady Booch in 2002.]] '''Grady Booch''' (born February 27, 1955) is an American [[software engineer]], and Chief Scientist, Software Engineering in IBM Research. Booch is best known for developing the [[Unified Modeling Language]] with [[Ivar Jacobson]] and [[James Rumbaugh]]. == Biography == He earned his [[bachelor's degree]] in 1977 from the [[United States Air Force Academy]] and a [[master's degree]] in electrical engineering in 1979 from the [[University of California, Santa Barbara]].<ref>{{cite web|url=http://www.ddj.com/java/197801612|title=Dr. Dobb's Excellence in Programming Award|date=2007-03-09|author=Michael Swaine|publisher= Dr. Dobb's Journal}}</ref> He is former Chief Scientist of [[Rational Software]] (acquired by IBM on February 20, 2003), where he worked until March 18, 2008. Afterwards he became Chief Scientist, Software Engineering in IBM Research, and series editor for [[Benjamin Cummings]]. In 1995 he was inducted as a Fellow of the [[Association for Computing Machinery]].<ref>http://fellows.acm.org/fellow_citation.cfm?id=2030153&srt=all</ref> He was named an [[IBM Fellow]] in 2003, soon after his entry into IBM, and assumed his current role on March 18, 2008. He was recognized as an [[IEEE]] Fellow in 2010.<ref>http://www.ieee.org/membership_services/membership/fellows/chronology/fellows_2010.html</ref> == Work == Booch is best known for developing the [[Unified Modeling Language]] with [[Ivar Jacobson]] and [[James Rumbaugh]]. He also developed the [[Booch method]] of software development, which he presents in his book, ''Object Oriented Analysis and Design''. He advises adding more classes to simplify complex code. Booch is also an advocate of [[Design pattern (computer science)|design pattern]]s. (For instance, he wrote the [[foreword]] to [[Design Patterns (book)|Design Patterns]], an early and highly influential book in the field.) In the 1980s, Booch wrote one of the more popular books on programming in [[Ada (programming language)|Ada]]. === IBM 1130 === Booch got his first exposure to programming on an [[IBM 1130]].<ref>{{cite web | url=http://www-106.ibm.com/developerworks/library/i-booch/ Quote from interview | title=Grady Booch polishes his crystal ball | first=Grady |last=Booch | authorlink= | date=2003-04-03 | publisher=[[IBM]] accessdate=2007-01-16}}</ref> <blockquote>... I pounded the doors at the local IBM sales office until a salesman took pity on me. After we chatted for a while, he handed me a Fortran [manual]. I'm sure he gave it to me thinking, "I'll never hear from this kid again." I returned the following week saying, "This is really cool. I've read the whole thing and have written a small program. Where can I find a computer?" The fellow, to my delight, found me programming time on an IBM 1130 on weekends and late-evening hours. That was my first programming experience, and I must thank that anonymous IBM salesman for launching my career. Thank you, IBM.</blockquote> === Booch method === [[Image:Booch-diagram.png|thumb|250px|Class diagram]] The [[Booch method]] is a technique used in [[software engineering]]. It is an [[object modeling language]] and methodology that was widely used in [[object-oriented analysis and design]]. It was developed by Booch while at [[Rational Software]]. The notation aspect of the Booch method has now been superseded by the [[Unified Modeling Language]] (UML), which features graphical elements from the Booch method along with elements from the [[object-modeling technique]] (OMT) and [[object-oriented software engineering]] (OOSE). Methodological aspects of the Booch method have been incorporated into several methodologies and processes, the primary such methodology being the 