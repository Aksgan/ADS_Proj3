image to "converge" and reduce noise to acceptable levels usually takes around 5000 samples for most images, and many more for [[Pathological (mathematics)|pathological]] cases. This can take hours or days depending on scene complexity and hardware and software performance. Newer GPU implementations are promising from 1-10 million samples per second on modern hardware, producing acceptably noise-free images in seconds or minutes.{{Citation needed|date=February 2010}} Noise is particularly a problem for animations, giving them a normally-unwanted "film-grain" quality of random speckling. [[Metropolis light transport]] obtains more important samples first, by slightly modifying previously-traced successful paths. This can result in a lower-noise image with fewer samples. Renderer performance is quite difficult to measure fairly. One approach is to measure "Samples per second", or the number of paths that can be traced and added to the image each second. This varies considerably between scenes and also depends on the "path depth", or how many times a ray is allowed to bounce before it is abandoned. It also depends heavily on the hardware used. Finally, one renderer may generate many low quality samples, while another may converge faster using fewer high-quality samples. == Scattering distribution functions == [[Image:Bidirectional scattering distribution function.svg|thumb|right|50%|Scattering distribution functions]] The reflective properties (amount, direction and colour) of surfaces are modelled using [[bidirectional reflectance distribution function|BRDF]]s. The equivalent for transmitted light (light that goes through the object) are [[bidirectional scattering distribution function|BTDF]]s. A path tracer can take full advantage of complex, carefully modelled or measured distribution functions, which controls the appearance ("material", "texture" or "shading" in computer graphics terms) of an object. ==Notes== {{Portal|Computer graphics}} {{Reflist}} # {{note |kajiya1986rendering}} Kajiya, J T, [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.1402&rep=rep1&type=pdf The rendering equation], ''Proceedings of the 13th annual conference on Computer graphics and interactive techniques'', ACM, 1986 # {{note |lafortune1986mathematical}} Lafortune, E, [http://www.graphics.cornell.edu/~eric/thesis/index.html Mathematical Models and Monte Carlo Algorithms for Physically Based Rendering], (PhD thesis), 1996 # {{note |purcell2002ray}} Purcell, T J; Buck, I; Mark, W; and Hanrahan, P, "Ray Tracing on Programmable Graphics Hardware", ''Proc. SIGGRAPH 2002'', 703 - 712. See also Purcell, T, [http://graphics.stanford.edu/papers/tpurcell_thesis/ Ray tracing on a stream processor] (PhD thesis), 2004 # {{note |pathGPUimplementations}} [http://www.youtube.com/watch?v=eRoSFNRQETg Vray demo]; Other examples include Octane Render, Arion, and Luxrender. # {{note |veach1997metropolis}} Veach, E., and Guibas, L. J. [http://graphics.stanford.edu/papers/metro/metro.pdf Metropolis light transport]. In SIGGRAPH’97 (August 1997), pp. 65–76. # [http://www.thepolygoners.com/tutorials/GIIntro/GIIntro.htm This "Introduction to Global Illumination"] has some good example images, demonstrating the image noise, caustics and indirect lighting properties of images rendered with path tracing methods. It also discusses possible performance improvements in some detail. # [http://www.kevinbeason.com/smallpt/ SmallPt] is an educational path tracer by Kevin Beason. It uses 99 lines of C++ (including scene description). This page has a good set of examples of noise resulting from this technique. {{DEFAULTSORT:Path Tracing}} [[Category:3D computer graphics]] [[de:Path Tracing]] [[fr:Path tracing]] [[pl:Path tracing]] [[ru:Трассировка пути]]</text> </page> <page> <id>28651</id> <title>Patton Design, Inc.</title> <text>{{nofootnotes|date=March 2008}} {{Advert|date=May 2008}} {{Orphan|date=March 2008}} '''Patton Design, Inc.''' is an [[industrial design]], engineering, software and hardware, and prototyping consultancy based out of [[Irvine, California]][http://www.hoovers.com/free/search/simple/xmillion/index.xhtml?query_string=Patton+Design%2C+Inc.&which=company&page=1&search_x=21&search_y=10]. The firm was founded in 1983 by [[California State University]] at Long Beach alumnus Doug Patton. Patton Design began with the idea of fusing design and engineering together for the seamless integration of product development. Some notable projects include the first Mac Classic computer by Apple, the Stylewriter by Apple, and the Mitsubishi Pen Remote which is in a permanent collection at the [[Museum of Modern Art]] in New York. Patton Design was also featured on ABC's ''[[American Inventor]]'' and represented the million dollar winner with the "Anecia Survival Capsule", the second place winner with "The WordAce", as well as the third place winner with "The Catch Elite". <ref>[http://www.ocregister.com/ocregister/homepage/abox/article_1137557.php Interview in OC Register]</ref> Patton Design is a patron member of the [[Industrial Designers Society of America]] and has won seventeen Industrial Design Excellence Awards. ==References== {{reflist}} [http://www.idsa.org/webmodules/articles/anmviewer.asp?a=113] [http://www.moma.org/exhibitions/1995/mutantmaterials/plastics.html] [http://cota.csulb.edu/index.cfm?fuseaction=about.didyouknow] [http://solidworks.com/pages/news/pressreleases/viewrelease.html?prid=372] ==External links== * [http://www.pattondesign.com Patton Design, Inc] [[Category:Companies established in 1983]] [[Category:Companies based in Irvine, California]] [[Category:Computer hardware companies]] [[Category:Software companies of the United States]] [[Category:Industrial design firms]]</text> </page> <page> <id>28664</id> <title>Paul H. Cress</title> <text>{{Unreferenced|date=December 2009}} '''Paul H. Cress''' ([[1939]]-[[2004]]) was a [[Canada|Canadian]] computer scientist. He was a young lecturer in computer science at the [[University of Waterloo]] ([[Waterloo, Ontario]],''' Canada''') when, starting in 1966, he and his colleague [[Paul Dirksen]] led a team of programmers developing a fast [[Fortran|FORTRAN]] [[compiler]] called [[WATFIV programming language|WATFOR]] (WATerloo FORtran), for the [[IBM System/360]] family of computers. The /360 WATFOR project was initiated by Professor J. Wesley Graham, following the successful implementation in 1965 of a WATFOR compiler for the [[IBM 7040]] computer. An enhanced version of the /360 WATFOR compiler was called [[WATFIV programming language|WATFIV]], variously interpreted to mean "WATerloo Fortran IV" or "WATFOR-plus-one". [[WATFIV programming language|WATFOR]] and [[WATFIV programming language|WATFIV]] made [[Fortran|FORTRAN]] programming accessible not only to university students and researchers but to high schoolers as well, and largely established Waterloo's early reputation as a centre for software and Computer Science research. In 1972, Cress and Dirksen were joint winners of the [[Grace Murray Hopper Award]] from the [[Association for Computing Machinery]], "For the creation of the WATFOR Compiler, the first member of a powerful new family of diagnostic and educational programming tools." Paul Cress died August 20, 2004, aged 65. {{Persondata <!-- Metadata: see [[Wikipedia:Persondata]]. --> | NAME = Cress, Paul | ALTERNATIVE NAMES = | SHORT DESCRIPTION = | DATE OF BIRTH = | PLACE OF BIRTH = | DATE OF DEATH = | PLACE OF DEATH = }} {{DEFAULTSORT:Cress, Paul}} [[Category:1939 births]] [[Category:2004 deaths]] [[Category:Fortran]] [[Category:Grace Murray Hopper Award laureates]] [[Category:University of Waterloo faculty]]</text> </page> <page> <id>28671</id> <title>Paul Justin Compton</title> <text>{{Infobox Person | name = Paul Compton | image = | image_size = | caption = | birth_name = | birth_date = {{Birth year and age|1944}} | birth_place = | death_date = | death_place = | death_cause = | nationality = [[Australian]] | residence = | other_names = | known_for = [[Ripple Down Rules]] research and Former Head of the [[UNSW School of Computer Science and Engineering]] | education = | employer = [[University 