those operations that are performed one after another. Conditional instructions are performed such that different sets of instructions execute depending on the value(s) of some data. In some languages this is known as an "if" statement. Iterative instructions are performed repetitively and may depend on some data value. This is sometimes called a "loop." Often, one instruction may "call" another set of instructions that are defined in some other program or [[module (programming)|module]]. When more than one computer processor is used, instructions may be executed simultaneously. A simple example of the way software operates is what happens when a user selects an entry such as "Copy" from a menu. In this case, a conditional instruction is executed to copy text from data in a 'document' area residing in memory, perhaps to an intermediate storage area known as a 'clipboard' data area. If a different menu entry such as "Paste" is chosen, the software may execute the instructions to copy the text from the clipboard data area to a specific location in the same or another document in memory. Depending on the application, even the example above could become complicated. The field of software engineering endeavors to manage the complexity of how software operates. This is especially true for software that operates in the context of a large or powerful [[computer system]]. Currently, almost the only limitations on the use of computer software in applications is the ingenuity of the designer/programmer. Consequently, large areas of activities (such as playing grand master level chess) formerly assumed to be incapable of software simulation are now routinely programmed. The only area that has so far proved reasonably secure from software simulation is the realm of human artâ€” especially, pleasing music and literature.{{Citation needed|date=June 2007}} Kinds of software by operation: [[computer program]] as [[executable]], [[source code]] or [[script (computer programming)|script]], [[computer configuration|configuration]].--> === Quality and reliability === {{main|Software quality|Software testing|Software reliability}} Software quality is very important, especially for commercial and system software like [[Microsoft Office]], [[Microsoft Windows]] and [[Linux]]. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called "[[Software bug|bug]]s." Many bugs are discovered and eliminated (debugged) through [[software testing]]. However, software testing rarely &ndash; if ever &ndash; eliminates every bug; some programmers say that "every program has at least one more bug" (Lubarsky's Law). All major software companies, such as Microsoft, Novell and [[Sun Microsystems]], have their own software testing departments with the specific goal of just testing. Software can be tested through [[unit testing]], [[regression testing]] and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance, [[NASA]] has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA based operations interact and identify each other through command programs called software. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together. === License === {{main|Software license}} The software's license gives the user the right to use the software in the licensed environment. Some software comes with the license when purchased off the shelf, or an OEM license when bundled with hardware. Other software comes with a [[free software license]], granting the recipient the rights to modify and redistribute the software. Software can also be in the form of [[freeware]] or [[shareware]]. === Patents === {{main|Software patent|Software patent debate}} Software can be patented; however, [[software patent]]s can be controversial in the software industry with many people holding different views about it. The controversy over software patents is that a specific [[algorithm]] or technique that the software has may not be duplicated by others and is considered an [[intellectual property]] and [[copyright infringement]] depending on the severity. == Design and implementation == {{main|Software development|Computer programming|Software engineering}} Design and implementation of software varies depending on the complexity of the software. For instance, design and creation of [[Microsoft Word]] software will take much more time than designing and developing [[Microsoft Notepad]] because of the difference in functionalities in each one. Software is usually designed and created (coded/written/programmed) in [[integrated development environment]]s (IDE) like [[Eclipse (software)|Eclipse]], [[Emacs]] and [[Microsoft Visual Studio]] that can simplify the process and [[compiler|compile]] the program. As noted in different section, software is usually created on top of existing software and the [[application programming interface]] (API) that the underlying software provides like [[GTK+]], JavaBeans or [[Swing (Java)|Swing]]. Libraries (APIs) are categorized for different purposes. For instance, [[JavaBeans]] library is used for designing [[enterprise application]]s, [[Windows Forms]] library is used for designing graphical user interface (GUI) applications like [[Microsoft Word]], and [[Windows Communication Foundation]] is used for designing [[web services]]. Underlying [[computer programming]] [[concept]]s like [[quicksort]], [[hashtable]], [[array data type|array]], and [[binary tree]] can be useful to creating software. When a program is designed, it relies on the API. For instance, if a user is designing a Microsoft Windows desktop application, he/she might use the [[.NET Framework|.NET]] Windows Forms library to design the desktop application and call its APIs like ''Form1.Close()'' and ''Form1.Show()''<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/default.aspx | title=MSDN Library|accessdate=2010-06-14}}</ref> to close or open the application and write the additional operations him/herself that it need to have. Without these APIs, the programmer needs to write these APIs him/herself. Companies like [[Sun Microsystems]], [[Novell]], and [[Microsoft]] provide their own APIs so that many applications are written using their [[software library|software libraries]] that usually have numerous APIs in them. Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.<ref> v. Engelhardt, Sebastian (2008): [http://ideas.repec.org/p/jrp/jrpwrp/2008-045.html "The Economic Properties of Software", Jena Economic Research Papers, Volume 2 (2008), Number 2008-045.] (in Adobe [[Portable Document Format|pdf]] format) </ref><ref> [http://www.doxpara.com/read.php/core.html "Why Open Source Is The Optimum Economic Paradigm for Software"] by Dan Kaminsky 1999 </ref> A person who creates software is called a [[programmer]], [[software engineer]], [[software developer]], or [[code monkey]], 