= | latest release date = <!-- {{start date and age|YYYY|MM|DD}} --> | latest preview version = | latest preview date = <!-- {{start date and age|YYYY|MM|DD}} --> | frequently updated = | programming language = | operating system = [[Unix]] | platform = | size = | language = | status = | genre = [[Unix shell]] | license = | website = }} The '''Bourne shell''', or '''sh''', was the default [[Unix shell]] of [[Version 7 Unix|Unix Version 7]], and replaced the [[Thompson shell]], whose executable file had the same name, '''sh'''. It was developed by [[Stephen Bourne]], of [[AT&T]] [[Bell Laboratories]], and was released in 1977 in the [[Version 7 Unix]] release distributed to colleges and universities. It remains a popular default shell for Unix accounts. The [[Executable|binary]] program of the Bourne shell or a compatible program is located at <code>/bin/sh</code> on most [[Unix]] systems, and is still the default shell for the root [[superuser]] on many current Unix implementations. Its command interpreter contained all the features that are commonly considered to produce structured programs. Although it is used as an interactive command interpreter, it was always intended as a [[scripting programming language|scripting language]]. It gained popularity with the publication of [[The UNIX Programming Environment]] by [[Brian W. Kernighan]] and [[Rob Pike]]. This was the first commercially published book that presented the shell as a programming language in a tutorial form. ==Origins== The shell was designed as a replacement for the original [[Thompson shell]]. Among the primary goals were: * To allow [[shell script]]s to be used as filters. * To provide programmability including [[control flow]] and [[Variable (programming)|variables]]. * Control over all input/output [[file descriptor]]s. * Control over [[signal (computing)|signal handling]] within scripts. * No limits on string lengths when interpreting shell scripts. * Rationalize and generalize string quoting mechanism. * The [[environment variable|environment mechanism]]. This allowed context to be established at startup and provided a way for shell scripts to pass context to sub scripts ([[Process (computing)|processes]]) without having to use explicit [[parameter (computer science)|positional parameters]]. In March 2009 [[Computerworld]] published an in-depth interview with Steve Bourne ''[http://www.computerworld.com.au/article/279011/-z_programming_languages_bourne_shell_sh The A-Z of Programming Languages: Bourne shell, or sh]'' which details the Bourne Shell origins and design decisions. ==Features== Features of the Bourne shell include: * Scripts can be invoked as commands by using their filename * May be used interactively or non-interactively * Allow both synchronous and asynchronous execution of commands * supports input and output redirection and pipelines * provides a set of built-in commands * provides flow control constructs, quotation facilities, and functions. * typeless variables * provides local and global variable scope * scripts do not require compilation before execution * does not have a goto facility, so code restructuring may be necessary * ''[[Command substitution]]'' using back quotes: <code>`command`</code>. * ''[[Here document]]s'' using <code><<<code> to embed a block of input text within a script. * "''<code>for ~ do ~ done</code>''" loops, in particular the use of <code>$*<code> to loop over arguments. * "''<code>case ~ in ~ esac</code>''" selection mechanism, primarily intended to assist argument parsing. * ''<code>sh</code>'' provided support for environment variables using keyword parameters and exportable variables. * It contains strong provisions for controlling input and output and in its expression matching facilities. The Bourne shell also was the first to feature the convention of using [[file descriptor]] <code>2></code> for [[error message]]s, allowing much greater programmatic control during scripting by keeping error messages separate from data. Over the years, the Bourne shell was enhanced at AT&T. The various variants are thus called like the respective AT&T Unix version it was released with (some important variants being Version7, SystemIII, SVR2, SVR3, SVR4). As the shell was never versioned, the only way to identify it was testing its features. Stephen Bourne carried into this shell some aspects of the [[ALGOL 68C]] compiler that he had been working on at [[University of Cambridge|Cambridge University]]. Notably he reused portions of [[ALGOL 68]]'s "<code><u>'''if'''</u> ~ <u>then</u> ~ <u>elif</u> ~ <u>else</u> ~ <u>'''fi'''</u></code>", "<code><u>'''case'''</u> ~ <u>in</u> ~ <u>out</u> ~ <u>'''esac'''</u></code>" and "<code><u>for</u> ~ <u>while</u> ~ <u>'''do'''</u> ~ <u>'''od'''</u></code>" (using <code>done</code> instead of <code><u>'''od'''</u></code>) clauses in the common [[Unix]] Bourne shell syntax. Moreover - although the v7 shell is written in [[C (programming language)|C]] - Bourne took advantage of some [[Macro (computer science)|macros]]<ref>{{Cite web| url=http://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h|title=mac.h - Macros used by Bourne to structure C like Algol68C |accessdate=[[September 9]] 2006|author=Bourne, Steve|authorlink=Stephen Bourne|date= 12 January 1979 |work= |publisher=[[AT&T]] }}</ref> to give the C [[source code]] an ALGOL 68 flavor. These macros (along with the [[Finger protocol|finger]] command distributed in Unix version [[4.2BSD]]) inspired the ''[[IOCCC]] - International Obfuscated [[C (programming language)|C]] Code Contest''<ref>{{Cite web|url=http://www.ioccc.org/faq.html|title=The IOCCC FAQ - Q/A: How did the IOCCC get started?| accessdate=[[September 9]] 2006|author=[[Landon Curt Noll]], Simon Cooper, Peter Seebach and Leonid A. Broukhis|year= 2004|work=|publisher=www.ioccc.org}}</ref>. ==Criticism== The Bourne shell has been criticized<ref> [http://www.kitebird.com/csh-tcsh-book/csh-intro.pdf''An Introduction to the C shell''] by [[Bill Joy]]. </ref><ref> {{cite web | last = Bezroukov | first = Nikolai | title = Introduction to the Unix shell history | date = August 15, 2009 | url = http://www.softpanorama.org/People/Shell_giants/introduction.shtml | accessdate = September 29, 2010}} </ref> for its shortcomings compared to the [[C shell]]. * The Bourne shell was not as [[User-friendly|friendly]] for interactive use. [[C shell]] offered [[C_shell#History|history]], [[C_shell#Aliases|aliases]], [[C_shell#Job_control|job control]] and other features that made it faster and easier to use. * Even though the rest of the Unix system was written in [[C programming language|C]], the Bourne shell's [[Formal grammar|grammar]] looked nothing like C; it looked like [[ALGOL]], instead. * It lacked an [[Expression (programming)|expression grammar]]. Even simple arithmetic had to be done using the external <code>[[Test (Unix)|test]]</code> and <code>[[expr]]</code> utilities. ==Descendants== The [[Korn shell]] (ksh) written by [[David Korn (computer scientist)|David Korn]], was a middle road between the Bourne shell and the [[C shell]]. Its syntax was chiefly drawn from the Bourne shell, while its [[job control (Unix)|job control]] features resembled those of the C shell. The functionality of the original Korn Shell (known as ksh88 from the year of its introduction) 