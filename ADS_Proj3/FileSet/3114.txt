A'' and ''A ⊃ ⊥'' are equivalent, i.e., each is derivable from the other. ==Consistency, completeness, and normal forms== A [[theory (mathematics)#Mathematical theories|theory]] is said to be consistent if falsehood is not provable (from no assumptions) and is complete if every theorem is provable using the inference rules of the logic. These are statements about the entire logic, and are usually tied to some notion of a [[model theory|model]]. However, there are local notions of consistency and completeness that are purely syntactic checks on the inference rules, and require no appeals to models. The first of these is local consistency, also known as local reducibility, which says that any derivation containing an introduction of a connective followed immediately by its elimination can be turned into an equivalent derivation without this detour. It is a check on the ''strength'' of elimination rules: they must not be so strong that they include knowledge not already contained in its premises. As an example, consider conjunctions. <table style="margin-left: 2em;"><tr><td> ------ u ------ w A true B true ------------------ ∧I A ∧ B true ---------- ∧E<sub>1</sub> A true </td><td width="30" align="center">⇒</td><td> ------ u A true </td></tr></table> Dually, local completeness says that the elimination rules are strong enough to decompose a connective into the forms suitable for its introduction rule. Again for conjunctions: <table style="margin-left: 2em;"><tr><td> ---------- u A ∧ B true </td><td width="30" align="center">⇒</td><td> ---------- u ---------- u A ∧ B true A ∧ B true ---------- ∧E<sub>1</sub> ---------- ∧E<sub>2</sub> A true B true ----------------------- ∧I A ∧ B true </td></tr></table> These notions correspond exactly to [[Lambda_calculus#.CE.B2-reduction|β-reduction (beta reduction)]] and [[Lambda_calculus#.CE.B7-conversion|η-conversion (eta conversion)]] in the [[lambda calculus]], using the [[Curry&ndash;Howard isomorphism]]. By local completeness, we see that every derivation can be converted to an equivalent derivation where the principal connective is introduced. In fact, if the entire derivation obeys this ordering of eliminations followed by introductions, then it is said to be ''normal''. In a normal derivation all eliminations happen above introductions. In most logics, every derivation has an equivalent normal derivation, called a ''normal form''. The existence of normal forms is generally hard to prove using natural deduction alone, though such accounts do exist in the literature, most notably by [[Dag Prawitz]] in 1961; see his book ''Natural deduction: a proof-theoretical study'', A&W Stockholm 1965, no ISBN. It is much easier to show this indirectly by means of a [[cut elimination|cut-free]] [[sequent calculus]] presentation. ==First and higher-order extensions== [[File:first order natural deduction.png|thumb|right|Summary of first-order system]] The logic of the earlier section is an example of a ''single-sorted'' logic, ''i.e.'', a logic with a single kind of object: propositions. Many extensions of this simple framework have been proposed; in this section we will extend it with a second sort of ''individuals'' or ''terms''. More precisely, we will add a new kind of judgement, "''t is a term''" (or "''t term''") where ''t'' is schematic. We shall fix a [[countable]] set ''V'' of ''variables'', another countable set ''F'' of ''function symbols'', and construct terms as follows: <table style="margin-left: 2em;"><tr><td> v ∈ V ------ var-F v term </td><td width="10%"></td><td> f ∈ F t<sub>1</sub> term t<sub>2</sub> term ... t<sub>n</sub> term ------------------------------------------ app-F f (t<sub>1</sub>, t<sub>2</sub>, ..., t<sub>n</sub>) term </td></tr></table> For propositions, we consider a third countable set ''P'' of ''predicates'', and define ''atomic predicates over terms'' with the following formation rule: <table style="margin-left: 2em;"><tr><td> φ ∈ P t<sub>1</sub> term t<sub>2</sub> term ... t<sub>n</sub> term ------------------------------------------ pred-F φ (t<sub>1</sub>, t<sub>2</sub>, ..., t<sub>n</sub>) prop </td></tr></table> In addition, we add a pair of ''quantified'' propositions: universal (∀) and existential (∃): <table style="margin-left: 2em;"><tr><td> ------ u x term {{Unicode|⋮}} A prop ---------- ∀F<sup>u</sup> ∀x. A prop </td><td width="10%"></td><td> ------ u x term {{Unicode|⋮}} A prop ---------- ∃F<sup>u</sup> ∃x. A prop </td></tr></table> These quantified propositions have the following introduction and elimination rules. <table style="margin-left: 2em;"><tr><td> ------ u a term {{Unicode|⋮}} [a/x] A true ------------ ∀I<sup>u, a</sup> ∀x. A true </td><td width="10%"></td><td> ∀x. A true t term -------------------- ∀E [t/x] A true </td></tr><tr><td> [t/x] A true ------------ ∃I ∃x. A true </td><td width="10%"></td><td> ------ u ------------ v a term [a/x] A true {{Unicode|⋮}} ∃x. A true C true -------------------------- ∃E<sup>a, u,v</sup> C true </td></tr></table> In these rules, the notation [''t''/''x''] ''A'' stands for the substitution of ''t'' for every (visible) instance of ''x'' in ''A'', avoiding capture; see the article on [[lambda calculus]] for more detail about this standard operation. As before the superscripts on the name stand for the components that are discharged: the term ''a'' cannot occur in the conclusion of ∀I (such terms are known as ''eigenvariables'' or ''parameters''), and the hypotheses named ''u'' and ''v'' in ∃E are localised to the second premise in a hypothetical derivation. Although the propositional logic of earlier sections was [[Decidability (logic)|decidable]], adding the quantifiers makes the logic undecidable. So far the quantified extensions are ''first-order'': they distinguish propositions from the kinds of objects quantified over. Higher-order logic takes a different approach and has only a single sort of propositions. The quantifiers have as the domain of quantification the very same sort of propositions, as reflected in the formation rules: <table style="margin-left: 2em;"><tr><td> ------ u p prop {{Unicode|⋮}} A prop ---------- ∀F<sup>u</sup> ∀p. A prop </td><td width="10%"></td><td> ------ u p prop {{Unicode|⋮}} A prop ---------- ∃F<sup>u</sup> ∃p. A prop </td></tr></table> A discussion of the introduction and elimination forms for higher-order logic is beyond the scope of this article. It is possible to be in between first-order and higher-order logics. For example, second-order logic has two kinds of propositions, one kind quantifying over terms, and the second kind quantifying over propositions of the first kind. ==Different presentations of natural deduction== ===Tree-like presentations=== Gentzen's discharging annotations used to internalise hypothetical judgment can be avoided by representing proofs as a tree of [[sequents]] ''Γ {{Unicode|⊢}}A'' instead of a tree of ''A true'' judgments. ===Sequential presentations=== Jaśkowski's representations of natural deduction led to different notations such as [[Fitch-style calculus]] (or Fitch's diagrams) or [[Patrick Suppes|Suppes]]' method of which e.g. [[John Lemmon|Lemmon]] gave a variant called [[system L (Lemmon)|system L]]. 