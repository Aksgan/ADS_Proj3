data can be updated as well. POST can be used to create new entities, PUT for updating an entity, and DELETE for deleting an entity. The URIs representing the data will contain the physical location of the service, as well as the service name. In addition, it will also need to specify an EDM Entity-Set or a specific entity instance, as in respectively <nowiki>http://dataserver/service.svc/MusicCollection</nowiki> or <nowiki>http://dataserver/service.svc/MusicCollection[SomeArtist]</nowiki> The former will list all entities in the ''Collection'' set whereas the latter will list only for the entity which is indexed by ''SomeArtist''. In addition, the URIs can also specify a traversal of a relationship in the Entity Data Model. For example, <nowiki>http://dataserver/service.svc/MusicCollection[SomeSong]/Genre</nowiki> traverses the relationship ''Genre'' (in SQL parlance, joins with the ''Genre'' table) and retrieves all instances of ''Genre'' that are associated with the entity ''SomeSong''. Simple predicates can also be specified in the URI, like <nowiki>http://dataserver/service.svc/MusicCollection[SomeArtist]/ReleaseDate[Year eq 2006]</nowiki> will fetch the items that are indexed by ''SomeArtist'' and had their ''release'' in ''2006''. Filtering and partition information can also be encoded in the URL as <nowiki>http://dataserver/service.svc/MusicCollection?$orderby=ReleaseDate&$skip=100&$top=50</nowiki> It is important to note that although the presence of skip and top keywords indicate paging support, in Data Services version 1 there is no method of determining the number of records available and thus impossible to determine how many pages there may be. The OData 2.0 spec adds support for the '''$count''' path segment (to return just a count of entities) and '''$inlineCount''' (to retrieve a page worth of entities and a total count without a separate round-trip).<ref>http://msdn.microsoft.com/en-us/library/ee373845.aspx</ref> ==References== {{Reflist}} {{Refbegin}} * {{cite web | url = http://blogs.msdn.com/pablo/archive/2007/04/30/codename-astoria-data-services-for-the-web.aspx | title = Codename "Astoria": Data Services for the Web | accessdate = 2007-04-30}} * [http://astoria.mslivelabs.com/ ADO.NET Data Services Framework (formerly "Project Astoria")] {{Refend}} ==External links== *[http://msdn.microsoft.com/en-us/library/cc907912.aspx Using Microsoft ADO.NET Data Services] *[http://www.asp.net/downloads/3.5-extensions/ ASP.NET 3.5 Extensions Preview] *[http://blogs.msdn.com/astoriateam/ ADO.NET Data Services (Project Astoria) Team Blog] *[http://entmag.com/news/article.asp?EditorialsID=9105 Access Cloud Data with Astoria: ENT News Online] {{DotNET}} {{DEFAULTSORT:Ado.Net Data Services}} [[Category:Data management]] [[Category:Web services]] [[Category:ADO.NET Data Access technologies]] [[Category:.NET framework]] [[ru:ADO.NET Data Services]] [[zh:WCF Data Services]]</text> </page> <page> <id>39731</id> <title>WIN.INI</title> <text>'''WIN.INI''' is a basic [[INI file]] that was used in versions of the [[Microsoft Windows]] [[operating environment]] up to [[Windows 3.11]] to store basic settings at boot time. By default, all font, communications drivers, wallpaper, screen saver, and language settings were stored in WIN.INI by [[Windows 3.1x|Windows 3.x]]. Many of these settings were honored in Windows 9x, although the files had begun to be phased out in favor of the [[Windows registry]]. [[Windows XP]] still acknowledges some entries in the WIN.INI file, to provide backwards compatibility with older 16-bit applications. However, when a fresh install of XP is performed, the WIN.INI file created is initially blank. Also there is a WIN.INI file in [[Windows Vista]] and [[Windows 7]]. Prior to Windows 3.0, it was not uncommon for applications to store their configuration settings inside WIN.INI. With the release of [[Windows 3.0]] in 1990, Microsoft introduced the concept of "private" INI files, and some new [[application programming interface]] calls so that applications could store their settings in their own files.<ref>{{cite web |url=http://support.microsoft.com/kb/74608 |title=INFO: When to Use WIN.INI or a Private INI File |publisher=Microsoft |work=Knowledge Base |date=February 14, 2005 }}</ref> Today Microsoft recommends using the registry for settings. ==Editing== Microsoft bundles two specialized editors for core [[configuration file]]s (such as WIN.INI, [[SYSTEM.INI]], [[CONFIG.SYS]], and [[AUTOEXEC.BAT]]) with its operating systems. [[Sysedit]] is an [[Multiple document interface|MDI]] [[text editor]] that opens all of those files simultaneously, available in all versions of Windows since Windows 3.x. [[MSConfig]] is a simpler application that allows a user to enable and disable drivers and applications from being loaded at startup by the aforementioned files and the Run, RunEx, and RunOnce registry keys. ==References== {{reflist}} ==See also== *[[Make Compatible]] [[Category:Windows components]] [[Category:Configuration files]] {{Windows-stub}} [[fr:WIN.INI]]</text> </page> <page> <id>39735</id> <title>WMLScript</title> <text>'''WMLScript''' is the dialect of '''[[JavaScript]]''' used for WML pages and is part of the [[Wireless Application Protocol]] (WAP). WMLScript is a [[client-side scripting]] language and is very similar to JavaScript. Just like JavaScript WMLScript is used for tasks such as user input validation, generation of error message and other [[Dialog boxes]] etc. WMLScript is based on '''[[ECMAScript]]''' (European Computer Manufacturers Association Script), which is JavaScript's standardized version. Thus the syntax of WMLScript is very similar to JavaScript. A major difference between JavaScript and WMLScript is that JavaScript code can be embedded in the [[HTML]] markup, whereas WMLScript code is always placed in a file separate from the WML markup. URLs are used to refer to the actual WMLScript code in the WML document. ==See also== *[[Wireless Markup Language]] *[[Wireless Application Protocol]] *[[JavaScript]] ==External links== *[http://www.w3schools.com/wmlscript/default.asp Introduction to WMLScript] *[http://www.developershome.com/wap/wmlscript WMLScript Tutorial] *[http://www.openmobilealliance.org/ Open Mobile Alliance] {{Open Mobile Alliance standards}} {{ECMAScript}} [[Category:Open Mobile Alliance standards]] [[Category:Scripting languages]] [[Category:Mobile software]] [[de:WMLScript]] [[es:WMLScript]] [[fa:وی‌ام‌ال‌اسکریپت]] [[ja:WMLScript]] [[ru:WMLScript]]</text> </page> <page> <id>39743</id> <title>WS-CAF</title> <text>'''Web Services Composite Application Framework''' ('''WS-CAF''') is an open framework developed by [[OASIS (organization)|OASIS]]. Its purpose is to define a generic and open framework for applications that contain multiple services used together, which are sometimes referred to as [[composite application]]s<ref>[http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=ws-caf OASIS Web Services Composite Application Framework (WS-CAF)], [[OASIS (organization)|OASIS]], [[2006]]</ref>. WS-CAF characteristics include interoperability, ease of implementation and ease of use. == Scope == The scope of WS-CAF includes: * Provision of [[Web Services Description Language|WSDL]] definitions for context, coordination and transactions. * Message formats will be specified as [[SOAP]] headers and/or body content. * The specification is to be programming language-neutral and platform-neutral. * Demonstrated composability with other [[List of Web service specifications|Web Service specifications]] that are being developed as open, recognized standards * The goals of promoting convergence, consistent use, and a coherent architecture. * Support composability as a critical architectural characteristic of Web service specifications. WS-CAF and WS-Context are targeted to become building blocks for other Web service specifications and standards. == Input specifications == The WS-CAF accepts the following Web services specifications as input: * [[WS-Context]] * WS-Coordination Framework ([[WS-CF]]) * WS-Transaction Management ([[WS-TXM]]) == Benefits == The benefits and results of CAF are intended 