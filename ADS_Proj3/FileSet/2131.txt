Kowalski]] developed the thesis that ''computation could be subsumed by deduction'' and quoted with approval "Computation is controlled deduction." which he attributed to Hayes in his 1988 paper on the early history of Prolog. Contrary to Kowalski and Hayes, [[Carl Hewitt]] claimed that logical deduction was incapable of carrying out concurrent computation in open systems{{fact|date=January 2011}}. Hewitt [1985], Hewitt and Agha [1991], and other published work argued that mathematical models of concurrency did not determine particular concurrent computations as follows: The Actor model makes use of arbitration (often in the form of notional [[Arbiter (electronics)|Arbiters]]) for determining which message is next in the [[Actor model theory#Arrival orderings|arrival ordering]] of an Actor that is sent multiple messages concurrently. This introduces [[Arbiter (electronics)#Arbiters give rise to indeterminacy|indeterminacy]] in the arrival order. Since the arrival orderings are indeterminate, they cannot be deduced from prior information by mathematical logic alone. Therefore mathematical logic can not implement concurrent computation in open systems. The authors note that although mathematical logic cannot, in their view, implement general concurrency it can implement some special cases of concurrent computation, ''e.g.,'' sequential computation and some kinds of [[parallel programming|parallel]] computation including the [[lambda calculus]]. ==Arrival order indeterminacy== According to Hewitt [2008], in concrete terms for Actor systems, typically we cannot observe the details by which the arrival order of messages for an Actor is determined. Attempting to do so affects the results and can even push the indeterminacy elsewhere. e.g., see [[metastability in electronics]] and [[Arbiter (electronics)|arbiters]]. Instead of observing the internals of arbitration processes of Actor computations, we await outcomes. Indeterminacy in arbiters produces indeterminacy in Actors. The reason that we await outcomes is that we have no alternative because of indeterminacy. It is important to be clear about the basis for the published claim about the limitation of mathematical logic. It was not just that Actors could not in general be implemented in mathematical logic. The published claim was that because of the indeterminacy of the physical basis of the Actor model, that no kind of deductive mathematical logic could escape the limitation. This became important later when researchers attempted to extend [[Prolog]] (which had some basis in [[logic programming]]) to concurrent computation using message passing. (See the section below). What does the mathematical theory of Actors have to say about this? A ''closed'' system is defined to be one which does not communicate with the outside. [[Actor model theory]] provides the means to characterize all the possible computations of a closed Actor system using the Representation Theorem [Hewitt 2007] as follows: :The mathematical denotation denoted by a closed system <tt>S</tt> is found by constructing increasingly better approximations from an initial behavior called <tt>⊥<sub>S</sub></tt> using a behavior approximating function <tt>'''progression'''<sub>S</sub></tt> to construct a denotation (meaning ) for <tt>S</tt> as follows : ::<tt>'''Denote'''<sub>S</sub> ≡ ⊔<sub>i∈ω</sub> '''progression'''<sub>S</sub><sup>i</sup>(⊥<sub>S</sub>)</tt> In this way, the behavior of <tt>S</tt> can be mathematically characterized in terms of all its possible behaviors (including those involving unbounded nondeterminism). So mathematical logic can characterize (as opposed to implement) all the possible computations of a closed Actor system. ==A limitation of logic due to lack of information== An open Actor system <tt>S</tt> is one in which the addresses of outside Actors can be passed into <tt>S</tt> in the middle of computations so that <tt>S<tt> can communicate with these outside Actors. These outside Actors can then in turn communicate with Actors internal to <tt>S</tt> using addresses supplied to them by <tt>S</tt>. Due to limitation of the inability to deduce arrival orderings, knowledge of what messages are sent from outside would not enable the response of <tt>S</tt> to be deduced. When other models of concurrent systems ( ''e.g.,'' [[process calculi]]) are used to implement open systems, these systems also can have behavior that depends on arrival time orderings and so cannot be implemented by logical deduction. ==Prolog-like concurrent systems were claimed to be based on mathematical logic== [[Keith Clark]], Hervé Gallaire, Steve Gregory, Vijay Saraswat, Udi Shapiro, Kazunori Ueda, etc. developed a family of [[Prolog]]-like concurrent message passing systems using unification of shared variables and data structure streams for messages. Claims were made that these systems were based on mathematical logic.{{Fact|date=March 2007}} This kind of system was used as the basis of the [[Fifth generation computer|Japanese Fifth Generation Project (ICOT)]]. Carl Hewitt and Gul Agha [1991] argued that these Prolog-like concurrent systems were neither deductive nor logical: like the Actor model, the Prolog-like concurrent systems were based on message passing and consequently were subject to the same indeterminacy. ==Logical operations and system efficiency== Hewitt maintained that a basic lesson can be learned from Prolog and the Prolog-like concurrent systems: a universal model of concurrent computation is limited by having any mandatory overhead in the basic communication mechanisms. This is an argument against including pattern-directed invocation using unification and extraction of messages from data structure streams as fundamental primitives. But compare Shapiro's survey of Prolog-like concurrent programming languages for arguments for inclusion. ==Indeterminacy in other models of computation== Arbitration is the basis of the indeterminacy in the [[Actor model]] of concurrent computation (see [[Actor model early history]] and [[Actor model theory]]). It may also play a role in other models of concurrent systems such as [[process calculi]]. ==See also== *[[Quantum computer]] *[[Randomized algorithm]] *[[Nondeterministic Turing machine]] ==References== *[[Carl Hewitt]]. '''PLANNER: A Language for Proving Theorems in Robots''' [[IJCAI]] 1969. *Carl Hewitt. '''Procedural Embedding of Knowledge In Planner''' IJCAI 1971. *Carl Hewitt, Peter Bishop and Richard Steiger. '''A Universal Modular Actor Formalism for Artificial Intelligence''' IJCAI 1973. *[[Robert Kowalski]] '''Predicate Logic as Programming Language''' Memo 70, Department of Artificial Intelligence, [[Edinburgh University]]. 1973. *Pat Hayes. '''Computation and Deduction''' Mathematical Foundations of Computer Science: Proceedings of Symposium and Summer School, Štrbské Pleso, High Tatras, Czechoslovakia, September 3-8, 1973. *Carl Hewitt and [[Henry Baker (computer scientist)|Henry Baker]] '''Laws for Communicating Parallel Processes''' IFIP-77, August 1977. *Carl Hewitt. '''Viewing Control Structures as Patterns of Passing Messages''' [[Journal of Artificial Intelligence]]. June 1977. *Henry Baker. '''Actor Systems for Real-Time Computation''' MIT EECS Doctoral Dissertation. January 1978. *Bill Kornfeld 