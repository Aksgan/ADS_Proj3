such as [[software tools]]. These processes exist primarily for supporting the management of software development, and are generally skewed toward addressing business concerns. Many software development processes can be run in a similar way to general project management processes. Examples are: * [[Risk management]] is the process of measuring or [[Risk assessment|assessing risk]] and then developing strategies to manage the risk. In general, the strategies employed include transferring the risk to another party, avoiding the risk, reducing the negative effect of the risk, and accepting some or all of the consequences of a particular risk. Risk management in software project management begins with the [[business case]] for starting the project, which includes a [[cost-benefit analysis]] as well as a list of fallback options for project failure, called a [[contingency plan]]. ** A subset of risk management that is gaining more and more attention is "Opportunity Management", which means the same thing, except that the potential risk outcome will have a positive, rather than a negative impact. Though theoretically handled in the same way, using the term "opportunity" rather than the somewhat negative term "risk" helps to keep a team focussed on possible positive outcomes of any given [[risk register]] in their projects, such as spin-off projects, windfalls, and free extra resources. * [[Requirements management]] is the process of identifying, [[Requirements elicitation|eliciting]], documenting, analyzing, [[Requirements traceability|tracing]], prioritizing and agreeing on requirements and then controlling change and communicating to relevant stakeholders. New or altered [[computer system]]<ref name="Stellman05"/> Requirements management, which includes [[Requirements analysis]], is an important part of the [[software engineering]] process; whereby business analysts or [[software developers]] identify the needs or requirements of a client; having identified these requirements they are then in a position to design a solution. * [[Change management]] is the process of identifying, documenting, analyzing, prioritizing and agreeing on changes to [[scope (project management)]] and then controlling changes and communicating to relevant stakeholders. [[Change impact analysis]] of new or altered scope, which includes [[Requirements analysis]] at the change level, is an important part of the [[software engineering]] process; whereby business analysts or [[software developers]] identify the altered needs or requirements of a client; having identified these requirements they are then in a position to re-design or modify a solution. Theoretically, each change can impact the timeline and budget of a software project, and therefore by definition must include [[risk-benefit analysis]] before approval. * [[Software configuration management]] is the process of identifying, and documenting the scope itself, which is the software product underway, including all sub-products and changes and enabling communication of these to relevant stakeholders. In general, the processes employed include [[version control]], [[naming convention (programming)]], and software archival agreements. * [[Release management]] is the process of identifying, documenting, prioritizing and agreeing on releases of software and then controlling the release schedule and communicating to relevant stakeholders. Most software projects have access to three software environments to which software can be released; Development, Test, and Production. In very large projects, where distributed teams need to integrate their work before release to users, there will often be more environments for testing, called [[unit testing]], [[system testing]], or [[integration testing]], before release to [[User acceptance testing]] (UAT). ** A subset of release management that is gaining more and more attention is [[Data Management]], as obviously the users can only test based on data that they know, and "real" data is only in the software environment called "production". In order to test their work, programmers must therefore also often create "dummy data" or "data stubs". Traditionally, older versions of a production system were once used for this purpose, but as companies rely more and more on outside contributors for software development, company data may not be released to development teams. In complex environments, datasets may be created that are then migrated across test environments according to a test release schedule, much like the overall software release schedule. ==Project planning, monitoring and control== The purpose of project planning is to identify the scope of the project, [[Estimation in software engineering|estimate]] the work involved, and create a [[Gantt chart|project schedule]]. Project planning begins with [[Requirements analysis|requirements]] that define the software to be developed. The project plan is then developed to describe the tasks that will lead to completion. The purpose of project monitoring and control is to keep the team and management up to date on the project's progress. If the project deviates from the plan, then the project manager can take action to correct the problem. Project monitoring and control involves status meetings to gather status from the team. When changes need to be made, [[change control]] is used to keep the products up to date. ==Issue== In computing, the term '''issue''' is a unit of work to accomplish an improvement in a system. An issue could be a bug, a requested feature, task, missing [[documentation]], and so forth. The word "issue" is popularly misused in lieu of "[[problem]]." This usage is probably related. {{Citation needed|date=February 2007}} For example, [[OpenOffice.org]] used to call their modified version of [[BugZilla]] IssueZilla. As of September 2010, they call their system Issue Tracker. Problems occur from time to time and fixing them in a timely fashion is essential to achieve correctness of a system and avoid delayed deliveries of products. ===Severity levels=== Issues are often categorized in terms of '''severity levels'''. Different companies have different definitions of severities, but some of the most common ones are: * Critical * High - The bug or issue affects a crucial part of a system, and must be fixed in order for it to resume normal operation. * Medium - The bug or issue affects a minor part of a system, but has some impact on its operation. This severity level is assigned when a non-central requirement of a system is affected. * Low - The bug or issue affects a minor part of a system, and has very little impact on its operation. This severity level is assigned when a non-central requirement of a system (and with 