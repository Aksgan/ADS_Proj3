some plane, and connect the two pieces together. This ensures that the model will be symmetrical. Another common method of creating a polygonal mesh is by connecting together various '''primitives''', which are predefined polygonal meshes created by the modeling environment. Common primitives include: * Cubes * Pyramids * Cylinders * 2D primitives, such as squares, triangles, and disks * Specialized or esoteric primitives, such as the [[Utah Teapot]] or Suzanne, [[Blender (software)|Blender's]] monkey mascot. * Spheres - Spheres are commonly represented in one of two ways: ** '''[[Icosphere]]s''' are [[icosahedron]]s which possess a sufficient number of triangles to resemble a sphere. ** '''[[UV sphere|UV Spheres]]''' are composed of quads, and resemble the grid seen on some globes - quads are larger near the "equator" of the sphere and smaller near the "poles," eventually terminating in a single vertex. Finally, some specialized methods of constructing high or low detail meshes exist. [[Sketch based modeling]] is a user-friendly interface for constructing low-detail models quickly, while [[3d scanner]]s can be used to create high detail meshes based on existing real-world objects in almost automatic way. These devices are very expensive, and are generally only used by researchers and industry professionals but can generate high accuracy sub-millimetric digital representations. == Operations == There are a very large number of operations which may be performed on polygonal meshes. Some of these roughly correspond to real-world manipulations of 3D objects, while others do not. Polygonal mesh operations:<br> '''Creations - Create new geometry from some other mathematical object'''<br> [[Loft (3D)|''Loft'']] - generate a mesh by sweeping a shape along a path<br> Extrude - same as loft, except the path is always a line<br> Revolve - generate a mesh by revolving (rotating) a shape around an axis<br> Marching cubes - algorithm to construct a mesh from an [[implicit function]] '''Binary Creations - Create a new mesh from a binary operation of two other meshes'''<br> Add - boolean addition of two meshes<br> Subtract - boolean subtraction of two meshes<br> Intersect - boolean intersection <br> Union - boolean union of two meshes<br> Attach - attach one mesh to another (removing the interior surfaces)<br> Chamfer - create a beveled surface which smoothly connected two surfaces '''Deformations - Move only the verticies of a mesh'''<br> Deform - systematically move verticies (according to certain functions or rules)<br> Weighted Deform - move verticies based on localized weights per vertex<br> Morph - move verticies smoothly between a source and target mesh<br> Bend - move verticies to "bend" the object<br> Twist - move verticies to "twist" the object '''Manipulations - Modify the geometry of the mesh, but not necessarily topology'''<br> Displace - introduce additional geometry based on a "displacement map" from the surface<br> Simplify - systematically remove and average verticies <br> Subdivide - smooth a course mesh by subdividing the mesh (Catmull-Clark, etc.)<br> Convex Hull - generate another mesh which minimally encloses a given mesh (think shrink-wrap)<br> Cut - create a hole in a mesh surface<br> Stitch - close a hole in a mesh surface '''Measurements - Compute some value of the mesh'''<br> Volume - compute the 3D volume of a mesh (discrete volumetric integral)<br> Surface Area - compute the surface area of a mesh (discrete surface integral)<br> Collision Detection - determine if two complex meshes in motion have collided<br> Fitting - construct a parametric surface (NURBS, bicubic spline) by fitting it to a given mesh<br> Point-Surface Distance - compute distance from a point to the mesh<br> Line-Surface Distance - compute distance from a line to the mesh<br> Line-Surface Intersection - compute intersection of line and the mesh<br> Cross Section - compute the curves created by a cross-section of a plane through a mesh<br> Centroid - compute the centroid, geometric center, of the mesh<br> Center-of-Mass - compute the center of mass, balance point, of the mesh == Extensions == Once a polygonal mesh has been constructed, further steps must be taken before it is useful for games, animation, etc. The model must be [[texture mapped]] to add colors and texture to the surface and it must be given a skeleton for animation. Meshes can also be assigned weights and centers of gravity for use in [[physical simulation]]. In order to display a model on a computer screen outside of the modeling environment, it is necessary to store that model in one of the [[file format]]s listed below, and then use or write a program capable of loading from that format. The two main methods of displaying 3d polygon models are [[OpenGL]] and [[Direct3D]]. Both of these methods can be used with or without a 3d accelerated [[graphics card]]. == Advantages and disadvantages == There are many disadvantages to representing an object using polygons. Polygons are incapable of accurately representing curved surfaces, so a large number of them must be used to approximate curves in a visually appealing manner. The use of complex models has a cost in lowered speed. In [[scanline rendering|scanline conversion]], each polygon must be converted and displayed, regardless of size, and there are frequently a large number of models on the screen at any given time. Often, programmers must use multiple models at varying [[Level of detail (programming)|levels of detail]] to represent the same object in order to cut down on the number of polygons being rendered. The main advantage of polygons is that they are faster than other representations. While a modern graphics card can show a highly detailed scene at a [[frame rate]] of 60 frames per second or higher, [[Ray tracing (graphics)|raytracers]], the main way of displaying non-polygonal models, are incapable of achieving an interactive frame rate (10 frame/s or higher) with a similar amount of detail. == File formats == A variety of formats are available for storing 3d polygon data. The most popular are: * .3ds, .max, which is associated with [[3D Studio Max]] * .mb and .ma, which are associated with [[Maya (software)|Maya]] * .lwo, which is associated with [[Lightwave]] * .lxo, which is associated with [[modo (software)]] * [[Wavefront .obj file|.obj]] (Wavefront's "The Advanced Visualizer") * 