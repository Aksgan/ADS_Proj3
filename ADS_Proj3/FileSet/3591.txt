different data sets. These two terms were first undifferentiated, but PbE then tended to be mostly adopted by software development researchers while PbD tended to be adopted by robotics researchers. Today, PbE refers to an entirely different concept, supported by new programming languages that are similar to simulators. ==Robot programming by demonstration== The PbD paradigm is first attractive to the robotics industry due to the costs involved in the development and maintenance of robot programs. In this field, the operator often has implicit knowledge on the task to achieve (he/she knows how to do it), but does not have usually the programming skills (or the time) required to reconfigure the robot. Demonstrating how to achieve the task through examples thus allows to learn the skill without explicitly programming each detail. The first PbD strategies proposed in robotics were based on ''teach-in'', ''guiding'' or ''play-back'' methods that consisted basically in moving the robot (through a dedicated interface or manually) through a set of relevant configurations that the robot should adopt sequentially (position, orientation, state of the gripper). The method was then progressively ameliorated by focusing principally on the teleoperation control and by using different interfaces such as vision. However, these PbD methods still used direct repetition, which was useful in industry only when conceiving an assembly line using exactly the same product components. To apply this concept to products with different variants or to apply the programs to new robots, the generalization issue became a crucial point. To address this issue, the first attempts at generalizing the skill were mainly based on the help of the user through queries about the user's intentions. Then, different levels of abstractions were proposed to resolve the generalization issue, basically dichotomized in learning methods at a symbolic level or at a trajectory level. The development of [[humanoid robots]] naturally brought a growing interest in robot programming by demonstration. As a humanoid robot is supposed by its nature to adapt to new environments, not only the human appearance is important but the algorithms used for its control require flexibility and versatility. Due to the continuously changing environments and to the huge varieties of tasks that a robot is expected to perform, the robot requires the ability to continuously learn new skills and adapt the existing skills to new contexts. Research in PbD also progressively departed from its original purely engineering perspective to adopt an interdisciplinary approach, taking insights from neuroscience and social sciences to emulate the process of imitation in humans and animals. With the increasing consideration of this body of work in robotics, the notion of ''Robot programming by demonstration'' (also known as RPD or RbD) was also progressively replaced by the more biological label of ''Learning by imitation''. == References == {{reflist}} * {{cite book |last= Cypher |first= Allen |others= Contributor Daniel C. Halbert |title= Watch What I Do: Programming by Demonstration |publisher= Publisher: MIT Press |url= http://www.acypher.com/wwid/ |isbn=0262032139 |year= 1993}} * {{cite book |last= Lieberman |first= Henry |others= Contributor Ben Shneiderman |title= Your Wish is My Command: Programming By Example |publisher= Publisher: Morgan Kaufmann |url= http://web.media.mit.edu/~lieber/PBE/Your-Wish/ |isbn=1558606882 |year= 2001}} ==External links== * '''Reviews Papers''' **{{cite journal |last= Billard |first= Aude |others= Contributor S. Calinon, R. Dillmann and S. Schaal. |title= Robot Programming by Demonstration |origyear= 2008 | journal= Handbook of Robotics |publisher= Publisher: MIT Press |url= http://infoscience.epfl.ch/getfile.py?docid=14806&name=chapter5_9&format=pdf&version=1}} **{{cite journal |last= Schaal |first= S |others= Contributor Ijspeert, A.; Billard, A. |title= Computational approaches to motor learning by imitation |origyear= 2004 | journal= in: Frith, C. D.;Wolpert, D. (eds.), The Neuroscience of Social Interaction, 1431, pp.199-218|publisher= Publisher: Oxford University Press |url= http://www-clmc.usc.edu/publications/S/schaal-PTRSB2003.pdf}} **Robots that imitate humans, Cynthia Breazeal and Brian Scassellati, Trends in Cognitive Sciences, 6:1, 2002, pp. 481â€“487 **Imitation. A. Billard. In M. A. Arbib (ed.), Handbook of Brain Theory and Neural Networks, MIT Press, 566-569. **Is imitation learning the route to humanoid robots? S Schaal, Trends in Cognitive Sciences, 1999. * '''Special Issues in Journals''' **[http://ieeexplore.ieee.org/xpl/tocresult.jsp?isnumber=4126271] ''IEEE Transaction on Systems, Man, and Cybernetics'', Special Issue on Robot Learning by Observation, Demonstration, and Imitation, Part B, 37:2, April 2007 **RSJ Advanced Robotics, Special Issue on Imitative Robots. Vol. 21, No. 13. **Neural Networks, Special issue on The Neural Mechanisms of Imitation Learning, Elsevier Ltd. **Robotics & Autonomous Systems, special issue on The Social Mechanisms of Robot Programming by Demonstration, Elsevier Ltd, 2006. * '''Key Laboratories and People''' **[http://lasa.epfl.ch/research/control_automation/demonstration/index.php] LASA laboratory at EPFL: Machine Learning techniques for Robot Programming by Demonstration ** [http://www-clmc.usc.edu/Research/ImitationLearning] CLMC Lab at USC: Reinforcement Learning and Learning of Motor Primitives ** [http://www.calinon.ch/research.php http://www.calinon.ch/research.php] Sylvain Calinon's webpage on interactive teacher-student (or better trainer/coach-[[trainee]]/client) kinesthetic demonstration. ** [http://www.cns.atr.jp/~dbent/] Darrin Bentivegna's work on teaching air hockey to a humanoid robot * Community activities on closely related topics ** [http://tab.ieee-ras.org/committeeinfo.php?tcid=8] IEEE Robotics and Automation's Technical Committee on Human-Robot Interaction & Coordination ** [http://tab.ieee-ras.org/committeeinfo.php?tcid=31] IEEE Robotics and Automation's Technical Committee on Robot Learning == Videos == A robot that learns to cook an omelet([http://fr.youtube.com/watch?v=FtjC-BXGgAE] Short Version; * [http://fr.youtube.com/watch?v=VvoJxmaoi8A&feature=related] Long Version) ==See also== * [[Programming by example]] * [[Intentional programming]] [[Category:User interface]] [[Category:Programming paradigms]]</text> </page> <page> <id>30218</id> <title>Programming by permutation</title> <text>'''Programming by permutation''' is an approach to software development wherein a programming problem is solved by iteratively making small changes ([[permutations]]) and testing each change to see if it behaves as expected. This approach sometimes seems attractive when the programmer does not fully understand the code and believes that one or more small modifications may result in code that is correct. This tactic is rarely productive because: * a series of small modifications can easily introduce bugs into the code, leading to a "solution" that is even less correct than the starting point * many false starts and corrections usually occur before a satisfactory endpoint is reached * it is rarely possible to measure, by empirical testing, whether the solution will work for all cases * in the worst case, with poor code management, the original state of the code may be irretrievably lost Programming by permutation gives little or no assurance about the quality of the 