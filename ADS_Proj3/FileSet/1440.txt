programming APIs like [[JAX-WS]] and [[JAX-RS]]. It supports multiple transports and bindings and is extensible so developers can add bindings for additional message formats so all systems can work together without having to communicate through a centralized server. FUSE Services Framework is part of a family of enterprise open source SOA infrastructure tools that include [[FUSE ESB]] (based on [[Apache ServiceMix]]), [[FUSE Message Broker]] (based on [[Apache ActiveMQ]]) and [[FUSE Mediation Router]] (based on [[Apache Camel]]). ==See also== *[[Message-oriented middleware]] *[[Enterprise messaging system]] *[[Enterprise Integration Patterns]] *[[Service-oriented architecture]] *[[Event-driven SOA]] ==External links== *[http://fusesource.com/products/enterprise-cxf/ FUSE Services Framework (Enterprise CXF) web site] *[http://incubator.apache.org/cxf/ Apache CXF web site] *[http://fusesource.com/documentation/fuse-services-framework-documentation FUSE Services Framework (Enterprise CXF) documentation] *[http://fusesource.com/forums/index.jspa FUSE Services Framework (Enterprise CXF) forums] *[http://fusesource.com/enterprise-support FUSE Services Framework (Enterprise CXF) enterprise support] *[http://fusesource.com/ FUSE community web site] [[Category:Open source software distributions]] [[Category:Web services]] [[Category:Web applications]]</text> </page> <page> <id>13167</id> <title>FWTools</title> <text>'''FWTools''' is a set of [[open source]] programs for [[geographical information systems]] bundled by [[Frank Warmerdam]] (initials FW). The graphical GIS toolset is made for [[Microsoft Windows]] and [[Linux]] platforms, and includes several popular subpackages: *[[OpenEV]] – A high performance raster/vector desktop data viewer and analysis tool. *[[MapServer]] – A web mapping package. *[[GDAL|GDAL/OGR]] – A library and set of command line utility applications for reading and writing a variety of geospatial raster (GDAL) and vector (OGR) formats. *[http://trac.osgeo.org/proj/ PROJ.4] – A cartographic projections library with command-line utilities. *[[OGDI]] – A multi-format raster and vector reading technology noteworthy for inclusion of support for various military formats including [[VPF]] (i.e., [[VMAP]], [[VITD]]), [[Raster Product Format|RPF]] (i.e., [[CADRG]], [[Controlled Image Base|CIB]]), and [[ADRG]]. *[[Python (programming language)|Python programming language]] While Frank continues to update FWTools for Windows from time to time, most development effort in the Windows bundle has shifted to '''OSGeo4W'''. ==External links== {{Portal|Free software}} * http://fwtools.maptools.org/ * http://trac.osgeo.org/osgeo4w/ {{DEFAULTSORT:Fwtools}} [[Category:Free GIS software]] {{Science-software-stub}}</text> </page> <page> <id>13171</id> <title>FXG</title> <text>'''FXG''' (Flash XML Graphics) is an [[XML]] graphics file format being developed by [[Adobe Systems]], as well as handling the capabilities of Adobe Flash. FXG is planned as a graphics interchange format for cross-application file support <ref name="spec">[http://opensource.adobe.com/wiki/display/flexsdk/FXG+1.0+Specification FXG 1.0 specification]</ref><ref name="spec2">[http://opensource.adobe.com/wiki/display/flexsdk/FXG+2.0+Specification FXG 2.0 specification]</ref>. Mark Anders noted on his blog that the specification was not being developed for inter-operability between Adobe products and third-parties, nor is the specification being designed to refactor a middle-aged file format for fidelity rather than elegance; Mark Anders noted that the first aim the specification was designed for was componentized graphics <ref name="motivation">[http://www.andersblog.com/archives/2009/05/post.html Mark Anders blog - Thoughts on FXG Design and Motivation]</ref>. == Capabilities == It is noted on the specification website that ''"The FXG rendering model follows very closely the Flash Player 10 rendering model and exposes all graphics capabilities of the Flash platform as well as offering expandable support to accommodate future capabilities of the Flash Player <ref name="spec" /><ref name="spec2" />"''. == Relation to other XML formats == The XML model for FXG is based as closely as possible on SVG<ref name="spec" /><ref name="spec2" />. There were some early misconceptions that the FXG file format was designed to be a standard for [[raster graphics]] file interchange, this has since been demonstrated to be incorrect <ref name="motivation" /><ref>[http://broadcast.oreilly.com/2009/05/adobe-fxg-and-ooxml-the-big-fi.html Rick Jelliffe - Adobe's FXG and Microsofts OOXML]</ref>. == Interoperability == The FXG format is being created to allow Adobe products to share a common file format <ref>[http://blogs.adobe.com/jnack/2009/05/some_thoughts_about_psd.html John Nacks Blog - some thoughts about psd]</ref>. The nature of the file format was questioned on the [[Create Project]] mailing list <ref>[http://www.mail-archive.com/create@lists.freedesktop.org/msg01427.html Create Project Mailing List - OpenRaster Vs. FXG]</ref>, where an employee of Adobe mentioned that it was a company policy to document file formats so that third parties could write and read these formats <ref>[http://www.mail-archive.com/create@lists.freedesktop.org/msg01447.html Leonard Rosenthol - Reply to create list thread OpenRaster vs. FXG]</ref>. == See also == * [[OpenRaster]] == References == {{reflist}} == External links == * [http://opensource.adobe.com/wiki/display/flexsdk/FXG+1.0+Specification FXG 1.0 - Functional and Design Specification] * [http://opensource.adobe.com/wiki/display/flexsdk/FXG+2.0+Specification FXG 2.0 - Functional and Design Specification] {{Adobe Flash}} [[Category:Graphics file formats]] [[Category:XML]] {{graphics-software-stub}} [[fr:Fxg]]</text> </page> <page> <id>13175</id> <title>F Sharp (programming language)</title> <text>{{Correct title|title=F#|reason=hash}} {{Infobox programming language | name = F# | logo = | caption = | file ext = | paradigm = [[multi-paradigm programming language|multi-paradigm]]: [[functional programming|functional]], [[imperative programming|imperative]], [[object-oriented programming|object-oriented]] | released = {{Start date|2002}} | designer = [[Microsoft Research]] | developer = [[Microsoft Developer Division]] | latest release version = 2.0 | latest release date = {{start date|2010|04|12}} | latest preview version = | latest preview date = | typing = [[static typing|static]], [[strong typing|strong]], [[type inference|inferred]] | implementations = | dialects = | influenced by = [[Objective Caml]], [[C Sharp (programming language)|C#]], [[Haskell (programming language)|Haskell]]<ref>{{harvcoltxt|Syme|Granicz|Cisternino|2007|p=2}} "F# also draws from Haskell particularly with regard to two advanced language features called ''sequence expressions'' and ''workflows''."</ref> | influenced = | programming language = | operating system = [[Cross-platform]] ([[.NET Framework]], [[Mono (software)|Mono]]) | license = [[Apache license]] | website = [http://fsharp.net Microsoft F# Developer Center] | wikibooks = F Sharp Programming }} '''F#''' (pronounced '''F Sharp''') is a [[multi-paradigm programming language]], targeting the [[.NET Framework]], that encompasses [[functional programming]] as well as [[imperative programming|imperative]] and [[object-oriented programming]] disciplines. It is a variant of [[ML (programming language)|ML]] and is largely compatible with the [[OCaml]] implementation. F# was initially developed by [[Don Syme]] at [[Microsoft Research]] but is now being developed at [[Microsoft]] Developer Division and is being distributed as a fully supported language in the [[.NET Framework]] and [[Microsoft Visual Studio|Visual Studio]] as part of [[Visual Studio 2010]].<ref>{{cite web | url = http://blogs.msdn.com/somasegar/archive/2007/10/17/f-a-functional-programming-language.aspx | title = F# - A functional Programming Language | author = [[S. Somasegar]] | accessdate = 2007-10-18}}</ref> ==Overview== F# is a [[strongly typed programming language|strongly typed]] language that uses [[type inference]]. As a result, data types need not be explicitly declared by the programmer; they will be deduced by the compiler during compilation. However, F# also allows explicit data type declaration. Being a [[List of CLI languages|CLI compliant language]], F# supports all CLI types and objects but it extends the type system and categorizes types as 