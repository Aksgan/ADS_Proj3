=== The HMPP Codelet Concept === A codelet has the following properties: # It is a pure function. #* It does not contain static or volatile variable declarations nor refer to any global variables except if these have been declared by a HMPP directive “resident” #* It does not contain any function calls with an invisible body (that cannot be inlined). This includes the use of libraries and system functions such as malloc, printf, ... #* Every function call must refer to a static pure function (no function pointers). # It does not return any value (void function in C or a subroutine in FORTRAN). # The number of arguments should be fixed (i.e. no variable number of arguments like vararg in C). # It is not recursive. # Its parameters are assumed to be non-aliased. # It does not contain callsite directives (i.e. RPC to another codelet) or other HMPP directives. These properties ensure that a codelet [[Remote procedure call|RPC]] can be remotely executed by a HWA. This RPC and its associated data transfers can be asynchronous. === Codelet RPCs === HMPP provides synchronous and asynchronous RPC. Implementation of asynchronous operation is hardware dependent. [[File:HMPP RPC.png|center|thumb|upright=1.75|Synchronous versus asynchronous RPC]] === HMPP Memory Model === HMPP considers two address spaces: the host processor one and the HWA memory. [[File:HMPP Memory Model.png|center|thumb|upright=1.7|HMPPP memory Model]] === Directives Concept === The HMPP directives may be seen as “meta-information” added in the application source code.They are safe meta-information i.e. they do not change the original code behavior. They address the remote execution (RPC) of a function as well as the transfers of data to/from the HWA memory. The table below introduces the HMPP directives. HMPP directives address different needs: some of them are dedicated to declarations and others are dedicated to the management of the execution. {| class="wikitable" style="cellspacing: 4 px; cellpdding : 4px" |- style="background: #412682; color: #FFFFFF;" | | Control flow instructions | Directives for data management |- | style="background: #412682; color: #FFFFFF;" | Declarations | codelet<br />group | resident<br />map<br />mapbyname |- | style="background: #412682; color: #FFFFFF;" | Operational Directives | callsite<br />synchronize<br />region | allocate<br />release<br />advancedload<br />delegatedstore |} === Concept of set of directives === One of the fundamental points of the HMPP approach is the concept of directives and their associated labels which makes it possible to expose a coherent structure on a whole set of directives disseminated in an application. There are two kinds of labels: * One associated to a codelet. In general, the directives carrying this kind of labels are limited to the management of only one codelet (called stand-alone codelet in the remainder of the document to distinguish it from the group of codelets). * One associated to a group of codelets. These labels are noted as follow: “<LabelOfGroup>“, where “LabelOfGroup” is a name specified by the user. In general, the directives which have a label of this type relate to the whole group. The concept of group is reserved to a class of problems which requires a specific management of the data throughout the application to obtain performance. === HMPP Directives Syntax === In order to simplify the notations, [[regular expression]]s will be used to describe the syntax of the HMPP directives. The color convention below is used for the description of syntax directives: * Reserved HMPP keywords are in <font color="#0070C0">'''blue'''</font>; * Elements of grammar which can be declined in HMPP keywords are in <font color="#990000">'''red'''</font>; * User’s variables remain in black. ===== General syntax ===== The general syntax of HMPP directives is: * For C language: <font color="#0070C0">#pragma hmpp <</font>grp_label<font color="#0070C0">></font> [codelet_label]? <font color="990000">directive_type</font> [<font color="#0070C0">,</font><font color="990000">directive_parameters</font>]* [<font color="#0070C0">&</font>] * For FORTRAN language: <font color="#0070C0">!$hmpp <</font>grp_label<font color="#0070C0">></font> [codelet_label]? <font color="990000">directive_type</font> [<font color="#0070C0">,</font><font color="990000">directive_parameters</font>]* [<font color="#0070C0">&</font>] Where: *<code><grp_label></code>: is a unique identifier naming a group of codelets. In cases where no groups are defined in the application, this label can simply miss. Legal label name must follow this grammar: [a-z,A-Z,_][a-z,A-Z,0-9,_]*. Note that the “< >” characters belong to the syntax and are mandatory for this kind of label. *<code>codelet_label</code>: is a unique identifier naming a codelet. Legal label name must follow this grammar: [a-z,A-Z,_][a-z,A-Z,0-9,_]* *<code>directive</code>: is the name of the directive; *<code>directive_parameters</code>: designates some parameters associated to the directive. These parameters may be of different kinds and specify either some arguments given to the directive either a mode of execution (asynchronous versus synchronous for example); *<code>[&]</code>: is a character used to continue the directive on the next line (same for C and FORTRAN). ===== Directive parameters ===== The parameters associated to a directive may be of different types. Below are the directive parameters defined in HMPP: *<code>version = major.minor[.micro]</code>: specifies the version of the HMPP directives to be considered by the preprocessor. *<code>args[arg_items].size={dimsize[,dimsize]*}</code>: specifies the size of a non scalar parameter (an array). *<code>args[arg_items].io=[in|out|inout]</code>: indicates that the specified function arguments are either input, output or both. By default, unqualified arguments are inputs. *<code>cond = "expr"</code>: specifies an execution condition as a boolean C or Fortran expression that needs to be true in order to start the execution of the group or codelets. *<code>target=target_name[:target_name]*</code>: specifies which targets to try to use in the given order. *<code>asynchronous</code>: specifies that the codelet execution is not blocking (default is synchronous). *<code>args[<arg_items>].advancedload=true</code>: indicates that the specified parameters are preloaded. Only in or inout parameters can be preloaded. *<code>args[arg_items].noupdate=true</code>: this property specifies that the data is already available on the HWA and so that no transfer is needed. When this property is set, no transfer is done on the considered argument *<code>args[<arg_items>].addr="<expr>"</code>: <code><expr></code> is an expression that gives the address of the data to upload. *<code>args[<arg_items>].const=true</code>: indicates that the argument is to be uploaded only once. == HMPP Directives == === Directives for declaring and executing a codelet === A <code>codelet</code> directive declares a computation to be remotely executed on a hardware accelerator.<br /> For the <code>codelet</code> directive: *The codelet label is mandatory and must be unique in the application *The group label is not required if no 