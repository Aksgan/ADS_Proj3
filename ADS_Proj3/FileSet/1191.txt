with a different ''h'' if the result comes out as 1. Most choices of ''h'' will lead to a usable ''g''; commonly ''h''=2 is used. The algorithm parameters (''p'', ''q'', ''g'') may be shared between different users of the system. The second phase computes private and public keys for a single user: * Choose ''x'' by some random method, where 0 < ''x'' < ''q''. * Calculate ''y'' = ''g<sup>x</sup>'' mod ''p''. * Public key is (''p'', ''q'', ''g'', ''y''). Private key is ''x''. There exist efficient algorithms for computing the [[modular exponentiation]]s ''h<sup>a</sup>'' mod ''p'' and ''g<sup>x</sup>'' mod ''p'', such as [[exponentiation by squaring]]. ==Signing== Let ''H'' be the hashing function and ''m'' the message: * Generate a random per-message value ''k'' where 0 < ''k'' < ''q'' * Calculate ''r'' = (''g''<sup>''k''</sup> mod ''p'') mod ''q'' * Calculate ''s'' = (''k''<sup>&minus;1</sup>(''H''(''m'') + ''x''*''r'')) mod ''q'' * Recalculate the signature in the unlikely case that ''r'' = 0 or ''s'' = 0 * The signature is (''r'', ''s'') The [[extended Euclidean algorithm]] can be used to compute the modular inverse ''k''<sup>&minus;1</sup> mod ''q''. ==Verifying== * Reject the signature if either 0 < ''r'' <q or 0 < ''s'' < ''q'' is not satisfied. * Calculate ''w'' = (''s'')<sup>&minus;1</sup> mod ''q'' * Calculate ''u''1 = (''H''(''m'')*''w'') mod ''q'' * Calculate ''u''2 = (''r''*''w'') mod ''q'' * Calculate ''v'' = ((''g''<sup>''u''1</sup>*''y''<sup>''u''2</sup>) mod ''p'') mod ''q'' * The signature is valid if ''v'' = ''r'' DSA is similar to the [[ElGamal signature scheme]]. ==Correctness of the algorithm== The signature scheme is correct in the sense that the verifier will always accept genuine signatures. This can be shown as follows: First, if ''g'' = ''h<sup>(''p'' &minus; 1)/''q''</sup>'' mod ''p'' it follows that ''g<sup>q</sup>'' ≡ ''h''<sup>''p'' &minus; 1</sup> ≡ 1 (mod ''p'') by [[Fermat's little theorem]]. Since ''g'' > 1 and ''q'' is prime, ''g'' must have order ''q''. The signer computes :<math>s=k^{-1}(H(m)+xr) \mod{q}. \, </math> Thus :<math> \begin{align} k & \equiv H(m)s^{-1}+xrs^{-1}\\ & \equiv H(m)w + xrw \pmod{q}. \end{align} </math> Since ''g'' has order ''q'' (mod p) we have :<math> \begin{align} g^k & \equiv g^{H(m)w}g^{xrw}\\ & \equiv g^{H(m)w}y^{rw}\\ & \equiv g^{u1}y^{u2} \pmod{p}. \end{align} </math> Finally, the correctness of DSA follows from :<math>r=(g^k \mod p) \mod q = (g^{u1}y^{u2} \mod p) \mod q = v.\,</math> ==Sensitivity== With DSA, the entropy, secrecy and uniqueness of the random signature value k is critical. It is so critical that violating any one of those three requirements can reveal your entire private key to an attacker.<ref>[http://rdist.root.org/2009/05/17/the-debian-pgp-disaster-that-almost-was/ The Debian PGP disaster that almost was.]</ref> Using the same value twice (even while keeping k secret), using a predictable value, or leaking even a few bits of k in each of several signatures, is enough to break DSA.<ref>[http://rdist.root.org/2010/11/19/dsa-requirements-for-random-k-value/ DSA k-value Requirements]</ref> ==See also== * [[Elliptic Curve DSA]] * [[Modular arithmetic]] ==References== {{reflist|2}} ==External links== * [http://www.itl.nist.gov/fipspubs/fip186.htm FIPS-186], the first version of the official DSA specification. * [http://www.itl.nist.gov/fipspubs/186chg-1.htm FIPS-186, change notice No.1], the first change notice to the first version of the specification. * [http://www.mozilla.org/projects/security/pki/nss/fips1861.pdf FIPS-186-1], the first revision to the official DSA specification. * [http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf FIPS-186-3], the third and current revision to the official DSA specification. * [http://csrc.nist.gov/publications/fips/fips186-3/frn-fips_186-3.pdf FIPS-186-3 Approval], Approval announcement of the third revision to the official DSA specification. * [http://csrc.nist.gov/publications/nistpubs/800-57/SP800-57-Part1.pdf Recommendation for Key Management -- Part 1: general], NIST Special Publication 800-57, p. 62&ndash;63 {{Crypto navbox | public-key}} [[Category:Public-key cryptography]] [[Category:Asymmetric-key cryptosystems]] [[cs:Digital Signature Algorithm]] [[de:Digital Signature Algorithm]] [[es:DSA]] [[fa:الگوریتم امضای رقومی]] [[fr:Digital Signature Algorithm]] [[it:Digital Signature Algorithm]] [[he:Digital Signature Algorithm]] [[lt:DSA]] [[pl:Digital Signature Algorithm]] [[pt:DSS]] [[ro:Algoritm pentru Semnături Digitale]] [[ru:DSA]] [[fi:DSA]] [[vi:Giải thuật ký số]]</text> </page> <page> <id>10402</id> <title>Digital Watermarking Alliance</title> <text>The '''Digital Watermarking Alliance''' is a group of like-minded companies that share a common interest in furthering the adoption of [[digital watermarking]]. The mission of the Digital Watermarking Alliance is: * "''to create awareness and promote the value of digital watermarking to content owners, industry, policy makers, and consumers.''" == Founding members == The Digital Watermarking Alliance is made up of 12 companies that all have an established presence in the [[digital watermarking]] technology and solutions market. Member companies include: * Cinea * [[Digimarc]] * GCS Research * Jura * MediaGrid * MSI * [[Philips]] * Signum * [[Teletrax]] * [[Thomson SA]] * Cinavia [was Verance] * Verimatrix, Inc. ==See also== * [[Digital watermarking]] * [[Watermark]] * [[Watermark detection]] * [[Watermark (data file)]] * [[Copy attack]] * [[Copy protection]] ==External links== * [http://www.digitalwatermarkingalliance.org/ Digital Watermarking Alliance] [[Category:Watermarking]] [[Category:Computer graphics organizations]]</text> </page> <page> <id>10418</id> <title>Digital delay line</title> <text>A '''digital delay line''' is a discrete element in [[digital filter]] theory, which allows a signal to be delayed by a number of samples. If the delay is an integer multiple of samples digital delay lines are often implemented as [[circular buffer]]s. This means that integer delays can be computed very efficiently. The delay by one sample is notated <math>\mathrm{z}^{-1}</math> and delays of <math>N</math> samples is notated as <math>\mathrm{z}^{-N}</math> motivated by the role the [[z-transform]] plays in describing [[digital filter]] structures. If a delay is not an integer of a sample additional filters are applied to account for the fraction of delay different from an integer. Hence delay lines with non-integer delay are called ''fractional delay lines''.<ref>{{Citation | last = Laakso | first = Timo I. | author-link = | last2 = Välimäki | first2 = Vesa | author2-link = | last3 = Karjalainen | first3 = Matti | last4 = Laine | first4 = Unto K. | publication-date = January 1996 | date = January 1996 | title = Splitting the unit delay - tools for fractional delay filter design | periodical= IEEE Signal Processing Magazine | edition = | volume = 13 | issue= 1 | pages= 30–60 | publication-place = | place = | publisher = | id = | isbn = | doi =10.1109/79.482137 | oclc = | url = | accessdate = 2007-08-22 }}</ref> Digital delay lines are widely used building blocks in methods to simulate [[room acoustics]], [[musical instruments]] and [[digital audio effects]].<ref>{{Citation | 