two platforms as possible.'' | date=2008-01-07 | accessdate=2008-01-15 |archiveurl = http://web.archive.org/web/20071009010727/http://www.scala-lang.org/docu/clr/ <!-- Bot retrieved archive --> |archivedate = 2007-10-09}}</ref> but it has not been kept up to date.<ref>http://www.artima.com/weblogs/viewpost.jsp?thread=163733</ref> Scala has the same compilation model as Java and [[C Sharp (programming language)|C#]] (separate compilation, [[Java Classloader|dynamic class loading]]), so Scala code can call Java libraries (or .NET libraries in the .NET implementation). Scala's operational characteristics are the same as Java's. The Scala compiler generates byte code that is nearly identical to that generated by the Java compiler. In fact, Scala code can be decompiled to readable Java code, with the exception of certain constructor operations. To the JVM, Scala code and Java code are indistinguishable. The only difference is a single extra runtime library, scala-library.jar.<ref>http://blog.lostlake.org/index.php?/archives/73-For-all-you-know,-its-just-another-Java-library.html</ref> The Scala software distribution, including compiler and libraries, is released under a [[BSD license]].<ref>http://www.scala-lang.org/node/146</ref> ==History== The design of Scala started in 2001 at the [[École Polytechnique Fédérale de Lausanne]] (EPFL) by [[Martin Odersky]], following on from work on Funnel, a programming language combining ideas from functional programming and [[Petri net]]s.<ref name="history-of-scala">Martin Odersky, [http://www.artima.com/weblogs/viewpost.jsp?thread=163733 "A Brief History of Scala"], Artima.com weblogs, June 9, 2006</ref>{{Refimprove|reason=Petri nets are not mentioned in the given reference|date=January 2011}} Odersky had previously worked on [[Generic Java (programming language)|Generic Java]] and [[javac]], Sun's Java compiler.<ref name="history-of-scala"/> Scala was released late 2003 / early 2004 <!-- overview says January 2004, spec says November 2003 --> on the Java platform, and on the .NET platform in June 2004.<ref name="overview"/><ref name="history-of-scala"/><ref name="spec">Martin Odersky, "The Scala Language Specification Version 2.7"</ref> A second version of the language, v2.0, was released in March 2006.<ref name="overview"/> On 17 January 2011 Scala would be provided some funding by the [[European_Research_Council|ERC]]. {{As of|2010|11}}, the latest release is version 2.8.1. ==Object-oriented features== Scala is a pure [[object-oriented language]] in the sense that every value is an [[object (computer science)|object]]. [[Data type]]s and behaviors of objects are described by [[Class (computer science)|classes]] and [[Trait (computer science)|traits]]. Class abstractions are extended by [[Subclass (computer science)|subclassing]] and by a flexible [[mixin]]-based composition mechanism to avoid the problems of [[multiple inheritance]]. ==Functional programming== Scala also supports [[functional programming]]. The language provides a lightweight syntax for defining [[anonymous function]]s, supports [[higher-order function]]s, allows functions to be nested, and supports [[currying]]. Using the keyword <tt>'''lazy'''</tt> defers the initialization of a value until this value is used. Evaluation of [[delimited continuation]]s is supported in version 2.8. Scala's case classes and its built-in support for [[pattern matching]] model [[Algebraic data type]]s used in many functional programming languages. [[Tail call]] optimization is not supported completely, because the JVM lacks tail call support. In simple cases, the Scala compiler can optimize tail calls into loops.<ref>[http://blog.richdougherty.com/2009/04/tail-calls-tailrec-and-trampolines.html Tail calls, @tailrec and trampolines]</ref> An implementation of a sorting algorithm (similar to [[quicksort]]) in functional style: <source lang="scala"> def qsort: List[Int] => List[Int] = { case Nil => Nil case pivot :: tail => val (smaller, rest) = tail.partition(_ < pivot) qsort(smaller) ::: pivot :: qsort(rest) } </source> ==Static typing== Scala is equipped with an expressive static type system that enforces the safe and coherent use of abstractions. In particular, the type system supports: * [[generic programming|generic classes]], * [[Variance (computer science)|variance]] [[annotation]]s, * upper and lower type bounds, * [[classes (computer science)|classes]] and [[abstract type]]s as object members, * compound types, * explicitly typed self references, * views, and * [[Polymorphism (computer science)|polymorphic]] methods. Scala is able to infer types by usage. This makes most static type declarations optional. Static types need not be explicitly declared unless a compiler error indicates the need. In practice, some static type declarations are included for the sake of code clarity. Lack of explicit type declarations give Scala the appearance of a dynamically typed language. ==Extensibility== The design of Scala acknowledges the fact that, in practice, the development of domain-specific applications often requires [[domain-specific language]] extensions. Scala provides a unique combination of language mechanisms that make it easy to smoothly add new language constructs in the form of libraries: * any method may be used as an infix or postfix operator, and * [[Closure (computer science)|closures]] are constructed automatically depending on the expected type (target typing). A joint use of both features facilitates the definition of new statements without extending the syntax and without using macro-like meta-programming facilities. ==Concurrency== Scala has built-in support for the [[actor model]], in addition to the standard Java concurrency APIs. An alternative [[communicating sequential processes|CSP]] implementation for channel-based message passing is Communicating Scala Objects.<ref name="CSO">[http://users.comlab.ox.ac.uk/bernard.sufrin/CSO/cpa2008-cso.pdf Communicating Scala Objects], Bernard Sufrin, Communicating Process Architectures 2008</ref> ==Software using Scala== [[Lift (web framework)|Lift]] is a [[free software|free]] [[web application framework]] that aims to deliver benefits similar to [[Ruby on Rails]]. The use of Scala means that any existing [[Java (programming language)|Java]] library and [[Web container]] can be used in running Lift applications. In April 2009 [[Twitter]] announced they had switched large portions of their backend from [[Ruby (programming language)|Ruby]] to Scala and intended to convert the rest.<ref>{{Cite web | last = Greene | first = Kate | title = The Secret Behind Twitter's Growth, How a new Web programming language is helping the company handle its increasing popularity. | work = Technology Review | publisher = MIT | date = April 1, 2009 | url = http://www.technologyreview.com/blog/editors/23282/?nlid=1908 | accessdate = April 6, 2009}}</ref> In addition [[Foursquare (service)|Foursquare]] uses Scala and Lift.<ref>[http://www.grenadesandwich.com/blog/steven/2009/11/27/scala-lift-and-future Scala, Lift, and the Future]</ref> GridGain provides Scala-based DSL for cloud computing.<ref>[http://www.jroller.com/nivanov/entry/introducing_scalar_scala_based_dsl Introducing Scalar - Scala-based DSL for Cloud Computing ]</ref> =="Hello world" example== Here is the classic [[Hello world program]] written in Scala: <source lang="scala"> object HelloWorld extends Application { println("Hello, world!") } </source> or <source lang="scala"> object HelloWorld { def main(args: Array[String]) { println("Hello, world!") } } </source> Notice how similar it is to the [[Java (programming language)#Hello world|stand-alone Hello World application for Java]]. A notable difference is that nothing is declared to be static; the [[Singleton pattern|singleton]] created by the '''object''' keyword is used instead. Assuming the program is saved in a file named HelloWorld.scala, it can then be compiled from the command line: > 