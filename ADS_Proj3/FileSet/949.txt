over a large database can be an expensive operation, CouchDB can index views and keep those indexes updated as documents are added, removed, or updated. This provides a very powerful indexing mechanism that you get unprecedented control over compared to most databases. ; Distributed Architecture with Replication : CouchDB was designed with bi-direction replication (or synchronization) and off-line operation in mind. That means multiple replicas can have their own copies of the same data, modify it, and then sync those changes at a later time. The biggest [[Gotcha (programming)|gotcha]] typically associated with this level of flexibility is conflicts. ; REST API : CouchDB treats all stored items (there are others besides documents) as a resource. All items have a unique [[URI]] that gets exposed via HTTP. [[REST]] uses the [[Hypertext Transfer Protocol#Request methods|HTTP methods]] POST, GET, PUT and DELETE for the four basic [[Create, read, update and delete|CRUD]] (Create, Read, Update, Delete) operations on all resources. HTTP is widely understood, interoperable, scalable and proven technology. A lot of tools, software and hardware, are available to do all sorts of things with HTTP like caching, proxying and load balancing. ==Examples== CouchDB provides a set of RESTful [[Hypertext Transfer Protocol#Request methods|HTTP methods]] (e.g., POST, GET, PUT or DELETE) by using the [[cURL]] lightweight command-line tool to interact with CouchDB server: curl http://127.0.0.1:5984/ The CouchDB server processes the HTTP request, it returns a response in [[JSON]] as the following: {"couchdb":"Welcome","version":"1.0.1"} This is not terribly useful, but it illustrates nicely the way of interacting with CouchDB. Creating a database is simpleâ€”just issue the following command: curl -X PUT http://127.0.0.1:5984/wiki CouchDB will reply with the following message, if the database does not exist: {"ok":true} or, with a different response message, if the database already exists: {"error":"file_exists","reason":"The database could not be created, the file already exists."} The command below retrieves information about the database: curl -X GET http://127.0.0.1:5984/wiki The server replies with the following JSON message: {"db_name":"wiki","doc_count":0,"doc_del_count":0,"update_seq":0, "purge_seq":0,"compact_running":false,"disk_size":79, "instance_start_time":"1272453873691070","disk_format_version":5} The following command will remove the database and its contents: curl -X DELETE http://127.0.0.1:5984/wiki CouchDB will reply with the following message: {"ok":true} ==Open source components== Here a list of the existing open source projects that are used in CouchDB. {| class="wikitable" width = "100%" ! Component ! Description ! License |- | [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] | SpiderMonkey is a code name for the first ever [[JavaScript engine]], written by [[Brendan Eich]] at [[Netscape Communications Corporation|Netscape Communications]], later released as open source and now maintained by the [[Mozilla Foundation]]. | [[Mozilla Public License|MPL]]/[[GNU General Public License|GPL]]/[[GNU Lesser General Public License|LGPL]] tri-license |- | [[jQuery]] | jQuery is a lightweight [[cross-browser]] [[JavaScript library]] that emphasizes interaction between [[JavaScript]] and [[HTML]]. | [[Dual license]]: [[GNU General Public License|GPL]] and [[MIT License|MIT]] |- | [[International Components for Unicode|ICU]] | International Components for Unicode (ICU) is an [[open source]] project of mature [[C (programming language)|C]]/[[C++]] and [[Java (programming language)|Java]] libraries for [[Unicode]] support, software [[internationalization]] and software globalization. ICU is widely portable to many operating systems and environments. | [[MIT License]] |- | [[OpenSSL]] | OpenSSL is an [[open source]] implementation of the [[Transport Layer Security|SSL and TLS]] protocols. The core [[library (computer science)|library]] (written in the [[C (programming language)|C programming language]]) implements the basic [[cryptography|cryptographic]] functions and provides various utility functions. | [[Apache License|Apache]]-like unique |- | [[Erlang (programming language)|Erlang]] | Erlang is a general-purpose [[concurrent computing|concurrent]] [[programming language]] and [[Run time system|runtime]] system. The sequential subset of Erlang is a [[functional language]], with [[strict evaluation]], [[single assignment]], and [[dynamic typing]]. | Modified [[Mozilla Public License|MPL]] |} ==See also== {{Portal|Free software}} * [[Document-oriented database]] * [[Lotus Notes]] * [[MongoDB]] * [[OrientDB]] * [[Couchio]] * [[CouchApp]] * [[Cassandra (database)|Cassandra]] * [[XML database]] * [[Mnesia]] ==References== {{Reflist}} ==Bibliography== {{Refbegin}} * {{ citation | first1 = J. Chris | last1 = Anderson | first2 = Noah | last2 = Slater | first3 = Jan | last3 = Lehnardt | date = November 15, 2009 | title = CouchDB: The Definitive Guide | edition = 1st | publisher = [[O'Reilly Media]] | pages = 300 | isbn = 0596158165 | url = http://guide.couchdb.org/editions/1/en/index.html }} * {{ citation | first1 = Joe | last1 = Lennon | date = December 15, 2009 | title = Beginning CouchDB | edition = 1st | publisher = [[Apress]] | pages = 300 | isbn = 1430272376 | url = http://www.apress.com/book/view/9781430272373 }} {{Refend}} ==External links== * {{official|http://couchdb.apache.org/}} * [http://books.couchdb.org/relax/ CouchDB: The Definitive Guide] * [http://www.nosqldatabases.com/main/tag/couchdb CouchDB articles on NoSQLDatabases.com] * [http://manning.com/free/green_chandler.html CouchDB green paper] * [http://nosql.mypopescu.com/tagged/couchdb CouchDB news and articles on myNoSQL] * [http://nosql.mypopescu.com/post/683838234/scaling-couchdb Scaling CouchDB] * [http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference Complete HTTP API Reference] == Video links == * '''Erlang eXchange 2008:''' :* [http://video.google.com/videoplay?docid=-3714560380544574985&hl=en# Erlang eXchange 2008: Couch DB at 10,000 feet Jan Lehnardt] * [http://www.erlang-factory.com/conference/London2009/speakers/janlehnardt Jan Lehnardt is Giving the Following Talks, CouchDB for Erlang Developers] * [http://www.infoq.com/presentations/katz-couchdb-and-me CouchDB and Me] on Jan 31, 2009 by Damien Katz {{Apache}} {{DEFAULTSORT:Couchdb}} [[Category:Erlang programming language]] [[Category:Open source database management systems]] [[Category:Document-oriented databases]] [[Category:Distributed computing architecture]] [[Category:Structured storage]] [[Category:NoSQL]] [[de:CouchDB]] [[fr:CouchDB]] [[pl:CouchDB]] [[pt:CouchDB]] [[ru:CouchDB]]</text> </page> <page> <id>8268</id> <title>Count Key Data</title> <text>'''Count Key Data''' (CKD) is a disk data architecture. Each physical disk record consists of a count field, an optional key field, and a ("user") data field with error correction/detection information appended to each field and gaps separating each field <ref>Systems Reference Library, IBM System/360 Component Description, circa 1966, Track Format, p.3-7 [http://www.textfiles.com/bitsavers/pdf/ibm/360/A26-5988-2_storageComp.pdf],<br/>IBM 3390 Direct Access Storage Introduction, GC26-4573-03, May 1993, Chapter 2, Count-Key-Data Record Format</ref>. Because of the gaps and other information the recorded space is larger than that required for just the count data, key data, or user data. The principle behind the architecture is that since data record lengths can vary, they all have an associated count field which indicates the size of the key if used and the size of the data.<ref name="ibm">[http://publib.boulder.ibm.com/infocenter/dsichelp/ds8000ic/index.jsp?topic=/com.ibm.storage.ssic.help.doc/f2c_count_key_data_32odui.html Count key data], IBM infocenter</ref>. The count field has the identification of the physical location in cylinder-head-record format, the length of the key, and the length of the data. The key may be omitted or consist of 