in the hierarchy. HyperTalk object classes are predetermined by the HyperCard environment, although others can be added by the use of externals (see below). HyperTalk is verbose, hence its ease of use and readability. HyperTalk code segments are referred to as "scripts", a term that was considered less daunting to beginning programmers. Each HyperCard object class, contains a number of "properties". For example, buttons are a type of object, and come in standard styles. To determine, say, whether a checkbox style button is in fact checked, a script can simply call the "checkmark" property, which would return either true or false. In a similar way, objects can be analyzed via functions. For example, the number of lines in text field (another type of object) can be determined by a variant of the "number" function, called simply as "the number of lines of field 'fieldName'". This is very useful when performing a particular action on each separate line of the field. The script that implements the action need only call the function to know exactly the number of lines it must deal with. Should the field data change, the already coded function call will still be accurate. HyperTalk is a [[weak typing|weakly typed]] language. All variables, and in fact all values of any kind, are stored as typeless character strings handled by the interpreter as numbers or text based purely on context. This has a cost in speed but makes it far easier to write (and to read) code. Variables need not be declared, but rather are created on the fly as they are required. For example, the following expression creates a variable named “total”, and sets its initial value: "put 15 into total". Then the expression "add 3 to total" would result in the string "18" being stored in that variable. Taking this further, a powerful and intuitive structure known as "chunking" allows precise manipulation of text and number strings. It is possible, for example, to have the second character of the value "123" (the 2) added to the last character of the value "12345", yielding "12347". For another example, word 3 of "life is cruel" (cruel) can be appended after the first word of "Hello world", yielding "Hello cruel world". It would then be possible to put "Goodbye" into (thus replacing) the first word of that string, yielding "Goodbye cruel world". The above mentioned terms: "character", "word", "first", "last", "after", and "into", among many others, offer exquisite control over the ability to crunch numbers and parse text, down to the character level. HyperTalk supports most standard programming structures such as "if-then" and "repeat". The "if-then" structure is so flexible that it even allows "case" structured code. HyperTalk scripting allows the system to be easily modified and extended. Unlike many procedural languages, and even many scripting languages, HyperTalk proved to be far more accessible to a wide range of users, partly because scripts were more or less readable as [[English language|English]]. For instance, <code>put the first word of the third line of field "hello" into field "goodbye"</code> did exactly that. Referring to objects and the items on cards or backgrounds was easy. The example above shows how to access data within a field on a particular card, but one could refer to any object in the same fashion — including the stack itself. All objects could be named or renamed, as in the example above. In addition, each object (including the stack itself) had unique numeric IDs that remained unchanged throughout the life of the object. Adding scripts is also easy. The user simply "command-option-clicked" (or he could click the "Script" button in the item's property dialog) on any element in the stack, and an editor would pop up. The script may then be edited, saved, and used immediately. In addition, HyperCard contains a "Message Box", an interactive command-line in a floating window that can execute single lines of script. This also includes the "find" command, so it doubles as a search dialog. HyperCard 2.0 added a [[debugger]], as well. HyperTalk was sufficiently popular that one of its main uses was not as a database, but as a programming tool that empowered ordinary computer users. Thousands of "stacks" were written and distributed as "stackware" in the years when HyperCard was widely available. As stated above, programming "for the rest of us", that is, for non-professionals, allowed many thousands of personal applications to be created by individuals with a need for personal software solutions. Some are still in use today. Many hardware and software vendors provided their tutorials as HyperCard stacks, since the application was bundled with all Macs. ===Externals=== The power of HyperCard could be increased significantly through the use of '''external command''' and '''external function''' modules, more commonly known as '''XCMD'''s and '''XFCN'''s. These were code libraries packaged in a [[resource fork]] that integrated into either the system generally or the HyperTalk language specifically; this was an early example of the [[plug-in]] concept. Unlike conventional plug-ins, these did not require separate installation before they were available for use; they could be included in a stack, where they were directly available to scripts in that stack. During HyperCard's peak popularity in the late 1980s, a whole ecosystem of vendors offered thousands of these externals for everything from HyperTalk compilers to graphing systems, database access, internet connectivity, and animation. Oracle offered an XCMD that allowed HyperCard to directly query Oracle databases on any platform. This was later superseded by Oracle's [[Oracle Card]] product. BeeHive Technologies offered a hardware interface that allowed the computer to control external devices. Connected via the ADB bus, this instrument could "read" the state of connected external switches or "write" digital outputs to a multitude of devices. Externals allow access to the Macintosh Toolbox, which contained many lower level commands and functions not native to HyperTalk, such as control of the serial and [[apple desktop bus|ADB]] ports. ===Access Control=== Typing <code>set userlevel to 5</code> into the Message box would enable you to edit HyperCard documents and give 