anything is set up. A so-called [[in-circuit emulator]] (or more correctly, "JTAG adapter") uses JTAG as the transport mechanism to access on-chip [[debug]] modules inside the target [[Central processing unit|CPU]]. Those modules let software developers debug the software of an [[embedded system]] directly at the machine instruction level when needed, or (more typically) in terms of high level language source code Debug support is for many software developers the main reason to be interested in JTAG. There are entire debugging architectures built up using JTAG, such as ARM [[CoreSight]] and [[Nexus (standard)|Nexus]] (plus vendor-specific ones that may not be documented except under [[Non-disclosure agreement|NDA]]) helping move JTAG-centric debugging environments away from early processor-specific designs. Processors can normally be halted, single stepped, or let run freely. Code breakpoints are supported, both for code in RAM (often using a special machine instruction) and in ROM/flash. Data breakpoints are often available, as is bulk data download to RAM. Most designs support “halt mode debugging”, but some allow debuggers to access registers and data busses without needing to halt the core being debugged. Some toolchains can use ARM ETM modules to trigger debugger (or tracing) activity on complex hardware events, like a logic analyser programmed to ignore the first seven accesses to a register from one particular subroutine Sometimes [[FPGA]] developers also use JTAG to develop debugging tools.<ref name="fpga">[http://www.embeddeddesignindia.co.in/ART_8800568419_2800006_TA_d2d96055.HTM Select the right FPGA debug method] presents one of the models for such tools.</ref> The same JTAG techniques used to debug software running inside a [[CPU]] can help debug other digital design blocks inside an FPGA. For example, custom JTAG instructions can be provided to support reading registers built from arbitrary sets of signals inside the FPGA, providing visibility for behaviors which are invisible to boundary scan operations. Similarly, writing such registers could provide controllability which is not otherwise available. === Storing firmware === Besides debugging, another application of JTAG is allowing [[Programmer (hardware)|device programmer (hardware)]] to transfer data into internal non-volatile device memory ([[Complex programmable logic device|CPLDs]]). Some device programmers serve a double purpose for programming as well as debugging the device. In the case of FPGAs, volatile memory devices can also be programmed via the JTAG port normally during development work. In addition, newer parts, for instance [[Xilinx]] Virtex-5, have internal monitoring capability (temperature, voltage and current) accessible via the JTAG port. JTAG programmers are also used to write software and data into [[flash memory]]. This is usually done using data bus access like the CPU would use, and is sometimes actually handled by a CPU, but in other cases memory chips have JTAG interfaces themselves. Some modern debug architectures, like ARM CoreSight and [[Nexus (standard)|Nexus]], provide internal and external bus master access without needing to halt and take over a CPU. In the worst case, it is usually possible to drive external bus signals using boundary scan support. As a practical matter, when developing an embedded system, emulating the instruction store is the fastest way to close the edit-compile-test cycle loop. This is because the in-circuit emulator simulating an instruction store can be updated very quickly from the development host, via USB, say. Using eg a serial UART port and bootloader to upload firmware makes this edit-compile-test cycle quite slow. Installing firmware via JTAG is intermediate between these extremes, as well as in cost of hardware tools. === Boundary Scan Testing === {{Main|Boundary scan}} In many ICs today, all the pins that connect to electronic logic are linked together in a set called the Boundary Scan chain. By using JTAG to manipulate the scan chain's external interface (inputs and outputs to other chips) it is possible to test for certain faults, caused perhaps by bad soldering. By using JTAG to manipulate its internal interface (to on-chip registers), the [[combinational logic]] can be tested. In both cases (external and internal), this testing is done with the IC after it is mounted on the circuit card and possibly while in a functioning system. When combined with built-in self-test ([[Built-in self-test|BIST]]), the JTAG scan chain enables a low overhead, embedded solution to testing an IC for certain static faults (shorts, opens, and logic errors). The scan chain mechanism does not generally help diagnose or test for [[timing]], temperature or other dynamic operational errors that may occur. [[Test case]]s are often provided in standardized formats such as [[Serial Vector Format|SVF]], or its binary sibling XSVF, and used in production tests. The ability to perform such testing on finished boards is an essential part of [[Design For Test]] in today's products, increasing the number of faults that can be found before products ship to customers. ==Electrical characteristics== A JTAG interface is a special four/five-pin interface added to a chip, designed so that multiple chips on a board can have their JTAG lines [[Daisy chain (electrical engineering)|daisy-chained]] together if specific conditions are met,<ref>[http://www.jtagtest.com/faq/jtag-ieee-1149-1/under-what-conditions-can-i-daisy-chain-jtag FAQ: Under what conditions can I daisy-chain JTAG?]</ref> and a [[test probe]] need only connect to a single "JTAG port" to have access to all chips on a [[circuit board]]. The connector pins are #'''TDI''' (Test Data In) #'''TDO''' (Test Data Out) #'''TCK''' (Test Clock) #'''TMS''' (Test Mode Select) #'''TRST''' (Test Reset) optional. Test reset signal is not shown in the image. [[Image:Jtag chain.svg|center|Example of JTAG chain]] Since only one data line is available, the protocol is [[Serial communications|serial]]. The clock input is at the TCK pin. Clocking changes on TMS steps through a standardized JTAG [[state machine]]. The JTAG state machine can reset, access an instruction register, or access data selected by the instruction register. One bit of data is transferred in and out per TCK clock pulse at the TDI and TDO pins, respectively. Different instructions can be loaded. Instructions for typical ICs might read the chip ID, sample input pins, drive (or float) output pins, manipulate chip functions, or bypass (pipe TDI to TDO to logically shorten chains of multiple chips). The operating frequency of TCK varies depending on all chips in the chain (lowest speed must be used), but it is 