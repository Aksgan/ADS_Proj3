is capable of loading i386 modules and device drivers and supports 64-bit linux applications in user mode. <ref>http://www.linuxpae64.org</ref> == References == <references/> {{DEFAULTSORT:Linuxpae64}} [[Category:Linux]] {{Linux-stub}}</text> </page> <page> <id>21833</id> <title>Linux Kernel API</title> <text>{{multiple issues|unreferenced=July 2009|orphan=January 2008}} The '''Linux Kernel API''' is an [[application programming interface]] providing a uniform method for [[device driver]]s and other low-level software written for the [[Linux kernel]] to access system resources and services. == References == {{reflist}} == External links == * [http://www.gnugeneration.com/books/linux/2.6.20/kernel-api/ The Linux Kernel API] * [http://kernelbook.sourceforge.net/kernel-api.html/ The Linux Kernel API from the Kernelbook project] * [http://www.makelinux.net/kernel_map Interactive Linux kernel map] with main API functions and structures * [http://www.makelinux.net/ldd3 Linux Device Drivers], 3rd edition * [http://isis.poly.edu/kulesh/stuff/src/klist/ Linux Kernel Linked List Explained] * [http://www.kroah.com/log/linux/stable_api_nonsense.html Greg K-H's monkey log] explaining why Linux does not have a stable in-kernel interface. {{DEFAULTSORT:Linux Kernel Api}} [[Category:Linux]] {{Linux-stub}}</text> </page> <page> <id>21868</id> <title>Liquid Computing</title> <text>{{Orphan|date=August 2009}} {{Infobox Company | <!-- [[Wikipedia:WikiProject Companies]] template --> | company_name = Liquid Computing Corporation | company_type = [[Private company|Private]] | foundation = [[Ottawa]], [[Ontario]] (2003) | location_city = [[Ottawa]], [[Ontario]] | location_country = Canada | industry = [[Unified Computing]] | products = See [http://liquidcomputing.com/products/index.php] | homepage = [http://www.liquidcomputing.com/home/home.php www.liquidcomputing.com] }} [[Image:LiquidLogo Black.jpgâ€Ž|thumb|alt=Loiquid Computing Logo.]] '''Liquid Computing''' provides "unified computing infrastructure for the dynamic data center". The company claimed LiquidIQ and Liquid Elements unified computing solutions drove down the time and costs of managing IT infrastructure through unified software-based control of [[Server (computing)|servers]], [[computer data storage|storage]], and [[Computer network|networking]] resources. The company had customers in [[North America]] and established partnerships with companies such as [[Intel]], [[Microsoft]], [[VMWare]], [[Oracle Corporation|Oracle]], [[RedHat]], [[NetApp]] and [[AMD]]. ==Corporate Information== ===Office Locations=== The Liquid Computing Corporation was Headquartered in [[Ottawa]], [[Canada]] with U.S. offices. ===Investors=== The following Investors have funded Liquid Computing: * '''[http://www.vengrowth.com VenGrowth]''' * '''[http://www.ataventures.com ATA Ventures]''' * '''[[BDC]] (Business Development Bank of Canada)''' * '''[[EDC]] (Export Development Canada)''' * Axis Capital * Newbury Ventures ===History=== * '''2003''' - Liquid Computing is founded by Brian Hurley and Mike Kemp, two Canadian engineers from telecom equipment maker Nortel with experience building supercomputers for the U.S. government's Defense Advance Research Project Agency ([[DARPA]]). * '''2006''' - LiquidIQ 1.0 is introduced for High-Performance Computing using its own interconnect scheme coupled with [[AMD]]'s [[HyperTransport]] architecture and running a modified version of [[Red Hat]] [[Linux]]. * '''2008''' - LiquidIQ 2.0 is released; a [[unified computing]] system that combines standard physical data center resources, such as servers, switching, operating systems, network interfaces and storage, with management and control software. * '''2009''' - The company announces LiquidIQ 3.0 unified computing system powered by [[Intel]] [[Xeon 5500]] ([[Nehalem]]) Series Processors. * '''Q4 2009''' - The company introduces [http://www.liquidcomputing.com/products/liquid-elements.php Liquid Elements] , a unified computing solution that extends the power of unified computing across datacenter hardware from leading vendors. Current solution configuration combines with [http://www.intel.com/products/server/systems/SR1680MV/SR1680MV-overview.htm Intel Server System SR1680MV] and NetApp storage. * '''February 2010''' - The company shuts down. ==References== * [http://gigaom.com/2009/11/04/if-the-data-center-is-the-computer-the-fight-is-on-to-control-the-ecosystem/ If the Data Center Is the Computer the Fight Is on to Control the Ecosystem] &ndash; GigaOM * [http://www.networkcomputing.com/data-center/a-true-datacenter-in-a-box.php A True Datacenter In A Box] &ndash; Network Computing * [http://www.theregister.co.uk/2009/11/06/liquid_computing_elements/ Liquid to float slushy Intel servers] &ndash; The Register * [http://www.ottawacitizen.com/business/Fast+growing+Liquid+Computing+watershed+moment/1907037/story.html Fast-growing Liquid Computing at a 'watershed moment'] &ndash; Ottawa Citizen * [http://www.theregister.co.uk/2009/08/05/liquid_computing_update/ Can Liquid Computing ride Cisco's California coattails?] &ndash; The Register * [http://www.itbusinessedge.com/cm/community/features/interviews/blog/the-liquid-approach-to-unified-computing/?cs=33935 The Liquid Approach To Unified Computing] &ndash; ITBusinessEdge * [http://www.networkworld.com/supp/2009/ndc4/061509-data-center-liquid.html Liquid Computing - fast out of the starting gate] &ndash; Network World * [http://liquidcomputing.com/downloads/reports/451-group-impact-report.pdf 451 Group Impact Report] ==External links== * [http://www.liquidcomputing.com Liquid Computing] &ndash; Company website. [[Category:Software companies of Canada]] [[Category:Servers]]</text> </page> <page> <id>21877</id> <title>Liskov substitution principle</title> <text>'''Substitutability''' is a principle in [[object-oriented programming]]. It states that, if S is a [[subtype]] of T, then objects of [[datatype|type]] T in a [[computer program]] may be replaced with objects of type S (i.e., objects of type S may be ''substituted'' for objects of type T), without altering any of the desirable properties of that program (correctness, task performed, etc.). More formally, the '''Liskov substitution principle''' ('''LSP''') is a particular definition of a [[subtyping]] relation, called '''(strong) behavioral subtyping''', that was initially introduced by [[Barbara Liskov]] in a 1987 conference keynote address entitled ''Data abstraction and hierarchy''. It is a [[Formal semantics of programming languages|semantic]] rather than merely syntactic relation because it intends to guarantee semantic interoperability of [[data type|types]] in a hierarchy, [[Object (computer science)|object type]]s in particular. Liskov and [[Jeannette Wing]] formulated the principle succinctly in a 1994 paper as follows: :''Let <math>q(x)</math> be a property provable about objects <math>x</math> of type <math>T</math>. Then <math>q(y)</math> should be true for objects <math>y</math> of type <math>S</math> where <math>S</math> is a subtype of <math>T</math>.'' In the same paper, Liskov and Wing detailed their notion of behavioral subtyping in an extension of [[Hoare logic]], which bears a certain resemblance with [[Bertrand Meyer]]'s [[Design by Contract]] in that it considers the interaction of subtyping with pre- and postconditions. == The principle == Liskov's notion of a behavioral subtype defines a notion of substitutability for [[mutable]] objects; that is, if S is a subtype of T, then objects of type T in a program may be replaced with objects of type S without altering any of the desirable properties of that program (e.g., [[correctness (computer science)|correctness]]). Behavioral subtyping is a stronger notion than typical [[subtyping of functions]] defined in [[type theory]], which relies only on the [[covariance and contravariance (computer science)|contravariance]] of argument types and [[covariance and contravariance (computer science)|covariance]] of the return type. Behavioral subtyping is trivially [[Undecidable problem|undecidable]] in general: if ''q'' is the property "method for [[halting problem|always terminates]]", then it's impossible for a program (compiler) to verify that it holds true for some subtype ''S'' of ''T'' even if ''q'' does hold for ''T''. The principle is useful however in reasoning about the design of class hierarchies. Liskov's principle imposes some standard requirements on signatures that have been adopted in newer object-oriented programming languages (usually at the level of classes rather than types - see [[Subtype#Subtyping_schemes|nominal vs. structural subtyping]] for the distinction): 