industrial [[plasma source]]s. It essentially consists of two metal [[electrode]]s separated by a small distance, placed in a reactor. The gas pressure in the reactor can be lower than atmosphere or it can be [[Atmosphere (unit)|atmospheric]]. A typical CCP system is driven by a single [[Radio frequency|radio-frequency]] (RF) power supply, typically at 13.56 MHz<ref>UK Wireless Telegraphy (Short Range Devices) (Exemption) Regulations 1993 [http://www.opsi.gov.uk/si/si1993/Uksi_19931591_en_2.htm]</ref>. One of two electrodes is connected to the power supply, and the other one is [[Ground (electricity)|grounded]]. As this configuration is similar in principle to a [[capacitor]] in an electric circuit, the plasma formed in this configuration is called a capacitively coupled plasma. When an [[electric field]] is generated between electrodes, atoms are ionized and release electrons. The [[electron]]s in the gas are accelerated by the RF field and can ionize the gas directly or indirectly by [[collision]]s, producing [[secondary electrons]]. When the electric field is strong enough, it can lead to what is known as [[electron avalanche]]. After [[avalanche breakdown]], the gas becomes electrically [[conductive]] due to abundant free electrons. Often it accompanies light emission from excited atoms or molecules in the gas. When visible light is produced, [[Plasma (physics)|plasma]] generation can be indirectly observed even with bare eyes. A variation on capacitively coupled plasma involves isolating one of the electrodes, usually with a [[capacitor]]. The capacitor appears like a [[short circuit]] to the high frequency RF field, but like an [[open circuit]] to [[direct current|DC]] field. Electrons impinge on the electrode in the [[Debye sheath|sheath]], and the electrode quickly acquires a negative charge (or self-bias) because the capacitor does not allow it to discharge to ground. This sets up a secondary, DC field across the plasma in addition to the [[alternating current|AC]] field. Massive [[ion]]s are unable to react to the quickly changing AC field, but the strong, persistent DC field accelerates them toward the self-biased electrode. These energetic ions are exploited in many [[microfabrication]] processes (see [[Reactive-ion etching|RIE]]) by placing a substrate on the isolated (self-biased) electrode. CCPs have wide applications in the semiconductor processing industry for [[thin film deposition]] (see [[sputtering]], [[PECVD]]) and [[Etching (microfabrication)#Plasma_etching|etching]]. ==See also== *[[Inductively coupled plasma]] *[[Plasma etching]] *[[Plasma (physics)]] *[[Multipactor effect]] ==References== <references/> {{Refimprove|date=April 2008}} ==External links== {{DEFAULTSORT:Capacitively Coupled Plasma}} [[Category:Plasma physics]] [[Category:Electronics manufacturing]] {{tech-stub}} [[ja:容量結合プラズマ]]</text> </page> <page> <id>5461</id> <title>Capistrano</title> <text>{{about|the deployment script}} {{Infobox Software | name = Capistrano | logo = | screenshot = | caption = | collapsible = | author = Jamis Buck | developer = | released = | latest release version = 2.5.15 | latest release date = 14 Feb. 2010 | latest preview version = | latest preview date = | frequently updated = yes | programming language = Ruby | operating system = POSIX (Linux, OpenBSD, Mac OS X) | platform = | size = | language = | status = | genre = Deployment Tool | license = MIT | website = http://www.capify.org/ }} '''Capistrano''' is an [[open source]] tool for running scripts on multiple servers; its main use is deploying [[web application]]s. It automates the process of making a new version of an application available on one or more [[web server]]s, including supporting tasks such as changing databases. Capistrano is written in the [[Ruby (programming language)|Ruby language]] and is distributed using the [[RubyGems]] distribution channel. It is an outgrowth of the [[Ruby on Rails]] web application framework, but has also been used to deploy web applications written using other frameworks, including ones written in [[PHP]]. Capistrano is implemented primarily for use on the [[Bash (Unix shell)|bash]] command line. Users of the ''Ruby on Rails'' framework may choose from many [[Capistrano recipes]]; e.g. to deploy current changes to the web application or roll back to the previous deployment state. Originally called SwitchTower, the name was changed to Capistrano in March 2006 because of a trademark conflict. The original author, Jamis Buck, announced on February 24, 2009 that he is no longer the maintainer of the project.<ref>http://weblog.jamisbuck.org/2009/2/25/net-ssh-capistrano-and-saying-goodbye</ref> == Internals == Capistrano is a utility and framework for executing commands in parallel on multiple remote machines, via SSH. It uses a simple [[Domain-specific programming language|Domain Specific Language]] borrowed in part from the tool [[Rake (software)|rake]]. Rake is similar to ''make'' in the [[C (programming language)|C]] world and allows you to define tasks, which may be applied to machines in certain roles. It also supports tunneling connections via some gateway machine to allow operations to be performed behind VPNs and firewalls. Capistrano was originally designed to simplify and automate deployment of web applications to distributed environments, and originally came bundled with a set of tasks designed for deploying Rails applications. The deployment tasks are now (as of Capistrano 2.0) opt-in and require clients to explicitly put "load ‘deploy’" in their recipes. <ref>http://github.com/jamis/capistrano/tree/master/README.rdoc</ref> == Further reading == * {{cite book | url = http://pragprog.com/titles/fr_deploy/deploying-rails-applications | title = Deploying Rails Applications: A Step-by-Step Guide | isbn = 978-0-9787392-0-1 | month = May | year = 2008 | first = Ezra | last = Zygmuntowicz | coauthors = Bruce Tate; Clinton Begin }} == References == {{reflist}} == External links == * [http://www.capify.org/ Official website] * [http://wiki.capify.org/index.php/Main_Page Capistrano Wiki Documentation] * [http://capify.org/2008/7/10/capistrano-links-on-del-icio-us Official Link collection] * [http://rubyforge.org/projects/capistrano/ Capistrano's Rubyforge.org project] * [http://www.deprec.org/ deprec project: Deployment Recipes for capistrano] * [http://github.com/jamis/capistrano/tree/master/CHANGELOG.rdoc Capistrano Changelog & Source Code] [[Category:Web applications]] [[Category:Free software programmed in Ruby]] [[Category:Ruby programming language]] {{web-software-stub}} [[zh-yue:Capistrano]]</text> </page> <page> <id>5485</id> <title>Card image</title> <text>A '''card image''' is an archaic term for an [[ASCII]] [[string (computer science)|string]], usually 80 [[byte]]s in length. "Card image" refers to a [[punched card]]. IBM cards were 80 characters in length, UNIVAC cards were 90 characters. A single card typically held a single line of text, for example a line of [[FORTRAN]] code. Many data formats, such as the [[FITS]] [[image file]] format, still use card images as basic building blocks -- even though punched cards are now mostly obsolete. ==External links== * [http://www.ietf.org/rfc/rfc678.txt RFC 678: Standard File Formats]. The card image format is defined in the section "Standard Formats" of this [[Request 