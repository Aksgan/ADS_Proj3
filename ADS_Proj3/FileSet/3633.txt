[[QP (framework)|QP state machine frameworks]]. QM provides graphical [[UML state machine]] diagram editor and generates production-quality, [[Software portability|portable]], and human-readable [[C (programming language)|C]] or [[C++]] code that is 100% [[Traceability|traceable]] from the design. == Description == [[Image:QM_gui.jpg|thumb|240px|QM user interface]] [[Image:QM_code_gen.jpg|thumb|240px|QM code generation]] [[Image:QM_emf_support.jpg|thumb|240px|copying diagrams from QM to Open Office in EMF vector format]] The main objective of QM is to empower the software developers without standing in their way. The tool achieves this at several levels. At the high level, QM gives the users complete control over all aspects of their design, both the logical structure and physical partitioning into directories and files. The tool respects the user's design decisions and lets the user determine the generated code structure, directory names, file names, and model elements that go into every file. The users can mix their own code with the synthesized code and use QM to generate as much or as little of the overall code as they see fit. At the low level, QM respects the graphical layout as much as possible and will not re-attach or re-route connectors, resize nodes, or adjust text annotations. The users don't need to "fight" the tool. QM is designed as a strictly forward-engineering tool without [[Reverse engineering|reverse-engineering]] capabilities. This means that the code generated by QM is not to be modified in any way, because the changes won't be incorporated back into the model. However, the tool provides a simple mechanism to very quickly locate any model element from any third-party editor by copying special comments placed in the synthesized code into the [[Clipboard (software)|clipboard]] and pasting them into the tool. QM is designed to support fast development cycle and is very friendly to [[Revision control|version control systems]] (VCS). The QM model itself is stored in [[XML]], so it is easy to maintain in a VCS. The code generator is careful not to touch files that have not changed (it always compares the generated file with the file on disk and replaces the latter only when the new file is different.) This avoids unnecessary churn of the code and avoids [[Compiler|recompilations]] to keep the [[Software development process|development cycle]] as short as possible. == Features == *Graphical modeling tool based on the [[UML state machine]] subset *[[Automatic programming|Automatic generation]] of production-quality [[C (programming language)|C]] or [[C++]] code based on the [[QP (framework)|QP state machine frameworks]] *Automatic model verification during the code generation *100% [[traceability]] from design to code *Ultimate flexibility in generated code structure *Friendly to [[Revision control|version control systems]] (VCS) *Intuitive diagramming environment for making clean, good-looking diagrams *Export of diagrams to [[Windows Metafile|EMF]] vector format for direct pasting into [[Microsoft Office|MS-Office]] and [[OpenOffice.org|Open Office]] applications *Modern user interface with [[Window manager|docking windows]] with the layout saved across sessions *State of the art editors for action code with [[Syntax highlighting|syntax highlighting]] *Undo/redo of all model edits *Quick [[Clipboard (software)|clipboard]]-based navigation between the model and third-party tools *Support for user-generated model templates *Ready-made project examples and online tutorials == Licensing == The QM graphical UML modeling tool is free to download and free to use, but is not open source. During the installation you will need to accept a basic [[Software license agreement|End-User License Agreement]] (EULA), which legally protects Quantum Leaps from any warranty claims, prohibits removing any copyright notices from QM, selling it, and creating similar competitive products. The EULA also prohibits distributing QM from third-party websites. The only legitimate source of QM is the state-machine.com website. <!-- == References == {{reflist}} --> == See also == *[[QP (framework)]] *[[UML state machine]] *[[UML tools]] == Related projects == *[http://www.state-machine.com state-machine.com] *[http://www.iar.com/vs [[IAR]] visualSTATE] *[[Telelogic Rhapsody|IBM Rhapsody]] *[http://trs-new.jpl.nasa.gov/dspace/bitstream/2014/41374/1/07-4374.pdf Auto-coding UML Statecharts for Flight Software] *[http://download.microtool.de/mt/pdf/company/49/ehlert_OS_embedded_06.pdf Entwicklung von Embedded Real-Time Systemen mit der UML und Quantum] *[http://www.equipmentsimulations.com/scxml2code.html Statechart XML-to-Code Generator for ActionScript] *[http://sourceforge.net/projects/rkh-reactivesys RKH - Reactive System Framework] *[http://www.distinctlymagic.com/EmbSys/ZoneTherm.html implementation of Quantum Framework (QF) combined with the Super Simple Tasker] [[Category:Free UML tools]] [[Category:Embedded systems]] [[Category:Real-time operating systems]] [[Category:Microsoft Windows]] [[Category:Free software]] [[Category:Object-oriented programming]] {{Uml-stub}}</text> </page> <page> <id>30660</id> <title>QRIO</title> <text>{{Infobox robot |name=Sony QRIO |image=Sony Qrio Robot.jpg |caption=Presentation of the Sony Qrio Robot at the [[RoboCup|RoboCup 2004]]. |manufacturer=[[Sony]] |year_of_creation=2003<ref>http://www.sony.net/SonyInfo/CorporateInfo/History/sonyhistory-j.html</ref> }} '''QRIO''' ("'''Q'''uest for cu'''RIO'''sity", originally named Sony Dream Robot or SDR) was to be a [[bipedal]] [[humanoid]] [[entertainment robot]] developed and marketed (but never sold) by [[Sony]] to follow up on the success of its [[AIBO]] toy. QRIO stood approximately 0.6 m (2 feet) tall and weighed 7.3 kg (16 pounds). QRIO's slogan was "''Makes life fun, makes you happy!''" On January 26, 2006, on the same day as it announced its discontinuation of AIBO and other products, Sony announced that it would stop development of QRIO.<ref>[http://www.macworld.com/news/2006/01/26/sony/index.php?lsrc=mwrss Macworld | Sony reports strong earnings but unplugs Aibo<!-- Bot generated title -->]</ref> Before it was cancelled, QRIO was reported to be going through numerous development, testing and scalability phases, with the intent of becoming commercially available within three or four years.{{Citation needed|date=February 2007}} ==Development== The QRIO prototypes were developed and manufactured by Sony Intelligence Dynamics Laboratory, Inc.<ref>http://www.sonyidl.jp</ref> The number of these prototypes in existence is unknown. Up to ten QRIO have been seen performing a dance routine together; this was confirmed by a Sony representative at the Museum of Science in Boston, MA on January 22, 2006. Many videos of this can be found on the web. Four fourth-generation QRIO prototype robots were featured dancing in the ''[[Hell Yes (song)|Hell Yes]]'' music video by recording artist [[Beck]]. These prototypes lacked a third camera in the center of the forehead and the improved hands and wrists which were added to later prototypes. It took programmers three weeks to program their choreography. QRIO is capable of voice and face recognition, making it able to remember people as well as their likes and dislikes. A video on QRIO's website shows it speaking with several children. QRIO can run at 23 cm/s, and is credited in [[Guinness World Records]] (2005 edition) as being the first bipedal robot capable of running (which it defines as moving while both legs are off the 