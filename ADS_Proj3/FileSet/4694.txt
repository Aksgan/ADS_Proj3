the '''join''' upon completion of the longest running statement or block between the '''fork''' and '''join'''. <source lang="verilog"> initial fork $write("A"); // Print Char A $write("B"); // Print Char B begin #1; // Wait 1 time unit $write("C");// Print Char C end join </source> The way the above is written, it is possible to have either the sequences "ABC" or "BAC" print out. The order of simulation between the first $write and the second $write depends on the simulator implementation, and may purposefully be randomized by the simulator. This allows the simulation to contain both accidental race conditions as well as intentional non-deterministic behavior. Notice that VHDL cannot dynamically spawn multiple processes like Verilog.<ref>http://www.sunburst-design.com/papers/CummingsSNUG2003Boston_SystemVerilog_VHDL.pdf</ref> == Race Conditions == The order of execution isn't always guaranteed within Verilog. This can best be illustrated by a classic example. Consider the code snippet below: <source lang="verilog"> initial a = 0; initial b = a; initial begin #1; $display("Value a=%b Value of b=%b",a,b); end </source> What will be printed out for the values of a and b? Depending on the order of execution of the initial blocks, it could be zero and zero, or alternately zero and some other arbitrary uninitialized value. The $display statement will always execute after both assignment blocks have completed, due to the #1 delay. == Operators == Note: these operators are NOT shown in order of precedence. {| class=wikitable |- ! Operator type || Operator symbols || Operation performed |- | rowspan=5|Bitwise || ~ || 1's complement |- | & || Bitwise AND |- | <nowiki>|</nowiki> || Bitwise OR |- | ^ || Bitwise XOR |- | ~^ or ^~ || Bitwise XNOR |- | rowspan=3|Logical || ! || NOT |- | && || AND |- | <nowiki>||</nowiki> || OR |- | rowspan=6|Reduction || & || Reduction AND |- | ~& || Reduction NAND |- | <nowiki>|</nowiki> || Reduction OR |- | <nowiki>~|</nowiki> || Reduction NOR |- | ^ || Reduction XOR |- | ~^ or ^~ || Reduction XNOR |- | rowspan=6|Arithmetic || + || Addition |- | - || Subtraction |- | - || 2's complement |- | * || Multiplication |- | / || Division |- | ** || exponent (*Verilog-2001) |- | rowspan=8| Relational || > || Greater than |- | < || Less than |- | >= || Greater than or equal to |- | <= || Less than or equal to |- | == || logical equality (bit-value 1'bX is removed from comparison) |- | != || Logical inequality (bit-value 1'bX is removed from comparison) |- | === || 4-state logical equality (bit-value 1'bX is taken as literal) |- | !== || 4-state Logical inequality (bit-value 1'bX is taken as literal) |- | rowspan=4| Shift || >> || Logical Right shift |- | << || Logical Left shift |- | >>> || [[Arithmetic shift|Arithmetic Right shift]] (*Verilog-2001) |- | <<< || [[Arithmetic shift|Arithmetic Left shift]] (*Verilog-2001) |- | Concatenation || { , } || Concatenation |- | Replication || {n{m}} || Replicate value m for n times |- | Conditional || ? : || Conditional |} == System tasks == System tasks are available to handle simple I/O, and various design measurement functions. All system tasks are prefixed with '''$''' to distinguish them from user tasks and functions. This section presents a short list of the most often used tasks. It is by no means a comprehensive list. * $display - Print to screen a line followed by an automatic newline. * $write - Write to screen a line without the newline. * $swrite - Print to variable a line without the newline. * $sscanf - Read from variable a format-specified string. (*Verilog-2001) * $fopen - Open a handle to a file (read or write) * $fdisplay - Write to file a line followed by an automatic newline. * $fwrite - Write to file a line without the newline. * $fscanf - Read from file a format-specified string. (*Verilog-2001) * $fclose - Close and release an open file-handle. * $readmemh - Read hex file content into a memory array. * $readmemb - Read binary file content into a memory array. * $monitor - Print out all the listed variables when any change value. * $time - Value of current simulation time. * $dumpfile - Declare the VCD ([[Value change dump|Value Change Dump]]) format output file name. * $dumpvars - Turn on and dump the variables. * $dumpports - Turn on and dump the variables in Extended-VCD format. * $random - Return a random value. == Program Language Interface (PLI) == The PLI provides a programmer with a mechanism to transfer control from Verilog to a program function written in C language. It is officially [[deprecated]] by IEEE Std 1364-2005 in favor of the newer [[Verilog Procedural Interface]], which completely replaces the PLI. The PLI enables Verilog to cooperate with other programs written in the C language such as [[test harness]]es, [[instruction set simulator]]s of a [[microcontroller]], [[debugger]]s, and so on. For example, it provides the C functions <code>tf_putlongp()</code> and <code>tf_getlongp()</code> which are used to write and read the argument of the current Verilog task or function, respectively. == Simulation software == For information on Verilog simulators, see the [[list of Verilog simulators]]. == See also == === Additional material === * [[List of Verilog simulators]] * [[Waveform viewer]] * [[SystemVerilog DPI|SystemVerilog Direct Programming Interface (DPI)]] * [[Verilog Procedural Interface|Verilog Procedural Interface (VPI)]] === Related languages === * [[VHDL]] * [[SystemC]] * [[SystemVerilog]] - Note SystemVerilog 2009 is the "newest" Verilog. * [[OpenVera]] * [[Specman E]] * [[Property Specification Language]] * [[JHDL]] == External links == {{Wikibooks|Programmable Logic/Verilog}} ===Tutorials and General Resources=== * {{cite news|title=Comparing Verilog to VHDL Syntactically and Semantically|author=Johan Sandstrom|publisher=EE Times|date=October 1995|work=Integrated System Design|url=http://www.sandstrom.org/systemde.htm}} — Sandstrom presents a table relating VHDL constructs to Verilog constructs. * [http://www.asic-world.com/verilog/index.html Asic-World] – Extensive free online tutorial with many examples. * {{cite journal|url=http://www.eda.org/rassp/vhdl/guidelines/vlogqrc.pdf|title=Verilog HDL quick reference card|publisher=Qualis Design Corporation|author=Qualis Design Corporation|date=20 July 2000|version=1.1}} * [http://www.sutherland-hdl.com/online_verilog_ref_guide/vlog_ref_top.html Online Verilog-1995 Quick Reference Guide] – Stuart Sutherland of Sutherland HDL, 