are thereby able to execute inside any target process to spoof it; others with sufficient privileges simply overwrite the memory of a target application. Injection mechanisms include:<ref name="McAfee2"/> *Use of vendor-supplied application extensions. For example, [[Windows Explorer]] has public interfaces that allow third parties to extend its functionality. *Interception of [[Message passing|messages]]. *[[Debugger]]s. *Exploitation of [[Vulnerability (computing)|security vulnerabilities]]. *Function [[hooking]] or [[patching]] of commonly used APIs, for example, to mask a running process or file that resides on a filesystem.<ref>{{cite journal|journal=[[Phrack]]|url=http://www.phrack.org/issues.html?issue=62&id=12#article|volume=62|issue=12|title= NTIllusion: A portable Win32 userland rootkit|author=Kdm}}</ref> {{quote|text=...since user mode applications all run in their own memory space, the rootkit needs to perform this patching in the memory space of every running application. In addition, the rootkit needs to monitor the system for any new applications that execute and patch those programs' memory space before they fully execute.|sign=Windows Rootkit Overview|source=Symantec<ref name="Symantec"/>}} ===Kernel-mode=== Kernel-mode rootkits run with the highest operating system privileges ([[Ring (computer security)|Ring 0]]) by adding code or replacing portions of the core operating system, including both the [[kernel (computer science)|kernel]] and associated [[device driver]]s. Most operating systems support kernel-mode device drivers, which execute with the same privileges as the operating system itself. As such, many kernel-mode rootkits are developed as device drivers or loadable modules, such as [[Module (Linux)|loadable kernel modules]] in [[Linux]] or [[device driver]]s in [[Microsoft Windows]]. This class of rootkit has unrestricted security access, but is more difficult to write.<ref name="UAMT"/> The complexity makes bugs common, and any bugs in code operating at the kernel level may seriously impact system stability, leading to discovery of the rootkit.<ref name="UAMT"/> One of the first widely-known kernel rootkits was developed for [[Windows NT 4.0]] and released in [[Phrack]] magazine in 1999 by [[Greg Hoglund]].<ref>{{cite journal|journal=[[Phrack]]|title=A *REAL* NT Rootkit, Patching the NT Kernel|first=Greg |last = Hoglund|url=http://phrack.org/issues.html?issue=55&id=5| date=1999-09-09|issue=55|volume=9| accessdate=2010-11-21}}</ref><ref>{{cite web|url=http://www.net-security.org/article.php?id=1173&p=1|title=Rootkit Evolution|first=Alisa |last=Shevchenko|work=Help Net Security |publisher = Help Net Security|date=2008-09-01|page=2}}</ref><ref>{{cite report|url=http://www.megasecurity.org/papers/Rootkits.pdf|title=An Overview of Unix Rootkits|authorlink=Anton Chuvakin|last=Chuvakin | first = Anton |date=2003-02-02|accessdate=2010-11-21 | publisher = iDEFENSE | location = Chantilly, Virginia | format=PDF }}</ref> Kernel rootkits can be especially difficult to detect and remove because they operate at the same [[Ring (computer security)|security level]] as the operating system itself, and are thus able to intercept or subvert the most trusted operating system operations. Any software, such as [[antivirus software]], running on the compromised system is equally vulnerable.<ref>{{cite web|url=http://www.symantec.com/connect/articles/windows-rootkits-2005-part-two|title=Windows Rootkits of 2005, Part Two|last=Butler|first=James | last2= Sparks | first2 = Sherri | work = Symantec Connect |publisher=Symantec |date=2005-11-16|accessdate=2010-11-13}}</ref> In this situation, no part of the system can be trusted. A rootkit can modify data structures in the Windows kernel using a method known as ''direct kernel object modification'' (DKOM).<ref>{{cite web|url=http://www.symantec.com/connect/articles/windows-rootkits-2005-part-one|title=Windows Rootkits of 2005, Part One|publisher=Symantec|last=Butler|first=James | last2= Sparks | first2 = Sherri | work = Symantec Connect |date=2005-11-03|accessdate=2010-11-12}}</ref> This method can hook kernel functions in the System Service Descriptor Table (SSDT), or modify the gates between user mode and kernel mode, in order to cloak itself.<ref name="Symantec"/> Similarly for the [[Linux]] operating system, a rootkit can modify the ''system call table'' to subvert kernel functionality.<ref>{{cite web|url=http://www.symantec.com/connect/articles/detecting-rootkits-and-kernel-level-compromises-linux|publisher=[[Symantec]]|accessdate=2010-11-23|title=Detecting Rootkits And Kernel-level Compromises In Linux|date=2004-11-17|first=Mariusz|last=Burdach}}</ref> Operating systems are evolving to counter the threat of kernel-mode rootkits. For example, 64-bit editions of Microsoft Windows now implement mandatory signing of all kernel-level drivers in order to make it more difficult for untrusted code to execute with the highest privileges in a system.<ref>{{cite web|url=http://www.microsoft.com/whdc/winlogo/drvsign/drvsign.mspx|title=Driver Signing Requirements for Windows|publisher=[[Microsoft]]|accessdate=2008-07-06}}</ref> ===={{anchor|bootkit}}Bootkits==== A kernel-mode rootkit variant called a '''bootkit''' is used predominantly to attack [[full disk encryption]] systems, for example as in the "Evil Maid Attack", in which a bootkit replaces the legitimate [[booting|boot loader]] with one controlled by an attacker; typically the malware loader persists through the transition to [[protected mode]] when the kernel has loaded.<ref>{{cite web|url=http://www.eeye.com/Resources/Security-Center/Research/Tools/BootRoot|title=Bootroot|publisher=[[eEye Digital Security]]|date=2007-05-09|accessdate=2010-11-23|last=Soeder|first=Derek|last2=Permeh|first2=Ryan}}</ref><ref>{{cite web| url=http://www.schneier.com/blog/archives/2009/10/evil_maid_attac.html |authorlink=Bruce Schneier|last=Schneier | first = Bruce |title='Evil Maid' Attacks on Encrypted Hard Drives|date=2009-10-23|accessdate=2009-11-07 }}</ref><ref name="kumar-vbootkit">{{cite conference | url = https://www.blackhat.com/presentations/bh-europe-07/Kumar/Whitepaper/bh-eu-07-Kumar-WP-apr19.pdf | title = Vbootkit: Compromising Windows Vista Security | last = Kumar | first = Nitin | last2 = Kumar | first2 = Vipin | year = 2007 | conference = Black Hat Europe 2007 | conferenceurl = http://www.blackhat.com/html/bh-media-archives/bh-archives-2007.html#eu_07 | format = PDF }}</ref><ref>{{cite web |url=http://www.nvlabs.in/archives/5-BOOT-KIT-Custom-boot-sector-based-Windows-2000XP2003-Subversion.html |title=BOOT KIT: Custom boot sector based Windows 2000/XP/2003 Subversion |date=2007-02-04 |accessdate=2010-11-21 | work=NVlabs}}</ref> For example, the "Stoned Bootkit" subverts the system by using a compromised [[Booting|boot loader]] to intercept encryption keys and passwords.<ref>{{cite web|url=http://www.stoned-vienna.com/|accessdate=2009-11-07|date=2009-10-19 |title=Stoned Bootkit |publisher=Peter Kleissner|last=Kleissner| first=Peter }}{{Self-published inline|date=November 2010}}</ref> More recently, the Alureon rootkit has successfully subverted the requirement for 64-bit kernel-mode driver signing in [[Windows 7]] by modifying the [[master boot record]].<ref>{{cite news|url=http://www.theregister.co.uk/2010/11/16/tdl_rootkit_does_64_bit_windows/|title=World's Most Advanced Rootkit Penetrates 64-bit Windows |publisher=[[The Register]]|date=2011-11-16|accessdate=2010-11-22|last=Goodin|first=Dan}}</ref> The only known defenses against bootkit attacks are the prevention of unauthorized physical access to the system—a problem for portable computers—or the use of a [[Trusted Platform Module]] configured to protect the boot path.<ref>{{cite book|url=http://books.google.com.au/books?id=-bkRryv377QC&pg=PA371&lpg=PA371&dq=TPM+rootkit+boot+sector&source=bl&ots=3MQqvJ-O3B|title=Hacking Exposed Windows: Windows Security Secrets & Solutions|first=Joel|last=Scambray|first2=Stuart|last2=McClure|publisher=McGraw-Hill Professional|year=2007|isbn=007149426X|pages=pp. 371–372}}</ref> ===Hypervisor level=== Rootkits have been created as Type II [[Hypervisor]]s in academia as proofs of concept. By exploiting hardware virtualization features such as [[x86 virtualization#Intel Virtualization Technology for x86 (Intel VT-x)|Intel VT]] or [[x86 virtualization#AMD virtualization (AMD-V)|AMD-V]], this type of rootkit runs in Ring -1 and hosts the target operating system as a [[virtual machine]], thereby enabling the rootkit to intercept hardware calls made by the original operating system.<ref name="Harris">{{Cite document|url=http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.8832&rep=rep1&type=pdf|accessdate=2010-11-21| doi = 10.1.1.90.8832 |title=An Introduction to Hardware-Assisted Virtual Machine (HVM) Rootkits |last = Myers | first = Michael | last2 = Youndt | first2= Stephen |publisher=Crucial Security | date = 2007-08-07 | format=PDF|postscript=<!-- Bot inserted parameter. Either remove it; or change its value to "." for the cite to end in a ".", as necessary. -->{{inconsistent citations}} }}</ref> Unlike normal hypervisors, they do not have to load before the operating system, but can load into an operating system before promoting it into a virtual machine.<ref name="Harris"/> A hypervisor rootkit does not have to make any modifications to the kernel of the target to subvert it; however, that does not mean that it cannot be detected by the guest operating system. For example, timing differences 