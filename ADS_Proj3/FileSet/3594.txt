new open-source visual programming language to serve as Prograph's successor, but with the advent of Andescotia's Marten visual programming environment, participation in the group essentially ceased. ==Description== [[Image:Prograph object types.PNG|thumb|192px|left|Prograph objects. All images courtesy MacTech]]During the 1970s program complexity was growing considerably, but the tools used to write programs were generally similar to those used in the 1960s. This led to problems when working on larger projects, which would become so complex that even simple changes could have side effects that are difficult to fully understand. Considerable research into the problem led many to feel that the problem was that existing programming systems focused on the logic of the program, while in reality the purpose of a program was to manipulate data. If the data being manipulated is the important aspect of the program, why isn't the data the "first class citizen" of the programming language? Working on that basis, a number of new programming systems evolved, including [[object-oriented programming]] and [[dataflow programming]]. Prograph took these concept further, introducing a combination of object-oriented methodologies and a completely visual environment for programming. Objects are represented by hexagons with two sides, one containing the data fields, the other the methods that operate on them. Double-clicking on either side would open a window showing the details for that object; for instance, opening the variables side would show class variables at the top and instance variables below. Double-clicking the method side shows the methods implemented in this class, as well as those inherited from the superclass. When a method itself is double-clicked, it opens into another window displaying the logic. [[Image:Prograph database operation.PNG|thumb|200px|right|Prograph database operation. ''Method implementation'']] In Prograph a method is represented by a series of icons, each icon containing an instructions (or group of them). Within each method the flow of data is represented by lines in a [[directed graph]]. Data flows in the top of the diagram, passes through various instructions, and eventually flows back out the bottom (if there is any output). Several features of the Prograph system are evident in this picture of a database sorting operation. The upper bar shows that this method, <code>concurrent sort</code>, is being passed in a single parameter, <code>A Database Object</code>. This object is then fed, via the lines, into several operations. Three of these extract a named index (<code>indexA</code> etc.) from the object using the <code>getter</code> operation (the unconnected getter output passes on the "whole" object), and then passes the extracted index to a sort operation. The output of these sort operations are then passed, along with a reference to the original database, to the final operation, <code>update database</code>. The bar at the bottom of the picture represents the outputs of this method, and in this case there are no connections to it and so this method does not return a value. Also note that although this is a method of some class, there is no <code>self</code>; if self is needed, it can be provided as an input or looked up. [[Image:Prograph operators and controls.PNG|thumb|200px|left|Prograph operators and controls]] In a dataflow language the operations can take place as soon as they have valid inputs for all of their connections. That means, in traditional terms, that each operation in this method could be carried out at the same time. In the database example, all of the sorts could take place at the same time if the computer were capable of supplying the data. Dataflow languages tend to be inherently concurrent, meaning they are capable of running on [[multiprocessor]] systems "naturally", one of the reasons that it garnered so much interest in the 1980s. Loops and branches are constructed by modifying operations with annotations. For instance, a loop that calls the <code>doit</code> method on a list of input data is constructed by first dragging in the doit operator, then attaching the loop modifier and providing the list as the input to the loop. Another annotation, "injection", allows the method itself to be provided as an input, making Prograph a [[dynamic language]] to some degree. ==Execution== The integrated Prograph development and execution environment also allowed for visual debugging. The usual breakpoint and single-step mechanisms were supported. Each operation in a [[data flow diagram]] was visually highlighted as it executed. A tooltip-like mechanism displayed data values when the mouse was held over a data-link when stopped in debug mode. Visual display of the execution stack allowed for both roll-back and roll-forward execution. For many users the visual execution aspects of the language were as important as its edit-time graphical facilities. The most important run-time debugging feature was the ability to change the code on the fly while debugging. This allowed for a truly unique development approach allowing bugs to be fixed while debugging without the need to recompile. ==Critique== {{Unreferenced section|date=October 2007}} Several problems with the Prograph system are also evident in this method implementation. Prograph code could be [[Comment (computer programming)|commented]] using labels. In initial versions, the majority of the included classes were unlabeled. It was often necessary to consult the documentation to determine the proper inputs to a method. This was largely addressed in subsequent versions, but the methods were never documented to the point that the comments explained how and why the methods worked. Developers had to pay attention to routing of wiring, and to commenting inputs and outputs, to keep their diagrammatic code clean. In the Prograph Database Operation example above, two of the paths cross because one of the wires from the input bar must flow to a certain input on the update operation. This could be avoided by simply dragging and repositioning the 'indexA' and 'sort' icons to be inside the leftmost wire, but in general terms there was no way to avoid this sort of literal [[spaghetti code]]. Another problem was a profusion of windows. When moving around the Prograph workspace, the IDE generally required a new window to be opened to see the contents of methods. ==See also== *[[Visual programming language]] *[[Spreadsheet 2000]], a unique [[spreadsheet]] written in Prograph 