the optional behaviour started by the Decision * '''[[Dependency (UML)|Dependency]]''' - a dependency exists between two defined elements if a change to the definition of one would result in a change to the other. In UML this is indicated by a line pointing from the dependent to the independent element. * '''[[Deployment diagram]]''' * '''Derived property''' - a property that can be calculated or inferred from other properties * '''Diagram''' - a visual representation of a subset of features of a UML Model * '''Directed relationship''' - * '''Domain''' - a logical grouping that explicitly declares a [[rule]] which defines ownership of [[object]]s based upon some [[Data type|type]] or [[property]]. ==E== * '''Edge''' - a synonym for Flow * '''Entity''' - * '''[[Enumeration]]''' - a set of constant values for a new data type * '''Event''' - when it occurs on an Object it may cause a Transition in a [[State diagram|State machine diagram]] * '''Expansion region''' - a set of Actions in an [[Activity diagram]] that occur once for each of a collection of input Tokens to the Expansion Region * '''Extend''' - * '''Exception''' - ==F== * '''File''' - * '''Final state''' - the [[State (computer science)|state]] at which an [[Object (computer science)|object]] ceases to exist * '''Flow''' - a navigational connection between two Actions * '''Flow Final''' - the point at which a Flow ends without ending the complete Activity * '''Fork''' - a point in an [[Activity diagram]] where a Flow of logic splits into several concurrent Flows (Threads) * '''Found Message''' - starting point for a [[Sequence diagram]] {{compactTOC2}} ==G== * '''[[Generalization]]''' - a relationship between a ''specific classifier'' (typically a [[Class (computer science)|class]]) to a more ''general classifier'' asserting that the ''general classifer'' contains common features among both the ''specific classifier'' and the ''general classifier''. Features include, for example, properties, and constraints. The use of generalization is often logically restricted to cases where the specific classifier is a "kind-of" or "sort-of" the general classifier: for example, a Boxer is a "kind-of" Dog. When the classifiers involved are [[software engineering]] classes, generalization usually involves reusing code; it is often implemented using [[Inheritance (computer science)|inheritance]], where the more specific code reuses the more general code. * '''Generalization Tree''' - Several specialized classifiers may point to the same general classifier, forming a generalization tree, where the general classifer contains common features shared by all the specialized versions. As generalization is a relationship, it is possible for a classifer to participate in several generalizations, often being on the specific end or on the general end, forming a [[directed acyclic graph]] (DAG) (i.e., no loops). * '''Generic''' - * '''Guard''' - a [[Boolean logic|boolean]] test that must be satisfied for a Flow of an [[activity diagram]] or a Transition of a [[State diagram|state machine diagram]] to be allowed to start ==H== * '''Hierarchy''' - * '''History pseudostate''' - points to the initial [[State (computer science)|state]] of an [[Object (computer science)|object]] where no previous state history was saved ==I== * '''Inheritance''' - where a new more specific Class derives part of its definition from an existing more general Class * '''Initial node''' - the start point of an [[Activity diagram]] * '''Initial pseudostate''' - points to the initial State of an Object * '''[[Interaction diagram]]''' * '''[[Interaction overview diagram]]''' * '''Interaction Frame''' - a section of a [[Sequence diagram]], divided into fragments, which is subject to an algorithmic Operator such as iteration, parallelism or optionality. * '''[[Interface (computer science)|Interface]]''' - a defined communication boundary. {{compactTOC2}} ==J== * '''Join''' - a point in an [[activity diagram]] where several concurrent [[flow]]s ([[Thread (computer science)|threads]]) synchronize, waiting until all are complete before continuing with a single flow ==L== * '''Lifeline''' - indicates a participating Object or Part in a [[Sequence diagram]]. The Lifeline may show activation, Object creation, and Object deletion. * '''Link''' - a relationship between objects. While an Object is an instantiation of a Class a Link can be seen as an instantiation of an Association. ==M== * '''Merge''' - a point in an [[Activity diagram]] marking the end of the optional behavior started by a Decision * '''Message''' - a signal from one object (or similar entity) to another, often with parameters. Often implemented as a call to a Method, including the Constructor and Destructor, of an Object in a [[Sequence diagram]]. * [[Metadata]] - * [[Meta-model|Metamodel]] - * [[Meta-modeling|Metamodeling]] - * [[Meta-modeling technique|Metamodeling technique]] - * [[Meta-Object Facility]] - * '''Method''' - * '''[[Model (abstract)|Modeling]]''' - ** '''Domain''' - the representation of real world conceptual entities ** '''Design''' - the representation of software Classes and Interfaces ** '''Dynamic''' - use of Interaction diagrams to describe collaborations and behavior * model - * [[Model-driven architecture]] (MDA) - * '''[[Multiplicity (UML)|Multiplicity]]''' - a specification of the number of possible occurrences of a property, or the number of allowable elements that may participate in a given relationship. In UML 1.x, it was also possible to have a discrete list of values, but this was eliminated in UML 2.0. ** '''Mandatory''' - A required multiplicity, the lower bound is at least one, usually 1..1 or 1 ** '''Optional''' - The lower bound is at most zero, usually, 0..1 ** '''Many''' - A multiplicity with no upper limit, either 0..* or * ** '''Forbidden''' - No elements allowed, 0..0 (in UML 2.2) {{compactTOC2}} ==N== * '''[[Namespace (computer science)|Namespace]]''' - a context in which an [[identifier]] exists. * '''Navigable''' - the ability for objects of a Class at one end of an Association to retrieve Objects from the other end. Associations need not be navigable. * '''Node''' - * '''Note''' - It is an explanatory part of UML models. A note is a symbol for rendering constraints and comments attached to an element. ==O== * '''Object''' - a runtime instance of a Class. Objects are rarely shown on diagrams (because there are usually too many) unless they are used to illustrate some scenario, test, etc. Such Objects are often shown with the Attributes of the 