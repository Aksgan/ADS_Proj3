years, [[William Opdyke]]'s 1992 Ph.D. dissertation<ref name="opdyke-thesis" /> is the first known paper to specifically examine refactoring,<ref name="etymology">[http://martinfowler.com/bliki/EtymologyOfRefactoring.html Martin Fowler, "MF Bliki: EtymologyOfRefactoring"]</ref> although all the theory and machinery have long been available as [[program transformation]] systems. All of these resources provide a catalog of common methods for refactoring; a refactoring method has a description of how to apply the [[Scientific method|method]] and [[indicator]]s for when you should (or should not) apply the method. [[Martin Fowler]]'s book ''Refactoring: Improving the Design of Existing Code''<ref name="fowler"/> is the canonical reference. The first known use of the term "refactoring" in the published literature was in a September, 1990 article by William F. Opdyke and Ralph E. Johnson.<ref name="opdyke90">{{cite conference | first = William F. | last = Opdyke | authorlink = William Opdyke | coauthors = Johnson, Ralph E. | title = Refactoring: An Aid in Designing Application Frameworks and Evolving Object-Oriented Systems | booktitle = Proceedings of the Symposium on Object Oriented Programming Emphasizing Practical Applications (SOOPPA) | publisher = ACM | year = 1990 | month = September }}</ref> Opdyke's Ph.D. thesis,<ref name="opdyke-thesis">{{cite paper | first = William F | last = Opdyke | authorlink = William Opdyke | title = Refactoring Object-Oriented Frameworks | version = Ph.D. thesis | publisher = University of Illinois at Urbana-Champaign | year = 1992 | month = June | url = ftp://st.cs.uiuc.edu/pub/papers/refactoring/opdyke-thesis.ps.Z | format = compressed Postscript | id = | accessdate = 2008-02-12 }}</ref> published in 1992, also used this term.<ref name="etymology" /> The term "factoring" has been used in the [[Forth (programming language)|Forth]] community since at least the early 1980s. Chapter Six of [[Leo Brodie]]'s book ''[[Thinking Forth]]'' (1984) is dedicated to the subject. In extreme programming, the Extract Method refactoring technique has essentially the same meaning as factoring in Forth; to break down a "word" (or [[Function (programming)|function]]) into smaller, more easily maintained functions. == Automated code refactoring == Many software [[text editor|editors]] and [[Integrated development environment|IDEs]] have automated refactoring support. Here is a list of a few of these editors, or so-called [[Refactoring Browser|refactoring browsers]]. * [[IntelliJ IDEA]] (for [[Java (programming language)|Java]]) * [[Eclipse (software)|Eclipse's]] [[Java (programming language)|Java]] Development Toolkit (JDT) * [[NetBeans]] (for Java) ** and [http://kenai.com/projects/refactoringng/ RefactoringNG], a Netbeans module for refactoring where you can write [[Source-to-source compiler|transformations]] rules of the program's [[abstract syntax tree]]. * [[Embarcadero Delphi]] * [[Visual Studio]] (for .NET) * [[JustCode]] (addon for Visual Studio) * [[ReSharper]] (addon for Visual Studio) * [[Coderush]] (addon for Visual Studio) * [[Visual Assist]] (addon for Visual Studio with refactoring support for VB, VB.NET. C# and C++) * [[DMS Software Reengineering Toolkit]] (Implements large-scale refactoring for C, C++, C#, COBOL, Java, PHP and other languages) * [[Photran]] a [[Fortran]] plugin for the [[Eclipse (software)|Eclipse IDE]] * [[SharpSort]] addin for [[Visual Studio 2008]] * [[Sigasi HDT]] (for VHDL) * [[XCode]] * [[Smalltalk Refactoring Browser]] (for [[Smalltalk]]) * [[Simplifide]] (for Verilog, VHDL and SystemVerilog) ==See also== * [[Code review]] * [[Design pattern (computer science)]] * [[Obfuscated code]] * [[Peer review]] * [[Prefactoring]] * [[Rewrite (programming)]] * [[Separation of concerns]] * [[Test-driven development]] * [[Unit testing]] * [[Code Factoring]] * [[Redesign (software)]] ==References== {{reflist|colwidth=30em}} ==Further reading== *{{cite book | first = Martin | last = Fowler | authorlink = Martin Fowler | year = 1999 | title = Refactoring. Improving the Design of Existing Code | publisher = Addison-Wesley | isbn = 0-201-48567-2 }} *{{cite book | first = William C. | last = Wake | authorlink = | year = 2003 | title = Refactoring Workbook | publisher = Addison-Wesley | isbn = 0-321-10929-5 }} * Mens, Tom and Tourwé, Tom (2004) [http://doi.ieeecomputersociety.org/10.1109/TSE.2004.1265817 ''A Survey of Software Refactoring''], IEEE Transactions on Software Engineering, February 2004 (vol. 30 no. 2), pp. 126-139 *{{cite book | first = Michael C | last = Feathers | authorlink = | year = 2004 | title = Working Effectively with Legacy Code | publisher = Prentice Hall | isbn = 0-13-117705-2 }} *{{cite book | first = Joshua | last = Kerievsky | authorlink = | year = 2004 | title = Refactoring To Patterns | publisher = Addison-Wesley | isbn = 0-321-21335-1 }} *{{cite book | first = Danijel | last = Arsenovski | authorlink = | year = 2008 | title = Professional Refactoring in Visual Basic | publisher = Wrox | isbn = 0-47-017979-1 }} *{{cite book | first = Danijel | last = Arsenovski | authorlink = | year = 2009 | title = Professional Refactoring in C# and ASP.NET | publisher = Wrox | isbn = 978-0470434529 }} *{{cite book | first = Peter | last = Ritchie | authorlink = | year = 2010 | title = Refactoring with Visual Studio 2010 | publisher = Packt | isbn = 978-1849680103 }} ==External links== *[http://c2.com/cgi/wiki?WhatIsRefactoring What Is Refactoring?] (c2.com article) *[http://www.refactoring.com/ Martin Fowler's homepage about refactoring] *[http://www.theserverside.com/articles/article.tss?l=AspectOrientedRefactoringPart1 Aspect-Oriented Refactoring] by [[Ramnivas Laddad]] *[http://csdl.computer.org/comp/trans/ts/2004/02/e2toc.htm A Survey of Software Refactoring] by [[Tom Mens]] and [[Tom Tourwé]] *[http://www.methodsandtools.com/archive/archive.php?id=4 Refactoring Java Code] *[http://industriallogic.com/xp/refactoring/catalog.html Refactoring To Patterns Catalog] *[http://www.industriallogic.com/papers/extractboolean.html Extract Boolean Variable from Conditional] (a refactoring pattern not listed in the above catalog) *[http://www.testingtv.com/2009/09/24/test-driven-development-with-refactoring/ Test-Driven Development With Refactoring] *[http://blog.symprise.net/2009/04/revisiting-fowlers-video-store-refactoring-code-reengineering-abstractions/ Revisiting Fowler’s Video Store: Refactoring Code, Refining Abstractions] [[Category:Extreme Programming]] [[Category:Refactoring]] [[Category:Technology neologisms]] [[ar:إعادة هيكلة الكود]] [[ca:Refacció]] [[cs:Refaktorování]] [[da:Refactoring]] [[de:Refactoring]] [[es:Refactorización]] [[fr:Refactorisation]] [[gl:Refactorización]] [[ko:리팩토링]] [[it:Refactoring]] [[lt:Pertvarkymas (programavimas)]] [[nl:Refactoren]] [[ja:リファクタリング (プログラミング)]] [[pl:Refaktoryzacja]] [[pt:Refatoração]] [[ru:Рефакторинг]] [[fi:Refaktorointi]] [[sv:Omstrukturering av kod]] [[uk:Рефакторинг]] [[vi:Cải tiến mã nguồn]] [[zh:代码重构]]</text> </page> <page> <id>6718</id> <title>Coding by exception</title> <text>{{Unreferenced|date=June 2009}} '''Coding by exception''' is an [[anti-pattern]] where software quickly degrades in performance and maintainability because it evolves by having special case functionality added piecemeal. This typically happens because an existing piece of software is extended to cover requirements that were not previously considered at the project's inception. This anti-pattern is unrelated to software [[exception handling]]. As a general rule, well designed software projects contain very few [[corner case]]s. There are a variety of [[Software development process|software development methodologies]] that purport to help engineers develop software that avoid these corner cases. They typically address [[Dependency 