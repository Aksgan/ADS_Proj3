An Introduction to Object-Oriented Analysis and Design and the Unified Process|isbn = 0130925691|publisher = [[Prentice Hall]]|edition = 2nd|postscript = <!--none-->}}</ref> This means that the user-defined classes (for example, new subclasses), receive messages from the predefined framework classes. Developers usually handle this by implementing [[superclass (computer science)|superclass]] [[abstract method]]s. == See also == * [[Application framework]] * [[Class (computer science)]] * [[Design pattern (computer science)]] * [[Don't repeat yourself]] * [[Enterprise Architecture framework]] * [[Implicit invocation]] * [[Programming paradigm]] * [[Web application framework]] == References == {{reflist}} [[Category:Integrated development environments]] [[Category:Software architecture]] [[Category:Object-oriented programming]] [[ar:إطار عمل (برمجة)]] [[bn:ফ্রেমওয়ার্ক]] [[ca:Framework]] [[cs:Framework]] [[da:Framework]] [[de:Framework]] [[es:Framework]] [[fa:چارچوب نرم‌افزار]] [[fr:Framework]] [[ko:소프트웨어 프레임워크]] [[id:Kerangka kerja]] [[it:Framework]] [[he:שלד תוכנה]] [[nl:Framework]] [[ja:ソフトウェアフレームワーク]] [[pl:Framework]] [[pt:Framework]] [[ru:Фреймворк]] [[simple:Framework]] [[fi:Ohjelmistokehys]] [[ta:மென்பொருள் சட்டகம்]] [[th:ซอฟต์แวร์เฟรมเวิร์ก]] [[uk:Фреймворк]] [[zh:軟體框架]]</text> </page> <page> <id>35009</id> <title>Software package (programming)</title> <text>A '''software package''' is used in [[object-oriented programming]] to name a group of related [[class (computer science)|class]]es of a program. Packages are useful to measure and control the inherent [[coupling (computer science)|coupling]] of a program. In a [[Modularity (programming)|modular]] program, even outside [[object-oriented programming]], a '''software package''' may refer to any component ([[Module (programming)|module]]) that can be integrated into the main program. Typically this is done by the [[end-user (computer science)|end user]] in a well-defined interface. In other contexts the integration must occur at [[source code]] level of a given [[programming language]]. == Import == An example of a package is the java.io [[Java package|package]] which contains or groups together all the classes in the [[Java (programming language)|Java]] programming language that aid input and output of data, such as the ''buffered reader class'' which is used to accept user input from the keyboard. When a class is imported the user is free to use as if it were in their local directory. A single class can be imported like so: <source lang="java"> import java.io.BufferedReader; import java.io.FileReader; ... BufferedReader br = new BufferedReader(new FileReader("fooo.bar")); </source> A user can also import all classes within a package by replacing the class name with a *. <source lang="java"> import java.io.*; ... BufferedReader br = new BufferedReader(new FileReader("fooo.bar")); </source> == Creating a package == Creating a package in java is as simple as placing related classes into one folder. The following package shows just how easy it is to create a package. Consider having a group of painter classes which include classes like fencePainter, housePainter, carPainter, etc. It would be nice to organize all of these classes into one package, which we will call painter. All that needs to be done is to place all of these classes into a folder called painter. Once that is done, place the following line at the top of each class. <source lang="java"> package painter; </source> Packages can also be organized further by putting then in subdirectories. In the previous example the painter package can be put in a worker package, by making it a subdirectory of a folder called worker. Then the following line of code can be added to add a class to this package. <source lang="java"> package worker.painter; </source> == References == *{{cite book | author = [[Robert Cecil Martin]] | year = 2002 | title = Agile Software Development: Principles, Patterns and Practices | publisher = Pearson Education | id = ISBN 0-13-597444-5 }} ==External links== * [http://www.oracle.com/technetwork/java/index.html/ Java.sun.com The Source for Java Developers] [[Category:Computing terminology]] {{Comp-sci-stub}} [[de:Paket (UML)]]</text> </page> <page> <id>35011</id> <title>Software patent debate</title> <text>{{For|general information on software patents|software patent}} {{Unbalanced|date=December 2007}} {{Globalize|date=June 2008}} {{Computer programs, software and patent law}} The '''software patent debate''' is the argument dealing with the extent to which it should be possible to [[software patent|patent software]] and computer-implemented inventions as a matter of [[public policy]]. Policy debate on software patents has been active for years.<ref>{{Cite book |last=Nichols |first=Kenneth |title=Inventing Software: The Rise of "computer-related" Patents |publisher=Greenwood Publishing Group |year=1998 |page=15 |isbn=1567201407}}</ref> The opponents to software patents have gained higher visibility with lower resources through the years than their pro-patent opponents.<ref>{{Cite book |last=Välimäki |first=Mikko |title=The Rise of Open Source Licensing |publisher=Turre Publishing |year=2005 |isbn=9529187793}}</ref> Arguments and critiques have been focused mostly on the economic consequences of software patents. One aspect of the debate has focused on the proposed [[European Union]] [[Proposed directive on the patentability of computer-implemented inventions|directive on the patentability of computer-implemented inventions]], also known as the "CII Directive" or the "Software Patent Directive," which was ultimately rejected by the [[European Parliament|EU Parliament]] in July 2005. == Arguments for patentability == There are several arguments commonly given in defense of software patents or in defense of the [[patentability]] of computer-implemented inventions. ===Promotes development=== *The basic principles of patent law were developed before computers were invented and have served the US for centuries. The principles serve to promote the development of useful arts.<ref>{{Cite web |url=http://www.law.cornell.edu/constitution/constitution.articlei.html |title=United States Constitution - Article I |publisher=[[Cornell Law School]] |accessdate=2008-06-19}}</ref> Supporters of software patents argue that inventions in the software arts are useful to modern life and therefore deserve the same incentive provided for inventions in other useful arts (i.e., to promote investment in research and development).{{Citation needed|date=December 2010}} ===Public disclosure=== *A patent must publicly disclose the invention and so educate the public and advance the state of the art of the invention. Thus patents accelerate software development by making previously unknown and not obvious software inventions public.{{Citation needed|date=December 2010}} *Patents must disclose how to make and use an invention in sufficient detail so that other persons of ordinary skill in the art of the invention can make and use the invention without undue experimentation.<ref>{{Cite web |url=http://uspto.gov/web/offices/pac/mpep/documents/appxl_35_U_S_C_112.htm |title=35 U.S.C. 112 Specification. - Patent Laws |accessdate=2008-06-21 |publisher=[[United States Patent Office]]}}</ref> Furthermore, patents are only valid if the inventions they disclose were not known by the public prior to the filing of the patent application, or if the inventions were not obvious to those of ordinary skill in the art at the time the patent application was filed. (US laws are somewhat different from other countries. In the U.S. the focus is on when the invention was made, not when the patent application was filed). **This is 