the [[peripheral]]s. In addition, some types of computer systems do not treat [[USB]] devices as [[hot-swappable|hot-pluggable]], which means the keyboard and mouse will not be re-detected when switching back to a particular KVM port. For these types of systems, it is necessary to implement device emulation. Standard device emulation has its limitations. When emulating a [[USB]] keyboard, mouse, and monitor it is impossible for most KVM's to simulate various different types of I/O devices specifically. As a result, [[KVM switch]]es will sometimes offer inconsistent performance and even sometimes unsolved compatibility issues with the shared keyboard, mouse, and other devices.<ref>[http://forums.microsoft.com/TechNet/ShowPost.aspx?PostID=1454220&SiteID=17 Kengsington Expert Mouse Issues. - TechNet Forums<!-- Bot generated title -->]</ref> The intent of Dynamic Device Mapping is to resolve the issues that standard device mapping sometimes faces. == Applications for USB DDM == * Sharing Touchscreen Monitor among connected systems * Integrated Multi-vendor [[Self-service kiosk|Self-service Kiosk systems]] * Secured user login by sharing USB [[Smart card]] or fingerprint/[[Biometrics]] scanner/reader'' == See also == *[[KVM switch]] *[[Display data channel]] *[[Display Control Channel]] == Notes == {{reflist}} == References == {{refbegin}} * [http://www.iogear.com/support/faq/id/10184 USB and USB Device Details] {{refend}} [[Category:Computer peripherals]] [[Category:Input/output]] [[Category:Out-of-band management]] [[de:Dynamic Device Mapping]] [[fr:Dynamic Device Mapping]] [[zh:動態裝置對映更新技術]]</text> </page> <page> <id>11246</id> <title>Dynamic enterprise</title> <text>{{Multiple issues|orphan =September 2008|advert =July 2009|notability =July 2009}} The '''Dynamic Enterprise''' is a [[Enterprise architecture]] concept based on [[Web 2.0]] technology. The Dynamic Enterprise is marked by continuous and transformative growth. The dynamic enterprise is enabled by a dynamic communications framework that interconnects networks, people, processes and knowledge. A lcatel-Lucent introduced this concept in February 2008 in Paris at its annual Forum event<ref>[http://www.alcatel-lucent.com/wps/portal/!ut/p/kcxml/04_Sj9SPykssy0xPLMnMz0vM0Y_QjzKLd4x3tXDUL8h2VAQAURh_Yw!!?LMSG_CABINET=Docs_and_Resource_Ctr&LMSG_CONTENT_FILE=News_Releases_2008/News_Article_000859.xml Alcatel-Lucent unveils “Dynamic Enterprise” at its Enterprise Forum 2008 Conference] Accessed July 31, 2009.</ref>. The Alcatel-Lucent Dynamic Communications Framework provides<ref>[http://www1.alcatel-lucent.com/enterprise/en/dynamic_enterprise/ Transforming Your Business into a Dynamic Enterprise]. Accessed July 31, 2009.</ref>: * personalized tools for collaboration * a solid intelligent infrastructure * integration of process information and communication ==Rationale== Organizations face key trends that threaten their ability to grow, retain customers, and prosper. Internally, employees are faced with ever mounting volumes of information they must review and act upon, coupled with a constant need to learn and use a multitude of new and changing tools. Externally, customer service is equally demanding. As organizations cope with this challenging environment, a new generation of employees is increasingly frustrated to find that the tools in their workplace lag behind what they are accustomed to in the consumer world. To compound the situation, market and competitive forces are constantly accelerating. These changes drive a need to transform enterprise communications–to become more dynamic. ==Dynamic Communications Framework== The Dynamic Enterprise is enabled by a Dynamic Communications Framework, a concept developed by [[Alcatel-Lucent]], that interconnects networks, people, processes and knowledge. The framework is always on, flexible, standards-based so that organizations can respond quickly to change and better harness its knowledge. == References == {{reflist}} {{Primary sources|date=March 2008}} == External links == * [http://www.alcatel-lucent.com/enterprise-forum/ Official Alcatel-Lucent Web Page] {{DEFAULTSORT:Dynamic Enterprise}} [[Category:Enterprise architecture]]</text> </page> <page> <id>11263</id> <title>Dynamic perfect hashing</title> <text>'''Dynamic perfect hashing''' is a programming technique for resolving [[collision (computer science)|collisions]] in a [[hash table]] [[data structure]].<ref name="inventor">Fredman, M. L., Komlós, J., and Szemerédi, E. 1984. Storing a Sparse Table with 0(1) Worst Case Access Time. J. ACM 31, 3 (Jun. 1984), 538-544 http://portal.acm.org/citation.cfm?id=1884#</ref><ref>Dietzfelbinger, M., Karlin, A., Mehlhorn, K., Meyer auf der Heide, F., Rohnert, H., and Tarjan, R. E. 1994. Dynamic Perfect Hashing: Upper and Lower Bounds. SIAM J. Comput. 23, 4 (Aug. 1994), 738-761. http://portal.acm.org/citation.cfm?id=182370#</ref><ref>Erik Demaine, Jeff Lind. 6.897: Advanced Data Structures. MIT Computer Science and Artificial Intelligence Laboratory. Spring 2003. http://courses.csail.mit.edu/6.897/spring03/scribe_notes/L2/lecture2.pdf</ref> In this method, the entries that hash to the same slot of the table are organized as separate second-level hash table. If there are ''k'' entries in this set, the second-level table is allocated with ''k''<sup>2</sup> slots, and its [[hash function]] is selected at random from a [[universal hash function]] set so that it is collision-free (i.e. a [[perfect hash function]]). Therefore, the lookup cost is guaranteed to be constant [[worst-case complexity|in the worst-case]]. Although each second-level table requires quadratic space, if the keys inserted into the first-level hash table are [[uniform random variable|uniformly distributed]], the structure as a whole occupies expected [[big O notation|O(''n'')]] space, since bucket sizes are small with high [[probability]].<ref name="inventor"/> If a collision occurs during the insertion of a new entry, the bucket's second-level table is rebuilt with a different randomly-selected hash function. Because the [[load factor (hash table)|load factor]] of the second-level table is kept low (1/''k''), rebuilding is infrequent, and the [[amortized analysis|amortized]] cost of insertions is low. ==References== {{reflist}} {{DEFAULTSORT:Dynamic Perfect Hashing}} [[Category:Hashing]] [[Category:Search algorithms]] {{compu-prog-stub}}</text> </page> <page> <id>11267</id> <title>Dynamic programming</title> <text>{{For|the programming paradigm|Dynamic programming language}} {{Cleanup|date=January 2010}} In [[mathematics]] and [[computer science]], '''dynamic programming''' is a method for solving complex problems by breaking them down into simpler subproblems. It is applicable to problems exhibiting the properties of [[overlapping subproblem]]s which are only slightly smaller<ref>S. Dasgupta, C.H. Papadimitriou, and U.V. Vazirani, ''''Algorithms'''', p173, available at http://www.cs.berkeley.edu/~vazirani/algorithms.html</ref> and [[optimal substructure]] (described below). When applicable, the method takes far less time than naïve methods. The key idea behind dynamic programming is quite simple. In general, to solve a given problem, we need to solve different parts of the problem (subproblems), then combine the solutions of the subproblems to reach an overall solution. Often, many of these subproblems are really the same. The dynamic programming approach seeks to solve each subproblem only once, thus saving a lot of computation. This is especially useful when the number of repeating subproblems is exponentially large. Top-down dynamic programming simply means storing the results of certain calculations, which are later used again since the completed calculation is a sub-problem of a larger calculation. Bottom-up dynamic programming involves formulating a complex calculation as a [[Recursion|recursive]] series of simpler calculations. ==History== The term ''dynamic programming'' was originally used in the 1940s by [[Richard Bellman]] to describe the process of solving problems where one needs to find the best decisions one after another. By 1953, he refined this to the 