call, it was easy to do for developers. COM+ also introduced a subscriber/publisher event mechanism called '''COM+ Events''', and provided a new way of leveraging [[Microsoft Message Queuing|MSMQ]] (inter-application asynchronous messaging) with components called '''Queued Components'''. COM+ events extend the COM+ programming model to support late-bound events or method calls between the publisher or subscriber and the event system. ===.NET=== {{Main|.NET Framework}} The COM platform has ''largely'' been superseded by the Microsoft .NET initiative, and Microsoft now focuses its [[marketing]] efforts on ''.NET.'' COM was often used to hook up complex, high performance code to front end code implemented in [[Visual Basic]] or [[Active Server Pages|ASP]]. To some extent, COM is now [[deprecation|deprecated]] in favor of .NET.<ref>[http://msdn.microsoft.com/en-us/library/bb978523.aspx Integration and Migration of COM+ services to WCF]</ref> Since .NET provides rapid development tools similar to Visual Basic for both [[Windows Forms]] and [[ASP.NET|Web Forms]] with [[just-in-time compilation]], back-end code can be implemented in any .NET Language including [[C Sharp (programming language)|C#]], [[Visual Basic.NET|Visual Basic]] and [[C++/CLI]]. Despite this, COM remains a viable technology with an important software base. As of 2009, Microsoft has no plans for discontinuing either COM or support for COM. It is also ideal for script control of applications such as Office or Internet Explorer since it provides an interface for calling COM object methods from a script rather than requiring knowing the API at compile time. The [[GUID]] system used by COM has wide uses any time a unique ID is needed. Several of the services that COM+ provides have been largely replaced by recent releases of .NET. For example, the System.Transactions namespace in .NET provides the TransactionScope class, which provides transaction management without resorting to COM+. Similarly, [[Queue (data structure)|queued components]] can be replaced by [[Windows Communication Foundation]] with an [[MSMQ]] transport. There is limited support for backward compatibility. A COM object may be used in .NET by implementing a ''runtime callable wrapper'' (RCW).<ref>[http://msdn.microsoft.com/en-us/library/8bwh56xe.aspx Runtime Callable Wrapper — MSDN Library]</ref> .NET objects that conform to certain interface restrictions may be used in COM objects by calling a ''COM callable wrapper'' (CCW).<ref>[http://msdn.microsoft.com/f07c8z1c.aspx COM callable wrapper — MSDN Library]</ref> From both the COM and .NET sides, objects using the other technology appear as native objects. See [[COM Interop]]. WCF(Window Communication Foundation) solves a number of COM's remote execution shortcomings, allowing objects to be transparently marshalled by value across process or machine boundaries. ==Internet security== Microsoft's idea of embedding active content on web pages as COM/ActiveX components (rather than e.g. Java applets) created a combination of problems in the [[Internet Explorer]] web browser that has led to an explosion of [[computer virus]], [[Trojan horse (computing)|trojan]] and [[spyware]] infections. These [[malware]] attacks mostly depend on ActiveX for their activation and propagation to other computers. Microsoft recognized the problem with ActiveX as far back as 1996 when Charles Fitzgerald, program manager of Microsoft's Java team said "If you want security on the 'Net', unplug your computer. … We never made the claim up front that ActiveX is intrinsically secure." [http://www.eweek.com/article2/0,1895,1622616,00.asp] As COM and ActiveX components are run as native code on the user's machine, there are fewer restrictions on what the code can do. Many of these problems have been addressed by the introduction of "Authenticode" [[code signing]] (based on [[digital signature]]s), and later by the [[.NET Framework|.NET]] platform also. Another security measure is that, before an ActiveX control is installed, the user is prompted whether to allow the installation or not, enabling the user to disallow the installation of controls from sites that the user does not trust. It is also possible to disable ActiveX controls altogether, or to allow only a selected few. ==Technical details== COM programmers build their software using COM-aware [[software componentry|components]]. Different component types are identified by class IDs (CLSIDs), which are [[Globally Unique Identifier]]s (GUIDs). Each COM component exposes its functionality through one or more [[interface (computer science)|interfaces]]. The different interfaces supported by a component are distinguished from each other using interface IDs (IIDs), which are GUIDs too. COM interfaces have [[language binding|bindings]] in several languages, such as [[C (programming language)|C]], [[C++]], [[Visual Basic]], [[Delphi (programming language)|Delphi]], and several of the scripting languages implemented on the Windows platform. All access to components is done through the [[Method (computer science)|methods]] of the interfaces. This allows techniques such as inter-process, or even inter-computer programming (the latter using the support of [[Distributed Component Object Model|DCOM]]). ===Interfaces=== All COM components must (at the very least) implement the standard <code>[[IUnknown]]</code> interface, and thus all COM interfaces are [[Inheritance (computer science)|derived]] from <code>IUnknown</code>. The <code>IUnknown</code> interface consists of three methods: <code>AddRef()</code> and <code>Release()</code>, which implement [[reference counting]] and controls the lifetime of interfaces; and <code>QueryInterface()</code>, which by specifying an IID allows a caller to retrieve references to the different interfaces the component implements. The effect of <code>QueryInterface()</code> is similar to <code>[[dynamic_cast]]<></code> in [[C++]] or [[Type conversion|casts]] in [[Java (programming language)|Java]] and [[C Sharp (programming language)|C#]]. A COM component's interfaces are required to exhibit the [[Equivalence relation|reflexive, symmetric, and transitive]] properties. The reflexive property refers to the ability for the <code>QueryInterface()</code> call on a given interface with the interface's ID to return the same instance of the interface. The symmetric property requires that when interface B is retrieved from interface A via <code>QueryInterface()</code>, interface A is retrievable from interface B as well. The transitive property requires that if interface B is obtainable from interface A and interface C is obtainable from interface B, then interface C should be retrievable from interface A. An interface consists of a pointer to a [[Virtual method table|virtual function table]] that contains a list of pointers to the functions that implement the functions declared in the interface, in the same order that they are declared in the interface. This technique of passing structures of function pointers is very similar to the one used by [[Object Linking and Embedding|OLE 1.0]] to communicate with its system libraries. COM specifies many other standard interfaces used to allow inter-component communication. For example, one such interface is <code>IStream</code>, which is exposed by components 