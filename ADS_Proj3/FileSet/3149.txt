Hoare]] in "Monitors: An operating system structuring concept", ''[[Communications of the ACM]]'', 17(10), October 1974 and then formalized by [[Xerox]]' [[Mesa programming language]] ("Mesa Language Manual", J.G. Mitchell et al., Xerox PARC, CSL-79-3 (Apr 1979)). This mechanism provides the basic mutual exclusion ([[mutex]]) and thread notification facilities (condition variables) implemented by NSPR. Additionally, NSPR provides synchronization methods more suited for use by Java. The Java-like facilities include monitor reentrancy, implicit and tightly bound notification capabilities with the ability to associate the synchronization objects dynamically. === I/O === NSPR's [[I/O]] slightly augments the [[Berkeley sockets]] model and allows arbitrary layering. The designers originally intended to export synchronous I/O methods only, relying on threads to provide the concurrency needed for complex applications. That method of operation remains preferred, though one can configure the network I/O channels as non-blocking in the traditional sense. === Network addresses === Part of NSPR deals with manipulation of network addresses. NSPR defines an [[Internet Protocol|IP]]-centric network address object. While it does not define the object as opaque, the API provides methods that allow and encourage clients to treat the addresses as [[Type polymorphism|polymorphic]] items. In this area NSPR aims to provide a migration path between [[IPv4]] and [[IPv6]]. To that end one can perform translations of [[ASCII]] strings ([[Domain Name System|DNS]] names) into NSPR's network address structures, regardless of whether the addressing technology uses IPv4 or IPv6. === Time === NSPR makes timing facilities available in two forms: interval timing and calendar functions. Interval timers are based on a free running, 32-bit, platform-dependent resolution timer. Such timers are normally used to specify timeouts on I/O, waiting on condition variables and other rudimentary thread scheduling. Since these timers have finite namespace and are free running, they can wrap at any time. NSPR does not provide an [[epoch (computing)|epoch]], but expects clients to deal with that issue. The granularity of the timers is guaranteed to be between 10 microseconds and 1 millisecond. This allows a minimal timer period in of approximately 12 hours. But in order to deal with the wrap-around issue, only half that namespace may be utilized. Therefore, the minimal usable interval available from the timers is slightly less than six hours. Calendar times are 64-bit signed numbers with units of microseconds. The epoch for calendar times is midnight, January 1, 1970, [[Greenwich Mean Time]]. Negative times extend to times before 1970, and positive numbers forward. Use of 64 bits allows a representation of times approximately in the range of -30000 to the year 30000. There exits a structural representation (i.e., exploded view), routines to acquire the current time from the host system, and convert them to and from the 64-bit and structural representation. Additionally there are routines to convert to and from most well-known forms of ASCII into the 64-bit NSPR representation. === Memory management === NSPR provides API to perform the basic [[malloc]], [[calloc]], [[realloc]] and [[free (programming)|free]] functions. Depending on the platform, the functions may be implemented almost entirely in the NSPR runtime or simply [[shim (computing)|shims]] that call immediately into the host operating system's offerings. === Linking === Support for linking (shared library loading and unloading) forms part of NSPR's feature set. In most cases this is simply a smoothing over of the facilities offered by the various platform providers. == See also == {{Portal|Free software}} * [[Apache Portable Runtime]] * [[Adaptive Communication Environment]] * [[Cross-Platform Support Middleware]] ==External links== * [http://www.mozilla.org/projects/nspr/ Official website] * [http://ftp.mozilla.org/pub/mozilla.org/nspr/ NSPR source code] {{Mozilla projects}} [[Category:Application programming interfaces]] [[Category:Netscape]] [[cs:Netscape Portable Runtime]] [[es:Netscape Portable Runtime]]</text> </page> <page> <id>26153</id> <title>Network browser</title> <text>{{Unreferenced stub|auto=yes|date=December 2009}} {{Orphan|date=December 2009}} A '''network browser''' is a tool used to browse a computer network. An example of this is [[My Network Places]] (or ''Network Neighborhood'' in earlier versions of [[Microsoft Windows]]). An actual program called [[Network Browser]] is offered in [[Mac OS 9]]. {{DEFAULTSORT:Network Browser}} {{Compu-network-stub}} [[Category:Computer networking]]</text> </page> <page> <id>26163</id> <title>Network File Control</title> <text>'''Network File Control''' ('''NFC''') is a common point of "command and control" for file data—delivering a common set of network resident services, centrally defined and managed via policy, then applied across a heterogeneous file storage infrastructure. NFC's associated services are delivered "within the network" and affects the treatment of file data from its "origination to destination". NFC plays an integral role in controlling the various aspects of file management for a [[Global Namespace]]. [[Image:Network File Control.jpg|thumb|right]] By implementing NFC, it can result in a dramatic reduction of file storage costs, significantly improved data security, and an unprecedented amount of visibility within a file data estate—which enables organizations to better manage and control their file-based data over its life cycle. Services that can be deployed via policy include (but are not limited to): storage tiering, file balancing, content-based security, active auditing/alerting and single instancing (de-duplication) with a management granularity at the file level. ==Standards== NFC has been defined as a functional component within the [[File Area Networking|File Area Network]] (FAN) reference model, which is currently being defined by SNIA's FAN Working Group. Within the FAN reference model, this particular area of functionality is also referenced and referred to as "File Management and Control Services". NFC is used to control file data that exists within network-based file shares, through an associated set of management services; i.e. information stores provided by servers using the [[Common Internet File System]] protocol (CIFS) and the [[Network File System (protocol)|Network File System]] (NFS) protocols. These are standard protocols used by all servers, [[Network Attached Storage]] (NAS) devices and client systems for handling file data. ==References== {{Empty section|date=July 2010}} ==External links== NFC Vendors: [http://www.njini.com Njini] ==See also== * [[File Area Networking]] * [[Network File Management]] * [[Global Namespace]] [[Category:Computer storage]]</text> </page> <page> <id>26165</id> <title>Network Improvement</title> <text>{{Unreferenced|date=December 2009}} {{Orphan|date=February 2009}} '''Network Improvement''' is a large subject that encompasses all actions that can be taken to improve [[computer]] or [[digital networks]]. ==Network Traffic Control== A [[network traffic control]]ler is a mechanism to control the flow of traffic on the network. The controller may be used to reduce overall packet loss 