Median and other RCRS filters are good at removing salt and pepper noise from an image, and also cause relatively little blurring of edges, and hence are often used in computer vision applications. ===Software programs=== Most general purpose image and photo editing software will have one or more noise reduction functions (median, blur, despeckle, etc.). Special purpose noise reduction software programs include [[Neat Image]], [[Grain Surgery]], [[Noise Ninja]], [[DenoiseMyImage]], [http://cimg.sourceforge.net/greycstoration/index.shtml GREYCstoration] (now [http://gmic.sourceforge.net/gimp.shtml G'MIC]), and [http://netpbm.sourceforge.net/doc/pnmnlfilt.html pnmnlfilt] (nonlinear filter) found in the open source [[Netpbm]] tools. General purpose image and photo editing software including noise reduction functions include [[Adobe Photoshop]], [[GIMP]], [[Ulead Systems|PhotoImpact]], [[Paint Shop Pro]], and [[Helicon Filter]]. ==See also== ===General noise issues=== * [[Digital image processing]] * [[Noise]] * [[Noise control]] * [[Noise print]] * [[Signal (information theory)|Signal]] * [[Signal processing]] * [[Signal subspace]] ===Audio=== * [[Architectural acoustics]] * [[Noise-cancelling headphones|Noise-canceling headphones]] * [[Sound masking]] ===Video=== * [[Dark frame]] * [[Video denoising]] ==References== {{reflist}} ==External links== *[http://www.stanford.edu/~slansel/tutorial/summary.htm Recent trends in denoising tutorial] *[http://gimps.de/en/tutorials/gimp/picture-photo-image/pixel-noise/ Noise Reduction in photography] *[http://www.cs.tut.fi/~foi/SA-DCT/#ref_software Matlab software and Photoshop plug-in for image denoising (Pointwise SA-DCT filter)] *[http://www.cs.tut.fi/~foi/GCF-BM3D Matlab software for image and video denoising (Non-local transform-domain filter)] *[http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/ Non-local image denoising, with code and online demonstration] {{Noise|state=uncollapsed}} {{VideoProcessing}} [[Category:Noise reduction| ]] [[Category:Audio engineering]] [[Category:Image processing]] [[Category:Sound recording]] [[cs:Odstranění šumu]] [[de:Rauschunterdrückungsverfahren]] [[ja:ノイズリダクション]] [[ru:Шумопонижение]] [[sl:Razšumljanje]]</text> </page> <page> <id>26515</id> <title>Noisy text</title> <text>{{unreferenced|date=August 2008}} {{weasel|date=August 2008}} '''Noise in text''' can be defined as any kind of difference between the surface form of a coded representation of the [[text]]{{dn}} and the intended, correct, or original text. Language usage over computer mediated discourses, like chats, emails and [[SMS]] texts, significantly differs from the standard form of the language. An urge towards shorter message length facilitating faster typing and the need for semantic clarity, shape the structure of this text used in such discourses. Gartner<!-- who? --> estimates that [[unstructured data]] constitutes 80% of the whole enterprise data. A huge proportion of this unstructured data comprises chat transcripts, emails and other informal and semi-formal internal and external communications. Usually such text is meant for human consumption. However, now with huge amounts of such text being present, both online and within the enterprise, it is important to mine such text using computers. ==Techniques for correction== There are many spell checkers and grammar checkers available today. Many [[word processor]]s like [[Microsoft Word|MS Word]] include this in the editing tool. Online, Google in its search interface tries to include a correction engine to guide users when they make mistakes with their queries. [[Category:Coding theory]]</text> </page> <page> <id>26532</id> <title>Nolot</title> <text>'''Nolot''' is a [[chess]] test suite with 11 very difficult positions from real games. They were compiled by [[Pierre Nolot]] for the [[France|French]] chess magazine [[Gambisco]] and posted on the rec.games.chess [[Usenet]] group in 1994.<ref>{{cite web | url=http://groups.google.com/group/rec.games.chess/browse_frm/thread/79a6da1235df64e7?q=nolot | title=11 tactical positions computers can't solve | author=Marc-Francois Baudot | publisher=Usenet | work=rec.games.chess| date=1994-07-11 | accessdate=2007-10-13}}</ref> Some of these positions are particularly hard to solve for [[chess engine]]s. Houdini 1.03a solved problem 1 in one second however. Houdini is a free UCI engine. ==Problem 1 == [[Forsyth–Edwards Notation|FEN]]: r3qb1k/1b4p1/p2pr2p/3n4/Pnp1N1N1/6RP/1B3PP1/1B1QR1K1 w - - 0 1 <!-- [[Image:Nolot1.jpg|frame|White to play Nxh6!!]]--> {{Chess diagram|= | tright | Problem 1 <br> Kasparov-Karpov, 1990 (Game 20) [[Chessgames.com]] |= 8 |rd| | | |qd|bd| |kd|= 7 | |bd| | | | |pd| |= 6 |pd| | |pd|rd| | |pd|= 5 | | | |nd| | | | |= 4 |pl|nd|pd| |nl| |nl| |= 3 | | | | | | |rl|pl|= 2 | |bl| | | |pl|pl| |= 1 | |bl| |ql|rl| |kl| |= a b c d e f g h | White to play: 26. Nxh6!! }} 26.Nxh6!! c3 (26... Rxh6 27.Nxd6 Qh5 (best) 28.Rg5! Qxd1 29.Nf7+ Kg8 30.Nxh6+ Kh8 31.Rxd1 c3 32.Nf7+ Kg8 33.Bg6! Nf4 34.Bxc3 Nxg6 35.Bxb4 Kxf7 36.Rd7+ Kf6 37.Rxg6+ Kxg6 38.Rxb7 +-) 27.Nf5! cxb2 28.Qg4 Bc8 (28... g6!? 29.Kh2! 29.Qd7 30.Nh4 Bc6 31.Nc5! dxc 32.Rxe6 Nf6 33.Nxg6+ Kg7 34.Qg5 Nbd5 35.Ne5 Kh8 36.Nxd7 +-) 29.Qh4+ Rh6 30.Nxh6 gxh6 31.Kh2! Qe5 32.Ng5 Qf6 33.Re8 Bf5 34.Qxh6 (missing a mate in 6: 34.Nf7+ Qxf7 35.Qxh6+ Bh7 36.Rxa8 Nf6 37.Rxf8 Qxf8 38.Qxf8+ Ng8 39.Qg7#) 34...Qxh6 35.Nf7+ Kh7 36.Bxf5+ Qg6 37.Bxg6+ Kg7 38.Rxa8 Be7 39.Rb8 a5 40.Be4+ Kxf7 41.Bxd5+ 1-0 <!--A very deep combimation, that Tasc R30 or Genius 2 running on a pentium would take between a few months and a few years to find. --> The best Novag computer, the Diablo 68000, finds 26. Nxh6 after seven and a half months (Pierre Nolot has let it run on the position for 14 months and one day, until a power failure stopped an analysis of over {{FORMATNUM:80000000000}} nodes.) but for wrong reasons: it evaluates white's position as inferior and thinks this move would enable it to [[draw (chess)|draw]]. Today Gambit Tiger 2.0 for example can find it pretty fast: Most free engines running on 64 bit processors in 2010 could solve this problem and the others in a few seconds. 1.Qd4 c3 2.Bxc3 Nxc3 3.Qxb4 Nxe4 4.Qxb7 Rb8 5.Qxb8 Qxb8 6.Bxe4 d5 7.Rb1 <br> µ (-1.20) Depth: 12 00:00:09 6055kN <br> 1.Nxh6 c3 2.Nf5 cxb2 3.Qg4 Rb8 4.Nxg7 Rg6 5.Qxg6 Qxg6 6.Rxg6 Bxg7 7.Nxd6 <br> ³ (-0.48) Depth: 12 00:00:21 14368kN <br> 1.Nxh6 c3 2.Nf5 cxb2 3.Qg4 Rc8 4.Nxg7 Rg6 5.Nxe8 Rxg4 6.Rxg4 Rxe8 7.Rg6 <br> µ (-0.74) Depth: 13 00:00:55 38455kN <br> 1.Ne3 Rxe4 2.Bxe4 Qxe4 3.Nxd5 Qxd5 4.Qc1 Qf5 5.Qxh6+ Qh7 6.Qe6 Nd3 7.Re2 Nxb2 8.Rxb2 <br> ³ (-0.58) Depth: 13 00:01:30 62979kN <br> 1.Ne3 Rxe4 <br> ³ (-0.58) Depth: 14 00:02:02 84941kN <br> 1.Ne3 Nxe3 2.Rexe3 Bxe4 3.Qg4 Rg6 4.Qxe4 Qxe4 5.Bxe4 Rxg3 6.Rxg3 d5 7.Bf5 Re8 8.Bc3 <br> ³ (-0.30) Depth: 15 00:03:05 128968kN <br> 1.Nxh6 <br> ² (0.32) Depth: 15 00:07:58 350813kN <br> With the next ply showing a clear advantage. <div style="clear: both"></div> ==Problem 2 == FEN: r4rk1/pp1n1p1p/1nqP2p1/2b1P1B1/4NQ2/1B3P2/PP2K2P/2R5 w - - 0 1 <!-- [[Image:Nolot2.jpg|frame|White to play Rxc5!!]] --> {{Chess diagram|= | tright | Problem 2 <br> Bronstein - Ljubojevic, Petropolis itz 1973<ref>{{cite web | url=http://www.chessgames.com/perl/chessgame?gid=1034661 | title=David Bronstein vs Ljubomir Ljubojevic (1973) "The Sorcerer's 