that a requirement for standards for the electronic exchange of [[subscriber]] information between different systems appeared. A white pages schema typically defines, for each real-world object being represented: * what attributes of that object are to be represented in the entry for that object * what relationships of that object to other objects are to be represented * how is the entry to be named in a [[Directory Information Tree|DIT]] * how an entry is to be located by a client searching for it * how similar entries are to be distinguished * how are entries to be ordered when displayed in a list One of the earliest attempts to standardize a white pages schema for electronic mail use was in [[X.520]] and [[X.521]], part of the [[X.500]] specifications, that was derived from the addressing requirements of [[X.400]] and defined a [[Directory Information Tree]] that mirrored the international telephone system, with entries representing residential and organizational subscribers. This evolved into the [[Lightweight Directory Access Protocol]] standard schema in RFC 2256. One of the most widely deployed white pages schemas used in LDAP for representing individuals in an organizational context is '''inetOrgPerson''', defined in RFC 2798, although versions of [[Active Directory]] require a different object class, '''User'''. Many large organizations have also defined their own white pages schemas for their employees or customers, as part of their [[Identity management]] architecture. Converting between data bases and directories using different schemas is often the function of a [[Metadirectory]], and data interchange standards such as [[Common Indexing Protocol]]. Some early directory deployments suffered due to poor design choices in their white pages schema, such as: * attributes used for naming purposes were non-unique in large environments (such as a person's common name) * attributes used for naming purposes were likely to change (such as surnames) * attributes were included which could lead to [[Identity theft]], such as a [[Social security number]] * users were required during [[provisioning]] to choose attributes which are unique but still memorable to them Numerous other proposed schemas exist, both as standalone definitions suitable for use with general purpose directories, or as embedded into network protocols. Examples of other generic white pages schemas include [[Vcard|vCard]], defined in RFC 2426, and [[FOAF (software)|FOAF]]. ==See also== * [[Recognition of human individuals]] {{DEFAULTSORT:White Pages Schema}} [[Category:Data modeling]] [[Category:Data management]] [[Category:Identity management]]</text> </page> <page> <id>40091</id> <title>Why the lucky stiff</title> <text>{{lowercase|title=why the lucky stiff}} {{Cleanup|date=May 2009}} {{Infobox Person | name = Unknown (alias ''why the lucky stiff'') | other_names = why, _why | image = Whytheluckystiff.jpg | caption = _why at RubyConf | occupation = Ruby programmer, author | known_for = ''[[Why's (poignant) Guide to Ruby]]'', ''[[camping (microframework)|Camping]]'' }} '''why the lucky stiff''' (often known simply as ''why'', ''_why'') is the persona formerly used by an anonymous and prolific writer, cartoonist, musician, artist, and computer programmer notable for his work with the [[Ruby programming language]]. Along with [[Yukihiro Matsumoto]] and [[David Heinemeier Hansson]], he was seen as a key figure in the Ruby community. Why the lucky stiff was the keynote speaker at ''RailsConf'' in 2006.<ref>{{cite web|url=http://www.scribemedia.org/2006/11/25/why-oh-why/ |title=RailsConf Keynote: Why the Lucky Stiff |publisher=Scribemedia.org |date= |accessdate=2009-10-24}}</ref> He also had a speaking session titled "A Starry Afternoon, a Sinking Symphony, and the Polo Champ Who Gave It All Up for No Reason Whatsoever" at the 2005 [[O'Reilly Open Source Convention]] held in [[Portland, Oregon]].<ref>{{cite web|url=http://conferences.oreillynet.com/cs/os2005/view/e_sess/6948 |title=O'Reilly Open Source Convention 2005 |publisher=Conferences.oreillynet.com |date=2005-08-04 |accessdate=2009-10-24}}</ref> It explored how to teach programming and make it more appealing to [[adolescence|adolescents]]. On 19 August 2009, his online presence was drastically truncated; his accounts on Twitter and GitHub were shut down, along with many of his personally maintained sites.<ref>{{cite web|url=http://www.h-online.com/open/why-the-lucky-stiff-Vanishes--/news/114042 |title="why the lucky stiff" Vanishes - The H Open Source: News and Features |publisher=H-online.com |date=2009-08-20 |accessdate=2009-10-24}}</ref> His projects have since been collected and centralized on the whymirror GitHub account.<ref name="whymirror">{{cite web|url=http://whymirror.github.com |title=whymirror.github.com |publisher=whymirror.github.com |date= |accessdate=2009-10-24}}</ref> ==Works== ===Tutorials=== His best known work is ''[[Why's (poignant) Guide to Ruby]]'',<ref>{{cite book | author=Michael Fitzgerald|year=2007|publisher=O'Reilly|isbn=0596529864|title=Learning Ruby}}</ref> which "teaches Ruby with stories."<ref>{{cite book | author = Leonard Richardson |title=Ruby Cookbook | publisher=O'Reilly | year = 2006 | isbn=0596523696}}</ref> Paul Adams of [[Webmonkey]] describes its eclectic style as resembling a "collaboration between [[Stanisław Lem|Stan Lem]] and [[Edward Lear|Ed Lear]]".<ref name="Paul Adams 1">{{cite web | year=2003 | editor= Paul Adams | title= Getting Your Feet Wet With Ruby On Rails | url=http://www.webmonkey.com/05/28/index4a.html| archiveurl=http://web.archive.org/web/20061231080418/http://www.webmonkey.com/05/28/index4a.html| archivedate=2006-12-31}}</ref> Chapter three was published in ''The Best Software Writing I: Selected and Introduced by Joel Spolsky''.<ref name="Best Software Writing I">{{cite book | year=2005 | publisher=Apress | title=The Best Software Writing I: Selected and Introduced by Joel Spolsky | url=http://www.apress.com/book/view/9781590595008 | isbn=978-1590595008}}</ref> '''''Try Ruby''''' is an online interactive learning tool that provided a browser-based Ruby [[shell (computing)|shell]] and an instructor that guided beginners through their first steps in Ruby. Since Why's disappearance, the project has been continued in spirit at tryruby.org His most recent project, ''[[Hackety Hack]]'', is a Ruby- and [[Shoes (GUI toolkit)|Shoes]]- based environment intended to bring the power, freedom, and simplicity of BASIC programming to the current generation, with special intent to be accessible to children. ===Code=== _why is the author of several libraries and applications, most of them written in or for Ruby. [[Image:Why's self portrait.png|thumb|left||_why's [[self-portrait]] from ''[[Why's (poignant) Guide to Ruby]]'']] *''[[Camping (microframework)|Camping]]'', a [[Web application framework|microframework]] inspired by [[Ruby on Rails]] and based on [[Markaby]] that is less than 4 kilobytes.<ref name="Advanced Rails">{{cite book | year=2007 | publisher=O'Reilly | title=Advanced Rails| isbn=0596510322 | page=235}}</ref> *''Park Place'', a "nearly complete clone of the Amazon S3 web service."<ref name="Advanced Rails"/> * ''Hobix'', a YAML-based weblog application written in Ruby. * ''[[Hpricot]]'', an HTML parser. * ''[[Markaby]]'', (markup as Ruby), a [[domain-specific programming language|DSL]] to generate valid [[HTML]] using Ruby [[Ruby programming language#Blocks and iterators|blocks]] and [[method (computer science)|methods]] instead of tags.<ref name="Beginning Ruby: From Novice to Professional">{{cite book | year=2007 | publisher=Apress | title=Beginning Ruby: From Novice to Professional | isbn=978-1-59059-766-8 | page=443}}</ref> * ''MouseHole'', a personal web proxy that can rewrite the web ''à la'' [[Greasemonkey]]. * the ''RedCloth'' library, 