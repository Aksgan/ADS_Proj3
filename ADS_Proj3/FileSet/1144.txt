on Design Theory and Methodology, Chicago, IL, pp. 175-185 </ref> method let a person or computer program watches all designer's actions but does not make suggestions. Rationales are captured during the design process.<ref name="BuBr98" /> === Rationale Representation === The choice of Design Rationale representation is very important to make sure that the rationales we capture is what we desire and we can use efficiently. According to the degree of formality, the approaches that are used to represent design rationale can be divided into three main categories: informal, semiformal, or formal <ref name="Lee97" />. In the informal representation, rationales can be recorded and captured by just using our traditionally accepted methods and media, such as word processors, audio and video records or even hand writings. However, these descriptions make it hard for automatic interpretation or other computer-based supports. In the formal representation, the rationale must be collected under a strict format so that the rationale can be interpreted and understood by computers. However, due to the strict format of rationale defined by formal representations, the contents can hardly be understood by human being and the process of capturing design rationale will require more efforts to finish, and therefore becomes more intrusive. Semiformal representations try to combine the advantages of informal and formal representations. On one hand, the information captured should be able to be processed by computers so that more computer based support can be provided. On the other hand, the procedure and method used to capture information of design rationale should not be very intrusive. In the system with a semiformal representation, the information expected is suggested and the users can capture rationale by following the instructions to either fill out the attributes according to some templates or just type into natural language descriptions<ref name="Lee97" />. === Argumentation-based models === ;The Toulmin model : One commonly accepted way for semiformal Design Rationale representation is structuring Design Rationale as argumentation <ref name="BuBr00" />. The earliest argumentation-based model used by many design rationale systems is the Toulmin model<ref name="Toul50" />. The [[Stephen Toulmin#The Toulmin Model of Argument|Toulmin model]] defines the rules of design rationale argumentation with six steps <ref>Reynolds, Chris (2000), [http://www.concentric.net/~Creyn266/COMM335/Toulmin.htm ''What is the Toulmin Model?''] Paper at concentric.net.</ref>: :# Claim is made; :# Supporting data are provided; :# Warrant provides evidence to the existing relations; :# Warrant can be supported by a backing; :# Model qualifiers (some, many, most, etc.) are provided; :# Possible rebuttals are also considered. :One advantage of Toulmin model is that it uses words and concepts which can be easily understood by most people. ;Issue-Based Information System (IBIS) : Another important approach to argumentation of Design Rationale is Rittel and Kunz’s IBIS (Issue-Based Information System) <ref name="Kunz, W. 1970" />, which is actually not a software system but an argumentative notation. It is used and developed by gIBIS (graphical IBIS) and itIBIS (test-based IBIS) <ref>Conklin, J.; Yakemovic, K. (1991). "A Process-Oriented Approach to Design Rationale". ''Human-Computer Interaction'' 6 (3 & 4): 357–391.e</ref>. IBIS uses some rationale elements (denoted as nodes) such as issues, positions, arguments, resolutions and several relationships such as more general than, logical successor to, temporal successor to, replaces and similar to, to link the issue discussions. ; Procedural Hierarchy of Issues( PHI) : PHI (Procedural Hierarchy of Issues) <ref>McCall, R.J. (1991). "PHI: A Conceptual Foundation for Design Hypermedia". ''Design Studies'' 12 (1): 30–41.</ref> extended IBIS to noncontroversial issues and redefined the relationships. PHI adds the subissue relationship which means one issue’s resolution depends on the resolution of another issue. ; Questions, Options, and Criteria (QOC) : QOC (Questions, Options, and Criteria) <ref>Maclean, A.; Young, RM.; Bellotti, VME.; Moran, T. (1996), "Questions, Options, and Criteria: Elements of Design Space Analysis", in Moran, T.; Carroll, J., ''Design Rationale Concepts, Techniques, and Use'', Lawrence Erlbaum Associates, pp. 53-106 </ref> is used for design space analysis. Similar to IBIS, QOC identifies the key design problems as questions and possible answers to questions as options. In addition, QOC uses criteria to explicitly describe the methods to evaluate the options, such as the requirements to be satisfied or the properties desired. The options are linked with criteria positively or negatively and these links are defined as assessments. ; Decision Representation Language (DRL) : DRL (Decision Representation Language) <ref name="Lee91"> Lee, J. (1991), "Extending the Potts and Bruns model for recording design rationale", ''Proceedings of the 13th International Conference on Software Engineering'' (ICSE '13), IEEE Computer Society Press, Los Alamitos, CA, pp. 114-125 </ref> extends the Potts and Bruns model of DR <ref name="PoBu88" /> and defines the primary elements as decision problems, alternatives, goals, claims and groups. Lee (1991) has argued that DRL is more expressive than other languages<ref name="Lee91" />. DRL focuses more on the representation of decision making and its rationale instead of on design rationale. ; RATSpeak : Based on DRL, RATSpeak is developed and used as the representation language in SEURAT (Software Engineering Using RATionale) <ref>Burge, J. (2005), [http://www.wpi.edu/Pubs/ETD/Available/etd-050205-085625/ ''Software Engineering Using design RATionale''], Worchester Polytechnic Institute, Computer Science Dept</ref>. RATSpeak takes into account requirements (functional and non-functional) as part of the arguments for alternatives to the decision problems. ; WinWin Spiral Model : And there is an Argument Ontology which is a hierarchy of argument types and includes the types of claims used in the system. The WinWin Spiral Model, which is used in the WinWin approach <ref name="BoKi06">[[Barry Boehm]]; Kitapci, H. (2006), "The WinWin Approach: Using a Requirement Negotiation Tool for Rationale Capture and Use", in Dutoit, A.H.; McCall, R.; Mistrík, I. et al., ''Rationale Management in Software Engineering'', Springer Berlin Heidelberg, pp. 173-190</ref>, adds the WinWin negotiation activities, including identifying key stakeholders of the systems, and identifying the win conditions of each stakeholder and negotiation, into the front of each cycle of the [[Spiral model|spiral software development model]] <ref>>[[Barry Boehm]] (1998). [http://www.cs.usu.edu/~supratik/CS%205370/r5061.pdf "A spiral model of software development and enhancement"]. ''Computer'' 21 (5): 61–72</ref> in order to achieve a mutually satisfactory (winwin) agreement for all stakeholders of the project. :In the 