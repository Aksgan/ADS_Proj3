poin numbers stored as quadwords. For all three formats, bit 0 is a sign and bits 0-7 are a characteristic (exponent, biased by 64). Bits 8-31 (8-63) are a hexadecimal fraction. For extended precision, the low order doubleword has its own sign and characteristic, which are ignored on input and generated on output. ===Instruction formats=== Instructions in the S/360 are two, four or six bytes in length, with the opcode in byte 0. Instructions have one of the following formats: *RR (two bytes). Generally byte 1 specifies two 4-bit register numbers, but in some cases, e.g., SVC, byte 1 is a single 8-bit immediate field. *RS (four bytes). Byte 1 specifies two register numbers; bytes 2-3 specify a base and displacement. *RX (four bytes). Byte 1 bits 0-3 specifies either a register number or a modifier; byte 1 bits 4-7 specifies the number of the general register to be used as an index; bytes 2-3 specify a base and displacement. *SI (four bytes). Byte 1 specifies an immediate field; bytes 2-3 specify a base and displacement. *SS (six bytes). Byte 1 specifies two 4-bit length fields or one 8-bit length field; bytes 2-3 and 4-5 each specify a base and displacement. The encoding of the length fields is length-1. Instructions must be on a two-byte boundary in memory; hence the low-order bit of the instruction address is always 0. ===Program Status Word (PSW)=== The '''Program Status Word''' ('''PSW''')<ref name=A22-6821-7/>{{rp|pages=71-72}} contains a variety of controls for the currently operating program {| class="wikitable collapsible" |+PSW format |- !valign=top style="text-align:right;width:6em"|bits ! !valign=top style="text-align:left;width:25em"|contents !valign=top style="text-align:left"|Explanation |- |align=right valign=top|00-07 |valign=top|SM |valign=top style="align:left;width:25em"| <span id=System_Mask>System Mask</span> |valign=top | See below; 1 if enabled<sup class=reference>[[#Pops|PoOps]]</sup>{{{rp|page=71}} |- |align=right|00 | | :Channel 0 | |- |align=right|01 | | :Channel 1 | |- |align=right|02 | | :Channel 2 | |- |align=right|03 | | :Channel 3 | |- |align=right|04 | | :Channel 4 | |- |align=right|05 | | :Channel 5 | |- |align=right valign=top|06 | | :Channel 6 :All remaining channels{{#tag:ref|On a processor that complies with the S/360 architecture, the highest channel number is 6, 11 bits are sufficient to identify the cuu and 7 bits are sufficient to provide masking of I/O interrupts. However, On a 360/67-2 with two 2846 Channel Controllers, channels are numbered 0-6 and 8-14<ref name=GA27-2719/>{{rp|page=15}}; similarly, the 360/195 had an extended channel feature<ref name=A22-6943/>{{rp|page=21}} but numbered the channels 0 through 13<ref name=A22-6943/>{{rp|page=25}}. I/O interrupts for Channel Controller 1 on the 360/67-2 were masked using control registers, and the 360/195 used bit 7 (Channel 6) of the System Mask as a summary mask bit for channels 6 and up. ''Interruptions from More than Seven Channels''<sup>[[#PoOps|PoOps]]</sup>{{rp|page=121.4}} describes the summary masking for additional channels, but other text in Principles of Operation still refers to a limit of 7 channels. Standard software supported channels 0-F.|group=NB|name=ChanNum}} | |- |align=right valign=top|07 | | :Timer :Interrupt key :External signal |valign=top| :External interrupts |- |align=right|08-11 |Key | <span id=Key>Key</span> |CPU protection key to compare against storage protection keys |- |align=right|12-15 | <span id=AMWP>AMWP</span> | |See below; 1 if enabled |- |align=right valign=top|12 |valign=top| :A |valign=top| :ASCII | :ASCII<ref group=NB>Because the design of the S/360 occurred simultaneously with the development of ASCII, IBM's ASCII support did not match the standard that was ultimately adopted.</ref> mode for packed decimal instructions :Never used by IBM software. |- |align=right|13 |valign=top| :M | :Machine check | :Allow machine-check interrupts. |- |align=right valign=top|14 |valign=top| :W |valign=top| :Wait State | :Processor is halted. An interrupt, if enabled, will cause the processor to resume executing instructions. |- |align=right valign=top|15 |valign=top| :P |valign=top| :Problem state | :Forbids use of certain instructions reserved for supervisor state |- |align=right valign=top|16-31 |valign=top|IC |valign=top| <span id=Interruption_Code>Interruption Code<span> |Interpretation depends on type of interrupt.<br>This field is not used in the PSW itself, but a value is inserted when the PSW is stored as part of processing an interrupt.<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|page=77}} During Initial Program Load, this is the address of the device from which the program was loaded. |- |align=right|32-33 |ILC |<span id=InstructionLengthCode>Instruction Length Code</span> |Interpreted as 2-bit number: length in halfwords or 0 if unavailable. |- |align=right|34-35 |CC |<span id=ConditionCode>Condition Code</span> |See individual instructions for encoding |- |align=right|36-39 |PM |<span id=Program_Mask>Program Mask</span> |See below; 1 if enabled<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|page=71}} |- |align=right|36 | | :Fixed-point overflow |- |align=right|37 | | :Decimal overflow |- |align=right|38 | | :Exponent underflow |- |align=right|39 | | :Significance |- |align=right valign=top|40-63 |valign=top|IA |valign=top|<span id=Instruction_Address>Instruction Address</span> |valign=top | Address of currently executing instruction; stored as address of next instruction, except for Program interruption with ILC 0. |} ===Interrupt system=== {{create-list|section|date=December 2010}} An [[interrupt]] is a mechanism for automatically changing the program state; it is used for both synchronous<ref group=NB>The S/360 literature does not use the terms fault or [[Trap (computing)|trap]]</ref> and [[asynchrony|asynchronous]] events. The architecture<ref name=A22-6821-7/>{{rp|pages=77-83}} defines 5 classes of interrupt. There are two storage fields assigned to each class of interrupt on the S/360; an old PSW double-word and a new PSW double-word. The processor stores the PSW, with an interrupt code inserted, into the old PSW location and then loads the PSW from the new PSW location. This replaces the interrupt mask and instruction address, thus branching and (optionally) disabling interrupts. The S/360 architecture defines a priority to each interrup class, but it is only relevant when two interrupts occur simultaneously; an interrupt routine can be interrupted by any other enabled interrupt, including another occurrence of the initial interrupt. For this reason, it is normal practice to specify all of the mask bits for an interrupt routine as 0, with the exception of machine-check. {| class="wikitable collapsible" |- ! Interrupt class !! Old PSW<br>hex dec !! New PSW<br>hex dec ! align=right valign=top| Priority |- | [[#Input/Output interrupt|Input/Output]]<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|pages=78-79}} || 38 56 || 78 120 || align=right | 4 |- | [[#Program interrupt|Program]]<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|pages=79-80.1}} || 28 40 || 68 104 || align=right | 2 |- | [[#Supervisor Call interrupt|Supervisor Call]]<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|pages=80.1-81}} || 20 32 || 60 96 || align=right | 2 |- | [[#External interrupt|External]]<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|pages=81-82}} || 18 24 || 58 88 || align=right | 