of Industrial Metrology equipment. ] [[Category:Metrology]] [[Category:Geometry]] [[Category:Manufacturing]]</text> </page> <page> <id>10526</id> <title>Dining cryptographers protocol</title> <text>{{Mergeto|Dining cryptographers problem|date=March 2009}} {{Mergefrom|Dining cryptographers protocol/Rewrite|discuss=Talk:Dining cryptographers problem|date=November 2009}} The '''dining cryptographers protocol''' is a method of [[Anonymity|anonymous]] communication. It allows for any member of a group to multicast data to every other member of the group. Though the broadcast is public, the protocol guarantees that its sender remains anonymous. This protocol allows only for one member of the group to transmit data during any given round. The method is as follows: three or more [[cryptographer]]s ([[node (networking)|nodes]]) arrange themselves around a circular dinner table ([[ring network]]), with menus ([[link encryption|encrypted links]]) hiding the interaction of each pair of cryptographers. Each cryptographer secretly writes down a bit (zero or one) and shows it to every other cryptographer. Then, each cryptographer computes the [[xor]]s of their own number and each of the other cryptographers' numbers. That is, if the bit the cryptographer is shown is the same as theirs the result is 'zero', and if they are different the result is 'one'. Every cryptographer that does not want to send a message reports their result. The cryptographer that does want to send a message reports the opposite of their result. All cryptographers then add up the published numbers. If the sum is an even number, no one sent a message. If odd, a one-bit message was sent. Sender anonymity holds because no person knows what comparison value another person reported. Therefore, no one knows who reported the opposite comparison value - the sender. This does not hold in case of two cryptographers - if one person does not transmit a message but a message is being broadcast, he obviously knows who sent it. ==History== Originally, the problem was described so that cryptographers would only compare their bit with the person to their right, and make that comparison public. However, this provides the possibility of the group colluding to find out who is sending the message. If collusion is not a problem, this method requires many fewer comparisons (<math>2n</math> vs <math>n^2</math>). == Security considerations == ===Advantages=== * Anonymous sender * Anonymous recipient (if key used) :* Allows key to be sent in main channel rather than key channel ===Disadvantages=== * <math>n^2</math> bytes transfer for one bit in case of peer to peer communication where n is number of participants. As mentioned above, this can be reduced to <math>2n</math> if there is no possibility of collusion between participants, but in many cases even this lower bound is intractable. * Malicious party can inject random bits to corrupt the message. Chaum present trap messages can prevent malicious data. ==See also== * [[Cryptography]] * [[Dining cryptographers protocol/Rewrite|The Dining Cryptographers Protocol/Rewrite]] * [[Dining cryptographers problem]] * [[Onion routing]] ==External links== * [http://cryptodox.com/Dining_cryptographers_protocol "Dining cryptographers protocol" at Cryptodox] [[Category:Cryptographic protocols]] [[Category:Anonymity networks]] {{crypto-stub}}</text> </page> <page> <id>10532</id> <title>Diode logic</title> <text>'''Diode logic''' or '''diode-resistor logic''' constructs [[Boolean logic|Boolean]] [[logic gate]]s from [[diodes]] acting as electrically operated switches. While diode logic has the advantage of simplicity, the lack of an amplifying stage in each gate limits its application. Not all logical functions can be implemented in diode logic alone; only the non-[[inverter (logic gate)|inverting]] logical [[AND gate|AND]] and logical [[OR gate|OR]] functions can be realized by diode gates. If several diode logic gates are cascaded, the voltage levels at each stage are significantly changed, so one-stage applications are used. == Diode logic gate versions == In logic gates, logical functions are performed by parallel or series connected switches controlled by input logical variables. In diode logic, electrically operated switches are implemented by diodes: when forward biased, a diode switch is closed; when backward biased, the switch is open. There are two kinds of diode logic gates - OR and AND; it is not possible to construct NOT diode gate. The explanations below are true for positive logic (high voltage represents ''logical one''; low voltage represents ''logical zero''). === Diode OR logic gate === [[image:Diode-OR2.png|thumb|right|250px|In a diode OR gate, the output voltage is high if only one input voltage is high; the output voltage is low if all the input voltages are low.]] OR logic gates are implemented by parallel connected ''normally open'' switches. So, in diode OR logic gates, the input voltage sources are connected to diode anodes; diode cathodes are joined to the output (Node 1 in the figure), which is connected through the [[pull-down]] resistor R1 to ground. '''Input logical one.''' If the voltage of a particular input voltage source is high (input logical ''1''), the according diode is forward biased and this diode switch is closed. The input source passes current through the diode and creates high voltage drop across the resistor R1 (output logical ''1''). The rest of diodes connected to low input voltage (input logical ''0s'') are backward biased and their input sources (grounds) are disconnected from the output. '''Input logical zeros.''' If all the input voltages are low (input logical ''0s''), the voltage drops across the diodes are zero; these diode switches are open and the input sources (grounds) are disconnected from the output. No current flows through the resistor; the output voltage is low (output logical ''0'') and the output resistance is R1. If two diode OR logic gates are cascaded, they behave as ''current-sourcing'' logic gates: if the first gate produces high output voltage, the second gate consumes current from the first one; if the first gate produces low output voltage, the second gate does not inject current into the output of the first one. A diode OR gate does not use its own power supply; the input sources with high voltage (logical ''1'') supply the load through the forward-biased diodes. === Diode AND logic gate === ==== Basic idea ==== AND logic gates are implemented by series connected ''normally open'' switches. So, diode AND logic gates should be implemented by series connected diode switches (like an [[NMOS|NMOS AND gate]] that is implemented by series connected transistor switches). However, in contrast to transistors, diodes are two-terminal switching 