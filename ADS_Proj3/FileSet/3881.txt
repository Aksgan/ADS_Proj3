(Windows users)|publisher=Machackpc.com|date=2010-05-05}}</ref> == References == {{Reflist}} == Links == * [http://www.hackthatphone.com/4x/ecid_shsh.html What is an ECID SHSH and how do I save it?] {{Mobile-stub}} [[Category:Apple Inc. mobile phones]] [[Category:iPhone]] [[Category:iOS (Apple)]]</text> </page> <page> <id>32787</id> <title>SIGBUS</title> <text>{{Infobox Computing signal |description = Bus error |action = Abnormal termination of the process | BUS_ADRALN | invalid address alignment | BUS_ADRERR | non-existent physical address | BUS_OBJERR | object-specific hardware error }} On [[POSIX]]-compliant platforms, '''SIGBUS''' is the [[Signal (computing)|signal]] sent to a [[process (computing)|process]] when it causes a [[bus error]]. The [[C_preprocessor|symbolic constant]] for SIGBUS is defined in the [[header file]] <code>[[signal.h]]</code>. Symbolic signal names are used because signal numbers can vary across platforms. ==Etymology== ''SIG'' is a common [[Prefix (linguistics)|prefix]] for signal names. ''BUS'' refers to the [[data bus]] in the context of a [[bus error]]. ==Usage== Computer programs may throw SIGBUS for improper memory handling: ; Invalid address alignment: The program has attempted to read or write data that does not fit the CPU's memory-alignment rules. ; Non-existent physical address: This is equivalent to a [[segmentation fault]], but for a physical address rather than a virtual address. ; Object-specific hardware error: This is far less common, but it is present in [[Linux]] and [[Solaris (operating system)|Solaris]], when virtual memory pages have disappeared (e.g. accessing an [[mmap]]ed file which has been truncated.)<ref>http://groups.google.com/group/comp.unix.internals/browse_thread/thread/6369e8f923aedcb0/54f8ed15e326dc0</ref> For further discussion, see ''[[bus error]]''. The [[operating system]] may inform the application of the nature of the error using the [[signal stack]], which developers can use to [[debug]] their programs or handle errors. The default action for a program upon receiving '''SIGBUS''' is abnormal termination. This will end the [[Process (computing)|process]], but may generate a [[core file]] to aid debugging, or other platform dependent action. SIGBUS can be handled (caught). That is, applications can request what action they want to occur. Examples of such action might be ignoring it, calling a [[subroutine|function]], or restoring the default action. In some circumstances, ignoring '''SIGBUS''' results in [[undefined behaviour]]. An example of an application that might handle SIGBUS is a [[debugger]], which might check the signal stack and inform the [[Software developer|developer]] of what happened, and where the program terminated. SIGBUS is usually generated by the [[operating system]], but users with appropriate permissions can use the <code>kill</code> [[system call]] or [[Kill (Unix)|kill]] command (a [[userland]] program, or sometimes a [[Operating system shell|shell builtin]]) to send the signal to a process at will. == References == {{refs}} {{Computing signals}} [[Category:Computer errors]] [[es:SIGBUS]] [[ru:SIGBUS]]</text> </page> <page> <id>32796</id> <title>SIGCUM</title> <text>{{Refimprove|date=February 2009}} [[Image:SIGCUM.jpg|right|320px|thumbnail|SIGCUM on display at the [[National Cryptologic Museum|US National Cryptologic Museum]].]] '''SIGCUM''', also known as '''Converter M-228''', was a [[rotor machine|rotor cipher machine]] used to encrypt [[teletype]] traffic by the [[United States Army]]. Hastily designed by [[William Friedman]] and [[Frank Rowlett]], the system was put into service in January 1943 before any rigorous analysis of its security had taken place. SIGCUM was subsequently discovered to be insecure by Rowlett, and was immediately withdrawn from service. The machine was redesigned to improve its security, reintroduced into service by April 1943, and remained in use until the 1960s. ==Development== In 1939, Friedman and Rowlett worked on the problem of creating a secure teleprinter encryption system. They decided against using a tape-based system, such as those proposed by [[Gilbert Vernam]], and instead conceived of the idea of generating a stream of five-bit pulses by use of wired rotors. Because of lack of funds and interest, however, the proposal was not pursued any further at that time. This changed with the United States' entry into [[World War II]] in December 1941. Rowlett was assigned to develop a teleprinter encryption system for use between Army command centers in United Kingdom and Australia (and later in North Africa). Friedman described to Rowlett a concrete design for a teleprinter cipher machine that he had invented. However, Rowlett discovered some flaws in Friedman's proposed circuitry that showed the design to be flawed. Under pressure to report to a superior about the progress of the machine, Friedman responded angrily, accusing Rowlett of trying to destroy his reputation as a cryptanalyst. After Friedman calmed down, Rowlett proposed some designs for a replacement machine based on rotors. They settled on one, and agreed to write up a complete design and have it reviewed by another cryptanalyst by the following day. The design agreed upon was a special attachment for a standard teleprinter. The attachment used a stack of five 26-contact rotors, the same as those used in the [[SIGABA]], the highly secure US off-line cipher machine. Each time a key character was needed, thirteen inputs to the rotor stack were energized at the input endplate. Passing through the rotor stack, these thirteen inputs were to be scrambled at the output endplate. However, only five live contacts would be used. These five outputs would form five binary impulses, which would form the [[keystream]] for the cipher, to be combined with the message itself, encoded in the 5-bit [[Baudot code]]. The rotors advanced odometrically; that is, after each encipherment, the "fast" rotor would advance one step. Once every 26 revolutions of the fast rotor, the "medium" rotor would step once. Similarly, ever 26 revolutions of the medium rotor, the "slow" rotor would step, and so on for the other two rotors. However, which rotor was assigned as the "fast", "medium", "slow" etc rotors was controlled by a set of five multi-switches. This gave a total of <math>5! = 120</math> different rotor stepping patterns. The machine was equipped with a total of 10 rotors, each of which could be inserted "direct" or in reversed order, yielding <math>10 \times 9 \times 8 \times 7 \times 6 \times 2^{5} = 967,680</math> possible rotor orderings and alignments. ==Introduction of the machine== The design for this machine, which was designated the Converter M-228, or SIGCUM, was given to the [[Teletype Corporation]], who were also producing [[SIGABA]]. Rowlett recommended that the adoption of the machine be postponed until after a study of its cryptographic security, but SIGCUM was urgently needed by the Army, and 