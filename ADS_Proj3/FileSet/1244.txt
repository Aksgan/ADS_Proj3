functions, which are used in [[static single assignment form]].<ref>{{cite paper |first=Ron |last=Cytron |coauthors=Hind, Michael; and Hsieh, Wilson |url=http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.50.9287&rep=rep1&type=pdf |title=Automatic Generation of DAG Parallelism |journal=Proceedings of the ACM SIGPLAN 89 Conference on Programming Language Design and Implementation |year=1989 |pages=54–68 }}</ref> == Applications == Dominators, and [[dominator (node)|dominance frontier]]s particularly, have applications in [[compiler]]s for computing [[static single assignment form]]. A number of compiler optimizations can also benefit from dominators. The flow graph in this case comprises [[basic block]]s. Automatic parallelization benefits from postdominance frontiers. This is an efficient method of computing control dependence, which is critical to the analysis. Memory usage analysis can benefit from the dominator tree to easily find leaks and identify high memory usage (http://www.eclipse.org/mat/). == Algorithms == The dominators of a node n are given by the maximal solution to the following data-flow equations: : <math>\operatorname{Dom}(n_o) = \left \{ n_o \right \}</math> : <math>\operatorname{Dom}(n) = \left ( \bigcap_{p \in \text{preds}(n)}^{} \operatorname{Dom}(p) \right ) \bigcup^{} \left \{ n \right \} </math> where <math>n_o</math> is the start node. The dominator of the start node is the start node itself. The set of dominators for any other node n is the intersection of the set of dominators for all predecessors p of n. The node n is also in the set of dominators for n. An algorithm for direct solution is: // dominator of the start node is the start itself Dom(n<sub>0</sub>) = {n<sub>0</sub>} // for all other nodes, set all nodes as the dominators '''for each''' n '''in''' N - {n<sub>0</sub>} Dom(n) = N; // iteratively eliminate nodes that are not dominators '''while''' changes in any Dom(n) '''for each''' n '''in''' N - {n<sub>0</sub>}: Dom(n) = {n} union with intersection over all p in pred(n) of Dom(p) Direct solution is [[quadratic growth|quadratic]] in the number of nodes, or O(n<sup>2</sup>). [[Thomas Lengauer|Lengauer]] and [[Robert Endre Tarjan|Tarjan]] developed an algorithm which is almost linear, but its implementation tends to be complex and time consuming for a graph of several hundred nodes or fewer.<ref>{{cite paper |title=A fast algorithm for finding dominators in a flowgraph |url=http://portal.acm.org/ft_gateway.cfm?id=357071&type=pdf&coll=GUIDE&dl=GUIDE&CFID=79528182&CFTOKEN=33765747 |journal=ACM Transactions on Programming Languages and Systems (TOPLAS) |volume=1 |issue=1 |month=July |year=1979 |pages=121–141 |first=Thomas |last=Lengauer |coauthors=and Tarjan, Robert Endre }}</ref> Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy of [[Rice University]] describe an algorithm that essentially solves the above data flow equations but uses well engineered data structures to improve performance.<ref>{{cite web |title=A Simple, Fast Dominance Algorithm |url=http://www.hipersoft.rice.edu/grads/publications/dom14.pdf |author=Cooper, Keith D.; Harvey, Timothy J; and Kennedy, Ken |year=2001 }}</ref> == Postdominance == Analogous to the definition of dominance above, a node ''z'' is said to '''post-dominate''' a node ''n'' if all paths to the exit node of the graph starting at ''n'' must go through ''z''. Similarly, the '''immediate post-dominator''' of a node ''n'' is the postdominator of ''n'' that doesn't strictly postdominate any other strict postdominators of ''n''. ==See also== * [[Control flow graph]] * [[Static single assignment form]] ==References== <references /> ==External links== *[http://www.eecs.harvard.edu/hube/software/nci/cfa.html The Machine-SUIF Control Flow Analysis Library] {{Graph Theory-footer}} {{DEFAULTSORT:Dominator (Graph Theory)}} [[Category:Graph theory]] [[Category:Compiler theory]]</text> </page> <page> <id>10937</id> <title>Domino logic</title> <text>{{Context|date=May 2007}} {{Expert-subject|Computer science|date=February 2009}} '''Domino logic''' is a [[CMOS]]-based evolution of the [[dynamic logic (digital logic)|dynamic logic]] techniques which were based on either PMOS or NMOS [[transistor]]s. It allows a rail-to-rail logic swing. It was developed to speed up circuits. In Dynamic Logic, a problem arises when cascading one gate to the next. The precharge "1" state of the first gate may cause the second gate to discharge prematurely, before the first gate has reached its correct state. This uses up the "precharge" of the second gate, which cannot be restored until the next clock cycle, so there is no recovery from this error. There are various solutions to the problem of how to cascade dynamic logic gates. One solution is Domino Logic, which inserts an ordinary static inverter between stages. While this might seem to defeat the point of dynamic logic, since the inverter has a PFET (one of the main goals of Dynamic Logic is to avoid PFETs where possible, due to speed), there are two reasons it works well. First, there is no fanout to multiple PFETs. The dynamic gate connects to exactly one inverter, so the gate is still very fast. And since the inverter connects to only NFETs in dynamic logic gates, it too is very fast. Second, the PFET in an inverter can be made smaller than in some types of logic gates. In a domino logic cascade structure consisting of several stages, the evaluation of each stage ripples the next stage evaluation, similar to a domino falling one after the other. Once fallen, the node states cannot return to "1" (until the next clock cycle) just as dominos, once fallen, cannot stand up. The structure is hence called Domino CMOS Logic. It contrasts with other solutions to the cascade problem in which cascading is interrupted by clocks or other means. Important Domino Logic features include: # They have smaller areas than conventional CMOS logic (as does all Dynamic Logic). # Parasitic capacitances are smaller so that higher operating speeds are possible. # Operation is free of glitches as each gate can make only one transition. # Only non-inverting structures are possible because of the presence of inverting buffer. # Charge distribution may be a problem. ==References== {{Reflist}} * Knepper. "SC571 VLSI Design Principles," chapter 5: "Dynamic Logic Circuits" [http://people.bu.edu/rknepper/sc571/chapter5_ckts_C.ppt] * Abdel-Hafeez and Ranjan. "Single Rail Domino Logic For Four-Phase Clocking Scheme" [http://www.wipo.int/pctdb/en/wo.jsp?wo=2000076068] * Chung-Yu Wu; Kuo-Hsing Cheng; Jinn-Shyan Wan. "Analysis and design of a new race-free four-phase CMOS logic", Solid-State Circuits, IEEE Journal of Volume 28, Issue 1, Jan 1993 Page(s):18 - 25 ==External links== *[http://6004.csail.mit.edu/6.371/handouts/L11.pdf A paper from MIT about Domino Logic.] {{Logic Families}} {{DEFAULTSORT:Domino Logic}} [[Category:Logic families]]</text> </page> <page> <id>10941</id> <title>Don Cuco El Guapo</title> <text>'''"Don Cuco El Guapo"''' is a [[pianist]] [[robot]] designed and built at the department of [[microelectronics]] of the [[Universidad Autónoma de Puebla]] (UAP), [[Mexico]] in 1992. The exterior of the robot was designed by the [[sculptress]] 