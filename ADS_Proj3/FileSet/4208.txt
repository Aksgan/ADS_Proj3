cannot be solved in [[polynomial time]]. Schemes which can be [[provable security|proven secure]] using only complexity assumptions are said to be secure in the standard model. Security proofs are notoriously difficult to achieve in the standard model, so in many proofs, cryptographic primitives are replaced by idealized versions. The most usual example of this technique, known as the [[random oracle model]] <ref>{{cite conference | author = [[Mihir Bellare]] | coauthors = [[Phillip Rogaway]] | title = Random Oracles are Practical: A Paradigm for Designing Efficient Protocols | booktitle = ACM Conference on Computer and Communications Security | pages = 62–73 | publisher = ACM | date = 1993 | url = http://www.cs.ucsd.edu/users/mihir/papers/ro.html | accessdate = 2007-11-01 }}</ref> <ref>{{ cite conference | author = [[Ran Canetti]] | coauthors = [[Oded Goldreich]] and [[Shai Halevi]] | title = The Random Oracle Methodology Revisited | booktitle = Proceedings of the thirtieth annual ACM symposium on Theory of computing | pages = 209–218 | publisher = ACM | date = 1998 | url = http://eprint.iacr.org/1998/011 | accessdate = 2007-11-01 }}</ref>, involves replacing a cryptographic hash function with a genuinely random function. Another example is the [[generic group model]] <ref>{{ cite conference | author = [[Victor Shoup]] | title = Lower bounds for discrete logarithms and related problems | conference = Advances in Cryptology – Eurocrypt ’97 | booktitle = Lecture Notes in Computer Science | volume = 1233 | pages = 256–266 | publisher = Springer-Verlag | date = 1997 | url = http://www.shoup.net/papers/evalbound.pdf | format = pdf | accessdate = 2007-11-01 }}</ref> <ref>{{ cite conference | author = Ueli Maurer | title = Abstract models of computation in cryptography | conference = 10th IMA Conference On Cryptography and Coding | booktitle = Lecture Notes in Computer Science | volume = 3796 | pages = 1–12 | publisher = Springer-Verlag | date = 2005 | url = ftp://ftp.inf.ethz.ch/pub/crypto/publications/Maurer05.pdf | format = pdf | accessdate = 2007-11-01 }}</ref>, where the adversary is given access to a randomly chosen encoding of a [[group (mathematics)|group]], instead of the [[finite field]] or [[Elliptic curve cryptography|elliptic curve groups]] used in practice. Other models used invoke trusted third parties to perform some task without cheating -- for example, the [[public key infrastructure]] (PKI) model requires a [[certificate authority]], which if it were dishonest, could produce fake certificates and use them to forge signatures, or mount a [[man in the middle attack]] to read encrypted messages. Other examples of this type are the [[common random string model]] and the [[common reference string model]], where it is assumed that all parties have access to some string chosen uniformly at random or a string chosen according to some other probability distribution respectively. These models are often used for [[Non-interactive zero-knowledge proof]]s (NIZK). In some applications, such as the Dolev-Dwork-Naor encryption scheme <ref>{{ cite conference | author = [[Danny Dolev]] | coauthors = [[Cynthia Dwork]] and [[Moni Naor]] | title = Non-Malleable Cryptography | booktitle = Proceedings of the Twenty Third Annual ACM Symposium on Theory of Computing | pages = 542–552 | publisher = ACM | date = 1991 }}</ref>, it makes sense for a particular party to generate the common reference string, while in other applications, the common reference string must be generated by a trusted third party. Collectively, these models are referred to as models with special setup assumptions. ==References== <references/> ==See also== * [[Random oracle]] [[Category:Cryptography]] [[Category:Theory of cryptography]] {{crypto-stub}}</text> </page> <page> <id>35535</id> <title>Standard Operating Environment</title> <text>A '''Standard Operating Environment''' (SOE) is an [[Information technology|IT]] industry term used to describe a standard implementation of an [[operating system]] and its associated [[software]]. Other common names used are : *MOE - Managed Operating Environment *COE - Consistent or Common Operating Environment *MDE - Managed Desktop Environment *DMS - Desktop Managed Services{{Citation needed|date=January 2010}} *OSP{{Citation needed|date=January 2010}} *SDE - Standard Desktop Environment. *"Standard Image" It is typically implemented as a standard [[disk image]] that can be mass deployed to more than one computer in an organisation. It can include the base [[operating system]], a custom configuration, standard [[application software|applications]] used within an organisation, software updates and service packs. An SOE can apply to servers, desktops, laptops, thin clients, and mobile devices. The major advantage of having an SOE in a business environment is the reduction in the cost and time to deploy, configure, maintain, support and manage computers. By standardising the hardware and software platforms used within an organisation, the IT department or service provider can deploy new computers and correct problems with existing computers quickly. A standardized, repeatable and automated solution creates a known, expected and supportable environment. A standardized solution ensures known outcomes are maintained, with automation providing the key to speed, repeatability and standardization. ==Examples== There are many [[Windows]] deployment guides and tools available from [[Microsoft]] and other vendors. Many businesses endeavor to build their own SOE solutions using the Microsoft Business Desktop Deployment (BDD) solution accelerator or [[Microsoft Deployment Toolkit]] (MDT). However, some do not have the capability to build all features in one single SOE and their processes often include documented manual configuration steps. SOEs on [[Mac OS X]], [[Linux]], and other [[Unix]]/[[Unix-like]] systems can typically be made simply by creating and deploying disk images. This can be achieved using tools such as [[Disk Utility]] and [[dd (Unix)|dd]]. Whereas deploying a disk image originating from a system with non-identical hardware will often result in boot failure with Windows, the process is generally achievable on Unix systems with the caveat that the systems must be of the same [[computer architecture]] and drivers will need to be installed on the image for all the possible hardware configurations. Since Apple does not have third party computer manufacturers usually only hardware add-ons are a concern with respect to drivers. On Linux most hardware with kernel support can be auto-detected. [[Init|Boot scripts]] can be used for automated post-deployment configuration. There are also a number of vendor specific SOE systems for various Linux/Unix-like distros. For Solaris the use of jumpstart scripts is more frequent 