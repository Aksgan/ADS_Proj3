«refine» UML2: The client element(s) are at a "later" semantic level than the supplier(s) * «send» UML2: The client (an operation) sends the supplier (a signal) * «substitute» UML2: The client element can replace (under some circumstances) the supplier * «trace» UML2: The client elements "trace" to the suppliers. Typically used for levels of requirements * «use» UML2: The client element somehow "uses" the supplier ===Dependency vs. Link=== A UML link is run-time relationship between instances of classifiers, while a dependency is a model-time relationship between definitions. A typical uni-directional link requires the one instance to know about, and thus depend, upon the other, but this is not required. A uni-directional link only requires the possibility of navigation not dependency. Likewise, a bi-directional link requires that both instances may traverse to each other, but this also does not require dependency. However, after the traversal of the association, if some property of the target instance's definition is accessed, such as an operation or attribute, a dependency is created. ==External links== * [http://www.uml-diagrams.org/class-diagrams.html#dependency Dependency Relationship in UML 2] ==See also== *[[dependent entity]] *[[functional dependency]] *[[independent entity]] {{DEFAULTSORT:Dependency (Uml)}} [[Category:Unified Modeling Language]] [[Category:Data modeling]] [[de:Abhängigkeitsbeziehung (UML)]] {{uml-stub}}</text> </page> <page> <id>9991</id> <title>Dependent ML</title> <text>'''Dependent ML''' is an experimental [[functional programming language]] proposed by Frank Pfenning and Hongwei Xi. Dependent ML extends [[ML programming language|ML]] by a restricted notion of [[dependent types]]: types may be dependent on static indices of type Nat. Dependent ML employs a constraint theorem prover to decide a strong equational theory over the index expressions. Dependent ML has been superseded by [[ATS (programming language)|ATS]] and is no longer under active development. == External links == *The [http://www.cs.bu.edu/~hwxi/DML/DML.html home page of DML] {{compu-lang-stub}} [[Category:ML programming language family]] [[Category:Declarative programming languages]] [[Category:Functional languages]] [[Category:Dependently typed formal languages]] [[Category:Programming languages created in the 1990s]] [[Category:Discontinued programming languages]] [[ru:Dependent ML]]</text> </page> <page> <id>9995</id> <title>Dephasing</title> <text>{{Context|date=October 2009}} '''Dephasing''' is a name for the mechanism that recovers [[classical physics|classical]] behavior from a [[quantum physics|quantum]] system. It is an important effect in [[condensed matter physics]], particularly in the study of [[mesoscopic]] devices. The reason can be understood easily if we can see conduction in metals as a typical classical phenomenon with quantum effects all embedded into an effective mass that can be computed quantum mechanically as also happens to resistance that can be seen as a scattering effect of conduction electrons. When the temperature is lowered and the dimension of the device are meaningfully reduced, this classical behavior should disappear and the laws of quantum mechanics should rule the behavior of conducting electrons seen as waves that ballistically move inside the conductor without any kind of dissipation. Most of the time this is what one observes. But it appeared as a surprise to uncover that the so called '''dephasing time''', that is the time it takes for the conducting electrons to lose their quantum behavior, becomes finite rather than infinite when the temperature goes to zero in mesoscopic devices violating the expectations of the theory of Altshuler, Aronov and Khmelnitskii (see citation below). This kind of saturation of the dephasing time at low temperatures is presently an open problem even if several proposals have been put forward. '''Dephasing''' is a process in which [[coherence (physics)|coherence]] in a substance caused by perturbation decays over time, and the system returns to the state before perturbation. The coherence of a sample is explained by the off-diagonal elements of a [[density state|density matrix]]. An external [[electric field|electric]] or [[magnetic field]] can create coherence between two [[quantum state]]s in a sample if the [[frequency]] corresponds to the energy gap between the two states. The coherence terms decay with the dephasing time, ''T''<sub>2</sub>. After coherence is created in a sample by light, the sample emits a [[Polarization (waves)|polarization wave]], the frequency of which is equal to and the [[phase (waves)|phase]] of which is inverted from the incident light. In addition, the sample is excited by the incident light and a population of molecules in the excited state is generated. The light passing through the sample is absorbed because of these two processes, and it is expressed by an [[absorption spectrum]]. The coherence decays with the time constant, ''T''<sub>2</sub>, and the intensity of the polarization wave is reduced. The population of the excited state also decays with the time constant of the [[vibrational energy relaxation|longitudinal relaxation]], ''T''<sub>1</sub>. The time constant ''T''<sub>2</sub> is usually much smaller than T<sub>1</sub>, and the bandwidth of the absorption spectrum is related to these time constants by the [[Fourier transform]], so the time constant T<sub>2</sub> is a main contributor to the bandwidth. Recently, the time constant ''T''<sub>2</sub> has been measured with ultrafast [[time-resolved spectroscopy]] directly, such as in photon echo experiments. What is the dephasing rate of a particle that has an energy E if it is subject to a fluctuating environment that has a temperature T? In particular what is the dephasing rate close to equilibrium (E~T), and what happens in the zero temperature limit? This question has fascinated the mesoscopic community during the last two decades (see references below). ==See also== [[The dephasing rate SP formula]] ==References== * [http://iopscience.iop.org/0022-3719/15/36/018/ B.L. Altshuler, A.G. Aronov and D.E. Khmelnitskii, J. Phys. C 15, 7367 (1982)]. * Y. Imry, Introduction to Mesoscopic Physics (Oxford Univ. Press 1997), and references therein. * I.L. Aleiner, B.L. Altshuler and M.E. Gershenson, [http://arxiv.org/abs/cond-mat/9808053 cond-mat/9808053]; [http://arxiv.org/abs/cond-mat/9808078 cond-mat/9808078]. * [http://prola.aps.org/abstract/PRB/v59/i17/p11143_1 D. Cohen and Y. Imry, Phys. Rev. B 59, 11143 (1999)]. * D.S. Golubev, G. Schon and A.D. Zaikin, [http://arxiv.org/abs/cond-mat/0208548 cond-mat/0208548]. * Laurent Saminadayar, Pritiraj Mohanty, Richard A. Webb, Pascal Degiovanni, Christopher Bäuerle, [http://arxiv.org/abs/0709.4663 arXiv:0709.4663 [cond-mat.mes-hall&#93;]. * P. Mohanty, [http://arxiv.org/abs/cond-mat/0205274 cond-mat/0205274]. * M. Frasca, Phys.Rev. B68 (2003) 193413, [http://arxiv.org/abs/cond-mat/0308377 cond-mat/0308377]. [[Category:Wave mechanics]] [[Category:Optics]] [[Category:Quantum information science]] [[ja:位相緩和]]</text> </page> <page> <id>10009</id> <title>Derek Hitchins</title> <text>'''Derek K. Hitchins''' (1935) is a British [[systems engineer]] and was professor in [[engineering management]], in command & control and in [[systems science]] at [[Cranfield University]] at [[Cranfield]], [[Bedfordshire]], [[England]]. == Biography == Hitchins joined the [[Royal Air Force]] in 1951 as an apprentice and retired as 