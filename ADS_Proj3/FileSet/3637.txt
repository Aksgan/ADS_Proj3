the required QR-decomposition. === Using Givens rotations === ''QR'' decompositions can also be computed with a series of [[Givens rotation]]s. Each rotation zeros an element in the subdiagonal of the matrix, forming the ''R'' matrix. The concatenation of all the Givens rotations forms the orthogonal ''Q'' matrix. In practice, Givens rotations are not actually performed by building a whole matrix and doing a matrix multiplication. A Givens rotation procedure is used instead which does the equivalent of the sparse Givens matrix multiplication, without the extra work of handling the sparse elements. The Givens rotation procedure is useful in situations where only a relatively few off diagonal elements need to be zeroed, and is more easily parallelized than Householder transformations. ==== Example ==== Let us calculate the decomposition of : <math>A = \begin{pmatrix} 12 & -51 & 4 \\ 6 & 167 & -68 \\ -4 & 24 & -41 \end{pmatrix}.</math> First, we need to form a rotation matrix that will zero the lowermost left element, <math>\mathbf{a}_{31} = -4</math>. We form this matrix using the [[Givens rotation]] method, and call the matrix <math>G_1</math>. We will first rotate the vector <math>(6,-4)</math>, to point along the ''X'' axis. This vector has an angle <math>\theta = \arctan\left({-4 \over 6}\right)</math>. We create the orthogonal Givens rotation matrix, <math>G_1</math>: :<math>G_1 = \begin{pmatrix} 1 & 0 & 0 \\ 0 & \cos(\theta) & \sin(\theta) \\ 0 & -\sin(\theta) & \cos(\theta) \end{pmatrix}</math> :<math>\approx \begin{pmatrix} 1 & 0 & 0 \\ 0 & 0.83205 & -0.55470 \\ 0 & 0.55470 & 0.83205 \end{pmatrix}</math> And the result of <math>G_1A</math> now has a zero in the <math>\mathbf{a}_{31}</math> element. :<math>G_1A \approx \begin{pmatrix} 12 & -51 & 4 \\ 7.21110 & 125.6396 & -33.83671 \\ 0 & 112.6041 & -71.83368 \end{pmatrix}</math> We can similarly form Givens matrices <math>G_2</math> and <math>G_3</math>, which will zero the sub-diagonal elements <math>a_{21}</math> and <math>a_{32}</math>, forming a triangular matrix <math>R</math>. The orthogonal matrix <math>Q^T</math> is formed from the concatenation of all the Givens matrices <math>Q^T = G_3G_2G_1</math>. Thus, we have <math> G_3G_2G_1A= Q^TA = R</math>, and the ''QR'' decomposition is <math>A = QR</math>. ==Connection to a determinant or a product of eigenvalues== We can use QR decomposition to find the absolute value of the [[determinant]] of a square matrix. Suppose a matrix is decomposed as <math>A=QR</math>. Then we have :<math>\det(A)=\det(Q)\cdot\det(R).</math> Since ''Q'' is unitary, <math>|\det(Q)|=1</math>. Thus, :<math>|\det(A)|=|\det(R)|=\Big|\prod_{i} r_{ii}\Big|,</math> where <math>r_{ii}</math> are the entries on the diagonal of ''R''. Furthermore, because the determinant equals the product of the eigenvalues, we have :<math>\Big|\prod_{i} r_{ii}\Big|=\Big|\prod_{i} \lambda_{i}\Big|,</math> where <math>\lambda_{i}</math> are eigenvalues of <math>A</math>. We can extend the above properties to non-square complex matrix <math>A</math> by introducing the definition of QR-decomposition for non-square complex matrix and replacing eigenvalues with singular values. Suppose a QR decomposition for a non-square matrix ''A'': :<math>A = Q \begin{pmatrix}R\\O\end{pmatrix}, \qquad Q^*Q = I,</math> where <math>O</math> is a zero matrix and <math>Q</math> is an unitary matrix. From the properties of [[Singular value decomposition|SVD]] and determinant of matrix, we have :<math>\Big|\prod_{i} r_{ii}\Big| = \prod_{i} \sigma_{i},</math> where <math>\sigma_{i}</math> are singular values of <math>A</math>. Note that the singular values of <math>A</math> and <math>R</math> are identical, although the complex eigenvalues of them may be different. However, if ''A'' is square, it holds that :<math> {\prod_{i} \sigma_{i}} = \Big|{\prod_{i} \lambda_{i}}\Big|. </math> In conclusion, QR decomposition can be used efficiently to calculate a product of eigenvalues or singular values of matrix. ==Column pivoting== {{Expand section|date=December 2009}} QR decomposition with column pivoting introduces a [[permutation matrix]] ''P'': :<math>A P = Q R \quad \iff A = Q R P^T </math> Column pivoting is useful when ''A'' is (nearly) [[rank deficient]], or is suspected of being so. It can also improve numerical accuracy. ''P'' is usually chosen so that the diagonal elements of ''R'' are non-increasing: <math>|r_{11}| \ge |r_{22}| \ge \ldots \ge |r_{nn}|</math>. This can be used to find the (numerical) rank of ''A'' at lower computational cost than a [[singular value decomposition]], forming the basis of so-called ''rank-revealing'' QR algorithms. ==See also== * [[Polar decomposition]] * [[Eigenvalue decomposition]] * [[Spectral decomposition]] * [[Matrix decomposition]] * [[Zappa-Szép product#Examples|Zappa-Szép product]] ==References== * {{Citation | last1=Golub | first1=Gene H. | author1-link=Gene H. Golub | last2=Van Loan | first2=Charles F. | author2-link=Charles F. Van Loan | title=Matrix Computations | publisher=Johns Hopkins | edition=3rd | isbn=978-0-8018-5414-9 | year=1996}}. * {{citation | first1=Roger A. | last1=Horn | first2=Charles R. | last2=Johnson | year=1985 | title=Matrix Analysis | publisher=Cambridge University Press | isbn=0-521-38632-2 }}. Section 2.8. * {{citation | first1=Josef | last1=Stoer | first2=Roland | last2=Bulirsch | year=2002 | title=Introduction to Numerical Analysis | edition=3rd | publisher=Springer | isbn=0-387-95452-X }}. ==External links== *[http://www.bluebit.gr/matrix-calculator/ Online Matrix Calculator] Performs QR decomposition of matrices. *[http://netlib.org/lapack/lug/node39.html LAPACK users manual] gives details of subroutines to calculate the QR decomposition *[http://documents.wolfram.com/mathematica/functions/QRDecomposition Mathematica users manual] gives details and examples of routines to calculate QR decomposition *[http://www.alglib.net/ ALGLIB] includes a partial port of the LAPACK to C++, C#, Delphi, etc. {{Numerical linear algebra}} [[Category:Matrix decompositions]] [[Category:Numerical linear algebra]] [[cs:QR rozklad]] [[de:QR-Zerlegung]] [[es:Factorización QR]] [[eo:QR-faktorigo]] [[fr:Décomposition QR]] [[ko:QR 분해]] [[it:Decomposizione QR]] [[ja:QR分解]] [[ro:Descompunerea QR]] [[ru:QR-разложение]] [[fi:QR-hajotelma]] [[sv:QR-faktorisering]] [[uk:QR розклад матриці]] [[zh:QR分解]]</text> </page> <page> <id>30667</id> <title>QTI</title> <text>The '''IMS Question and Test Interoperability specification (QTI)''' defines a standard format for the representation of [[Educational assessment|assessment]] content and results, supporting the exchange of this material between authoring and delivery systems, [[wikt:repository|repositories]] and other [[learning management systems]]. It allows assessment materials to be authored and delivered on multiple systems interchangeably. It is, therefore, designed to facilitate [[interoperability]] between systems<ref>[http://www.jisc.ac.uk/media/documents/themes/elearning/effpraceassess.pdf Effective Practice with e-Assessment guide, p.44]</ref>. The specification consists of a [[data model]] that defines the structure of questions, assessments and results from questions and assessments together with an [[XML data binding]] that essentially defines a language for interchanging questions and other assessment material. The [[XML]] binding is widely used for exchanging questions between different authoring tools and by publishers. The assessment and results parts of the specification are less widely used. ==Background== QTI was produced by the [[IMS Global]] Learning Consortium, which is an industry and academic consortium that develops specifications for interoperable learning technology. QTI was 