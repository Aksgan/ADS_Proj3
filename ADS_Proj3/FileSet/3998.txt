method that extends traditional object-oriented and component-based analysis and design methods to include concerns relevant to and supporting SOA. It consists of three major phases of identification, specification and realization of the three main elements of SOA, namely, services, components that realize those services (aka service components) and flows that can be used to compose services. SOMA is an end-to-end SOA Method for the identification, specification, realization and implementation of services (including information services), components, flows (processes/composition). SOMA builds on current techniques in areas such as domain analysis, functional areas grouping, variability-oriented analysis (VOA) process modeling, component-based development, object-oriented analysis and design and use case modeling. SOMA introduces new techniques such as goal-service modeling, service model creation and a service litmus test to help determine the granularity of a service. SOMA identifies services, component boundaries, flows, compositions, and information through complementary techniques which include domain decomposition, goal-service modeling and existing asset analysis. === SOMA Life cycle modeling activities === Service-oriented Modeling and Architecture (SOMA) consists of the phases of identification, specification, realization, implementation, deployment and management in which the fundamental building blocks of SOA are identified then refined and implemented in each phase. The fundamental building blocks of SOA consists of services, components, flows and related to them, information, policy and contracts. ===Service-oriented modeling framework (SOMF)=== The Service-Oriented Modeling Framework (SOMF) has been proposed by author Michael Bell as a holistic and anthropomorphic [[modeling language]] for [[software development]] that employs disciplines and a universal language to provide tactical and strategic solutions to enterprise problems.<ref name="Bell">{{cite book |last=Bell |first=Michael|title=Service-Oriented Modeling: Service Analysis, Design, and Architecture|year= 2008 |publisher=Wiley & Sons|isbn=978-0-470-14111-3 |chapter=Introduction to Service-Oriented Modeling}}</ref>The term "holistic language" pertains to a modeling language that can be employed to design any application, business and technological environment, either local or distributed. This universality may include design of application-level and enterprise-level solutions, including SOA landscapes or Cloud Computing environments. The term "anthropomorphic", on the other hand, affiliates the SOMF language with intuitiveness of implementation and simplicity of usage. Furthermore, The SOMF language and its notation has been adopted by [[Sparx Enterprise Architect]] modeling platform that enables business architects, technical architects, managers, modelers, developers, and business and technical analysts to pursue the chief SOMF life cycle disciplines. [[Image:SOMF V 2.0.jpg|thumb|right|240px|Service-oriented modeling framework (SOMF) Version 2.0]] The service-oriented modeling framework (SOMF) is a service-oriented development life cycle methodology. It offers a number of modeling practices and disciplines that contribute to a successful service-oriented life cycle management and modeling (see image on right). It illustrates the major elements that identify the “what to do” aspects of a service development scheme. These are the modeling pillars that will enable practitioners to craft an effective project plan and to identify the milestones of a service-oriented initiative—either a small or large-scale business or a technological venture. The provided image thumb (on the right hand side) depicts the four sections of the modeling framework that identify the general direction and the corresponding units of work that make up a service-oriented modeling strategy: practices, environments, disciplines, and artifacts. Remember, these elements uncover the context of a modeling occupation and do not necessarily describe the process or the sequence of activities needed to fulfill modeling goals. These should be ironed out during the project plan – the service-oriented development life cycle strategy – that typically sets initiative boundaries, time frame, responsibilities and accountabilities, and achievable project milestones. === SOMF Language modeling generations === SOMF introduces a transparency model by enabling three major modeling time frames, often named modeling generations: * Used-to-Be: Design scheme of software components and related environments that were deployed, configured, and used in the past * As-Is: Design of software components and corresponding environments that are currently being utilized * To-Be: Design of software components and corresponding environments that will be deployed, configured, and used in the future These three unique implementation generations can be viewed by SOMF diagrams and their corresponding perspectives to help practitioners to depict business and architectural decisions in the past, current, and future implementations. For example, an architect and a developer can describe the evolution of a system or an application since inception, and explain what were the architecture best practices that drove alterations to these software entities. This capability enables transparency of design and implementation. On the business side, modeling generations can help estimate return on investments and business value. Traceability of business investments and justifications to business initiatives can also be depicted by employing these modeling generations. === SOMF Transformation Models === [[Image:SOMF-Models.jpg|thumb|240px|SOMF Transformation Models]] SOMF offers eight models of implementation, also known as "Bell's Transformation Models", as depicted in the displayed image named SOMF Transformation Models. Each of these units of work, namely models, identify the methodology, process, platform, best practices, and disciplines by which a practitioner ought to accomplish a modeling task during a project. The illustrated ninth model is the Governance Model, which should be employed to manage the other eight models. Consider the overall charter of the SOMF implementation models: * Discovery Model: This model should be employed when ascertaining new software entities to provide a solution * Analysis Model: The Analysis Model is devised to inspect a software component's feasibility to offer a solution, help analyzing business and technical requirements, and assist with measuring the success of implementation * Design Model: Facilitates logical design of software entities; and contributes to component relationship, deployment compositions, and establishment of transactions * Technical Architecture Model: This model involves three major architecture perspectives: Conceptual Architecture, Logical Architecture, and Physical Architecture * Construction Model: Assists with modeling practices during the source code implementation phase * Quality Assurance Model: Certifies software components for production and ensures stability of business and technical continuity * Operations Model: Enables a stable production environment and assures proper deployment and configuration of software entities * Business Architecture Model: This model fosters proper integration of contextual and structural business formations with software entities * Governance Model: Offers best practices, standards, and policies for all SOMF implementation models === SOMF Life cycle modeling 