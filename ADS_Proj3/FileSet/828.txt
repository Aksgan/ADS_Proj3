same line following the colon. Multiple instructions are grouped together in a [[block (programming)|block]] which starts on a newline (The indentation in required). The conditional expression syntax does not follow this rule. <br/> {{note|pattern matching|b}} This is [[pattern matching]] and is similar to select case but not the same. It is usually used to deconstruct [[algebraic data type]]s. <br/> {{note|pascal semicolon|c}} In languages of the Pascal family, the semicolon is not part of the statement. It is a separator between statements, not a terminator. === [[Control flow#Loops|Loop statements]] === {| class="wikitable" |- ! ! [[while loop|while]] ! [[do while loop|do while]] ! [[for loop|for i = first to last]] ! [[foreach]] |- |rowspan=2| [[ALGOL 68]] ||colspan=3 align=center| «'''for''' index» «'''from''' first» «'''by''' increment» «'''to''' last» «'''while''' condition» '''do''' statements '''od''' ||rowspan=2| '''for''' ''key'' «'''to''' '''upb''' ''list''» '''do''' «'''typename''' ''val''=''list''[''key''];» statements '''od''' |- | «'''while''' condition» '''do''' statements '''od''' | «'''while''' statements; condition» '''do''' statements '''od''' | «'''for''' index» «'''from''' first» «'''by''' increment» «'''to''' last» '''do''' statements '''od''' |- | C (C99) | rowspan=8|'''while ('''condition''')''' '''{''' instructions '''}''' | rowspan=8|'''do {''' instructions '''} while ('''condition''')''' | rowspan=5|'''for ('''«type» i '''=''' first''';''' i '''<=''' last'''; ++'''i''') {''' instructions '''}''' | {{n/a}} |- | Objective-C | '''for ('''type item '''in''' set''') {''' instructions '''}''' |- | C++ (STL) | «'''std::'''»'''for_each('''start''',''' end''',''' function''')''' |- | C# | '''foreach ('''type item '''in''' set''') {''' instructions '''}''' |- | Java | '''for ('''type item ''':''' set''') {''' instructions '''}''' |- | JavaScript |'''for (var''' i '''=''' first''';''' i '''<=''' last''';''' i'''++) {''' instructions '''}''' |'''for (var''' index '''in''' set''') {''' instructions '''}''' <br/> or <br/> '''for each (var''' item '''in''' set''') {''' instructions '''}''' (JS 1.6+) |- | PHP | '''foreach (range('''first''', '''last'''-1) as $i) {''' instructions '''}''' or <br/> '''for ($i = '''first'''; $i <= '''last'''; $i++) {''' instructions '''}''' | '''foreach ('''set '''as''' item''') {''' instructions '''}''' <br/> or <br/> '''foreach ('''set '''as '''key''' =>''' item''') {''' instructions '''}''' |- | Windows PowerShell | '''for ($i = '''first'''; $i -le '''last'''; $i++) {''' instructions '''}''' | '''foreach ('''item '''in''' set''') {''' instructions using item '''}''' |- | Go | '''for '''condition''' {''' instructions '''}''' | | '''for '''i ''':=''' first''';''' i '''<=''' last'''; '''i'''++ {''' instructions '''}''' | '''for '''key''', '''item''' := range '''set''' {''' instructions '''}''' |- | Perl | '''while ('''condition''')''' '''{''' instructions '''}''' or <br/> '''until ('''notcondition''')''' '''{''' instructions '''}''' | '''do {''' instructions '''} while ('''condition''')''' or <br/> '''do {''' instructions '''} until ('''notcondition''')''' | '''for'''«'''each'''»''' '''«'''$i'''»''' (0 .. N-1) {''' instructions '''}''' or <br/> '''for ($i = '''first'''; $i <= '''last'''; $i++) {''' instructions '''}''' | '''for'''«'''each'''» «$item» '''('''set''') {''' instructions '''}''' |- | Perl 6 | '''while''' condition '''{''' instructions '''}''' or <br/> '''until''' notcondition '''{''' instructions '''}''' | '''repeat {''' instructions '''} while '''condition or <br/> '''repeat {''' instructions '''} until''' notcondition | '''for''' first'''..'''last '''-> $i {''' instructions '''}''' or <br/> '''loop ($i = '''first'''; $i <= '''last'''; $i++) {''' instructions '''}''' | '''for''' set« '''->''' $item» '''{''' instructions '''}''' |- | Ruby | '''while''' condition <ul>instructions</ul>'''end''' <br/> or <br/> '''until''' notcondition <ul>instructions</ul> '''end''' | '''begin''' <ul>instructions</ul> '''end while''' condition <br/> or <br/> '''begin''' <ul>instructions</ul> '''end until''' notcondition | '''for i in '''first'''...'''last <ul>instructions</ul> '''end''' <br/> or <br/> first'''.upto('''last'''-1) { <nowiki>|i|</nowiki> '''instructions '''}''' | '''for''' item '''in''' set <ul>instructions</ul> '''end''' <br/> or <br/> set'''.each { <nowiki>|</nowiki>'''item'''<nowiki>|</nowiki> '''instructions '''}''' |- | Common Lisp | '''(loop<ul>while '''condition'''</ul><ul>do</ul><ul>'''instructions''')'''</ul> or <br/> '''(do () ('''notcondition''')<ul>'''instructions''')'''</ul> | '''(loop<ul>do</ul><ul>'''instructions'''</ul><ul>while '''condition''')'''</ul> | '''(loop<ul>for i from '''first''' to '''last''' «by 1»</ul><ul>do</ul><ul>'''instructions''')'''</ul> or <br/> '''(dotimes (i N)'''<ul>instructions''')'''</ul> or<br/> '''(do ((i '''first''' (1+ i))) ((>= i '''last'''))<ul>'''instructions''')'''</ul> | '''(loop<ul>for '''item''' in '''set'''</ul><ul>do</ul><ul>'''instructions''')'''</ul> or <br/> '''(dolist ('''item set''')<ul>'''instructions''')'''</ul> or <br/>'''(mapc '''function list''')''' or <br/> '''(map <nowiki>'</nowiki>'''type function sequence''')''' |- | Scheme | '''(do () ('''notcondition''') '''instructions''')''' or <br/> '''(let loop () (if '''condition''' (begin '''instructions''' (loop))))''' | '''(let loop () ('''instructions''' (if '''condition''' (loop))))''' | '''(do ((i '''first''' (+ i 1))) ((>= i '''last''')) '''instructions''')''' or <br/> '''(let loop ((i '''first''')) (if (< i '''last''') (begin '''instructions''' (loop (+ i 1)))))''' | '''(for-each (lambda ('''item''') '''instructions''') '''list''')''' |- | Pascal | '''while''' condition '''do begin''' <ul>instructions</ul> '''end''' | '''repeat''' <ul>instructions</ul> '''until''' notcondition''';''' | '''for''' i ''':=''' first «'''step 1'''» '''to''' last '''do begin''' <ul>instructions</ul> '''end;'''{{ref|step|[a]}} | {{n/a}} |- | Visual Basic | rowspan=2| '''Do While''' condition <ul>instructions</ul>'''Loop''' <br/> or <br/>'''Do Until''' notcondition <ul>instructions</ul>'''Loop''' | rowspan=2| '''Do''' <ul>instructions</ul> '''Loop While''' condition <br/> or <br/>'''Do''' <ul>instructions</ul> '''Loop Until''' notcondition | '''For''' i '''=''' first '''To''' last «'''Step 1'''» <ul>instructions</ul> '''Next i''' | '''For Each''' item '''In''' set <ul>instructions</ul> '''Next''' item |- | Visual Basic .NET | '''For i '''«'''As '''type» '''=''' first '''To''' last «'''Step 1'''» <ul>instructions</ul>'''Next i'''{{ref|step|[a]}} | '''For Each''' item '''As '''type''' In''' set <ul>instructions</ul> '''Next''' item |- | Python | '''while''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions» | {{n/a}} | '''for i in range('''first''', '''last'''):''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions» | '''for''' item '''in''' set''':''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions» |- | S-Lang | '''while ('''condition''') {''' instructions '''}''' «'''then''' optional-block» | '''do {''' instructions '''} while ('''condition''')''' «'''then''' optional-block» | '''for (i = '''first'''; i < '''last'''; i++) {''' instructions '''}''' «'''then''' optional-block» | '''foreach''' item'''('''set''')''' «'''using ('''what''')'''» '''{''' instructions '''}''' «'''then''' optional-block» |- | Fortran | '''DO WHILE ('''condition''') <ul> '''instructions'''</ul> ENDDO''' | '''DO <ul> '''instructions''' <br/> IF ('''condition''') EXIT </ul> ENDDO''' | '''DO '''I''' = '''first''','''last''' <ul> '''instructions''' </ul> ENDDO''' | {{n/a}} |- | Forth | '''BEGIN '''« instructions » condition''' WHILE '''instructions''' REPEAT''' | '''BEGIN ''' instructions condition''' UNTIL''' | limit start''' DO '''instructions''' LOOP''' | {{n/a}} |- | OCaml | '''while''' condition '''do''' instructions '''done''' | {{n/a}} | '''for i = '''first''' to '''last'''-1 do''' instructions '''done''' | '''Array.iter (fun '''item''' -> '''instructions''') '''array <br/> '''List.iter (fun '''item''' -> '''instructions''') '''list |- | F# | '''while''' condition '''do''' <br/> {{keypress|Tab}} instructions | {{n/a}} | '''for i = '''first''' to '''last'''-1 do''' <br/> {{keypress|Tab}} instructions | '''for '''item''' in '''set''' do''' <br/> {{keypress|Tab}} 