as Flash and [[Scalable Vector Graphics|SVG]], combined with lack of MNG supporting viewers and services, web usages were far less than expected. ==Technical details== The structure of MNG files is essentially the same as that of PNG files, differing only in the slightly different signature (<code>8A 4D 4E 47 0D 0A 1A 0A</code> in [[hexadecimal]], where <code>4D 4E 47</code> is ASCII for "MNG" â€“ see [[Portable Network Graphics#File header|Portable Network Graphics: File header]]) and the use of a much greater variety of [[Portable Network Graphics#"Chunks" within the file|chunks]] to support all the animation features that it provides. Images to be used in the animation are stored in the MNG file as encapsulated PNG or [[JPEG Network Graphics|JNG]] images. Two versions of MNG of reduced complexity are also defined: MNG-LC (low complexity) and MNG-VLC (very low complexity). These allow applications to include some level of MNG support without having to implement the entire MNG specification, just as the [[Scalable Vector Graphics|SVG]] standard offers the "SVG Basic" and "SVG Tiny" subsets. MNG does not yet have a registered [[MIME]] media type, but <code>video/x-mng</code> or <code>image/x-mng</code> can be used. MNG animations may be included in [[HTML]] pages using the <code><embed></code> or <code><object></code> tag. MNG can either be lossy or lossless, depending whether the frames are encoded in PNG (lossless) or [[JPEG Network Graphics|JNG]] (lossy). ==Alternatives== [[Graphics Interchange Format|GIF]] is often used. [[Animated Portable Network Graphics|APNG]] is an alternative to MNG, non-standard yet gaining foothold in the World Wide Web. Yet another alternative would be using animated [[Scalable Vector Graphics|SVG]] images with embedded [[Portable Network Graphics|PNG]] or [[JPEG]] graphics. More commonly in present-day applications, animations (particularly interactive animations) are achieved using [[Adobe Flash]]. Another option for the Web is to write [[JavaScript]] code that loads still PNG or JPEG images of each frame, and displays them one by one for a specified time interval. Apart from requiring the user to have JavaScript support and choose to enable it, this method can be CPU and bandwidth intensive for pages with more than one image, large images, or high framerates. ==References== {{Reflist}} ==External links== * [http://www.libpng.org/pub/mng/ MNG Home Page] * [http://www.libmng.com/download.html?cat=3 List of browsers that support MNG images] * [http://mngzilla.sourceforge.net MNGzilla] - An attempt to create a Mozilla variant that has MNG support included * [http://www.libmng.com/MNGsuite/index.html MNG testcases] {{Compression Formats}} {{Graphics file formats}} {{DEFAULTSORT:Multiple-Image Network Graphics}} [[Category:Graphics file formats]] [[ca:MNG]] [[cs:Multiple-image Network Graphics]] [[de:Multiple-Image Network Graphics]] [[es:Multiple-image Network Graphics]] [[fr:Multiple-image Network Graphics]] [[hu:MNG (informatika)]] [[nl:Multiple-image Network Graphics]] [[ja:Multiple-image Network Graphics]] [[pl:MNG]] [[pt:Multiple-image Network Graphics]] [[ru:MNG]] [[sv:MNG]] [[uk:MNG]] [[yo:Multiple-image Network Graphics]] [[zh:MNG]]</text> </page> <page> <id>25350</id> <title>Multiple-indicator kriging</title> <text>{{Multiple issues | unreferenced=August 2007 | cleanup=August 2007 }} '''Multiple-indicator kriging''' ('''MIK''') is a recent advance on other techniques for [[mineral deposit]] modeling and resource block model estimation, such as ordinary [[kriging]]. Initially, ''MIK'' showed considerable promise as a new method that could more accurately estimate overall global mineral deposit concentrations or grades. ==Problems== Unfortunately, the technique has not lived up to the promised benefits. Many experimental reviews over a range of actual mineral deposits has demonstrated that the technique has frequently been responsible for the over-estimation of reported resources. Typically observed with the technique is an inflation of the reported total tonnage of mineralized deposit material, occasionally along with a coincidental non-proportional reported deposit grade. This problem has been reported for a range of different deposit types, including most typical precious metals and base metals deposits. The primary reason for the failure of the ''MIK'' technique has been demonstrated to be in part or totally due to each of the following deficiencies: * The use of inherently large block sizes (required for adequate spatially distributed drill-hole and block sample support) does not allow for adequate resolution of [[geological geometry]]; * The considerable level of difficulty in generating indicator cut-off [[variogram]]s for all indicator cut-off grade levels; * The failure of being able to determine the appropriate levels of post [[interpolation]] "uniform conditioning" support or adjustment for reported block grades; * The allocating of probability block proportions for each indicator cut-off levels is difficult to apply; * The accuracy of reported block grades often cannot be verified without the use of localized high density sampling. ''Conditional simulation'' is another new interpolation technique that will probably largely replace MIK for the purposes of global estimation and it is showing great promise as preferred deposit modeling method. [[Category:Geostatistics]] [[Category:Interpolation]] {{geology-stub}}</text> </page> <page> <id>25356</id> <title>Multiple Render Targets</title> <text>In the field of [[3D computer graphics]], '''Multiple Render Targets''', or MRT, is a feature of modern [[graphics processing units]] (GPUs) that allows the programmable [[rendering pipeline]] to render images to multiple [[Render Target|render target textures]] at once. These textures can then be used as inputs to other [[shaders]] or as texture maps applied to [[3D models]]. Introduced by [[OpenGL]] 2.0 and [[Direct3D]] 9, MRT can be invaluable to real-time 3D applications such as video games. Before the advent of MRT, a programmer would have to issue a command to the GPU to draw the 3D scene once for each render target texture, resulting in redundant vertex transformations which, in a real-time program expected to run as fast as possible, can be quite time-consuming. With MRT, a programmer creates a [[pixel shader]] that returns an output value for each render target. This pixel shader then renders to all render targets with a single draw command. A common use of MRT is [[deferred shading]], a shading process which, unlike [[forward shading]], performs lighting calculations on an entire 3D scene at once instead of on each individual object. To do this in real-time, MRT is used to store the required information for the lighting calculations in multiple render targets, which are then used after the entire scene has been drawn to calculate the lit final image. Typically one render target holds color and surface information of objects, while another contains the [[surface normals]] and depth information of the scene which are used to calculate the reflection of light. Additional render targets can be used to store information such 