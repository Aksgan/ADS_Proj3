are just one of many analytic tools that help making better decisions. [[User interfaces]] are built with off-the-shelf components and frequently change to adjust to evolving environments and new computing technologies. ==Timeline== * 1976 GAMS idea is presented at the ISMP Budapest * 1978 Phase I: GAMS supports [[linear programming]]. Supported platforms: Mainframes and Unix Workstations * 1979 Phase II: GAMS supports [[nonlinear programming]]. * 1987 GAMS becomes a commercial product * 1988 First PC System (16 bit) * 1988 Alex Meeraus, the initiator of GAMS and founder of [http://www.gams.com/ GAMS Development Corporation], is awarded [http://computing.society.informs.org/ INFORMS Computing Society] [http://computing.society.informs.org/prize.php Prize] * 1990 32 bit Dos Extender * 1990 GAMS moves to [[Georgetown, Washington, D.C.]] * 1991 Mixed Integer Non-Linear Programs capability (DICOPT) * 1994 GAMS supports [[mixed complementarity problem]]s * 1995 MPSGE language is added for CGE modeling * 1996 European branch opens in Germany * 1998 32 bit native Windows * 1998 [[Stochastic programming]] capability (OSL/SE, DECIS) * 1999 Introduction of the GAMS [[Integrated development environment]] (IDE) * 2000 [http://www.gamsworld.org/ GAMS World] initiative started * 2001 GAMS Data Exchange (GDX) is introduced * 2002 GAMS is listed in OR/MS 50th Anniversary list of milestones * 2003 [[Conic programming]] is added * 2003 [[Global optimization]] in GAMS * 2004 Quality assurance initiative starts * 2004 Support for Quadratic Constrained programs * 2005 Support for 64 bit PC Operating systems * 2006 GAMS supports parallel [[grid computing]] * 2007 GAMS supports open-source [[solver]]s from [[COIN-OR]] * 2008 Support for 32 and 64 bit [[Mac OS X]] * 2009 GAMS supports extended mathematical programs (EMP) * 2010 GAMS is awarded the [http://gor.uni-paderborn.de/40_Preise/UntPreis/ company award] of the German Society of Operations Research (GOR) ==Background== The driving force behind the development of GAMS were the users of [[mathematical programming]] who believed in [[Optimization (mathematics)|optimization]] as a powerful and elegant framework for solving real life problems in science and engineering. At the same time, these users were frustrated by high costs, skill requirements, and an overall low reliability of applying optimization tools. Most of the system's initiatives and support for new development arose in response to problems in the fields of [[economics]], [[finance]], and [[chemical engineering]], since these disciplines view and understand the world as a mathematical program. GAMSâ€™s impetus for development arose from the frustrating experience of a large economic modeling group at the [[World Bank]]. In hindsight, one may call it a historic accident that in the 1970s mathematical economists and statisticians were assembled to address problems of development. They used the best techniques available at that time to solve multi sectoral economy-wide models and large simulation and optimization models in agriculture, steel, fertilizer, power, water use, and other sectors. Although the group produced impressive research, initial success was difficult to reproduce outside their well functioning research environment. The existing techniques to construct, manipulate, and solve such models required several manual, time-consuming, and error-prone translations into different, problem-specific representations required by each solution method. During seminar presentations, modelers had to defend the existing versions of their models, sometimes quite irrationally, because time and money did not allow. Their models just could not be moved to other environments, because special programming knowledge was needed, and data formats and solution methods were not portable. The idea of an algebraic approach to represent, manipulate, and solve large scale mathematical models fused old and new paradigms into a [[consistent]] and computationally tractable system. Using [[matrix generators]] for [[linear program]]s revealed the importance of naming rows and columns in a consistent manner. The connection to the emerging relational data model became evident. Experience using traditional [[programming languages]] to manage those name spaces naturally lead one to think in terms of [[Set (mathematics)|sets]] and [[tuples]], and this led to the relational data model. Combining multi-dimensional algebraic notation with the relational data model was the obvious answer. Compiler writing techniques were by now widespread, and languages like GAMS could be implemented relatively quickly. However, translating this rigorous mathematical representation into the algorithm specific format required the computation of [[partial derivatives]] on very large systems. In the 1970s, [[TRW]] developed a system called [[PROSE]] that took the ideas of chemical engineers to compute point derivatives that were exact [[derivative]]s at a given point, and to embed them in a consistent, Fortran-style calculus [[modeling language]]. The resulting system allowed the user to use automatically generated exact first and second order derivatives. This was a pioneering system and an important demonstration of a concept. However, [[PROSE]] had a number of shortcomings: it could not handle large systems, problem representation was tied to an array-type data structure that required address calculations, and the system did not provide access to state-of-the art solution methods. From [[linear programming]], GAMS learned that exploitation of sparsity was the key to solve large problems. Thus, the final piece of the puzzle was the use of sparse data structures. ==A sample model== A transportation problem from [[George Dantzig]] is used to provide a sample GAMS model.<ref> {{cite manual | author = R E Rosenthal | title = GAMS: A User's Guide | section = Chapter 2: A GAMS Tutorial | publisher = The Scientific Press, Redwood City, California | date = 1988 }}</ref> This model is part of the model library which contains many more complete GAMS models. This problem finds a least cost shipping schedule that meets requirements at markets and supplies at factories. [[Dantzig]], G B, Chapter 3.3. In Linear Programming and Extensions. Princeton University Press, Princeton, New Jersey, 1963. Sets i canning plants / seattle, san-diego / j markets / new-york, Chicago, topeka / ; Parameters a(i) capacity of plant i in cases / seattle 350 san-diego 600 / b(j) demand at market j in cases / new-york 325 Chicago 300 topeka 275 / ; Table d(i,j) distance in thousands of miles new-york Chicago topeka seattle 2.5 1.7 1.8 san-diego 2.5 1.8 1.4 ; Scalar f freight in dollars per case per thousand miles /90/ ; Parameter c(i,j) transport cost in thousands of dollars per case 