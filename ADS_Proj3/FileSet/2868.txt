--> |stall speed kts= |stall speed note= |never exceed speed kmh= |never exceed speed mph= |never exceed speed kts= |never exceed speed note= |minimum control speed kmh= |minimum control speed mph= |minimum control speed kts= |minimum control speed note= |range km= |range miles= |range nmi= |range note= |combat range km= |combat range miles= |combat range nmi= |combat range note= |ferry range km= |ferry range miles= |ferry range nmi= |ferry range note= |endurance=1 hour 15 minutes<!-- if range unknown --> |ceiling m= |ceiling ft=23000 |ceiling note= |g limits=<!-- aerobatic --> |roll rate=<!-- aerobatic --> |glide ratio=<!-- sailplanes --> |climb rate ms= |climb rate ftmin= |climb rate note= |time to altitude= |sink rate ms=<!-- sailplanes --> |sink rate ftmin=<!-- sailplanes --> |sink rate note= |lift to drag= |wing loading kg/m2 |wing loading lb/sqft= |wing loading note= |disk loading kg/m2= |disk loading lb/sqft= |disk loading note= |power/mass= |thrust/weight= |more performance= <!-- Armament --> |armament=<!-- add (bulleted list) here or if you want to use the following specific parameters, remove this parameter--> |guns= |bombs= |rockets= |missiles= |hardpoints= |hardpoint capacity= |hardpoint rockets= |hardpoint missiles= |hardpoint bombs= |hardpoint other= |other armament= |avionics= }} <!-- ==See also== --> {{aircontent <!-- include as many lines are appropriate. additional lines/entries with carriage return. --> |see also= |related=<!-- related developments --> |similar aircraft=<!-- similar or comparable aircraft --> |lists=<!-- related lists --> }} ==Notes== {{reflist}} ==References== {{refbegin}} <!-- insert the reference sources here --> {{refend}} <!-- ==Further reading== --> <!-- ==External links== --> <!-- Navboxes go here --> {{Aviation lists}} [[Category:Unmanned aerial vehicles]]</text> </page> <page> <id>24002</id> <title>MemcacheDB</title> <text>{{Infobox Software |name = MemcacheDB |logo= |screenshot = |caption = |developer = |latest_release_version = 1.2.1 |latest_release_date = December 25, 2008 |operating_system = [[Cross-platform]] |genre = distributed memory caching system |license = [[BSD License]] |website = http://memcachedb.org/ }} '''MemcacheDB''' (pronunciation: mem-cash-dee-bee.) is a persistence enabled variant of [[memcached]], a general-purpose distributed memory caching system often used to speed up dynamic [[database]]-driven websites by caching data and [[Object (computer science)|objects]] in [[Computer storage|memory]]. The main difference between MemcacheDB and memcached is that MemcacheDB has its own key-value database system based on [[Berkeley DB]], so it is meant for persistent storage rather than as a cache solution. MemcacheDB is accessed through the same protocol as memcached, so applications may use any memcached API as a means of accessing a MemcacheDB database <ref>{{cite web|url=http://memcachedb.org/ |title=MemcacheDB official home page }}</ref>. MemcacheQ is a MemcacheDB variant that provides a simple [[message queue]] service. ==See also== * [[Membase]] ==External links== * http://memcachedb.org/ == References == {{reflist}} {{database-stub}} [[Category:Cross-platform software]] [[Category:Structured storage]] [[Category:Open source database management systems]]</text> </page> <page> <id>24006</id> <title>Memento pattern</title> <text>The '''memento pattern''' is a [[design pattern (computer science)|software design pattern]] that provides the ability to restore an object to its previous state ([[undo]] via rollback). The memento pattern is used by two objects: the ''originator'' and a ''caretaker''. The originator is some object that has an internal state. The caretaker is going to do something to the originator, but wants to be able to undo the change. The caretaker first asks the originator for a memento object. Then it does whatever operation (or sequence of operations) it was going to do. To roll back to the state before the operations, it returns the memento object to the originator. The memento object itself is an [[magic cookie|opaque object]] (one which the caretaker cannot, or should not, change). When using this pattern, care should be taken if the originator may change other objects or resources - the memento pattern operates on a single object. Classic examples of the memento pattern include the seed of a [[pseudorandom number generator]] (it will always produce the same sequence thereafter when initialized with the [[Random_seed|seed state]]) and the state in a [[finite state machine]]. == Example == <!-- Wikipedia is not a list of examples. Do not add examples from your favorite programming language here; this page exists to explain the design pattern, not to show how it interacts with subtleties of every language under the sun. Feel free to add examples here: http://en.wikibooks.org/wiki/Computer_Science_Design_Patterns/Memento --> {{wikibooks|Computer Science Design Patterns|Memento|Memento implementations in various languages}} The following [[Java (programming language)|Java]] program illustrates the "undo" usage of the Memento Pattern. <source lang="java"> import java.util.List; import java.util.ArrayList; class Originator { private String state; // The class could also contain additional data that is not part of the // state saved in the memento. public void set(String state) { System.out.println("Originator: Setting state to " + state); this.state = state; } public Memento saveToMemento() { System.out.println("Originator: Saving to Memento."); return new Memento(state); } public void restoreFromMemento(Memento memento) { state = memento.getSavedState(); System.out.println("Originator: State after restoring from Memento: " + state); } public static class Memento { private final String state; private Memento(String stateToSave) { state = stateToSave; } private String getSavedState() { return state; } } } class Caretaker { public static void main(String[] args) { List<Originator.Memento> savedStates = new ArrayList<Originator.Memento>(); Originator originator = new Originator(); originator.set("State1"); originator.set("State2"); savedStates.add(originator.saveToMemento()); originator.set("State3"); // We can request multiple mementos, and choose which one to roll back to. savedStates.add(originator.saveToMemento()); originator.set("State4"); originator.restoreFromMemento(savedStates.get(1)); } } </source> The output is: Originator: Setting state to State1 Originator: Setting state to State2 Originator: Saving to Memento. Originator: Setting state to State3 Originator: Saving to Memento. Originator: Setting state to State4 Originator: State after restoring from Memento: State3 <!-- Wikipedia is not a list of examples. Do not add examples from your favorite programming language here; this page exists to explain the design pattern, not to show how it interacts with subtleties of every language under the sun. Feel free to add examples here: http://en.wikibooks.org/wiki/Computer_Science_Design_Patterns/Memento --> ==External links== *[http://adapower.com/index.php?Command=Class&ClassID=Patterns&CID=271 Description of Memento Pattern] in [[Ada (programming language)|Ada]] * [http://dofactory.com/Patterns/PatternMemento.aspx Memento UML Class Diagram] with C# and .NET code samples * [http://sourcemaking.com/design_patterns/memento SourceMaking Tutorial] {{Design Patterns Patterns}} [[Category:Software design patterns]] [[Category:Articles with example Java code]] [[bg:Спомен (шаблон)]] [[ca:Memento (patró de disseny)]] [[de:Memento (Entwurfsmuster)]] [[es:Memento (patrón de diseño)]] [[fr:Mémento (patron de conception)]] [[it:Memento pattern]] [[ja:Memento パターン]] [[pl:Pamiątka (wzorzec projektowy)]] [[pt:Memento (informática)]] [[ru:Хранитель (шаблон проектирования)]] [[uk:Знімок (шаблон проектування)]] [[vi:Memento pattern]]</text> </page> <page> <id>24010</id> 