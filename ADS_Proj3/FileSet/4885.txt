Language''' is specified in a W3C Note and Sun provides an implementation.{{Fact|date=October 2007}} * '''W3C XML Pipeline Language (XPL) Version 1.0 (Draft) [http://www.w3.org/Submission/xpl/] [http://www.w3.org/TR/xml-pipeline/]''' is specified in a W3C Submission and a component of Orbeon Presentation Server OPS (now called Orbeon Forms). This specification provides an implementation of an earlier version of the language. XPL allows the declaration of complex pipelines with conditionals, loops, tees, aggregations, and sub-pipelines. * '''[[Apache Cocoon|Cocoon]] sitemaps''' allow, among other functionality, the declaration of XML pipelines. Cocoon sitemaps are one of the earliest implementations of the concept of XML pipeline. * '''smallx XML Pipelines''' are used by the smallx project. * '''ServingXML''' defines a vocabulary for expressing flat-XML, XML-flat, flat-flat, and XML-XML transformations in pipelines. * '''[http://www.polarlake.com/reference-data-distribution/xml-data-pipelining-platform PolarLake Circuit Markup Language]''' used by PolarLake's runtime to define [http://www.polarlake.com/reference-data-distribution/xml-data-pipelining-platform XML pipelines]. Circuits are collections of paths through which fragments of XML stream (usually as SAX or DOM events). Components are placed on paths to interact with the stream (and/or the outside world) in a low latency process. * '''xmlsh''' is a scripting language based on the unix shells which natively supports xml and text pipelines [http://www.xmlsh.org] == Pipe Granularity == Different XML Pipeline implementations support different granularity of flow. * Document: Whole documents flow through the pipe as atomic units. A document can only be in one place at a time. Though usually multiple documents may be in the pipe at once. * Event: Element/Text nodes events may flow through different paths. A document may be concurrently flowing through many components at the same time. == Standardization == Until may 2010, there was no widely used standard for XML pipeline languages. However, with the introduction of the [[W3C]] XProc standard as a [[W3C recommendation#Recommendation (REC)|W3C Recommendation]] as of May 2010 [http://www.w3.org/TR/xproc/], widespread adoption can be expected. ==XML Pipeline History== * 1972 [[Douglas McIlroy]] of [[Bell Laboratories]] adds the pipe operator to the [[UNIX]] command shell. This allows the output from one shell program to go directly into input of another shell program without going to disk. This allowed programs such as the UNIX [[awk]] and [[sed]] to be specialized yet work together [http://www.cs.dartmouth.edu/~doug/] [http://cm.bell-labs.com/cm/cs/who/dmr/hist.html]. For more details see [[Pipeline (Unix)]]. * 1993 [http://seanmcgrath.blogspot.com Sean McGrath] developed a C++ toolkit for [[SGML]] processing [http://xpipe.sourceforge.net/Articles/Miscellaneous/fog0000000020.html]. * 1998 [[Stefano Mazzocchi]] releases the first version of [[Apache Cocoon]], one of the first software programs to use XML pipelines. * 1998 [http://www.polarlake.com/ PolarLake] build [http://www.polarlake.com/reference-data-distribution/xml-data-pipelining-platform XML Operating System], which includes [http://www.polarlake.com/reference-data-distribution/xml-data-pipelining-platform XML Pipelining]. * 2002 Notes submitted by Norman Walsh and [[Eve Maler]] from [[Sun Microsystems]], as well as a W3C Submission submitted in 2005 by [[Erik Bruchez]] and [[Alessandro Vernet]] from [[Orbeon]], were important steps toward spawning an actual standardization effort. While neither submission directly became a W3C recommendation, they were considered key sources of inspiration for the W3C XML Processing [[Working group|Working Group]]. * September 2005 W3C XML Processing [[Working group|Working Group]] started. The task of this working group was to create a specification for an XML pipelining language. * August 2008, [http://www.xmlsh.org xmlsh], an XML pipeline language was announced at [http://www.balisage.net/Proceedings/vol1/html/Lee01/BalisageVol1-Lee01.html Balisage 2008] == See also == * [[Apache Cocoon]] * [[Identity transform]] * [[NetKernel]] * [[Pipeline (Unix)]] * [[W3C recommendation]] * [[XSLT]] * [[SYSQ]] * [[kyachahiye]] == External links == === Standards === ==== Recommandations ==== * [http://www.w3.org/TR/xproc/ XProc: An XML Pipeline Language], W3C Recommendation 11 May 2010 ==== Working drafts ==== * [http://www.w3.org/XML/Processing/ W3C XML Processing Model Working Group] * [http://www.w3.org/TR/xml-pipeline/ W3C XML Pipeline Definition Language Note] * [http://www.w3.org/Submission/xpl/ W3C XML Pipeline Language (XPL) Version 1.0 (Draft) Submission] === Product specific === * [http://www.oracle.com/technology/tech/xml/xdkhome.html Oracle's XML Pipeline Definition Language Controller Implementation] ''Part of XML Developer's kit, no individual download'' * [http://cocoon.apache.org/2.1/userdocs/concepts/sitemap.html Cocoon sitemap] * [http://www.1060research-server-1.co.uk/docs/3.2.0/book/tutorial/doc_guide_xml_pipelines_main.html NetKernel XML Pipelines] * [http://idealliance.org/proceedings/xtech05/papers/04-03-01/ Managing Complex Document Generation through Pipelining] * [http://www.orbeon.com/ois/doc/reference-xpl-pipelines XML Pipeline Language (XPL) Documentation] * [http://norman.walsh.name/2004/06/20/sxpipe SXPipe] * [http://www.polarlake.com/ PolarLake Reference data management] PolarLake XML circuits and reference data management * [https://smallx.dev.java.net/ smallx] * [http://servingxml.sourceforge.net/ ServingXML] * [http://www.stylusstudio.com/xml/pipeline.html XML Pipeline Implementation from Stylus Studio] - This program allows XML transforms to be chained together along with other operations on XML files such as validation and HTML tidy. * [http://xproc.org/ Norman Walsh's XProc web site] - Norman Walsh is the chair of the W3C XProc standards committee. * [http://yax.sourceforge.net/ yax - an XProc Implementation] currently with commandline and Apache ant interface * [http://pipes.yahoo.com/ Yahoo! Pipes] let's users create multi-source data mashups in a web-based visual environment * [http://www.xmlsh.org xmlsh] A shell for manipulating xml based on the unix shells. Supports in-process multithreaded xml and text processing pipelines. * [http://www.gerixsoft.com/blog/xslt/xml-pipeline-xslt] How to implement XML Pipeline in XSLT * [http://xmlcalabash.com/ Calabash is an implementation of XProc] * [https://community.emc.com/community/edn/xmltech/ Calumet] is an XProc implementation from EMC [[Category:XML-based standards]] [[Category:Inter-process communication]] [[de:XML Pipeline]] [[fr:Pipeline XML]] [[uk:XML pipeline]]</text> </page> <page> <id>40722</id> <title>XOR linked list</title> <text>{{Refimprove|date=October 2009}} '''XOR linked lists''' are a [[data structure]] used in [[computer programming]]. They take advantage of the bitwise [[exclusive disjunction]] (XOR) operation, here denoted by ⊕, to decrease storage requirements for [[linked list|doubly-linked list]]s. An ordinary doubly-linked list stores addresses of the previous and next list items in each list node, requiring two address fields: <code> ... A B C D E ... –> next –> next –> next –> <– prev <– prev <– prev <– </code> An XOR linked list compresses the same information into ''one'' address field by storing the bitwise XOR of the address for ''previous'' and the address for ''next'' in one field: <code> ... A B C D E ... <–> A⊕C <-> B⊕D <-> C⊕E <-> </code> When you traverse the list from left to right: supposing you are at C, you can take the address of the previous item, B, and XOR it with the value in the link field (B⊕D). You will then have the address for D and you can continue traversing the list. The same pattern applies in the other direction. To start traversing the list in either direction from some point, you need the address of 