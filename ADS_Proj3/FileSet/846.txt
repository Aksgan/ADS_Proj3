and Embedding|OLE]], [[OLE Automation]], [[ActiveX]], COM+ and [[Distributed Component Object Model|DCOM]] technologies. ==Overview== The essence of COM is a language-neutral way of implementing objects that can be used in environments different from the one in which they were created, even across machine boundaries. For well-authored components, COM allows reuse of objects with no knowledge of their internal implementation, as it forces component implementers to provide well-defined [[interface (computer science)|interfaces]] that are separate from the implementation. The different allocation semantics of languages are accommodated by making objects responsible for their own creation and destruction through [[reference counting|reference-counting]]. [[Type conversion|Casting]] between different interfaces of an object is achieved through the <code>QueryInterface()</code> function. The preferred method of inheritance within COM is the creation of sub-objects to which method calls are delegated. COM is an interface technology defined and implemented as standard only on [[Microsoft Windows]] and Apple's Core Foundation 1.3 and later plug-in API [http://developer.apple.com/library/mac/#documentation/CoreFoundation/Conceptual/CFPlugIns/Concepts/conceptual.html%23//apple_ref/doc/uid/20001160-102910-BAJFDFFC], that in any case implement only a subset of the whole COM interface<ref name="COM on MacOS">{{cite web | url = http://developer.apple.com/library/mac/#documentation/CoreFoundation/Conceptual/CFPlugIns/Concepts/com.html#//apple_ref/doc/uid/20001158-CJBEJBHH | title = Plug-ins and Microsoft’s COM | publisher = [[Apple Inc.]] | accessdate = 2010-10-05}}</ref>. For some applications, COM has been replaced at least to some extent by the [[.NET Framework|Microsoft .NET]] framework, and support for [[Web Services]] through the [[Windows Communication Foundation]] (WCF). However, COM objects can be used with all .NET languages through .NET [[COM Interop]]. Networked DCOM uses binary [[proprietary format]]s, while WCF encourages the use of [[XML]]-based [[SOAP (protocol)|SOAP]] messaging. COM is very similar to other [[component software]] interface technologies, such as [[CORBA]] and [[Java Beans]], although each has its own strengths and weaknesses. The characteristics of COM make it most suitable for the development and deployment of desktop applications{{Citation needed|date=March 2010}}, for which it was originally designed. ==History== One of the first methods of [[interprocess communication]] in Windows was [[Dynamic Data Exchange]] (DDE), first introduced in 1987, that allowed sending and receiving messages in so-called "conversations" between applications. [[Antony Williams (technologist)|Antony Williams]], one of the most notable thinkers involved in the creation of the COM architecture, later distributed two internal papers in Microsoft that embraced the concept of software components: ''Object Architecture: Dealing With the Unknown – or – Type Safety in a Dynamically Extensible Class Library'' in 1988 and ''On Inheritance: What It Means and How To Use It'' in 1990. These provided the foundation of many of the ideas behind COM. [[Object Linking and Embedding]] (OLE), Microsoft's first object-based framework, was built on top of DDE and designed specifically for [[compound document]]s. It was introduced with Word for Windows and Excel in 1991, and was later included with Windows, starting with version 3.1 in 1992. An example of a compound document is a spreadsheet embedded in a Word for Windows document: as changes are made to the spreadsheet within Excel, they appear automatically inside the Word document. In 1991, Microsoft introduced [[Visual Basic Extension]]s (VBX) with [[Visual Basic]] 1.0. A VBX is a packaged extension in the form of a [[dynamic-link library]] (DLL) that allowed objects to be graphically placed in a form and manipulated by [[property (programming)|properties]] and [[method (computer science)|methods]]. These were later adapted for use by other languages such as [[Visual C++]]. In 1993, when version [[Windows 3.1x|3.1]] of Windows was released, Microsoft released OLE 2 with its underlying [[object model]]. The COM [[Application binary interface]] (ABI) was the same as the MAPI ABI, which was released in 1992. While OLE 1 was focused on compound documents, COM and OLE 2 were designed to address software components in general. Text conversations and Windows messages had proved not to be flexible enough to allow sharing application features in a robust and extensible way, so COM was created as a new foundation, and OLE changed to OLE2. In 1994 [[OLE custom control]]s (OCXs) were introduced as the successor to VBX controls. At the same time, Microsoft stated that OLE 2 would just be known as "OLE", and that OLE was no longer an acronym, but a name for all of the company's component technologies. In early 1996, Microsoft found a new use for OLE Custom Controls, expanding their Web browser's capability to present content, renamed some parts of OLE relating to the [[Internet]] '''ActiveX''', and gradually renamed all OLE technologies to ActiveX, except the compound document technology that was used in [[Microsoft Office]]. Later that year, [[Distributed Component Object Model|DCOM]] was introduced as an answer to [[CORBA]]. ==Related technologies== COM was the major software development platform for Windows and, as such, influenced development of a number of supporting technologies. ===COM+=== In order for Microsoft to provide developers with support for [[distributed transaction]]s, resource pooling, disconnected applications, event publication and subscription, better memory and processor (thread) management, as well as to position Windows as an alternative to other enterprise-level operating systems, Microsoft introduced a technology called [[Microsoft Transaction Server]] (MTS) on Windows NT 4. With Windows 2000, that significant extension to COM was incorporated into the operating system (as opposed to the series of external tools provided by [[Microsoft Transaction Server|MTS]]) and renamed '''COM+'''. At the same time, Microsoft de-emphasized [[Distributed Component Object Model|DCOM]] as a separate entity. Components that made use of COM+ services were handled more directly by the added layer of COM+, in particular by operating system support for interception. In the first release of MTS, interception was tacked on - installing an MTS component would modify the [[Windows Registry]] to call the MTS software, and not the component directly. Windows 2000 also revised the Component Services control panel application used to configure COM+ components. An advantage of COM+ was that it could be run in "component farms". Instances of a component, if coded properly, could be pooled and reused by new calls to its initializing routine without unloading it from memory. Components could also be distributed (called from another machine). COM+ and [[Microsoft Visual Studio]] provided tools to make it easy to generate client-side proxies, so although DCOM was used to actually make the remote 