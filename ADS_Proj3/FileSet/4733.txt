attempting to establish delta/incremental [[data synchronization|synchronization]]; any object in the queried data source which was created, modified/changed, and/or deleted after the watermark value was established will be qualified as "above watermark" and could/should be returned to a delta-querying partner ==Methodology== '''Watermark''' term is often used in Directory Synchronization software development projects. For example products such as [[Microsoft Exchange Server]], [[Active Directory]], [[Active Directory Application Mode]] (ADAM), and [[Microsoft Identity Integration Server]] 2003/ Microsoft [[Identity Lifecycle Manager Server]] 2007, as well as [[Cisco Unified Communications Manager]] or [[Sun Microsystems]] [[IPlanet]] and other [[Lightweight Directory Access Protocol|LDAP]]-based directory products are using DirSync and consequently will consume "watermark" object to provide efficient synchronization between directories. Watermark object sometimes can be referred as "cookie". DirSync control implementation can differ from product to product, however concept of watermark will allow any product to read changes in the directory incrementally. {{Quotation|The DirSync control is a Lightweight Directory Access Protocol (LDAP) server extension that enables a program to search an Active Directory partition for objects that have changed. When a program performs a DirSync search, the program creates a cookie that identifies the directory state at the time of an earlier DirSync query. With the first search, the program creates an empty cookie and Active Directory returns all objects that satisfy the query. Active Directory also returns an updated cookie that can be passed to the next search to obtain changes that are made since the first search. This process is repeated for each search. |MSDN||from "How to poll for object attribute changes in Active Directory on Windows 2000 and Windows Server 2003'' May 23, 2007}} ==See also== * [[Watermark (disambiguation)]] * [[Microsoft Active Directory]] * [[Microsoft Identity Integration Server]] * [[High watermark (computer security)]] ==References== {{Refbegin}} * [http://ietfreport.isoc.org/idref/draft-armijo-ldap-dirsync/ "LDAP Control for Directory Synchronization"] Microsoft Corporation {{Refend}} == External links == * [http://support.microsoft.com/kb/827118 Understanding run profiles in MIIS 2003] * [http://www.microsoft.com/presspass/press/1999/mar99/dirsynpr.mspx Microsoft Publishes Open Directory-Synchronization Interface] * [http://www.cisco.com/en/US/docs/voice_ip_comm/cucm/admin/5_0_1/ccmsys/a04direc.html Understanding the Directory] * [http://ietfreport.isoc.org/idref/draft-armijo-ldap-dirsync/ LDAP Control for Directory] [[Category:Data synchronization]] [[Category:Identity management systems]]</text> </page> <page> <id>39849</id> <title>Watermarking attack</title> <text>{{Use ymd dates|date=September 2010}} In cryptography, a '''watermarking attack''' is an attack on [[disk encryption]] methods where the presence of a specially crafted piece of data (e.g., a [[decoy]] file) can be detected by an attacker without knowing the encryption [[key (cryptography)|key]]. ==Problem description== Disk encryption suites generally operate on data in 512-byte [[cylinder-head-sector|sector]]s which are individually encrypted and decrypted. These 512-byte sectors alone can use any [[block cipher mode of operation]] (typically [[Cipher Block Chaining|CBC]]), but since arbitrary sectors in the middle of the disk need to be accessible individually, they cannot depend on the contents of their preceding/succeeding sectors. Thus, with CBC, each sector has to have its own [[initialization vector]] (IV). If these IVs are predictable by an attacker (and the filesystem reliably starts file content at the same offset to the start of each sector, and files are likely to be largely contiguous), then there is a [[chosen plaintext attack]] which can reveal the existence of encrypted data, as follows. A special plaintext file is created and encrypted with the encryption method under attack, such that the first ciphertext block following the IV in two or more different (perhaps adjacent) sectors is identical. Doing this requires that plaintext block 1 [[XOR]] IV 1 is identical to plaintext block 2 XOR IV 2, thus that plaintext block 1 XOR plaintext block 2 is identical to IV 1 XOR IV 2. The ciphertext block patterns generated in this way can give away the existence of the file, without any need for the disk to be decrypted first. The problem is analogous to that of using block ciphers in the [[block cipher modes of operation#Electronic codebook (ECB)|electronic codebook (ECB)]] mode, but instead of whole blocks, only the first block in different sectors are identical. This weakness affected many [[disk encryption]] programs, including older versions of [[BestCrypt]]<ref name="bestcrypt-iv-flaw"> {{cite paper | author = Chiriliuc, Adal | title = BestCrypt IV generation flaw | date = 2003-10-23 | url = http://adal.chiriliuc.com/bc_iv_flaw.php | accessdate = 2006-08-23 }}</ref> as well as the now-deprecated [[cryptoloop]].<ref>{{cite web | last = Saarinen | first = Markku-Juhani O. | title = Linux for the Information Smuggler | date = 2004-02-19 | publisher = Helsinki University of Technology | url = http://mareichelt.de/pub/notmine/diskenc.pdf | format = [[PDF]] | accessdate = 2006-10-01 }}</ref> The problem can be relatively easily eliminated by making the IVs unpredictable with, for example, [[ESSIV]].<ref>{{cite web | last = Fruhwirth | first = Clemens | title = Linux hard disk encryption settings | url = http://clemens.endorphin.org/LinuxHDEncSettings | accessdate = 2006-01-02 }}</ref> Alternatively, one can use modes of operation specifically designed for disk encryption (see [[disk encryption theory]]). ==See also== * [[Disk encryption theory]] * [[Initialization vector]] * [[Block cipher modes of operation]] * [[Watermark]] ==Notes and references== <references /> [[Category:Cryptographic attacks]] [[Category:Disk encryption]] [[de:Wasserzeichenangriff]]</text> </page> <page> <id>39862</id> <title>Waveform buffer</title> <text>{{Unreferenced|date=December 2009}} {{Orphan|date=December 2009}} In [[computing]], a '''waveform buffer''' is a technique for digital synthesis of repeating waveforms. It is common in [[personal computer|PC]] [[sound card]]s. The waveform amplitude values are stored in a buffer memory, which is addressed from a phase generator, with the retrieved value then used as the basis of the synthesized signal. In the phase generator, a value proportional to the desired signal frequence is periodically added to an accumulator. The high order bits of the accumulator form the output address, while the typically larger number of bits in the accumulator and addition value results in an arbitrarily high frequency resolution. {{DEFAULTSORT:Waveform Buffer}} [[Category:Digital signal processing]]</text> </page> <page> <id>39863</id> <title>Wavefront .obj file</title> <text>{{Other uses|Obj (disambiguation)}} {{Infobox file format | name = OBJ geometry format | icon = | logo = | screenshot = | caption = | extension = <tt>.obj</tt> | mime = application/x-tgif? | type code = | uniform type = | magic = | owner = [[Wavefront Technologies]] | released = <!-- {{Start date|YYYY|mm|dd|df=yes}} --> | latest release version = | latest release date = <!-- {{Start date and age|YYYY|mm|dd|df=yes}} --> 