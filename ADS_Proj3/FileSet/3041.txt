Directory, objects that are updated on one [[Domain Controller]] are then replicated to other domain controllers through multi-master replication. It is not required for all domain controllers to replicate with each other's domain controller as this would cause excessive network traffic in large Active Directory implementations. Instead, domain controllers have a complex update pattern that ensures that all servers are updated in a timely fashion without excessive replication traffic. Some Active Directory needs are better served by [[Flexible single master operation]]. ===CA Directory=== [[CA Directory]] supports multi-master replication. ===OpenDS=== [[OpenDS]] implements multi-master replication since its version 1.0. The OpenDS multi-master replication is asynchronous, it uses a log with a publish-subscribe mechanism that allows scaling to a large number of writable copies. OpenDS replication does conflict resolution at the entry and attribute level. OpenDS replication can be used over Wide Area Network. ===OpenLDAP=== The widely used open source LDAP server implements multi-master replication since its version 2.4 (October 2007) [http://www.openldap.org/software/roadmap.html]. ===Oracle=== [[Oracle database]] [[Computer cluster|clusters]] implement multi-master replication using one of two methods. [[Asynchronous]] multi-master replication commits data changes to a [[deferred transaction queue]] which is periodically processed on all databases in the cluster. [[Synchronization (computer science)|Synchronous]] multi-master replication uses Oracle's two phase commit functionality to ensure that all databases with the cluster have a consistent [[dataset]]. ===MySQL=== [[MySQL]] ships with replication support. It is possible to achieve a multi-master replication scheme beginning from MySQL version 3.23. ===PostgreSQL=== [[PostgreSQL]], beginning from version 9.0, includes built-in binary replication, based on shipping the changes made to all database blocks to other systems asynchronously after commit. PostgreSQL also has the ability to run read-only queries against these replicated slaves. This allows splitting read traffic among multiple nodes efficiently. PostgreSQL offers multiple solutions for multi-master replication, including solutions based on two phase commit. There's [http://bucardo.org/wiki/Bucardo Bucardo], [http://www.rubyrep.org rubyrep], [http://pgpool.projects.postgresql.org/ PgPool and PgPool-II], [http://pgcluster.projects.postgresql.org/ PgCluster] and [http://www.continuent.com/community/lab-projects/sequoia Sequoia] as well as some proprietary solutions. Another promising approach, implementing eager (synchronous) replication is [http://www.postgres-r.org Postgres-R], however it is still in development. Yet another project, implementing synchronous replication is [http://sourceforge.net/projects/postgres-xc/ Postgres-XC]. Postgres-XC also is still under development. ===Ingres=== Within [[Ingres (database)|Ingres]] Replicator, objects that are updated on one Ingres server can then replicated to other servers whether local or remote through multi-master replication. If one server fails, client connections can be re-directed to another server. It is not required for all Ingres servers in an environment to replicate with each other as this could cause excessive network traffic in large implementations. Instead, Ingres Replicator provides an elegant and sophisticated design that allows the appropriate data to be replicated to the appropriate servers without excessive replication traffic. This means that some servers in the environment can serve as failover candidates while other servers can meet other requirements such as managing a subset of columns or tables for a departmental solution, a subset of rows for a geographical region or one-way replication for a reporting server. In the event of a source, target, or network failure, data integrity is enforced through this two-phase commit protocol by ensuring that either the whole transaction is replicated, or none of it is. In addition, Ingres Replicator can operate over RDBMSâ€™s from multiple vendors to connect them. ==See also== * [[Flexible single master operation]] * [[Active Directory]] * [[Distributed database management system]] * [[DNS zone transfer]] * [[Optimistic_replication|Optimistic Replication]] ==References== {{reflist|2}} * [http://www.dbspecialists.com/presentations/mm_replication.html Challenges Involved in Multimaster Replication] * [http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/distrib/dsbh_rep_fgtk.asp Active Directory Replication Model] * [http://www.postgres-r.org/documentation/terms Terms and Definitions for Database Replication] * [http://dbreplicator.org DBReplicator Project Page] * [http://www.dmoz.org/Computers/Software/Databases/Replication/ DMOZ Open Directory Project - Database Replication Page] [[Category:Computer storage]] [[Category:Identity management]] [[Category:Distributed computing architecture]] {{compu-storage-stub}}</text> </page> <page> <id>25283</id> <title>MultiSwap</title> <text>{{Infobox block cipher | name = MultiSwap | image = | caption = | designers = [[Microsoft]] | publish date = April 1999 | derived from = | derived to = | related to = | key size = 374 bits | block size = 64 bits | structure = | rounds = | cryptanalysis = The [[differential cryptanalysis]] of Borisov, et al. requires about 2<sup>13</sup> [[chosen-plaintext attack|chosen plaintexts]] or about 2<sup>22</sup> [[known-plaintext attack|known plaintexts]] }} In [[cryptography]], '''MultiSwap''' is a [[block cipher]]/[[message authentication code|MAC]] created by [[Microsoft]] in 1999 as part of its [[Windows Media DRM]] service (WMDRM). Microsoft's internal name for the algorithm is not publicly known; it was dubbed MultiSwap in a 2001 report on WMDRM under the pseudonym "Beale Screamer". The cipher has a [[block size (cryptography)|block size]] of 64 bits, but the two halves are processed nearly separately. All arithmetic operations are performed [[modular arithmetic|mod]] 2<sup>32</sup>. In the encryption process, each half block has added to it the output of the previous half block. Next it undergoes 5 multiplications by odd 32-bit subkeys, each followed by a swap of its 16-bit halves. Then a final subkey is added to it. As the half blocks use separate subkeys, and the multipliers are forced to be odd, the total [[key size]] is 374 bits. The name MultiSwap comes from the cipher's multiplications and swaps. WMDRM uses this algorithm only as a MAC, never for encryption. Borisov, et al. applied a multiplicative form of [[differential cryptanalysis]] to break MultiSwap. == References == * {{cite web | author = Beale Screamer | title = Microsoft's Digital Rights Management Scheme &ndash; Technical Details | date = 18 October 2001 | url = http://cryptome.org/ms-drm.htm | accessdate = 20 September 2007 }} * {{cite web | author = [[Nikita Borisov]], Monica Chew, Rob Johnson, [[David A. Wagner|David Wagner]] | title = Cryptanalysis of MultiSwap | url = http://www.cs.sunysb.edu/~rob/multiswap/ | accessdate = 9 October 2010 }} * {{cite conference | author = Borisov, Chew, Johnson, Wagner | title = Multiplicative Differentials | conference = 9th International Workshop on [[Fast Software Encryption]] (FSE '02) | pages = 17&ndash;33 | publisher = [[Springer-Verlag]] | date = February 2002 | location = [[Leuven]] | url = http://citeseer.ist.psu.edu/672650.html | format = [[PDF]]/[[PostScript]] | accessdate = 3 January 2007 }} {{crypto-stub}} {{Crypto navbox | block}} [[Category:Broken block ciphers]] [[Category:Digital rights management]]</text> </page> <page> 