system crashes, freezes and disk corruption. Faulty operating system drivers were a source of instability for the operating system. Other [[Monolithic kernel|monolithic]] and [[hybrid kernel]]s, like [[Linux kernel|Linux]] and [[Architecture of Windows NT|Windows NT]], are also susceptible to malfunctioning drivers impeding the kernel's operation. Often the software developers of drivers and applications had insufficient experience with creating programs for the 'new' system, thus causing many errors which have been generally described as "system errors" by users, even if the error is not caused by parts of Windows or DOS. Microsoft has repeatedly redesigned the Windows Driver architecture since the release of Windows 95 as a result. ====CPU & Bus Technologies==== Windows 9x has no native support for [[hyper-threading]], [[Data Execution Prevention]], [[symmetric multiprocessing]] or [[Multi-core (computing)|multi-core]] processors. Windows 9x has no native support for [[Serial ATA|SATA]] host bus adapters (and neither did Windows 2000 and Windows XP), or [[USB]] drives (except Windows Me). There are, however, many SATA-I controllers for which Windows-98/ME drivers exist. Hardware driver support for Windows 98/ME began to decline in 2005, most notably for motherboard chipsets and video cards. Early versions of Windows 95 had no support for [[USB]] or [[AGP]] acceleration. ===MS-DOS=== [[Windows 95]] was able to reduce the role of [[MS-DOS]] in Windows much further than had been done in [[Windows 3.1x]] and earlier. According to Microsoft, MS-DOS served two purposes in Windows 95: as the boot loader, and as the 16-bit legacy device driver layer.<ref name="chen">{{cite web |url=http://blogs.msdn.com/oldnewthing/archive/2007/12/24/6849530.aspx |author=[[Raymond Chen]] |title=What was the role of MS-DOS in Windows 95?}}</ref> When Windows 95 started up, MS-DOS loaded, processed CONFIG.SYS, launched COMMAND.COM, ran AUTOEXEC.BAT and finally ran WIN.COM. The WIN.COM program used MS-DOS to load the virtual machine manager, read SYSTEM.INI, load the virtual device drivers, and then turn off any running copies of [[EMM386]] and switch into protected mode. Once in protected mode, the virtual device drivers ([[VxD]]s) transferred all state information from MS-DOS to the 32-bit file system manager, and then shut off MS-DOS. These VxDs allow Windows 9x to interact with hardware resources directly, as providing low-level functionalities such as [[32-bit disk access]] and memory management. All future file system operations would get routed to the 32-bit file system manager.<ref name="chen" /> In [[Windows Me]], win.com was no longer executed during the startup process; instead it went directly to execute VMM32.VXD from IO.SYS. The second role of MS-DOS (as the 16-bit legacy device driver layer) was as a backward compatibility tool for running DOS programs in Windows. Many MS-DOS programs and device drivers interacted with DOS in a low-level way; for example, by patching low-level BIOS interrupts such as [[INT 13|int 13h]], the low-level disk I/O interrupt. When a program issued an int 21h call to access MS-DOS, the call would go first to the 32-bit file system manager, which would attempt to detect this sort of patching. If it detects that the program has tried to hook into DOS, it will jump back into the 16-bit code to let the hook run. A 16-bit driver called IFSMGR.SYS would previously have been loaded by CONFIG.SYS, the job of which was to hook MS-DOS first before the other drivers and programs got a chance, then jump from 16-bit code back into 32-bit code, when the DOS program had finished, to let the 32-bit file system manager continue its work.<ref name="chen" /> According to Windows developer [[Raymond Chen]], "''MS-DOS was just an extremely elaborate decoy. Any 16-bit drivers and programs would patch or hook what they thought was the real MS-DOS, but which was in reality just a decoy. If the 32-bit file system manager detected that somebody bought the decoy, it told the decoy to quack.''<ref name="chen" /> ====MS-DOS Virtualisation==== Windows 9x can run MS-DOS applications within itself using a method called "Virtualization", where an application is run on a "Virtual DOS Machine". ====MS-DOS Mode==== Windows 95 and Windows 98 also offer regressive support for DOS applications in the form of being able to boot into a native "DOS Mode" (MS-DOS can be booted without booting Windows, not putting the CPU in protected mode). Through Windows 9x's memory managers and other post-DOS improvements, the overall system performance and functionality is improved. This differs from the emulation used in Windows NT-based operating systems. Some very old applications or hardware require "DOS Mode". Having a command line mode outside of the GUI also offers the ability to fix certain system errors without entering the GUI. For example, if a virus is active in GUI mode it can often be safely removed in DOS mode, by deleting its files, which are usually locked while infected in Windows. Similarly, corrupted registry files, system files or boot files can be restored from the command line. Windows 95 and Windows 98 can be started from DOS Mode by typing <tt>'WIN'</tt> <enter> at the command prompt. However, the [[Recovery Console]] for [[Windows 2000]], which as a version of Windows NT played a similar role in removing viruses. Because DOS was not designed for multitasking purposes, Windows versions such as 9x that are DOS-based lack File System security, such as file permissions. Further, if the user uses 16-bit DOS drivers, Windows can become unstable. Hard disk errors often plague the Windows 9x series. ===User interface=== {{See also|User interface}} Users can control a Windows 9x-based system through a [[command line interface]] (or CLI), or a [[graphical user interface]] (or GUI). For desktop systems, the default mode is usually graphical user interface, where the CLI is available through [[MS-DOS]] windows. The [[graphical user interface]] (GUI) runs on a DOS-based layer. The [[Graphics Device Interface|GDI]], which is a part of the Win32 and Win16 subsystems, is also a module that is loaded in [[user mode]], unlike Windows NT where the GDI is loaded in [[kernel mode]]. [[Alpha compositing]] and therefore [[Transparency (graphic)|transparency]] effects, such as fade effects in menus, are not supported by the [[Graphical Device Interface|GDI]] in Windows 9x. On desktop machines, [[Windows Explorer]] is the default user interface, though a variety of 