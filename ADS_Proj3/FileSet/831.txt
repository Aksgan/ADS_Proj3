'''o''';''' o''' << '''number'''; '''string '''= '''o'''.str();''' |- | C# | integer '''= int.Parse('''string''');''' | long '''= long.Parse('''string''');''' | float '''= float.Parse('''string''');''' or<br/> double '''= double.Parse('''string''');''' | colspan=2|string '''= '''number'''.ToString();''' |- | Java | integer '''= Integer.parseInt('''string''');''' | long''' = Long.parseLong('''string''');''' | float''' = Float.parseFloat('''string''');''' or<br/> double '''= Double.parseDouble('''string''');''' | string''' = Integer.toString('''integer''');''' | string''' = Float.toString('''float''');''' or<br/> string''' = Double.toString('''double''');''' |- | JavaScript{{ref|JavaScript's technicalities|[a]}} | colspan=2|integer '''= parseInt('''string''');''' | float '''= parseFloat('''string''');''' or<br/> float''' = new Number ('''string''')''' or<br/> float''' = Number ('''string''')''' or<br/> float '''= '''string'''*1;''' | colspan=2| string''' = '''number'''.toString ();''' or<br/> string '''= new String ('''number''');''' or<br/> string '''= String ('''number''');''' or<br/> string''' = '''number'''+"";''' |- | Go | integer''',''' error '''= strconv.Atoi('''string''')''' | long''',''' error '''= strconv.Atoi64('''string''')''' | float''',''' error '''= strconv.Atof('''string''')''' | string '''= strconv.Itoa('''integer''')''' or<br/> string '''= fmt.Sprint('''integer''')''' | string '''= strconv.Ftoa('''float''')''' or<br/> string '''= fmt.Sprint('''float''')''' |- | Common Lisp | colspan=2|'''(setf''' integer '''(parse-integer '''string'''))''' | '''(setf''' float '''(read-from-string '''string'''))''' | colspan=2|'''(setf''' string '''(princ-to-string '''number'''))''' |- | Scheme | colspan=3|'''(define''' number '''(string->number '''string'''))''' | colspan=2|'''(define''' string '''(number->string '''number'''))''' |- | Pascal <!-- Pascal or Delphi? --> | integer ''':= StrToInt('''string''');''' | | float ''':= StrToFloat('''string''');''' | string ''':= IntToStr('''integer''');''' | string ''':= FloatToStr('''float''');''' |- | Visual Basic | rowspan=2|integer''' = CInt('''string''')''' | rowspan=2|long''' = CLng('''string''')''' | rowspan=2|float''' = CSng('''string''')''' or<br/> double''' = CDbl('''string''')''' | rowspan=2 colspan=2|string''' = CStr('''number''')''' |- | Visual Basic .NET |- | Python | integer''' = int('''string''')''' | long''' = long('''string''')''' | float''' = float('''string''')''' | colspan=2|string''' = str('''number''')''' |- | S-Lang | integer''' = [[atoi]]('''string''');''' | long''' = [[atol (programming)|atol]]('''string''');''' | float''' = [[atof]]('''string''');''' | colspan=2|string''' = string('''number''');''' |- | Fortran | colspan=3|'''READ('''string''','''format''') '''number | colspan=2|'''WRITE('''string''','''format''') '''number |- | PHP | colspan=2| integer '''= intval('''string''');''' or<br/> integer '''= (int)'''string''';''' | float '''= floatval('''string''');''' or<br/> float '''= (float)'''string''';''' | colspan=2| string '''= "'''number'''";''' or<br/> string '''= strval('''number''');''' or<br/> string '''= (string)'''number''';''' |- | Perl{{ref|Perl's technicalities|[b]}} | colspan=3| number '''= 0 +''' string; | colspan=2| string '''= "'''number'''";''' |- | Perl 6 | colspan=3| number '''= +'''string; | colspan=2| string '''= ~'''number''';''' |- | Ruby | colspan=2| integer '''=''' string'''.to_i''' or<br/>integer '''= Integer('''string''')''' | float '''=''' string'''.to_f''' or<br/>float '''= Float('''string''')''' | colspan=2| string '''=''' number'''.to_s''' |- | Windows PowerShell | integer''' = [int]'''string | long''' = [long]'''string | float''' = [float]'''string | colspan=2|string''' = [string]'''number''';''' or<br/>string''' = "'''number'''";''' or<br/>string''' = ('''number''').ToString()''' |- | OCaml | '''let''' integer''' = int_of_string '''string | | '''let''' float''' = float_of_string '''string | '''let''' string''' = string_of_int '''integer | '''let''' string''' = string_of_float '''float |- | F# | '''let''' integer''' = int '''string | '''let''' integer''' = int64 '''string | '''let''' float''' = float '''string | colspan=2| '''let''' string''' = string '''number |- | Standard ML | '''val''' integer''' = Int.fromString '''string | | '''val''' float''' = Real.fromString '''string | '''val''' string''' = Int.toString '''integer | '''val''' string''' = Real.toString '''float |- | Haskell (GHC) | colspan=3| number '''= read '''string | colspan=2| string '''= show '''number |} {{note|JavaScript's technicalities|a}} JavaScript only uses floating point numbers so there are some technicalities.<ref name="Javascript numbers"/> <br/>{{note|Perl's technicalities|b}} Perl doesn't have separate types. Strings and numbers are interchangeable. == [[Standard streams|Standard Input and Standard Output]] == {| class="wikitable" |- ! rowspan=2| ! read from ! colspan=2| write to |- ! [[stdin]] ! [[stdout]] ! [[stderr]] |- | [[ALGOL 68]] | '''readf(('''$format$''', '''x'''));''' or <br/> '''getf(stand in, ('''$format$''', '''x'''));''' | '''[[printf]](('''$format$''', '''x'''));''' or <br/> '''putf(stand out, ('''$format$''', '''x'''));''' | '''putf(stand error, ('''$format$''', '''x'''));'''{{ref|a68|[a]}} |- | C (C99) | '''[[scanf]]('''format''', &'''x''');''' or <br/> '''[[fscanf]](stdin, '''format''', &'''x''');''' {{ref|more c input|[b]}} | '''[[printf]]( '''format''', '''x''');''' or <br/> '''[[fprintf]](stdout, '''format''', '''x''');''' {{ref|more c output|[c]}} | '''[[fprintf]](stderr, '''format''', '''x''' );'''{{ref|more c error output|[d]}} |- | Objective-C | data = '''[[NSFileHandle fileHandleWithStandardInput] readDataToEndOfFile];''' | '''[[NSFileHandle fileHandleWithStandardOutput] writeData:'''data'''];''' | '''[[NSFileHandle fileHandleWithStandardError] writeData:'''data'''];''' |- | C++ | [[iostream|«'''std::'''»'''cin''']] '''>>''' x''';''' or <br/> «'''std::'''»'''getline('''«'''std::'''»'''cin, '''str''');''' | [[iostream|«'''std::'''»'''cout''']] '''<<''' x''';''' | [[iostream|«'''std::'''»'''cerr''']] '''<<''' x''';''' or<br/> [[iostream|«'''std::'''»'''clog''']] '''<<''' x''';''' |- | C# | x ''' = Console.Read();''' or <br/> x '''= Console.ReadLine();''' | '''Console.Write('''«format''', '''»x''');''' or <br/> '''Console.WriteLine('''«format''', '''»x''');''' | '''Console.Error.Write('''«format''', '''»x''');''' or <br/> '''Console.Error.WriteLine('''«format''', '''»x''');''' |- | Java | x '''= System.in.read();''' or <br/> x '''= new Scanner(System.in).nextInt();''' or <br/> x '''= new Scanner(System.in).nextLine();''' | '''System.out.print('''x''');''' or <br/> '''System.out.[[printf]]('''format''', '''x''');''' or <br/> '''System.out.println('''x''');''' | '''System.err.print('''x''');''' or <br/> '''System.err.[[printf]]('''format''', '''x''');''' or <br/> '''System.err.println('''x''');''' |- | Go | '''fmt.Scan(&'''x''')''' or <br/> '''fmt.[[Scanf]]('''format''', &'''x''')''' or <br/> x = '''bufio.NewReader(os.Stdin).ReadString('\n')''' | '''fmt.Println('''x''')''' or<br/> '''fmt.[[Printf]]('''format''', '''x''')''' | '''fmt.Fprintln(os.Stderr, '''x''')''' or<br/> '''fmt.[[Fprintf]](os.Stderr, '''format''', '''x''')''' |- | JavaScript<br/><small>[[Client-side JavaScript|Web Browser implementation]]</small> | | '''document.write('''x''')''' | |- | JavaScript<br/><small>[[Active Server Pages]]</small> | | '''Response.Write('''x''')''' | |- | JavaScript<br/><small>[[Windows Script Host]]</small> | x '''= WScript.StdIn.Read('''chars''')''' or<br/> x '''= WScript.StdIn.ReadLine()''' | '''WScript.Echo('''x''')''' or<br/> '''WScript.StdOut.Write('''x''')''' or<br/> '''WScript.StdOut.WriteLine('''x''')''' | '''WScript.StdErr.Write('''x''')''' or<br/> '''WScript.StdErr.WriteLine('''x''')''' |- | Common Lisp | '''(setf''' x '''(read-line))''' | '''(princ''' x''')''' or<br/> '''(format t '''format x''')''' | '''(princ''' x''' *error-output*)''' or<br/> '''(format *error-output* '''format x''')''' |- | Scheme (R<sup>6</sup>RS) | '''(define''' x''' (read-line))''' | '''(display''' x''')''' or<br/> '''(format #t '''format x''')''' | '''(display''' x''' (current-error-port))''' or<br/> '''(format (current-error-port) '''format x''')''' |- | Pascal | '''read('''x''');''' or <br/> '''readln('''x''');''' | '''write('''x''');''' or <br/> '''writeln('''x''');''' | rowspan=2 {{n/a}} |- | Visual Basic | '''Input'''« prompt''','''»''' '''x''' | '''Print '''x or <br/> '''? '''x''' |- | Visual Basic .NET | x ''' = Console.Read()''' or <br/> x '''= Console.ReadLine()''' | '''Console.Write('''«format''', '''»x''')''' or <br/> '''Console.WriteLine('''«format''', '''»x''')''' | '''Console.Error.Write('''«format''', '''»x''')''' or <br/> '''Console.Error.WriteLine('''«format''', '''»x''')''' |- | Python 2.x | x '''= raw_input('''«prompt»''')''' | '''print''' x or <br/> '''sys.stdout.write('''x''')''' | '''print >> sys.stderr,''' x or <br/> '''sys.stderr.write('''x''')''' |- | Python 3.x | x '''= input('''«prompt»''')''' | '''print('''x«''', end=""'''»''')''' | '''print('''x«''', end=""'''»''', file=sys.stderr)''' |- | S-Lang | '''[[fgets]] (&'''x''', stdin)''' | '''[[fputs]] ('''x''', stdout)''' | '''[[fputs]] ('''x''', stderr)''' |- | Fortran | '''READ(*,'''format''') '''variable names''' or <br/> READ(INPUT_UNIT,'''format''') '''variable names'''{{ref|Fortran standard units|[e]}} | '''WRITE(*,'''format''') '''expressions''' or <br/>WRITE(OUTPUT_UNIT,'''format''') '''expressions'''{{ref|Fortran standard units|[e]}} | '''WRITE(ERROR_UNIT,'''format''') '''expressions{{ref|Fortran standard units|[e]}} |- | Forth | buffer length''' ACCEPT''' ( # chars read ) <br/>'''KEY''' ( char ) | buffer length''' TYPE'''<br/>char''' EMIT''' | {{n/a}} |- | PHP | $x '''= [[fgets]](STDIN);''' or 