a vector bundle, there is one-to-one correspondence between [[connection (vector bundle)|linear connections]] <math>\Gamma</math> on <math>E\to X</math> and the connections <math>\nabla</math> on the <math>C^\infty(X)</math>-module of sections of <math>E\to X</math>. Strictly speaking, <math>\nabla</math> corresponds to the [[covariant derivative|covariant differential]] of a connection on <math>E\to X</math>. == Graded commutative algebra == The notion of a connection on modules over commutative rings is straightforwardly extended to modules over a [[superalgebra|graded commutative algebra]].<ref>Bartocci (1991), Mangiarotti (2000)</ref> This is the case of [[supergeometry|superconnections]] in [[supergeometry]] of [[graded manifold]]s and [[supergeometry|supervector bundles]]. Superconnections always exist. == Noncommutative algebra == If <math>A</math> is a noncommutative ring, connections on left and right <math>A</math>-modules are defined similarly to those on modules over commutative rings.<ref>Landi (1997)</ref> However these connections need not exist. In contrast with connections on left and right modules, there is a problem how to define a connection on an <math>R-S</math>-[[bimodule]] over noncommutative rings <math>R</math> and <math>S</math>. There are different definitions of such a connection.<ref>Dubois-Violette (1996), Landi (1997)</ref> Let us mention one of them. A connection on an <math>R-S</math>-bimodule <math>P</math> is defined as a bimodule morphism : <math> \nabla:D(A)\ni u\to \nabla_u\in Diff_1(P,P)</math> which obeys the Leibniz rule : <math>\nabla_u(apb)=u(a)pb+a\nabla_u(p)b +apu(b), \quad a\in R, \quad b\in S, \quad p\in P.</math> == See also == *[[Connection (vector bundle)]] *[[Noncommutative geometry]] *[[Supergeometry]] *[[Differential calculus over commutative algebras]] == Notes == {{reflist}} == References == * Koszul, J., Homologie et cohomologie des algebres de Lie,''Bulletin de la Societe Mathematique'' '''78''' (1950) 65 * Koszul, J., ''Lectures on Fibre Bundles and Differential Geometry'' (Tata University, Bombay, 1960) * Bartocci, C., Bruzzo, U., Hernandez Ruiperez, D., ''The Geometry of Supermanifolds'' (Kluwer Academic Publ., 1991) ISBN 0792314409 * Dubois-Violette, M., Michor, P., Connections on central bimodules in noncommutative differential geometry, ''J. Geom. Phys.'' '''20''' (1996) 218 * Landi, G., ''An Introduction to Noncommutative Spaces and their Geometries'', Lect. Notes Physics, New series m: Monographs, '''51''' (Springer, 1997) * Mangiarotti, L., [[Gennadi Sardanashvily|Sardanashvily, G.]], ''Connections in Classical and Quantum Fiel Theory'' (World Scientific, 2000) ISBN 9810220138 == External links == * [[Gennadi Sardanashvily|Sardanashvily, G.]], Lectures on differential geometry of modules and rings, [http://xxx.lanl.gov/abs/0910.1515 arXiv: 0910.1515] [[Category:Geometry]] [[Category:Connection (mathematics)]] [[Category:Noncommutative geometry]]</text> </page> <page> <id>7826</id> <title>Consistent heuristic</title> <text>{{Context|date=October 2009}} In [[computer science]], a '''consistent''' (or '''monotone''') [[heuristic function]] is a strategy for [[Search algorithm|search]] that approaches the solution in an incremental way without taking any step back. Formally, for every node ''N'' and every successor ''P'' of ''N'' generated by any action ''a'', the estimated cost of reaching the goal from ''N'' is no greater than the step cost of getting to ''P'' plus the estimated cost of reaching the goal from ''P''. In other words: : <math>h(N) \leq c(N,P) + h(P)</math> and : <math>h(G) = 0.\,</math> where :* ''h'' is the consistent heuristic function :* ''N'' is any node in the graph :* ''P'' is any child of ''N'' :* ''G'' is any goal node. A consistent heuristic is also [[admissible heuristic|admissible]]. This is proved by induction on <math>m</math>, the length of the best path from node to goal. By assumption, <math>h(N_m) \leq h^*(N_m)</math>, where <math>h^*(n)</math> denotes the cost of the shortest path from ''n'' to the goal. Therefore, :<math>h(N_{m+1}) \leq c(N_{m+1}, N_m) + h(N_m) \leq c(N_{m+1}, N_m) + h^*(N_m) = h^*(N_{m+1})</math>, making it admissible. (<math>N_{m+1}</math> is any node whose best path to the goal, of length m+1, goes through some immediate child <math>N_{m}</math> whose best path to the goal is of length m.) Note: not all admissible heuristics are consistent. However, an admissible heuristic <math>h</math>, can be made into a consistent heuristic, <math>h'</math>, through the following adjustment: : <math> h'(P) \gets \max(h(P), h'(N) - c(N,P)) </math> (Known as the pathmax<ref name="Russell 1995">{{cite book | first = Stuart | last = Russell | coauthors = Peter Norvig | title = Artificial intelligence: a modern approach | publisher = Prentice-Hall | year = 1995 | isbn = 0-13-103805-2 }}</ref> equation.) ==Consequences of monotonicity== [[File:Heuristics Comparison.png|thumb|250px|Comparison of an admissible but inconsistent and a consistent heuristic evaluation function.]] Consistent heuristics are called monotone because the estimated final cost of a partial solution, <math>f(N_j)=g(N_j)+h(N_j)</math> is monotonically non-decreasing along the best path to the goal, where <math>g(N_j)=\sum_{i=2}^j c(N_{j-1},N_j)</math> is the cost of the best path from start node <math>N_1</math> to <math>N_j</math>. It's necessary and sufficient for a heuristic to obey the [[triangle inequality]] in order to be consistent.<ref>{{cite book | first = Judea | last = Pearl | title = Heuristics: Intelligent Search Strategies for Computer Problem Solving | publisher = Addison-Wesley | year = 1984 | isbn = 0-201-05594-5 }}</ref> In the [[A* search algorithm]], using a consistent heuristic means that once a node is expanded, the cost by which it was reached is the lowest possible, under the same conditions that Dijkstra's algorithm requires in solving the [[shortest path problem]] (no negative cost cycles). In fact, if the search graph is given cost <math>c'(N,P)=c(N,P)+h(P)-h(N)</math> for a consistent <math>h</math>, then A* is equivalent to best-first search on that graph using Dijkstra's algorithm<ref name="Russell 1995"/>. In the unusual event that an admissible heuristic is not consistent, a node will need repeated expansion every time a new best (so-far) cost is achieved for it. ==References== <references/> ==External links== * CS141 Lecture from Brown University [http://cs.brown.edu/courses/csci1410/amy_notes/graphs.pdf] [[Category:Heuristics]]</text> </page> <page> <id>7827</id> <title>Console application</title> <text>{{Unreferenced stub|auto=yes|date=December 2009}} :''This article refers to applications with text input consoles. See [[console game]] for more information about applications that can run on [[video game console]]s.'' [[Image:Fdedit.png|right|thumb|FreeDOS edit, a [[text editor]].]] [[Image:Alpine email client.png|right|thumb|Alpine, an [[e-mail client]].]] [[Image:Irssi.png|right|thumb|Irssi, an [[IRC client]].]] A '''console application''' is a [[computer program]] designed to be used via a text-only computer interface, such as a [[text terminal]], the [[command line interface]] of some [[operating system]]s ([[Unix]], [[DOS]], etc.) or the text-based interface included with most [[Graphical user interface|Graphical User Interface]] (GUI) operating systems, such as the [[Win32 console]] in [[Microsoft Windows]], the Terminal in [[Mac OS X]], and [[xterm]] in Unix. A user typically interacts with a console application using only a [[computer keyboard|keyboard]] and [[computer display|display screen]], as opposed to GUI applications, which normally require the 