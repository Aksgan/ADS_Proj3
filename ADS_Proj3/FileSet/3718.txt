Schwartz has owned and operated Stonehenge Consulting Services, Inc. === Intel case === In July 1995, Schwartz was prosecuted in the case of ''State of Oregon vs. Randal Schwartz'', which dealt with compromised computer security during his time as a system administrator for [[Intel]]; he cracked a number of passwords on Intel's systems.<ref>http://www.lightlink.com/spacenka/fors/police/report-lazenby.html</ref> Schwartz was originally convicted on three felony counts, with one reduced to a misdemeanor, but on February 1, 2007 his arrest and conviction records were sealed through an official [[expungement]] and he is legally no longer a felon.<ref>[http://www.lightlink.com/spacenka/fors/ State of Oregon vs. Randal Schwartz] - Case summary</ref> == Bibliography == * ''[[Programming Perl]]'', ISBN 0-937175-64-1; '''ISBN 1-56592-149-6 ''(2ed)''<nowiki></nowiki>''' * ''[[Learning Perl]]'', ISBN 1-56592-042-2; ISBN 1-56592-284-0 ''(2ed)''; ISBN 0-596-00132-0 ''(3ed)''; ISBN 0-596-10105-8 ''(4ed)''; ISBN 0-596-52010-7 ''(5ed)'' [http://oreilly.com/catalog/9780596520113/] (2008) * ''[[Intermediate Perl]]'', ISBN 0-596-10206-2 (2006) * ''[[Learning Perl on Win32 Systems]]'', ISBN 1-56592-324-3 * ''[[Learning Perl Objects, References & Modules]]'' [http://www.oreilly.com/catalog/lrnperlorm/] (2003), ISBN 0-596-00478-8 * ''[[Effective Perl Programming]]'', ISBN 0-201-41975-0 * Preface for ''[[Object Oriented Perl]]'', ISBN 1-884777-79-1 * Collected columns in ''[[Randal Schwartz's Perls of Wisdom]]'', ISBN 1-59059-323-5 == References == {{Reflist}} == External links == * [http://www.stonehenge.com/merlyn/columns.html Original text from his bio at one of his many columns] * [http://www.oreillynet.com/cs/catalog/view/au/335 O'Reilly's author page with bio] * [http://www.stonehenge.com/merlyn/ Randal's web page] * [http://methodsandmessages.vox.com/ Randal's Smalltalk and Seaside blog (defunct)] * [http://methodsandmessages.posterous.com/ Randal's Smalltalk and Seaside blog (new location)] * [http://www.twit.tv/floss/randall_schwartz FLOSS Weekly 9 Netcast] Interview with Randal Schwartz * [http://www.flickr.com/photos/randal-schwartz Randal's personal photographs] [[Flickr]] Album {{Perl}} {{TWiT podcasts}} {{Persondata <!-- Metadata: see [[Wikipedia:Persondata]]. --> | NAME = Schwartz, Randal L. | ALTERNATIVE NAMES = | SHORT DESCRIPTION = | DATE OF BIRTH = November 22, 1961 | PLACE OF BIRTH = | DATE OF DEATH = | PLACE OF DEATH = }} {{DEFAULTSORT:Schwartz, Randal L.}} [[Category:1961 births]] [[Category:Living people]] [[Category:American computer programmers]] [[Category:American technology writers]] [[Category:People from Portland, Oregon]] [[Category:Perl writers]] [[Category:O'Reilly writers]] [[de:Randal L. Schwartz]] [[pl:Randal L. Schwartz]]</text> </page> <page> <id>31222</id> <title>Random early detection</title> <text>[[Image:Random Early Detection algorithm en.svg|right|350px]] '''Random early detection''' (RED), also known as '''random early discard''' or '''random early drop''' is an [[Active Queue Management|active queue management]] [[algorithm]]. It is also a [[Network congestion avoidance|congestion avoidance]] algorithm.<ref>{{cite journal | last = Floyd | first = Sally | coauthors = Jacobson, Van | title = Random Early Detection (RED) gateways for Congestion Avoidance | url = http://www.icir.org/floyd/papers/red/red.html | journal = IEEE/ACM Transactions on Networking | volume = 1 | issue = 4 | year = 1993 | month = August | accessdate = 2008-03-16 | pages = 397â€“413 | doi = 10.1109/90.251892}}</ref> In the traditional [[tail drop]] algorithm, a [[router]] or other [[Computer networking device|network component]] buffers as many packets as it can, and simply drops the ones it cannot buffer. If buffers are constantly full, the network is [[Network congestion|congested]]. Tail drop distributes buffer space unfairly among traffic flows (as the number of packets lost is proportional to the number sent - irrespective of their size). Tail drop can also lead to [[TCP global synchronization]] as all [[Transmission Control Protocol|TCP]] connections "hold back" simultaneously, and then step forward simultaneously. Networks become under-utilized and flooded by turns. RED addresses these issues. It monitors the average queue size and drops (or marks when used in conjunction with [[Explicit Congestion Notification|ECN]]) packets based on statistical probabilities. If the buffer is almost empty, all incoming packets are accepted. As the queue grows, the probability for dropping an incoming packet grows too. When the buffer is full, the probability has reached 1 and all incoming packets are dropped. RED is more fair than tail drop, in the sense that it does not possess a bias against bursty traffic that uses only a small portion of the bandwidth. The more a host transmits, the more likely it is that its packets are dropped as the probability of a host's packet being dropped is proportional to the amount of data it has in a queue. Early detection helps avoid TCP global synchronization. Pure RED does not accommodate [[quality of service]] (QoS) differentiation. [[Weighted random early detection|Weighted RED]] (WRED) and RED In/Out (RIO) provide early detection with QoS considerations. == Problems with Classic RED == According to [[Jim Gettys]] and [[Van Jacobson]], "there are not one, but two bugs in classic RED."<ref>{{cite web |url=http://gettys.wordpress.com/2010/12/17/red-in-a-different-light/ |title=RED in a Different Light |first=Jim |last=Gettys |date=17 December 2010 |work=jg's Ramblings |accessdate=27 December 2010}}</ref> Improvements to the algorithm were developed, and a draft paper<ref>{{Citation | last = Jacobson | first = Van | last2 = Nichols | first2 = Kathy | last3 = Poduri | first3 = Kedar | title = RED in a Different Light | date = 30 September 1999 | url = http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.9406 | doi = 10.1.1.22.9406 }}</ref> was prepared, but the paper was never published, and the improvements were not widely disseminated or implemented. == Other variants == In ''Weighted RED'' you can have different probabilities for different priorities ([[Type of Service|IP precedence]], [[DSCP]]) and/or queues <ref>{{cite book | first=H. Jonathan |last=Chao | url= http://onlinelibrary.wiley.com/doi/10.1002/0471224391.fmatter_indsub/pdf|title= Quality of service control in high speed networks |publisher = John Wiley & Sons Inc.| location = 605 Third Avenue, New York, NY |year = 2002 | isbn= 0-471-00397-2 }} </ref>. The ''Adaptive / Active RED'' (ARED) algorithm<ref>{{cite paper | first = Sally | last = Floyd | coauthors = Gummadi, Ramakrishna; Shenker, Scott | title = Adaptive RED: An Algorithm for Increasing the Robustness of RED's Active Queue Management | url = http://citeseer.ist.psu.edu/floyd01adaptive.html | date = 2001-08-01 | accessdate = 2008-03-16}}</ref> infers whether to make RED more or less aggressive based on the observation of the average queue length. If the average queue length oscillates around ''min'' threshold then early detection is too aggressive. On the other hand if the average queue length oscillates around ''max'' threshold then early detection is being too conservative. The algorithm changes the probability according to how aggressive it senses it has been discarding traffic. See Srikant<ref>{{cite book | last = Srikant | first = Rayadurgam | url = http://www.springer.com/birkhauser/mathematics/book/978-0-8176-3227-4 | title 