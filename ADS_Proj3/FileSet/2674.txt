loop device functionality under different names. In Linux, device names are encoded in the symbol table entries of their corresponding device drivers. The device is called "loop" device and device nodes are usually named <tt>/dev/loop0</tt>, <tt>/dev/loop1</tt>, etc. They can be created by the [[makedev]] script for the static device directory, or dynamically by the facilities of the device filesystem ([[udev]]). The management user interface for the loop device is <tt>losetup</tt> and is part of the [[util-linux]] package. Sometimes, the loop device is erroneously referred to as 'loopback' device, but this term is reserved for a networking device in the Linux kernel (cf. [[loopback]]). The concept of the 'loop' device is distinct from that of 'loopback', although similar in name. In BSD-derived systems, such as [[NetBSD]] and [[OpenBSD]], the loop device is called "virtual node device" or "vnd", and generally located at <tt>/dev/vnd0</tt>, <tt>/dev/rvnd0</tt> or <tt>/dev/svnd0</tt>, etc., in the file system. The <tt>vnconfig</tt> program is used for configuration. [[FreeBSD]] followed the same conventions as other BSD systems until release version 5, in which the loop device was incorporated into the memory disk driver ("md"). Configuration is now performed using the <tt>mdconfig</tt><ref>[http://www.freebsd.org/cgi/man.cgi?mdconfig mdconfig&mdash;configure and enable memory disks, FreeBSD manual page]</ref> program. In [[Solaris (operating system)|Solaris]]/[[OpenSolaris]], the loop device is called "loopback file interface" or lofi,<ref>http://docs.sun.com/app/docs/doc/819-2254/lofi-7d</ref> and located at <tt>/dev/lofi/1</tt>, etc. SunOS has the <tt>lofiadm</tt> configuration program. The "lofi" driver supports read-only compression and read-write encryption. There is also a 3rd party "fbk"<ref>ftp://ftp.berlios.de/pub/schily/kernel/fbk/</ref> (File emulates Blockdevice) driver available for SunOS/Solaris since summer 1988. [[Mac OS X]] implements a native image mounting mechanism as part of its random access disk device abstraction. The devices appear in <tt>/dev</tt> as regular disk devices; reads from and writes to those devices are sent to a user-mode helper process, which reads the data from the file or writes it to the file. In the user interface it is automatically activated by opening the disk image. It can handle disk, CD-ROM or DVD images in various formats. Loop mounting is not natively available on [[Microsoft Windows]] operating systems (until version [[Windows 7]], where this functionality is natively implemented, and available through the [[diskpart]] utility).<ref>See for example: [http://blogs.msdn.com/7/archive/2009/10/08/diskpart-exe-and-managing-virtual-hard-disks-vhds-in-windows-7.aspx DiskPart: vdisk create select attach], [http://www.sevenforums.com/tutorials/2953-virtual-hard-drive-vhd-file-create-start-boot.html install and boot Windows 7 from virtual disk drive] and [http://www.google.com/search?num=100&hl=en&lr=&q=%22Diskpart%22+%22vdisk%22+create+select+attach+detach+site%3Atechnet.microsoft.com+-site%3Asocial.technet.microsoft.com&aq=f&aqi=&aql=&oq=&gs_rfai= other] relative articles on this thematics.</ref> However, the facility is often added using third-party applications such as ''[[Daemon Tools]]'' and ''[[Alcohol 120%]]''. Freely-available tools from [http://www.vmware.com/download/eula/diskmount_ws_v55.html VMware] and [http://www.ltr-data.se/opencode.html#ImDisk LTR Data] ([[ImDisk]]) can also be used to achieve similar functionality. ==Example== Mounting a file containing a disk image on a directory requires two steps: # association of the file with a loop [[device node]], # mounting of the loop device at a mount point directory These two operations can be performed either using two separate commands, or through special flags to the mount command. The first operation may be performed by programs such as <tt>losetup</tt><ref>[http://www.cl.cam.ac.uk/cgi-bin/manpage?8+losetup losetup manual page]</ref> in [[Linux]], or <tt>lofiadm</tt><ref>[http://docs.sun.com/app/docs/doc/819-2240/lofiadm-1m?a=view lofiadm, Sun System Administration Command manual]</ref> in SunOS. As an example, if <code>example.img</code> is a regular file containing a filesystem and <code>/home/you/dir</code> is a Linux user's directory, the [[superuser]] (root) may mount the file on the directory by executing the following two commands: losetup /dev/loop0 example.img mount /dev/loop0 /home/you/dir The second command mounts the device on the directory <code>/home/you/dir</code>. The overall effect of executing these two commands is that the content of the file is used as a file system rooted at the mount point. The mount utility is usually capable of handling the entire procedure: mount -o loop example.img /home/you/dir The device can then be unmounted with the following command: umount /home/you/dir # or, after finding the associated loop number by e.g. mount | grep "/home/you/dir" # or losetup -a | grep example.img umount /dev/loop<N> At a lower level [[application programming interface]] (API), the association and disassociation of a file with a loop device is performed with the [[ioctl]] [[system call]] on a loop device. ==See also== * [[Device file system]] * [[Virtual drive]] * [[Network block device]] used when the file to associate with the device is on a remote computer * [[cloop]] - a special compressed version of a loop device i.e. for live CDs * With similar name, but different concept, a [[Loopback#Virtual Internet Protocol Network Interface|loopback interface]], or loopback device is network facility in UNIX-like operating systems * [[Disk image]] ==References== {{Reflist|2}} ==External links== * [http://www.linux.org/docs/ldp/howto/Cryptoloop-HOWTO/loopdevice-setup.html Setting up the loop device] from the [[cryptoloop]] [[HOWTO]]. * [http://bochs.sourceforge.net/doc/docbook/user/loop-device-usage.html Mounting a disk image using the loop device] from the ''[[Bochs]] User Manual'' * {{man|8|losetup}} [[Category:Unix]] [[Category:Linux kernel features]] [[de:Loop device]] [[it:Loop device]]</text> </page> <page> <id>22640</id> <title>Loop invariant</title> <text>In [[computer science]], a '''loop invariant''' is an [[invariant (computer science)|invariant]] used to prove properties of [[Loop (computing)|loop]]s. Informally, a loop invariant is a statement of the conditions that should be true on entry into a loop and that are guaranteed to remain true on every iteration of the loop. This means that on exit from the loop both the loop invariant and the loop termination condition can be guaranteed. Specifically in [[Hoare logic|Floyd-Hoare logic]]<ref>[[Robert Floyd|R. W. Floyd]]. "Assigning meanings to programs." Proceedings of the American Mathematical Society Symposia on Applied Mathematics. Vol. 19, pp. 19–31. 1967. ([http://laser.cs.umass.edu/courses/cs521-621.Spr06/papers/Floyd.pdf]) </ref><ref>[[C. A. R. Hoare]]. "[http://sunnyday.mit.edu/16.355/Hoare-CACM-69.pdf An axiomatic basis for computer programming]". ''[[Communications of the ACM]]'', 12(10):576&ndash;585, October 1969. {{doi|10.1145/363235.363259}} </ref>, the [[partial correctness]] of a [[while loop]] is governed by the following rule of inference: :<math>\frac{\{C\land I\}\;\mathrm{body}\;\{I\}} {\{I\}\;\mathbf{while}\ (C)\ \mathrm{body}\;\{\lnot C\land I\}}</math> This means: * A while loop does not have the side effect of falsifying <math>I</math>—if the loop's body does not change an invariant <math>I</math> from true to false given the condition <math>C</math>, then <math>I</math> will still be true after the loop has run as long as it was true before. * <math>while(C) ...</math> runs as long as the condition <math>C</math> is true—after the loop has run, if it terminates, <math>C</math> is false. The rule above is a deductive step that has as its premise the [[Hoare triple]] <math>\{C\land I\}\;\mathrm{body}\;\{I\}</math>. This triple is actually 