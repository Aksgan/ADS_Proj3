<code>struct</code>s are valid C++ <code>struct</code>s with the same semantics. ===Declaration=== A <code>struct</code> declaration consists of a list of fields, each of which can have any type. The total storage required for a <code>struct</code> object is the sum of the storage requirements of all the fields, plus any internal [[Data structure alignment#Data structure padding|padding]]. For example: <source lang="c"> struct Account { int account_number; char *first_name; char *last_name; float balance; }; </source> defines a type, referred to as <code>struct Account</code>. To create a new variable of this type, we can write <code>struct Account myAccount;</code> which has an integer component, accessed by <code>myAccount.account_number</code>, and a floating-point component, accessed by <code>myAccount.balance</code>, as well as the <code>first_name</code> and <code>last_name</code> components. The structure <code>myAccount</code> contains all four values, and all four fields may be changed independently. Since writing <code>struct Account</code> repeatedly in code becomes cumbersome, it is not unusual to see a <code>typedef</code> statement in C code to provide a more convenient synonym for the <code>struct</code>. For example: <source lang="c"> typedef struct Account_ { int account_number; char *first_name; char *last_name; float balance; } Account; </source> In C++ code, the [[Typedef|<code>typedef</code>]] is not needed because types defined using <code>struct</code> are already part of the regular namespace, so the type can be referred to as either <code>struct Account</code> or simply <code>Account</code>. As another example, a three-dimensional Vector composite type that uses the floating point data type could be created with: <source lang="c"> struct Vector { float x; float y; float z; }; </source> A variable named <code>velocity</code> with a <code>Vector</code> composite type would be declared as <code>Vector velocity;</code> Members of the <code>velocity</code> would be accessed using a dot notation. For example, <code>velocity.x = 5;</code> would set the <code>x</code> component of <code>velocity</code> equal to 5. Likewise, a color structure could be created using: <source lang="c"> struct Color { unsigned int red; unsigned int green; unsigned int blue; }; </source> In 3D graphics, you usually must keep track of both the position and color of each vertex. One way to do this would be to create a <code>Vertex</code> composite type, using the previously created <code>Vector</code> and <code>Color</code> composite types: <source lang="c"> struct Vertex { Vector position; Color color; }; </source> ===Instantiation=== Create a variable of type <code>Vertex</code> using the same format as before: <code>Vertex v;</code> ===Member access=== Assign values to the components of <code>v</code> like so: <source lang="c"> v.position.x = 0.0; v.position.y = 1.5; v.position.z = 0.0; v.color.red = 128; v.color.green = 0; v.color.blue = 255; </source> ===Primitive subtype=== The primary use of <code>struct</code> is for the construction of complex datatypes, but sometimes it is used to create primitive [[Structural type system|structural]] [[subtype|subtyping]]. For example, since [[Standard C]] requires that if two structs have the same initial fields, those fields will be represented in the same way, the code <source lang="c"> struct ifoo_old_stub { long x, y; }; struct ifoo_version_42 { long x, y, z; char *name; long a, b, c; }; void operate_on_ifoo(struct ifoo_old_stub *); struct ifoo_version_42 s; . . . operate_on_ifoo(&s); </source> will work correctly. ==Function types== [[Function type]]s (or [[type signature]]s) are constructed from primitive and composite types, and can serve as types themselves when constructing composite types: <source lang="c"> typedef struct { int x; int y; } Point; typedef double (*Metric) (Point p1, Point p2); typedef struct { Point centre; double radius; Metric metric; } Circle; </source> ==See also== *[[Object composition]] *[[struct (C programming language)]] {{Data types}} [[Category:Data types]] [[Category:Composite data types|*]] [[Category:Type theory]] [[Category:Articles with example C code]] [[Category:Articles with example C++ code]] [[hu:Összetett adattípusok]] [[zh:複合型別]]</text> </page> <page> <id>7383</id> <title>Computational Center for Nanotechnology Innovations</title> <text>The '''Computational Center for Nanotechnology Innovations''' (CCNI) is a [[supercomputing]] center located at the Rensselaer Technology Park on the [[Rensselaer Polytechnic Institute]] campus in [[Troy, New York|Troy]], [[New York]]. ==Motivation== The center is the result of a $100 Million collaboration between [[Rensselaer Polytechnic Institute|RPI]], [[IBM]], and [[New York State]] to further [[nanotechnology]] innovations. The center's main focus is on reducing the cost associated with the development of nanoscale materials and devices, such as used in the [[semiconductor]] industry. The university has also stated the center will also be used for interdisciplinary research in [[biotechnology]], [[medicine]], [[energy]], and other fields. ==Computer Specs== At the release of the [[TOP500]] supercomputer rankings in June 2010 the CCNI was ranked the 80th most powerful supercomputer in the world, with a peak processing power of 91.75 [[FLOPS|Teraflops]] or 91.75 trillion floating point operations per second.<ref>{{cite web |url=http://www.top500.org/list/2010/06/100 |title=TOP500 List - June 2010 (1-100) | TOP500 Supercomputing Sites |publisher=[[TOP500]] |accessdate=2010-05-31 |year=2010 |month=May}}</ref> When finished, all of the systems at the center will have a combined power surpassing 100 teraflops. ===Hardware=== The main supercomputer consists of a series of IBM [[BlueGene/L]] systems which contain a total of 32,768 PowerPC 440 700 MHz processors. In addition there is also a heterogeneous array of Power-based Linux machines and [[AMD]] Opteron processor-based clusters running on a common file system with the main supercomputer. Together, these systems will create over 100 [[TeraFLOPS]] of computational power with associated high-speed networking and storage. The CCNI connects to the Rensselaer Troy campus and the [[NYSERNet]] optical research infrastructure, enabling gigabit/second connections to the [[Internet]] and [[Internet2]], [[National LambdaRail]] (NLR), and most of the research networks in the world through a [[peering point]] in Manhattan. ==References== {{reflist}} {{coord|42.68051|-73.69735|region:US_type:edu|display=title}} ==External links == * [http://www.rpi.edu/research/ccni/ Official Website] * [http://mediasite.itops.rpi.edu/Mediasite4/Viewer/Viewers/ViewerHD.aspx?mode=Default&peid=c04f5568-81bb-40fd-9434-0e32bc3f03e1&playerType=GeckoWM7&mode=Default&shouldResize=true&pid=d465cf82-82ee-42f2-aede-64e4a6213ec1&playerType=GeckoWM7 CCNI Sneak Preview webcast] *[http://news.rpi.edu/update.do?artcenterkey=1540 Original Press Release] *[http://wiki.ccni.rpi.edu CCNI Wiki] {{super-compu-stub}} {{RPITemplate}} [[Category:Supercomputer sites]] [[Category:Rensselaer Polytechnic Institute]] [[Category:Nanoscale Science Research Centers]]</text> </page> <page> <id>7388</id> <title>Computational Linguistics (journal)</title> <text>{{Infobox journal | title = Computational Linguistics | cover = [[File:Computational Linguistics.jpg|150px]] | editor = Robert Dale | discipline = [[Computational linguistics]] | language = English | abbreviation = Comput. Ling. | formernames = American Journal of Computational Linguistics | publisher = [[Association for Computational Linguistics]] and [[MIT Press]] | country = United States | frequency = Quarterly | history = 1974-present | openaccess = yes | impact = 2.212 | impact-year = 2009 | website = http://www.mitpressjournals.org/loi/coli | link1 = http://www.mitpressjournals.org/toc/coli/current | link1-name = Online access | link2 = http://www.mitpressjournals.org/loi/coli 