a wing commander in 1973 to join industry. From 1975 to 1976 he worked as the system design manager of the Tornado ADV aviation company and technical coordinator for UKAIR CCIS. From 1975 to 1979 he was head of [[Integrative learning|Integrated sciences]] in a grammar school, teaching physics, integrated science, mathematics, electronics, biology and astronomy to advanced level, with music, gymnastics and athletics as additional subjects. In 1980 he returned to industry and held posts at two leading systems engineering companies as Marketing Director, Business Development Director and Technical Director. He also worked as UK Technical Director for the [[NATO]] Air Command and Control System (ACCS) project in [[Brussels]] before becoming an academic in 1988.<ref> [http://www.incose.org/about/organization/bios/displayBio.aspx?bio_id=197222 Derek Hitchins], INCOSE website, retrieved Sept. 2007 </ref> In 1988 he became professor in Engineering Management at [[City University, London]]. From 1990 to 1994 he held the British Aerospace Chairs in Systems Science and in Command and Control, Cranfield University at RMCS Shrivenham. After his retirement in 1994 he continued as a part-time consultant, teacher, visiting professor and international lecturer. He was the inaugural president of the UK Chapter of [[INCOSE]], and also the inaugural chairman of the [[Institution of Electrical Engineers]]’ (IEE’s) Professional Group on Systems Engineering. For many years he was an independent member of the UK Defence Scientific Advisory Board. == Work == His current research is into system thinking, system requirements, social psychology & anthropology, Egyptology, command & control, system design and world-class systems engineering. == Publications == Hitchins wrote several books and article. <ref> For an overview, see [http://www.hitchins.net/CV.html Hitchins CV], Feb 2005.</ref> A selection: * 1990. ''Conceiving Systems''. Thesis (Ph.D.) City University, 1990. * 1992. ''Draft Guide to the Practice of System Engineering''. With John C. Boarder and Patrick D. R. Moore. Institution of Electrical Engineers. * 1993. ''Putting Systems to Work'', * 2000. [http://www.hitchins.net/ASE_Book.html ''Getting to Grips with Complexity or... A Theory of Everything Else...''] * 2003, ''Advanced Systems Thinking, Engineering and Management'', Norwood MA: Artech House. * 2003. ''The Pyramid Builder's Handbook'' * 2003. ''The Secret Diaries of Hemiunu'' * 2007. ''Systems Engineering: A 21st Century Systems Methodology''. Articles, a selection: * 2003, [http://www.hitchins.net/The%20Systems%20Approach.pdf ''Systems Methodology''], paper. * 2003, [http://www.hitchins.net/SystemofSystems.pdf ''What’s in a System-of-Systems?''], paper. == References == {{reflist}} == External links == * [http://www.hitchins.net/ Hitchins] homepage. * [http://incose.org.uk/people-dkh.htm Derek Hitchins], INCOSE 2007. * [http://www.hitchins.net/CV.html Hitchins CV], Feb 2005. {{Systems Engineering}} {{Persondata <!-- Metadata: see [[Wikipedia:Persondata]]. --> | NAME = Hitchins, Derek | ALTERNATIVE NAMES = | SHORT DESCRIPTION = | DATE OF BIRTH = | PLACE OF BIRTH = | DATE OF DEATH = | PLACE OF DEATH = }} {{DEFAULTSORT:Hitchins, Derek}} [[Category:1935 births]] [[Category:Academics of Cranfield University]] [[Category:British non-fiction writers]] [[Category:Living people]] [[Category:Systems engineers]] [[Category:Systems scientists]]</text> </page> <page> <id>10025</id> <title>Description logic</title> <text>'''Description logics''' (DL) are a family of formal [[knowledge representation]] languages. They are more expressive than [[propositional logic]] but have more efficient [[decision problem]]s than [[first-order predicate logic]]. DLs are used in [[Artificial Intelligence]] for formal reasoning on the concepts of an application domain (known as ''terminological knowledge''). They are of particular importance in providing a logical formalism for [[Ontology (information science)|Ontologies]] and the [[Semantic Web]]. The most notable application outside [[information science]] is in [[bioinformatics]] where DLs assist in the codification of medical knowledge. == Introduction == A Description Logic (DL) models ''concepts'', ''roles'' and ''individuals'', and their relationships. The fundamental modeling concept of a DL is the ''axiom'' - a logical statement relating roles and/or concepts<ref name="GHMPPS">Bernardo Cuenca Grau, Ian Horrocks, Boris Motik, Bijan Parsia, Peter Patel-Schneider, and Ulrike Sattler ''OWL 2: The next step for OWL''. Journal of Web Semantics, 6(4):309-322, November 2008, DOI: 10.1016/j.websem.2008.05.001</ref>. This is a key difference from the [[semantic frames|frame]]s paradigm where a ''frame specification'' declares and completely defines a class<ref name="GHMPPS"/>. == Nomenclature == === Differences from OWL === {| class="wikitable sortable" |+ Synonyms |- ! OWL ! DL |- | class | concept |- | property | role |- | object | individual |} === Naming Convention === There are many varieties of Description Logics and there is an informal naming convention, roughly describing the operators allowed. The [[Expressive power|expressivity]] is encoded in the label for a logic using the following letters: {| |- |<math>\mathcal{F}</math> ||Functional properties. |- | || |- |<math>\mathcal{E}</math> ||Full existential qualification (Existential restrictions that have fillers other than <code>owl:thing</code>). |- | || |- |<math>\mathcal{U}</math> ||Concept union. |- | || |- |<math>\mathcal{C}</math> ||Complex concept negation. |- | || |- |<math>\mathcal{S}</math> ||An abbreviation for <math>\mathcal{ALC}</math> with transitive roles. |- | || |- |<math>\mathcal{H}</math> ||Role hierarchy (subproperties - rdfs:subPropertyOf). |- | || |- |<math>\mathcal{R}</math> ||Limited complex role inclusion axioms; reflexivity and irreflexivity; role disjointness. |- | || |- |<math>\mathcal{O}</math> ||Nominals. (Enumerated classes of object value restrictions - <code>owl:oneOf</code>, <code>owl:hasValue</code>). |- | || |- |<math>\mathcal{I}</math> ||Inverse properties. |- | || |- |<math>\mathcal{N}</math> ||Cardinality restrictions (<code>owl:Cardinality</code>, <code>owl:MaxCardinality</code>). |- | || |- |<math>\mathcal{Q}</math> ||Qualified cardinality restrictions (available in OWL 2, cardinality restrictions that have fillers other than <code>owl:thing</code>). |- | || |- |<math>^\mathcal{(D)}</math> ||Use of datatype properties, data values or data types. |} ==== Examples ==== As an example, <math>\mathcal{ALC}</math> is a centrally important description logic from which comparisons with other varieties can be made. <math>\mathcal{ALC}</math> is simply <math>\mathcal{AL}</math> with complement of any concept allowed, not just atomic concepts. A further example, the description logic <math>\mathcal{SHIQ}</math> is the logic <math>\mathcal{ALC}</math> plus extended cardinality restrictions, and transitive and inverse roles. The naming conventions aren't purely systematic so that the logic <math>\mathcal{ALCOIN}</math> might be referred to as <math>\mathcal{ALCNIO}</math> and abbreviations are made where possible, <math>\mathcal{ALC}</math> is used instead of the equivalent <math>\mathcal{ALUE}</math>. The Protégé ontology editor supports <math>\mathcal{SHOIN}^\mathcal{(D)}</math>. Three major bioinformatic terminology bases, [[Snomed]], Galen, and GO, are expressible in <math>\mathcal{EL}</math> (with additional role properties). OWL 2 provides the expressiveness of <math>\mathcal{SROIQ}^\mathcal{(D)}</math>, OWL-DL is based on <math>\mathcal{SHOIN}^\mathcal{(D)}</math>, and for OWL-Lite it is <math>\mathcal{SHIF}^\mathcal{(D)}</math>. ==== Exceptions ==== Some canonical DLs that do not exactly fit this convention are: {| |- |<math>\mathcal{AL}</math> ||Attributive language. This is the base language which allows: |- | || * Atomic negation (negation of concepts 