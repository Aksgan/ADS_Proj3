social website that was targeted was not particularly active (compared to other popular XSS worm targets), the worm infected a total of 2525 profiles within roughly 24 hours. The worm was found a few hours before it was successfully removed, and based on data that was recorded (due to the worm's original intent for research purposes) the worm was able to infect uninfected profiles after they were sanitized forcefully by developers of Justin.tv. The worm was sanitized once more after the vulnerability was patched, and it was able to be removed easily. However, this shows the ability for the worm to adapt and spread even after counter-attack. Other particular factors which are indicated by the graphs and data released by attackers include social activity and lack of new, uninfected users during periods of time. ===Orkut "Bom Sabado" worm=== Orkut, a social networking Site, was also hit by a XSS worm. Infected users receive a scrap containing the words "Bom Sabado". Google has yet to comment on the situation.<ref>Bomsabado http://bomsabado.com</ref> ==References== {{Reflist}} {{DEFAULTSORT:Xss Worm}} [[Category:Computer worms]] [[Category:Computer security]] [[Category:Computer network security]] [[Category:Injection exploits]] [[Category:Computer security exploits]] [[Category:Web security exploits]]</text> </page> <page> <id>40749</id> <title>XTND</title> <text>{{for|the W3 standard|XML Transition Network Definition}} '''XTND''' was a document import/export system developed by [[Claris]] for their products on the [[Apple Macintosh]]. Products supporting XTND placed an additional popup menu in the open and save dialogs, allowing users to read and write documents from any supported format. The name is a four-letter contraction of ''extend'', the Mac using four-letter identifiers in its [[resource fork|system resource]] files. XTND was first introduced on some of Claris' "II" releases -- [[MacWrite|MacWrite II]], [[FileMaker|FileMaker II]] and [[MacDraw|MacDraw II]]. The system proved popular, and became a major selling point for Claris products, which were otherwise considered somewhat "low end". The system was soon used by a number of other products as well, and became fairly common during the early 1990s. Around 1990/91 Claris gave the system to Apple, who eventually re-branded it as a basic part of the Mac OS known as the '''Translation Manager'''. They also added '''Macintosh Easy Open''' which offered to open unknown documents using software installed on the machine and converting it using XTND. A developer's guide, ''XTND Programmer's Guide'', was published in 1991 along with the ''XTND Developer's Kit 1.3'', which was placed on their [[ftp]] site. XTND broke on the [[PowerMac]]s, but an extension-to-the-extension released in 1993 fixed that for a time. By the 1995/96 time frame it appears Apple had already abandoned the entire system. XTND consisted of a simple runtime engine that listed, loaded and managed a series of "translators". The translators were stored in resource files placed in the Mac's System folder, allowing them to be found and used by any program supporting the XTND system. Almost all of the actual logic was located in the translators, the runtime simply handed off filenames and parameters to code stored inside. The only technical problem with XTND was that the conversion process was "opaque". The system ran code in the translators which had no way to provide feedback to the user or ask questions. This made it was difficult to tell if long conversions were actually working or had locked up, a common occurrence as the code aged. Additionally the converters themselves varied widely in quality, in particular the [[Microsoft Word]] extension never really worked very well. == References == {{reflist}} {{refbegin}} * Apple Computer Inc., ''XTND Programmer's Guide'', 1991. {{refend}} [[Category:Mac OS software]] {{mac-software-stub}}</text> </page> <page> <id>40750</id> <title>XTR</title> <text>{{In progress}} In [[cryptography]], '''XTR''' is an [[algorithm]] for [[Public-key cryptography|public-key encryption]]. XTR stands for ‘ECSTR’, which is an abbreviation for Efficient and Compact Subgroup Trace Representation. It is a method to represent elements of a subgroup of a multiplicative group of finite field. To do so, it uses the trace over <math>GF(p^2)</math> to represent elements of a subgroup of <math>GF(p^6)^*</math>. From a security point of view, XTR relies on the difficulty of solving discrete logarithm related problems in the multiplicative group of a finite field. Unlike many cryptographic protocols that are based on the generator of the full multiplicative group of a finite field, XTR uses the generator ''g'' of a relatively small subgroup of order ''q'' of subgroup of <math>GF(p^6)^*</math>. With the right choice of ''q'', computing discrete logarithms in the group generated by ''g'' is in general as hard as it is in <math>GF(p^6)^*</math>. Some other advantages of XTR are its fast key generation, small key sizes and speed. == Fundamentals of XTR == XTR uses a subgroup, commonly referred to as ''XTR subgroup'', of a subgroup called ''XTR supergroup'', of the multiplicative group of <math>GF(p^6)</math>. XTR subgroup has prime order ''q'' and it is thus a cyclic group <math>\langle g\rangle</math> with generator ''g''. XTR supergroup is of order <math>p^2-p+1</math>, where ''p'' is a prime such that a sufficiently large prime ''q'' divides <math>p^2-p+1</math>. The following two sections will describe how elements of the XTR supergroup can be represented using an element of <math>GF(p^2)</math> instead of an element of <math>GF(p^6)</math> and how arithmetic operations could take place in <math>GF(p^2)</math> instead of in <math>GF(p^6)</math>. ===Arithmetic operations in <math>GF(p^2)</math> === Let ''p'' be a prime such that ''p'' {{unicode|≡}} ''2'' mod ''3'' and ''p<sup>2</sup> - p + 1'' has a sufficiently large prime factor ''q''. Since ''p<sup>2</sup>'' {{unicode|≡}} ''1'' mod ''3'' we see that ''p'' generates <math>(\mathbb{Z}/3\mathbb{Z})^*</math> and thus the third [[cyclotomic polynomial]] <math>\Phi_3(x)=x^2+x+1</math> is irreducible over <math>GF(p^2)</math>. It follows that the roots <math>\alpha</math> and <math>\alpha^p</math> form an optimal normal basis for <math>GF(p^2)</math> over <math>GF(p)</math> and :<math>GF(p^2) \cong \{x_1 \alpha + x_2 \alpha^p : x_1, x_2 \in GF(p)\}.</math> Considering that ''p'' {{unicode|≡}} ''2'' mod ''3'' we can reduce exponents mod ''3'' to get :<math>GF(p^2) \cong \{x_1 \alpha + x_2 \alpha^2 : \alpha^2+\alpha+1=0, x_1, x_2 \in GF(p)\}.</math> The cost of arithmetic operations is given in Lemma 2.21 <ref name="XTR-1">[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.104.2847&rep=rep1&type=pdf An overview of the XTR public key system]</ref>: * Computing ''x''<sup>''p''</sup> is done without using multiplication * Computing ''x''<sup>''2''</sup> takes two multiplications in <math>GF(p)</math> * Computing ''xy'' takes 