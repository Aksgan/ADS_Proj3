will be implemented. Instead, it focuses on what various outside agents (people using the program, computer peripherals, or other computve" when interacting with the system. A typical functional specification might state the following: :''When the user clicks the OK button, the dialog is closed and the focus is returned to the main window in the state it was in before this dialog was displayed.'' Such a requirement describes an interaction between an external agent (the [[User (computing)|user]]) and the software system. When the user provides input to the system by clicking the OK button, the program responds (or should respond) by closing the dialog window containing the OK button. It can be ''informal'', in which case it can be considered as a [[blueprint]] or user manual from a developer point of view, or ''[[Formal specification|formal]]'', in which case it has a definite meaning defined in [[mathematics|mathematical]] or programmatic terms. In practice, most successful specifications are written to understand and fine-tune applications that were already well-developed, although [[safety-critical]] [[software systems]] are often carefully specified prior to application development. Specifications are most important for external interfaces that must remain stable. == Functional specification topics == === Purpose === There are many purposes for functional specifications. One of the primary purposes on team projects is to achieve some form of team consensus on what the program is to achieve before making the more time-consuming effort of writing [[source code]] and [[test case]]s, followed by a period of [[debugging]]. Typically, such consensus is reached after one or more reviews by the [[Stakeholder (corporate)|stakeholder]]s on the project at hand after having negotiated a cost-effective way to achieve the requirements the software needs to fulfill. === Process === In the ordered industrial software engineering life-cycle ([[waterfall model]]), functional specification describes what has to be implemented. The next system specification document describes how the functions will be realized using a chosen software environment. In not industrial, prototypical systems development, functional specifications are typically written after or as part of [[requirements analysis]]. When the team agrees that functional specification consensus is reached, the functional spec is typically declared "complete" or "signed off". After this, typically the software development and testing team write source code and test cases using the functional specification as the reference. While testing is performed the behavior of the program is compared against the expected behavior as defined in the functional specification. == Types of software development specifications == * [[Advanced Microcontroller Bus Architecture]] * [[Bit specification]] * [[Design specification]] * [[Diagnostic design specification]] * [[Multiboot Specification]] * [[Product design specification]] * [[Real-time specification for Java]] * [[Software Requirements Specification]] == See also == * [[Benchmarking]] * [[Benchmark specification]] * [[Extensible Firmware Interface]] * [[Software development process]] * [[Specification (technical standard)]] * [[Single UNIX Specification]] * [[Verification and Validation (software)]] == References == {{reflist}} == External links == * [http://www.mojofat.com/tutorial/ Writing functional specifications Tutorial] * [http://www.joelonsoftware.com/articles/fog0000000036.html Painless Functional Specifications, 4-part series by Joel Spolsky] {{Software Engineering}} {{Systems Engineering}} {{DEFAULTSORT:Functional Specification}} [[Category:Software engineering]] [[Category:Systems engineering]] [[Category:Software documentation]] [[bs:Specifikacija programa]] [[de:Pflichtenheft]] [[hr:Specifikacija programa]] [[ja:プログラム仕様]] [[nl:Functionele analyse]] [[pt:Especificação de programa]]</text> </page> <page> <id>14402</id> <title>Fundamental modeling concepts</title> <text>{{Primary sources|date=December 2009}} '''Fundamental Modeling Concepts''' (FMC) provide a framework to describe software-intensive systems. It strongly emphasizes the communication about software-intensive systems by using a [[semi-formal]] graphical notation that can easily be understood. == Introduction == FMC distinguishes three perspectives to look at a software system: * Structure of the system * Processes in the system * Value domains of the system FMC defines a dedicated diagram type for each perspective. FMC diagrams use a simple and lean notation. The purpose of FMC diagrams is to facilitate the communication about a software system, not only between technical experts but also between technical experts and business or domain experts. The comprehensibility of FMC diagrams has made them famous among its supporters. The common approach when working with FMC is to start with a high-level diagram of the compositional structure of a system. This “big picture” diagram serves as a reference in the communication with all involved stakeholders of the project. Later on, the high-level diagram is iteratively refined to model technical details of the system. Complementary diagrams for processes observed in the system or value domains found in the system are introduced as needed. == Diagram Types == FMC uses three diagram types to model different aspects of a system: * '''Compositional Structure Diagram''' depicts the static structure of a system. This diagram type is also known as FMC Block Diagram * '''Dynamic Structure Diagram''' depicts processes that can be observed in a system. This diagram type is also known as FMC Petri-net * '''Value Range Structure Diagram''' depicts structures of values found in the system. This diagram type is also known as FMC E/R Diagram All FMC diagrams are bipartite graphs. Each [[Bipartite graph]] consists of two [[disjoint sets]] of vertices with the condition that no [[vertex (graph theory)|vertex]] is connected to another vertex of the same set. In FMC diagrams, members of one set are represented by angular shapes, and members of the other set are represented by curved shapes. Each element in an FMC diagram can be refined by another diagram of the same type, provided that the combined graph is also bipartite. This mechanism allows modeling all relevant layers of abstraction with the same notation. === Compositional Structure Diagram === [[File:FMCBlockDiagram.png|thumb|right|Example of FMC Compositional Structure Diagram]] Compositional structure diagrams depict the static structure of a system, and the relationships between system components. System components can be active or passive. '''Agents''' are active system components. They perform activities in the system. '''Storages''' and '''channels''' are passive components which store or transmit information. The image to the right is an example of a compositional structure diagram. It contains the agents ''Order Processor'', ''Supplier Manager'', ''Supplier'', ''Online Shop'' and an unnamed '''human agent'''. Agents are represented by rectangles. The dots and the shadow of the agent ''Supplier'' indicate that this agent has multiple instances, i.e. the ''Supplier Manager'' communicates with one or 