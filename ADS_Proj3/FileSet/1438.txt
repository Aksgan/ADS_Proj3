FOAF support for [[Drupal]]</ref>. ==Example== The following FOAF profile (written in [[Turtle (syntax)|Turtle]] format) states that [[Jimmy Wales]] is the name of the person described here. His e-mail address, homepage and depiction are [[Resource (Web)|resources]], which means that each of them can be described using RDF as well. He has Wikimedia as an interest, and knows [[Angela Beesley]] (which is the name of a 'Person' resource). <source lang="text"> @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . @prefix foaf: <http://xmlns.com/foaf/0.1/> . @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> . <#JW> a foaf:Person ; foaf:name "Jimmy Wales" ; foaf:mbox <mailto:jwales@bomis.com> ; foaf:homepage <http://www.jimmywales.com/> ; foaf:nick "Jimbo" ; foaf:depiction <http://www.jimmywales.com/aus_img_small.jpg> ; foaf:interest <http://www.wikimedia.org> ; foaf:knows [ a foaf:Person ; foaf:name "Angela Beesley" ] . <http://www.wikimedia.org> rdfs:label "Wikipedia" . </source> == See also == * [[Resource Description Framework]] (RDF) * [[Web Ontology Language]] (OWL) * [[Social web]] * [[Semantic Web]] * [[Description of a Career]] (DOAC) * [[DOAP|Description of a Project]] (DOAP) * [[Semantically-Interlinked Online Communities]] (SIOC) * [[hCard]] (HTML [[vCard]]) * [[XHTML Friends Network]] (XFN) == References == <references/> ==External links== * [http://www.foaf-project.org/ The FOAF Project] * [http://ebiquity.umbc.edu/resource/html/id/82/ FOAF dataset] a dataset of 201,612 FOAF triples * [http://www.foaf-search.net/ foaf-search.net] a search engine for FOAF data * [http://www.quatuo.com/ Quatuo] a search engine for FOAF profiles {{Semantic Web}} [[Category:Social network services]] [[Category:Semantic Web]] {{web-software-stub}} [[ca:FOAF]] [[de:FOAF]] [[es:FOAF]] [[fr:Friend of a friend (informatique)]] [[it:FOAF]] [[lv:FOAF]] [[ja:Friend of a Friend]] [[no:FOAF]] [[pl:FOAF (format)]] [[ru:FOAF]]</text> </page> <page> <id>13121</id> <title>FOSD Mixin Layers</title> <text>The key implementation technique of [[GenVoca]] is due to Smaragdakis called '''''mixin-layers'''''.<ref name="ECOOP98">{{cite web | title=Implementing Layered Designs with Mixin Layers| url=ftp://ftp.cs.utexas.edu/pub/predator/ecoop98.pdf}}</ref><ref name="frameworks">{{cite web | title=Object Oriented Frameworks and Product Lines| url=ftp://ftp.cs.utexas.edu/pub/predator/frameworks.pdf}}</ref><ref name="TOSEM02">{{cite web | title= Mixin Layers: An Object Oriented Implementation Technique for Refinements and Collaboration-Based Designs | url=ftp://ftp.cs.utexas.edu/pub/predator/layers.pdf}}</ref> '''''Aspectual mixin layers''''' and '''''aspectual feature modules''''' are recent extensions that incorporate [[aspect-oriented programming]].<ref name="icse06">{{cite web | title=Aspectual Mixin Layers: Aspects and Features in Concert| url=http://www.infosun.fim.uni-passau.de/cl/publications/docs/ICSE2006.pdf}}</ref><ref name="tse08">{{cite web | title=Aspectual Feature Modules| url=http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/trans/ts/&toc=comp/trans/ts/2008/02/tts200802toc.xml&DOI=10.1109/TSE.2007.70770}}</ref> == See also == *[[Feature Oriented Programming]] == References == <references/> [[Category:Software design]] {{software-eng-stub}}</text> </page> <page> <id>13129</id> <title>FP (programming language)</title> <text>{{Infobox programming language |name = FP |logo = |paradigm = [[function-level programming|function-level]] |year = 1977 |designer = [[John Backus]] |developer = |latest release version = |latest release date = |typing = |implementations = |dialects = |influenced_by = [[APL (programming language)|APL]] |influenced = [[FL (programming language)|FL]], [[FPr_(programming_language)|FPr]], [[J (programming language)|J]] }} '''FP''' (short for '''F'''unction '''P'''rogramming) is a [[programming language]] created by [[John Backus]] to support the [[function-level programming]] paradigm. This allows eliminating named variables. == Overview == The '''values''' that FP programs map into one another comprise a [[set (computer science)|set]] which is [[closure (mathematics)|closed]] under '''sequence formation''': if '''x'''<sub>1</sub>,...,'''x'''<sub>n</sub> are '''values''', then the '''sequence''' 〈'''x'''<sub>1</sub>,...,'''x'''<sub>n</sub>〉 is also a '''value''' These values can be built from any set of atoms: booleans, integers, reals, characters, etc.: '''boolean''' : {'''T''', '''F'''} '''integer''' : {0,1,2,...,∞} '''character''' : {'a','b','c',...} '''symbol''' : {'''x''','''y''',...} '''⊥''' is the '''undefined''' value, or '''bottom'''. Sequences are ''bottom-preserving'': 〈'''x'''<sub>1</sub>,...,'''⊥''',...,'''x'''<sub>n</sub>〉 = '''⊥''' FP programs are ''functions'' '''f''' that each map a single ''value'' '''x''' into another: '''f''':'''x''' represents the '''value''' that results from applying the '''function''' '''f''' to the '''value''' '''x''' Functions are either primitive (i.e., provided with the FP environment) or are built from the primitives by '''program-forming operations''' (also called '''functionals'''). An example of primitive function is '''constant''', which transforms a value '''x''' into the constant-valued function '''x̄'''. Functions are [[strict function|strict]]: '''f''':'''⊥''' = '''⊥''' Another example of a primitive function is the '''selector''' function family, denoted by '''1''','''2''',... where: '''1''':〈'''x'''<sub>1</sub>,...,'''x'''<sub>n</sub>〉 = '''x'''<sub>1</sub> '''''i''''':〈'''x'''<sub>1</sub>,...,'''x'''<sub>n</sub>〉 = '''x'''<sub>i</sub> if 0 < '''''i''''' ≤ n = ⊥ otherwise ==Functionals== In contrast to primitive functions, functionals operate on other functions. For example, some functions have a ''unit'' value, such as 0 for ''addition'' and 1 for ''multiplication''. The functional '''unit''' produces such a '''value''' when applied to a '''function f''' that has one: '''unit +''' = 0 '''unit &times;''' = 1 '''unit foo''' = ⊥ These are the core functionals of FP: '''composition''' '''f'''°'''g''' where '''f'''°'''g''':'''x''' = '''f''':('''g''':'''x''') '''construction''' ['''f'''<sub>1</sub>,...'''f'''<sub>n</sub>] where ['''f'''<sub>1</sub>,...'''f'''<sub>n</sub>]:'''x''' = 〈'''f'''<sub>1</sub>:'''x''',...,'''f'''<sub>n</sub>:'''x'''〉 '''condition''' ('''h''' ⇒ '''f''';'''g''') where ('''h''' ⇒ '''f''';'''g'''):'''x''' = '''f''':'''x''' if '''h''':'''x''' = '''T''' = '''g''':'''x''' if '''h''':'''x''' = '''F''' = '''⊥''' otherwise '''apply-to-all''' ''α'''''f''' where ''α'''''f''':〈'''x'''<sub>1</sub>,...,'''x'''<sub>n</sub>〉 = 〈'''f''':'''x'''<sub>1</sub>,...,'''f''':'''x'''<sub>n</sub>〉 '''insert-right''' /'''f''' where /'''f''':〈'''x'''〉 = '''x''' and /'''f''':〈'''x'''<sub>1</sub>,'''x'''<sub>2</sub>,...,'''x'''<sub>n</sub>〉 = '''f''':〈'''x'''<sub>1</sub>,/'''f''':〈'''x'''<sub>2</sub>,...,'''x'''<sub>n</sub>〉〉 and /'''f''':〈 〉 = '''unit f''' '''insert-left''' \'''f''' where \'''f''':〈'''x'''〉 = '''x''' and \'''f''':〈'''x'''<sub>1</sub>,'''x'''<sub>2</sub>,...,'''x'''<sub>n</sub>〉 = '''f''':〈\'''f''':〈'''x'''<sub>1</sub>,...,'''x'''<sub>n-1</sub>〉,'''x'''<sub>n</sub>〉 and \'''f''':〈 〉 = '''unit f''' ==Equational functions== In addition to being constructed from primitives by functionals, a function may be defined recursively by an equation, the simplest kind being: '''f''' ≡ ''E'''''f''' where ''E''''''f''' is an [[expression (programming)|expression]] built from primitives, other defined functions, and the function symbol '''f''' itself, using functionals. ==See also== * [[FL (programming language)|FL]], Backus' FP successor * [[Function-level programming]] * [[J (programming language)|J]] * [[John Backus]] * [[FP84]] * [[FFP (programming language)|FFP]], Formal Functional Programming * [[FPr (programming language)|FPr]], Function-level Programming right-associative ==References== *[http://www.stanford.edu/class/cs242/readings/backus.pdf Can Programming Be Liberated from the von Neumann Style?] Backus' Turing award lecture. [[Category:Function-level languages]] [[de:FP-System]] [[es:FP (lenguaje de programación)]] [[fr:Functional Programming]] [[pt:FP (linguagem de programação)]]</text> </page> <page> <id>13143</id> <title>FSEvents</title> <text>The '''<code>FSEvents</code> API''' in [[Mac OS X]] allows applications to register for notifications of changes to a given [[directory tree]].<ref>{{cite web|url=http://developer.apple.com/leopard/overview/osfoundations.html|title=Leopard Technology Series for Developers: OS Foundations|date=2007-10-26|accessdate=2008-08-21}}</ref> Whenever the filesystem is changed, the kernel passes notifications via the special [[device file]] <code>/dev/fsevents</code> to a [[userspace]] process called <code>fseventsd</code>. This process combines multiple changes to a single directory tree that occur within a short period of time, then notifies applications that have registered for changes to the affected directory.<ref>{{cite web|url= http://developer.apple.com/documentation/Darwin/Conceptual/FSEvents_ProgGuide/|title=File System Events Programming Guide|date=2008-03-11|accessdate=2009-06-29}}</ref> Unlike other methods for "watching" the filesystem, such as [[Linux]]'s [[inotify]], the <code>FSEvents</code> [[API]] provides no notifications for changes to individual files. An application may register to receive changes to a given directory, and must then determine for itself which file or files were changed. ==See also== * [[inotify]] * [[File Alteration Monitor]] ==References== {{Reflist}} ==External links== * [http://arstechnica.com/apple/reviews/2007/10/mac-os-x-10-5.ars/7 Mac OS X 10.5 Leopard: the Ars Technica review (page 7)] [[Category:Mac OS 