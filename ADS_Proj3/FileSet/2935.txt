underlying computational power to extend MikroSim’s simulation possibilities up to the stage of a virtual application board. Since January 2010, the simulator is distributed as ‘’Mikrocodesimulator MikroSim 2010’’ by 0/1-SimWare. == Compatibility == MikroSim is compiled and optimized for sake of unrestricted compatibility and for widest distribution possible for [[Microsoft Windows XP|Windows XP]] as a 32-bit version. The program runs on all 32 - and 64-bit operating systems of the [[Microsoft Windows Vista|Windows Vista]] and [[Microsoft Windows 7|Windows 7]]. Thereby, no special XP compatibility mode is needed. == Licensing and distribution == The MikroSim can be used as freely distributable demo version with only few limitations in some in special functionalities negligible for private use and demonstration purpose. Most of the features are unlocked for private study and personal interests on crash course level. The demo version’s limitations concern educational aspects getting useful when using the tool extensively on long term. However, the software can be activated anonymously online without complicated registration process for a testing period of 10 days. For unlimited functionality, 0/1-SimWare offers several licensing models for single and multi user registration for private users, high schools, vocational schools, colleges, and universities. The training software is available as download under 'www.mikrocodesimulator.de'. == Functionality == The windows application allows for the gradual establishment of a virtual application that is predetermined and such unchangeable in its functionality. In exploration mode, the operating principle and control of newly added components influenced by one microcode instruction within a cycle can be evaluated. The width of MikroSim’s micro instructions is 49 bits. A single micro instruction is executed in three phases of a 3-phase clock. The partial phases are referred to as “GET”, “CALCULATE” and “PUT” phase, causing to fetch some register value, to execute a 32-bit calculation, and to store the calculation result into a CPU's internal register, finally. In simulation mode, seamlessly executed micro instructions control the central processing unit of the simulator in subsequent cycles. Therefore, the intrinsic ability of one micro instruction is utilized to address the next micro instruction in the [[control store]]. The control store holding the micro instruction set (commonly referred as "microcode") comprises 1024 micro instructions words each 49-bit wide. Using structuring opportunities of the control store for addressable scheduling of the microcode and the implementation of a cyclically operating machine code [[interpreter]], that is programmed in microcode as well allows the implementation of individual [[micro-operation]] sequences, known as [[machine instruction]]s. The microcode can be regarded as [[firmware]] for MikroSim, that can be modified, and stored in and reloaded from a microcode-ROM-file. Within a micro instruction execution cycle, the CPU as well as an input / output controller is connected to an external 16 kByte huge random access memory device (RAM). Via the input-output controller device, communication with virtual input and output devices is supported by [[Direct Memory Access]] mode (DMA), [[Inter-Integrated Circuit]] Connection (I2C), and [[Interrupt]] request functionality (IRQ]]. A output port, a display, a timer, an event trigger, a digital-analog converter, a keyboard and data input / output channel is provided as virtual IC device for explaining didactically the communication with external devices. The microcode simulator uses eight freely usable register each 32-bit wide connected with a 32-bit [[arithmetic logic unit]] (ALU). The register content can be regarded as signed or unsigned integer values, or as 32-bit [[floating point]] numbers. The register content can be easily viewed, interpreted, and modified bitwise an integrated system number editor. The 32-bit ALU is the key unit of the central processing unit. It supports 128 different basic arithmetic operations for integer operation, interrupt control, and for floating point arithmetic. The didactical approach to floating point calculations, which has been introduced in a comparable manner already in the early 1940s by [[Konrad Zuse]], is introduced by using elemental sublevel operations for exponent and mantissa involved in the key operations of addition/subtraction and multiplication/division. A set of powerful 32-bit floating point arithmetic commands in mantissa and exponent for the basic operations and elementary analytical functions are provided, as they are realized in today’s mathematical coprocessors. Here, in the simulation with MikroSim it is ideally assumed that the execution of each supported ALU arithmetic operation requires only a distinct computing duration independent of circuit complexity realistically needed in practice. The execution of micro instructions can be operated on various simulation levels with different temporal resolution: * In the lowest simulation level, the simulator supports the phased wise execution of GET, CALCULATE, and PUT phase. The processing of the partial phases is possible with an adjustable delay for better traceability. * In next upper level, the current micro instruction is executed in a complete three-phase clock without time delay. A continuous execution of several 3-phase clock cycles is supported within a so-called “Load Increment Execute” (LIE) cycle. The LIE cycle regarded as an interpreter written in microcode has the function to load machine instructions coded as byte value from the external RAM and to let branch the micro instruction sequence to the referenced microcode subroutine for execution given by the opcode and returning to the LIE back to retrieve the next machine instruction. * One execution level higher, a sequence of several machine instructions are executable until a user-defined break point is reached, which is placed in the machine code sequence. It is possible to measure run times between break pionts. So it is possible to benchmark execution performance on machine and microcode level. * In the top most simulation level the microcode simulator continuously executes micro instructions without interrupt. In this level, machine instruction by machine instruction is loaded. So, it is possible to focus on the interaction of the CPU with external devices.. With various additional options, visual CPU activities can be suppressed for the benefit of increasing the processing speed when the control of the application by machine programming is put forward. The performance index monitor provided with the simulator enables the user to benchmark the processing performance of MikroSim and setting it into relation with computing power 