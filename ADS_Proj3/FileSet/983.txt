the final request to the end server, is encrypted. Thus, while the eavesdropper is able to view any message emanating from the user's computer, it only views a message submitted to the end server if the user's jondo ultimately submits the user's request itself. Since the probability that the user's jondo ultimately submits the request is 1/n where n is the size of the crowd when the path was created.Thus We learn that the probability that the eavesdropper learns the identity of the receiver decreases as a function of crowd size. Moreover, when the user's jondo does not ultimately submit the request, the local eavesdropper sees only the encrypted address of the end server, which we suggest yields receiver anonymity that is (informally) beyond suspicion. (beyond suspicion - no user is more suspicious than other). === Collaborating jondos === Consider a set of collaborating corrupted jondos in the crowd.Because each jondo can observe plaintext traffic on a path routed through it,any such traffic, including the address of the end server is exposed to this attacker. The question we consider here is if the attacker can determine who initiated the path. The goal of the collaborators is to determine the member that initiated the path. We now analyze how confident the collaborators can be that their immediate predecessor is in fact the path initiator: #Let '''H<sub>k</sub>''', k >= 1, denote the event that the first collaborator on the path occupies the kth position on the path, where the initiator itself occupies the 0th position (and possibly others). #Let define '''H<sub>k+</sub>''' = '''H<sub>k</sub>''' or '''H<sub>k+1</sub>''' or '''H<sub>k+2</sub>''' or . . . . #Let '''I''' denote the event that the first collaborator on the path is immediately preceded on the path by the path initiator. Note that '''H<sub>1</sub> => I''' , but the converse '''I => H<sub>1</sub>''' is not true, because the initiating jondo might appear on the path multiple times.There can be a case where path is composed as follow: :initiator jondo(0 - position) ----> jondo(1 - position) ----> :initiator jondo(2 - position) ----> Collaborating jondo(3 - position) Note that the first collaborator on the path is in the third position. :4.Given this notation, the collaborators now hope to determine: '''P(I|H<sub>1+</sub>)''' - given that a collaborator is on the path, what is the probability that the path initiator is the first collaborator's immediate predecessor? '''Definition:''' <br /> '''''The path initiator has probable innocence if P(I|H<sub>1+</sub>)<=1\2.''''' In order to yield probable innocence for the path initiator, certain conditions must be met in our system. In particular,let '''pf > 1/2''' (the probability of forwarding in the system.) ('''c''' - number of collaborators in the crowd) ('''n''' - total number of crowd members when the path is formed) The theorem below gives a sufficient condition on pf , c, and n to ensure probable innocence for the path initiator. '''Theorem:''' '''''The path initiator has probable innocence against c collaborators in case''''' <math>n \geq \frac{p_f}{p_f - \frac{1}{2}}\left( c + 1\right)</math> '''Proof:''' we want to show that '''pf > 1/2 if <math>n \geq \frac{p_f}{p_f - \frac{1}{2}}\left( c + 1\right)</math>''' note that: P(H<sub>i</sub>) = <math>(p_f\frac{n-c}{n})^{i-1} (\frac{c}{n})</math> in order for the first collaborator to be in the '''ith''' position on the path, the path must first wander to '''i-1''' noncollaborators each time with probability of <math>\frac{n-c}{n}</math>,each of which chooses to forward the path with probability '''pf''' , and then to a collaborator with probability <math>\frac{c}{n}</math>. The next two facts follow immediately from this P(H<sub>1+</sub>) = <math>\frac{c}{n}\sum_{k=0}(p_f\frac{n-c}{n})^{k} = (\frac{c}{n})(\frac{1}{1-\frac{p_f(n-c)}{n}})</math> P(H<sub>2+</sub>) = <math>\frac{c}{n}\sum_{k=1}(p_f\frac{n-c}{n})^{k} = (\frac{c}{n})(\frac{\frac{p_f(n-c)}{n}}{1-\frac{p_f(n-c)}{n}})</math> P(H<sub>1</sub>) = <math>\frac{c}{n}</math> P(I|H<sub>1</sub>) = <math>1</math> P(I|H<sub>2</sub>) = <math>\frac{1}{n-c}</math> Now, P(I) can be captured as P(I) = P(H<sub>1</sub>)P(I|H<sub>1</sub>) + P(H<sub>2+</sub>)P(IH<sub>2+</sub>) = <math>\frac{c(n-np_fn+cp_f+pf)}{n^2-pfn(n-c)}</math> since I=>H<sub>1+</sub> P(I|H<sub>1+</sub>)= <math>\frac{P(I \and H1+)}{P(H1+)}</math> = <math>\frac{P(I)}{P(H1+)}</math> = <math>\frac{n-p_f(n-c-1)}{n}</math> so,if <math>n \geq \frac{p_f}{p_f - \frac{1}{2}}\left( c + 1\right)</math> then P(I|H<sub>1+</sub>)<=1\2 E.g. if '''pf=3\4''' , then probable innocence is guaranteed as long as n >= 3(c + 1). === Static paths === Dynamic paths tends to decrease the anonymity properties provided by the system against collaborating jondos. The reason is that the probable innocence vanishes if the collaborators are able to link many distinct paths as being initiated by the same jondo. Collaborating jondos might be able to link paths initiated by the same unknown jondo based on related path content or timing of communication on paths. To prevent this, we made paths static, so the attacker simply does not have multiple paths to link to the same jondo. === Embedded images and timing attacks === An HTML page can include a URL (e.g., the address of an image) that, when the page is retrieved, causes the user's browser to automatically issue another request. It is the immediate nature of these requests that poses the greatest opportunity for timing attacks by collaborating jondos. The first collaborating jondo on a path, upon returning a web page on that path containing a URL that will be automatically retrieved, can time the duration until it receives the request for that URL. If the duration is sufficiently short, then this could reveal that the collaborator's immediate predecessor is the initiator of the request. How to prevent? When a jondo receives an HTML reply to a request that it either received directly from a user's browser or submitted directly to an end server,it parses the HTML page to identify all URLs that the user's browser will automatically request as a result of receiving this reply. The last jondo on the path requests these URLs and sends them back along the same path on which the original request was received. The user's jondo, upon receiving requests for these URLs from the user's browser, does not forward these requests on the path, but rather simply waits for the URLs contents to arrive on the path and then feeds them to the browser. In this way, other jondos on the path never see the requests that are generated by the browser, and thus cannot glean timing information from them. ==Scale== The measure of scale that we evaluate is the expected total number 