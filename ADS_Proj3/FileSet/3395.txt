has been added for [[High dynamic range imaging|HDRI]], including the [[OpenEXR]] and [[Radiance (software)|Radiance]] file formats, and improved bounding using [[Binary space partitioning|BSP]] trees. In July 2006, [[Intel Corporation]] started using the beta version to demonstrate their new dual-core [[Intel Core 2|Conroe]] processor due to the efficiency of the 3.7 beta's SMP implementation. ===Primitives=== [[Image:PNG transparency demonstration 1.png|thumb|230px|right|Some [[dice]] rendered in POV-Ray. [[Constructive solid geometry]], [[refraction]] and focal blur are demonstrated.]] POV-Ray, in addition to standard [[geometric]] shapes like [[torus|tori]], [[sphere]]s and [[heightfield]]s, supports mathematically defined primitives such as the [[isosurface]] (a finite approximation of an arbitrary function), the [[polynomial]] primitive (an infinite object defined by a 15th order or lower polynomial), the [[julia set|julia fractal]] (a 3-dimensional slice of a 4-dimensional fractal), the [[superellipse|superquadratic ellipsoid]] (intermediate between a sphere and a cube), and the [[parametric]] primitive (using equations that represent its surface, rather than its interior). POV-Ray internally represents objects using their mathematical definitions; all POV-Ray primitive objects can be described by mathematical functions. This is different from many 3D computer modeling packages, which typically use triangle [[polygon mesh|mesh]]es to compose all objects. This fact provides POV-Ray with several advantages and disadvantages over other rendering / modeling systems. POV-Ray primitives are more accurate than their polygonal counterparts. Objects that can be described in terms of spheres, planar surfaces, cylinders, tori and the like are perfectly smooth and mathematically accurate in POV-Ray renderings, whereas polygonal artifacts may be visible in mesh-based modeling software. POV-Ray primitives are also simpler to define than most of their polygonal counterparts. In POV-Ray, a sphere is described simply by its center and radius; in a mesh-based environment, a sphere must be described by a multitude of small polygons. On the other hand, primitive-, script-based modeling is not always a practical method to create objects such as realistic characters or complex man-made artifacts like cars. Those objects have to be created in mesh-based modeling applications such as [[Wings 3D]] or [[Blender (software)|Blender]] and then converted to POV-Ray's own mesh format. === Examples of the Scene Description Language === The following is an example of the scene description language used by POV-Ray to describe a scene to render. It demonstrates the use of a background colour, camera, lights, a simple box shape having a surface normal and finish, and the transforming effects of rotation. [[Image:I example povray scene rendering.png|thumb|right|POV-Ray image output based on the script to the left]] <source lang="c"> #version 3.6; //Includes a separate file defining a number of common colours #include "colors.inc" global_settings { assumed_gamma 1.0 } //Sets a background colour for the image (dark grey) background { color rgb <0.25, 0.25, 0.25> } //Places a camera //direction : Sets, among other things, the field of view of the camera //right: Sets the aspect ratio of the image //look_at: Tells the camera where to look camera { location <0.0, 0.5, -4.0> direction 1.5*z right x*image_width/image_height look_at <0.0, 0.0, 0.0> } //Places a light source //color : Sets the color of the light source (white) //translate : Moves the light source to a desired location light_source { <0, 0, 0> color rgb <1, 1, 1> translate <-5, 5, -5> } //Places another light source //color : Sets the color of the light source (dark grey) //translate : Moves the light source to a desired location light_source { <0, 0, 0> color rgb <0.25, 0.25, 0.25> translate <6, -6, -6> } //Sets a box //pigment : Sets a color for the box ("Red" as defined in "colors.inc") //finish : Sets how the surface of the box reflects light //normal : Sets a bumpiness for the box using the "agate" in-built model //rotate : Rotates the box box { <-0.5, -0.5, -0.5>, <0.5, 0.5, 0.5> texture { pigment { color Red } finish { specular 0.6 } normal { agate 0.25 scale 1/2 } } rotate <45,46,47> } </source> The following script fragment shows the use of variable declaration, assignment, comparison and the while loop construct: [[Image:I example povray scene rendering2.png|thumb|right|POV-Ray image output based on the script to the left]] <source lang="c"> #declare the_angle = 0; #while (the_angle < 360) box { <-0.5, -0.5, -0.5> <0.5, 0.5, 0.5> texture { pigment { color Red } finish { specular 0.6 } normal { agate 0.25 scale 1/2 } } rotate the_angle } #declare the_angle = the_angle + 45; #end </source> == Modeling == The POV-Ray program itself does not include a [[3D modeling|modeling]] feature; it is essentially a pure renderer with a sophisticated model description language. To accompany this feature set, third parties have developed a large variety of modeling software, some specialized for POV-Ray, others supporting import and export of its data structures. A number of POV-Ray compatible modelers are linked from [http://www.povray.org/resources/links/3D_Programs/Modelling_Programs/ Povray.org: Modelling Programs]. == Software == ===Development and maintenance=== Official modifications to the POV-Ray source tree are done and/or approved by the POV-Team. Most patch submission and/or bug reporting is done in the POV-Ray newsgroups on the [nntp://news.povray.org/ news.povray.org] [[Usenet|news]] server (with a [[Web interface]] [http://news.povray.org/groups/ also available]). Since POV-Ray's source is available there are unofficial forks and patched versions of POV-Ray available from third parties; however, these are not officially supported by the POV-Team. Official POV-Ray versions currently do not support [[shader]] plug-ins.<ref>for such an implementation, see e.g., http://www.aetec.ee/fv/vkhomep.nsf/pages/povman2</ref> Some features, like [[radiosity]] and [[spline (mathematics)|spline]]s are still in development and may be subject to syntactical change. ===Platform support=== POV-Ray is distributed in compiled format for [[Macintosh]], [[Microsoft Windows|Windows]] and [[Linux]]. Support for [[Appleâ€“Intel architecture|Intel Mac]]s is not available in the [[Macintosh]] version, but since [[Mac OS X]] is a version of [[Unix]] the Linux version can be compiled on it. POV-Ray also could be ported to any platform which has a compatible [[C++]] compiler. People with Intel Macs can use the [[Fork (software development)|fork]] [[MegaPOV]] though, as that is compiled as [[universal binary]].{{Citation needed|date=March 2009}} ===Licensing=== POV-Ray is distributed under the POV-Ray License, which permits free distribution of the program source code and binaries, but restricts commercial distribution and the creation of derivative 