attacker [[IP address spoofing|spoofs their IP address]], is behind the same [[Network address translation|NAT]]ed IP address or [[web proxy]]—or simply opts to tamper with the site or steal data through the injected script, instead of attempting to hijack the cookie for future use.<ref name=ModSecurity /> Another mitigation present in IE (since version 6), Firefox (since version 2.0.0.5), Safari (since version 4) and Google Chrome, is a ''HttpOnly'' flag which allows a web server to set a cookie that is unavailable to client-side scripts. While beneficial, the feature does not fully prevent cookie theft nor can it prevent attacks within the browser.<ref>{{cite web|title=Ajax and Mashup Security|url=http://www.openajax.org/whitepapers/Ajax%20and%20Mashup%20Security.php|publisher=OpenAjax Alliance|accessdate=June 9, 2008}}</ref> ===Disabling scripts=== Finally, while [[Web 2.0]] and [[Ajax (programming)|Ajax]] designers favor the use of JavaScript,<ref>{{cite web|author=O'Reilly, Tim|title=What Is Web 2.0|url=http://oreilly.com/web2/archive/what-is-web-20.html|pages=4–5|date=September 30, 2005|publisher=O'Reilly Media|accessdate=June 4, 2008}}</ref> some web applications are written to (sometimes optionally) operate completely without the need for client-side scripts.<ref>"A page should work, even if in a degraded form, without JavaScript." in {{cite book|author=Zammetti, Frank|title=Practical JavaScript, DOM Scripting and Ajax Projects via Amazon Reader|url=http://www.amazon.com/gp/reader/1590598164/|publisher=Apress|page=36|isbn=1590598164|date=April 16, 2007|accessdate=June 4, 2008}}</ref> This allows users, if they choose, to disable scripting in their browsers before using the application. In this way, even potentially malicious client-side scripts could be inserted unescaped on a page, and users would not be susceptible to XSS attacks. Some browsers or browser plugins can be configured to disable client-side scripts on a per-domain basis. If scripting is allowed by default, then this approach is of limited value, since it blocks bad sites only ''after'' the user knows that they are bad, which is too late. Functionality that blocks all scripting and external inclusions by default and then allows the user to enable it on a per-domain basis is more effective. This has been possible for a long time in IE (since version 4) by setting up its so called "Security Zones",<ref>{{cite web|title=How to use security zones in Internet ?Explorer|url=http://support.microsoft.com/kb/174360/en-us|date=December 18, 2007|publisher=Microsoft|accessdate=June 4, 2008}}</ref> and in Opera (since version 9) using its "Site Specific Preferences".<ref>{{cite web|author=Håkon Wium Lie|title=Opera 9 Technology Preview 2|url=http://labs.opera.com/news/2006/02/07-2/|date=February 7, 2006|publisher=Opera Software|accessdate=June 4, 2008}}</ref> A solution for Firefox and other [[Gecko (layout engine)|Gecko]]-based browsers is the open source [[NoScript]] add-on which, in addition to the ability to enable scripts on a per-domain basis, provides some anti-XSS protection even when scripts are enabled.<ref>{{cite web|title=NoScript|url=https://addons.mozilla.org/en-US/firefox/addon/722?id=722|publisher=Mozilla|date=May 30, 2008|accessdate=June 4, 2008}} and {{cite news|author=Mogull, Rich|title=Should Mac Users Run Antivirus Software?|url=http://db.tidbits.com/article/9511|date=March 18, 2008|work=TidBITS|publisher=TidBITS Publishing|accessdate=June 4, 2008}}</ref> The most significant problem with blocking all scripts on all websites by default is substantial reduction in functionality and responsiveness (client-side scripting can be much faster than server-side scripting because it does not need to connect to a remote server and the page or frame does not need to be reloaded).<ref>{{cite web|title="Using client-side events" in DataWindow Programmer's Guide|url=http://www.elsevier.com/homepage/saa/trac/progmeth.htm|month=March | year=2003|publisher=Sybase|accessdate=June 4, 2008}}</ref> Another problem with script blocking is that many users do not understand it, and do not know how to properly secure their browsers. Yet another drawback is that many sites do not work without client-side scripting, forcing users to disable protection for that site and opening their systems to vulnerabilities.<ref>73% of sites relied on JavaScript in late 2006, in {{cite news|title='Most websites' failing disabled|url=http://news.bbc.co.uk/2/hi/technology/6210068.stm|publisher=BBC News|date=December 6, 2006|accessdate=June 4, 2008}}</ref> The Firefox NoScript extension enables users to allow scripts selectively from a given page while disallowing others on the same page. For example, scripts from example.com could be allowed, while scripts from advertisingagency.com that are attempting to run on the same page could be disallowed.<ref>{{cite web|title = NoScript Features|url = http://noscript.net/features|accessdate=March 7, 2009}}</ref> ===Emerging defensive technologies=== There are three classes of XSS defense that are emerging. These include, Mozilla's Content Security Policy https://wiki.mozilla.org/Security/CSP/Specification, Javascript Sandbox tools, and Auto-escaping templates. These mechanisms are still evolving but promise a future of heavily reduced XSS. Microsoft Visual Studio also has an XSS defense mechanism, when using ASP.NET, to avoid malicious scripts on your site.<ref>[http://www.aspnetbook.com/apps/design_secure_application_malicious_scripts.php Cross-site scripting] ASPNET Book 2010</ref> == Scanning service == Some companies offer a periodic scan service, essentially simulating an attack from their server to a client's in order to check if the attack is successful. If the attack succeeds, the client receives detailed information on how it was performed and thus has a chance to fix the issues before the same attack is attempted by someone else. A [[trust seal]] can be displayed on the site that passes a recent scan. The scanner may not find all possible vulnerabilities,<ref>[http://blog.skeptikal.org/2010/03/website-security-seals-smackdown.html Sceptic blog]</ref> and therefore sites with trust seals may still be vulnerable to new types of attack, but the scan may detect some problems. After the client fixes them, the site is more secure than it was before using the service. For sites that require complete mitigation of XSS, assessment techniques like manual code review are necessary. ==Related vulnerabilities== Several classes of vulnerabilities or attack techniques are related to XSS: [[cross-zone scripting]] exploits "zone" concepts in certain browsers and usually executes code with a greater privilege.<ref>{{cite news|author=|title=Security hole in Internet Explorer allows attackers to execute arbitrary programs|url=http://www.h-online.com/security/news/item/Security-hole-in-Internet-Explorer-allows-attackers-to-execute-arbitrary-programs-735225.html|date=May 16, 2008|publisher=Heise Media UK|accessdate=June 7, 2008}}</ref> [[HTTP header injection]] can be used to create cross-site scripting conditions due to escaping problems on HTTP protocol level (in addition to enabling attacks such as [[HTTP response splitting]]).<ref>{{cite web|author=|title=Update available for potential HTTP header injection vulnerabilities in Adobe Flash Player|url=http://www.adobe.com/support/security/bulletins/apsb06-18.html|date=November 14, 2006|publisher=Adobe Systems|accessdate=June 7, 2008}}</ref> [[Cross-site request forgery]] (CSRF/XSRF) is almost the opposite of XSS, in that rather than exploiting the user's trust in a site, the attacker (and his malicious page) exploits the site's trust in the client software, submitting requests that the site believes represent conscious and intentional actions of authenticated users.<ref>{{cite web|author=Auger, Robert|title=The Cross-Site Request Forgery (CSRF/XSRF) FAQ (version 1.59)|url=http://www.cgisecurity.com/articles/csrf-faq.shtml|date=April 17, 2008|publisher=Cgisecurity.com|accessdate=June 7, 2008}}</ref> Lastly, [[SQL injection]] exploits a vulnerability in the database layer of an application. When user input is incorrectly filtered any SQL statements can be executed by the application.<ref>{{cite web|title=SQL Injection|url=http://projects.webappsec.org/SQL-Injection|year=2005|publisher=Web Application Security Consortium|accessdate=June 7, 2008}}</ref><ref>{{cite web|title=The Cross-Site Scripting FAQ|url=http://www.cgisecurity.com/xss-faq.html|year=2002|publisher=Cgisecurity.com|accessdate=June 7, 2008}}</ref> ==Notes== {{Reflist|2}} ==See also== {{Portal|Software Testing}} *[[Same origin policy]] *[[Metasploit Project]], an open-source penetration testing 