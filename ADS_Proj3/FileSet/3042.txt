<id>25291</id> <title>Multiagent systems product lines</title> <text>{{Cleanup|date=August 2007}} {{Orphan|date=December 2008}} {{Essay-like|date=December 2008}} On the one hand, the field of [[Product Family Engineering|Software Product Line]]s (SPL) covers all the [[software]] development lifecycle necessary to develop a family of products where the derivation of concrete products is made systematically and rapidly. On the other hand, Agent-Oriented Software Engineering (AOSE) is a new software engineering [[paradigm]] that arose to apply best practice in the development of complex Multi-Agent Systems (MAS) by focusing on the use of agents, and organizations (communities) of agents as the main abstractions. ==Commentary== Following a rather false start, agent technology has begun to come into its own. With the advent of biologically-inspired, pervasive, and [[autonomic]] computing, the advantages of, and necessity of, agent-based technologies and MASs has become obvious{{Fact|date=December 2008}}. Unfortunately, current AOSE methodologies are dedicated to developing single MASs. Clearly, many MASs will make use of significantly the same techniques, adaptations, and approaches. The field is thus ripe for exploiting the benefits of SPL: reduced costs, improved time-to-market, etc. and enhancing agent technology in such a way that it is more industrially applicable. Multiagent Systems Product Lines (MAS-PL) is a research field devoted to combining the two approaches: applying the SPL philosophy for building a MAS. This will afford all of the advantages of SPLs and make MAS development more practical. == References == {{No footnotes|date=April 2009}} * Site of the MaCMAS methodology which is applying MAS-PL. http://www.macmas.org * MAS Product Lines site: http://www.mas-productlines.org * Joaquin Peña, Michael G. Hinchey, and Antonio Ruiz-Cortés. Multiagent system product lines: Challenges and benefits. Communications of the ACM, December 2006, volume 49, issue number 12. http://doi.acm.org/10.1145/1183236.1183272 * Joaquin Peña, Michael G. Hinchey, Manuel Resinas, Roy Sterritt, James L. Rash. Designing and Managing Evolving Systems using a MAS-Product-Line Approach. Journal of Science of Computer Programming. http://dx.doi.org/10.1016/j.scico.2006.10.007 * Joaquin Peña, Michael G. Hinchey, Antonio Ruiz-Cortés, and Pablo Trinidad. Building the Core Architecture of a NASA Multiagent System Product Line. In 7th International Workshop on Agent Oriented Software Engineering 2006, page to be published, Hakodate, Japan, May, 2006. LNCS. http://www.springerlink.com/content/vrv5857n41j44521/fulltext.pdf * Joaquin Peña, Michael G. Hinchey, Manuel Resinas, Roy Sterritt, James L. Rash. Managing the Evolution of an Enterprise Architecture using a MAS-Product-Line Approach. 5th Int. Workshop on System/Software Architectures (IWSSA’06). Nevada, USA. 2006 * Soe-Tsyr Yuan. MAS Building Environments with Product-Line-Architecture Awareness. * [http://www.cs.iastate.edu/~dehlinge/publications.html Josh_Dehlinger] and [http://www.cs.iastate.edu/~rlutz/homepage.html Robyn R. Lutz] have several publications in this field. * [http://james.eii.us.es/MaCMAS/images/6/69/Current-Research-MAS-PL-TF4-Lisbon.pdf|MAS-PL -- Current research]. In [http://www.irit.fr/ACTIVITES/EQ_SMI/SMAC/TFG4_CFP.html THE FOURTH TECHNICAL FORUM (TF4) of AgentLink]. December 2006. [[Category:Software project management]]</text> </page> <page> <id>25317</id> <title>Multilateral Interoperability Programme</title> <text>The '''Multilateral Interoperability Programme (MIP)''' is an effort to deliver an assured capability for interoperability of information to support multinational, combined and joint operations. The MIP goal is to support all levels from corps to battalion. MIP's focus is on [[command and control]] systems. The [[NATO]] Data Administration Group (NDAG) cooperates with the MIP's Data Modeling Working Group (DMWG) in building the [[JC3IEDM|Joint Consultation, Command and Control Information Exchange Data Model (JC3IEDM)]]. ==C2IEDM== The C2IEDM (the predecessor to the [[JC3IEDM]]), or '''Command and Control Information Exchange Data Model''', is a [[data model]] that is managed by the Multilateral Interoperability Programme (MIP).<ref>[http://www.mip-site.org/035_Public_Organ_DMWG.htm MIP site: Data Modelling Working Group]</ref> It originated with experts from various [[NATO]] partners and from the [[Partnership for Peace]] nations. This data model is in the process of being submitted to [[Object Management Group]] (OMG) for consideration as the standard for [[Information exchange]]. It falls under the shared operational picture exchange service. ==References== {{Reflist}} ==External links== *[http://www.mip-site.org/ MIP site] [[Category:NATO]] [[Category:United States Department of Defense agencies]] [[Category:Data modeling]] {{mil-stub}}</text> </page> <page> <id>25321</id> <title>Multilayered architecture</title> <text>A multilayered software architecture is using different [[Layer (object-oriented design)|layers]] for allocating the responsibilities of an application. There is also an architectural pattern that is named Layers and has been described in different publications, including the book Pattern-Oriented Software Architecture A System of Patterns. <ref>http://hillside.net/patterns/books/Siemens/abstracts.html Pattern-Oriented Software Architecture A System of Patterns</ref> The concepts of layer and tier are often used interchangeably. However, one fairly common point of view is that there is indeed a difference, and that a layer is a logical structuring mechanism for the elements that make up your software solution, while a tier is a physical structuring mechanism for the system infrastructure. <ref>[http://msdn.microsoft.com/en-us/library/ms998478.aspx Deployment Patterns (Microsoft Enterprise Architecture, Patterns, and Practices)]</ref> ==Notes== <references/> == See also == * [[Common layers in an information system logical architecture]] * [[Multitier architecture]] * [[Shearing layers]] [[Category:Software design]] [[Category:Software architecture]] [[Category:Software engineering terminology]]</text> </page> <page> <id>25328</id> <title>Multimap</title> <text>{{about|the data type|the mapping website|Multimap.com}} A '''multimap''' (sometimes also '''multihash''') is a generalization of a [[associative array|map or associative array]] [[abstract data type]] in which more than one value may be associated with and returned for a given key. Both map and multimap are particular cases of [[container (data structure)|container]]s (see for example [[C++]] [[Standard Template Library]] [[Standard Template Library#Containers|containers]]). Often the multimap is implemented as a map with [[List (computing)|list]]s or [[Set (computer science)|set]]s as the map values. ==Examples== * In a student enrollment system, where students may be enrolled in multiple classes simultaneously, there might be an association for each enrollment of a student in a course, where the key is the student ID and the value is the course ID. If a student is enrolled in three courses, there will be three associations containing the same key. * The index of a book may report any number of references for a given index term, and thus may be coded as a multimap from index terms to any number of reference locations. * [[Querystring|Querystrings]] may have multiple values associated with a single field. This is commonly generated when a [[web form]] allows multiple [[check box|check boxes]] or selections to be chosen in response to a single form element. ==Language support== [[C++]]'s [[Standard Template Library]] provides the <code>multimap</code> [[Standard Template Library#Containers|container]] for the sorted multimap using a [[self-balancing binary search tree]],<ref>{{cite web | url = http://www.sgi.com/tech/stl/Multimap.html | title = multimap<Key, Data, Compare, Alloc> | work = Standard Template Library Programmer's 