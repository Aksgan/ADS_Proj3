include:<ref name="Lee97">Lee, J. (1997). "Design Rationale Systems: Understanding the Issues". ''IEEE Expert'' 12 (3): 78–85</ref> * the reasons behind a design decision, * the justification for it, * the other alternatives considered, * the trade offs evaluated, and * the argumentation that led to the decision. Several science areas are involved in the study of design rationales, such as [[Computer Science]]<ref name="Jarczyk, Alex P. 1992 pp. 577-586"/> [[Cognitive Science]]<ref name="HoAt06" />, [[Artificial Intelligence]]<ref name="BuBr00"> Burge, J.E.; Brown, D.C. (2000), "Reasoning with Design Rationale", in Gero, J., ''Artificial Intelligence in Design '00'', Netherlands: Kluwer Academic Publ., pp. 611–629</ref>, and [[Knowledge Management]]<ref>Xin, W.; Guangleng, X. (2001), "Design Rationale as Part of Corporate Technical Memory", ''Systems, Man and Cybernetics'', pp. 1904 - 1908.</ref> To supporting design rationale, a lot of frameworks proposed, such as QOC, DRCS, IBIS, and DRL. == History == While argumentation formats can be traced back to [[Stephen Toulmin]]'s work in the 1950s<ref name="Toul50">[[Stephen Toulmin]] (1958). ''The Uses of Argument''. Cambridge: Cambridge University Press.</ref> datums, claims, warrants, backings and rebuttals, the origin of design rationale can be traced back to W.R. Kunz and [[Horst Rittel]]'s <ref name="Kunz, W. 1970">Kunz, W.; Rittel, H. (1970), ''Issues as elements of information systems''. Working Paper 131, Center for Urban and Regional Development, University of California Berkley</ref> development of the [[Issue-Based Information System]] (IBIS) notation in 1970. Several variants on IBIS have since been proposed. * The first was Procedural Hierarchy of Issues (PHI), first described in Ray McCall’s PhD Dissertation <ref>McCall, R. (1978), ''On the structure and use of issue systems in design'', Doctoral Dissertation, University of California, Berkeley, University Microfilms </ref> although not named at the time. * IBIS was also modified, in this case to support Software Engineering, by Potts & Bruns <ref name="PoBu88"> Potts, C.; Burns, G. (1988), "Recording the reasons for design decisions", ''10th International Conference on Software Engineering'' (ICSE '1988), pp. 418-427</ref>. The Potts & Bruns approach was then extended by the Decision Representation Language (DRL).<ref>Lee, J. (1991), "Extending the Potts and Bruns model for recording design rationale", ''Proceedings of the 13th International Conference on Software Engineering (ICSE '13)'', IEEE Computer Society Press, Los Alamitos, CA, pp. 114-125</ref> which itself was extended by RATSpeak<ref name="BuBr00" />. * Questions Options and Criteria (QOC), also known as Design Space Analysis <ref>Maclean, A.; Young, RM.; Moran, T. (1989), "Design rationale: the argument behind the artifact", ''SIGCHI Bull''. 20, pp. 247-252114-125 </ref><ref>Maclean, A.; Young, RM.; Bellotti, VME.; Moran, T. (1996), "Questions, Options, and Criteria: Elements of Design Space Analysis", in Moran, T.; Carroll, J., ''Design Rationale Concepts, Techniques, and Use, Lawrence Erlbaum Associates'', pp. 53-106</ref> is an alternative representation for argumentation-based rationale, as are Win-Win <ref>[[Barry Boehm]], Ross, R (1989). "Theory-W software project management: principles and examples.". ''IEEE Transactions on Software Engineering'' 18 (7): 902-916. </ref> and the Decision Recommendation and Intent Model (DRIM) <ref name="Pena-Mora, F. 1993 pp. 213-221">Pena-Mora, F.; Sriram, D.; Logcher, R. (1993), "SHARED-DRIMS: SHARED Design Recommendation-Intent Management System", ''Proceedings Enabling Technologies Infrastructure for Collaborative Enterprise'', IEEE Press, Morgantown, WV, pp. 213-221</ref>. The first Rationale Management System (RMS) was PROTOCOL, which supported PHI, which was followed by other PHI-based systems MIKROPOLIS and PHIDIAS. The first system providing IBIS support was Hans Dehlinger’s STIEC <ref>Dehlinger, H. (1978), Project STIEC: Systems Analysis of the Generation and Dissemination of Scientific and Technological Information in the European Community" ''Report No. 26: Report on a Batch - Version of STIEC'', Heidelberg/Stuttgart </ref>. Rittel developed a small system in 1983 (also not published) and the better known gIBIS (graphical IBIS) was developed in 1987 <ref>Conklin, J.; YakemBegemanovic, M. (1988). "gIBIS: A hypertext tool for exploratory policy discussion". ''ACM Transactions on Office Information Systems'' 6 (4): 303-331.</ref>. Not all successful DR approaches involve structured argumentation. Jack Carroll’s Scenario-Claims Analysis approach <ref>Carroll, JM; Rosson, M (1992). "Getting around the task-artifact cycle: how to make claims and design by scenario". ''ACM Trans. Inf. Syst''. 10 (2): 181-212</ref> captures rationale in scenarios that describe how the system is used and how well the system features support the user goals. == Key Concepts in Design Rationale == There are a number of ways to characterize DR approaches. Some key distinguishing features are how it is captured, how it is represented, and how it can be used. === Rationale Capture === ''Rationale Capture'' is the process of acquiring rationale information to a rationale management system. ;Capture Methods * A method called “Reconstruction”<ref name="Lee97" /> captures rationales in a raw form such as video, and then reconstruct them into a more structured form<ref name="BuBr98"> Burge, J.; Brown, D.C. (1998), [http://web.cs.wpi.edu/Research/aidg/DR-Rpt98.html ''Design Rationale: Types and Tools, Technical Report''], Worchester Polytechnic Institute, Computer Science Dept.,, http://web.cs.wpi.edu/Research/aidg/DR-Rpt98.html, retrieved on 27 April 2007 </ref>. The advantage of Reconstruction method is that rationales can be carefully captured and capturing process won’t disrupt the designer. But this method might result in high cost and biases of the person producing the rationales * The “Record-and-replay”<ref name="Lee97" /> method simply captures rationales as they unfold. Rationales are synchronously captured in a [[video conference]] or asynchronously captured via [[bulletin board]] or email-based discussion. If the system has informal and semi-formal representation, the method will be helpful. * The “Methodological byproduct”<ref name="Lee97" /> method captures rationales during the process of design following a schema. But it’s hard to design such a schema. The advantage of this method is its low cost. * With a rich knowledge base(KB) created in advance, the “Apprentice” <ref name="Lee97" /> method captures rationales by asking questions when confusing or disagreeing with the designer’s action. This method benefits not only the user but the system. * In “Automatic Generation” <ref name="Lee97" /> method, design rationales are automatically generated from an execution history at low cost. It has the ability in maintaining consistent and up-to-date rationales. But the cost of compiling the execution history is high due to the complexity and difficulty of some machine-learning problems. * The “Historian”<ref>Chen, A.; McGinnis, B.; Ullman, D.; Dietterich, T. (1990), "Design History Knowledge Representation and Its Basic Computer Implementation", The 2nd International Conference 