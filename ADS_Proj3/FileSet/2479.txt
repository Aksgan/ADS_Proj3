complicated by the fact that it was an overdetermined problem (one equation with five unknowns).<ref name="Lilly_1992">{{cite journal |title=A proposed modification of the Germano subgrid-scale closure method |journal=Physics of Fluids A |year=1992 |volume=4 |issue=3 |pages=633–636}}</ref> Because of these issues, Germano enforced the dynamic constant in an average sense, so that the equation for <math>C_s</math> was actually: :<math> C_{s}^{2} = \frac{ \left\langle \mathcal{L}_{ij} \mathcal{M}_{ij} \right\rangle }{ \left\langle \mathcal{M}_{ij} \mathcal{M}_{ij} \right\rangle } </math> Lilly<ref name="Lilly_1992" /> proposed a modification to the dynamic model that utilized a least squares method to find <math>C_s</math>, making the former version more stable and making the method more applicable. ==Derivation== In [[Einstein notation]], the Navier-Stokes equations for an incompressible fluid are : <math> \frac{\partial u_i}{\partial x_i} = 0 </math> : <math> \frac{\partial u_i}{\partial t} + \frac{\partial u_iu_j}{\partial x_j} = - \frac{1}{\rho} \frac{\partial p}{\partial x_i} + \nu \frac{\partial^2 u_i}{\partial x_j \partial x_j}. </math> Filtering the momentum equation results in : <math> \overline{\frac{\partial u_i}{\partial t}} + \overline{\frac{\partial u_iu_j}{\partial x_j}} = - \overline{\frac{1}{\rho} \frac{\partial p}{\partial x_i}} + \overline{\nu \frac{\partial^2 u_i}{\partial x_j \partial x_j}}. </math> If we assume that filtering and differentiation commute, then : <math> \frac{\partial \bar{u_i}}{\partial t} + \overline{\frac{\partial u_iu_j}{\partial x_j}} = - \frac{1}{\rho} \frac{\partial \bar{p}}{\partial x_i} + \nu \frac{\partial^2 \bar{u_i}}{\partial x_j \partial x_j}. </math> This equation models the changes in time of the filtered variables <math>\bar{u_i}</math>. Since the unfiltered variables <math>u_i</math> are not known, it is impossible to directly calculate <math>\overline{\frac{\partial u_iu_j}{\partial x_j}}</math>. However, the quantity <math> \frac{\partial \bar{u_i}\bar{u_j}}{\partial x_j}</math> is known. A substitution is made: : <math> \frac{\partial \bar{u_i}}{\partial t} + \frac{\partial \bar{u_i}\bar{u_j}}{\partial x_j} = - \frac{1}{\rho} \frac{\partial \bar{p}}{\partial x_i} + \nu \frac{\partial^2 \bar{u_i}}{\partial x_j \partial x_j} - \left(\overline{ \frac{\partial u_iu_j}{\partial x_j}} - \frac{\partial \bar{u_i}\bar{u_j}}{\partial x_j}\right). </math> Let <math>\tau_{ij} = \overline{u_i u_j} - \bar{u_i} \bar{u_j}</math>. The resulting set of equations are the LES equations: :<math> \frac{\partial \bar{u_i}}{\partial t} + \bar{u_j} \frac{\partial \bar{u_i}}{\partial x_j} = - \frac{1}{\rho} \frac{\partial \bar{p}}{\partial x_i} + \nu \frac{\partial^2 \bar{u_i}}{\partial x_j \partial x_j} - \frac{\partial\tau_{ij}}{\partial x_j}. </math> ==Recent applications== A few recent applications of the large eddy simulation technique include some geophysical flows including breaking waves and tidal bores.<ref name="Lubin_et_al_2010">{{cite journal|author=Lubin, P., Glockner, S., and [[Hubert Chanson|Chanson, H.]] |title= [http://espace.library.uq.edu.au/view/UQ:194970 Numerical Simulation of a Weak Breaking Tidal Bore] |journal=Mechanics Research Communications |volume=37 |issue=1 |pages=119–121 |doi= 10.1016/j.mechrescom.2009.09.008 |year=2010 }}</ref> Large eddy simulation has also been used to study turbulence in the planetary boundary layer.<ref name="Moeng 1984">{{cite journal |last1= Moeng|first1= C.H.|year= 1984|title= A Large-Eddy Simulation Model for the Study of Planetary Boundary-Layer turbulence.|journal=J. Atmos. Sci. |volume= 41|pages=2052–2062 }}</ref><ref name="Moeng and Sullivan 2002">{{cite book |last1= Moeng|first1=C.H. |last2= Sullivan|first2= P.P.|title= Encyclopedia of Atmospheric Sciences|year= 2002|pages= 1140–1150|chapter= Large Eddy Simulation}}</ref> ==See also== * [[Direct numerical simulation]] * [[Fluid mechanics]] * [[Galilean invariance]] - an important property of certain types of filters * [[Reynolds-averaged Navier–Stokes equations]] * [[Turbulence]] ==References== {{reflist}} {{DEFAULTSORT:Large Eddy Simulation}} [[Category:Partial differential equations]] [[Category:Fluid dynamics]] [[Category:Fluid mechanics]] [[Category:Turbulence]] [[Category:Turbulence models]] [[de:Large Eddy Simulation]] [[it:Formulazione LES]] [[ru:Метод крупных вихрей]] [[sv:Large eddy simulation]]</text> </page> <page> <id>21173</id> <title>Large segment offload</title> <text>[[Image:Offload_tcp_segment_dialogue.png|thumb|right|Dialogue box showing offload TCP segmentation settings for an Intel Pro 1000 NIC]] In [[computer network]]ing, '''large segment offload (LSO)''' is a technique for increasing outbound [[throughput]] of high-[[Bandwidth (computing)|bandwidth]] network connections by reducing [[central processing unit|CPU]] overhead. It works by queuing up large [[buffer (computer science)|buffer]]s and letting the [[network interface card|NIC]] split them into separate packets. The technique is also called '''TCP segmentation offload (TSO)''' when applied to [[Transmission Control Protocol|TCP]], or '''generic segmentation offload (GSO)'''. When large chunks of data are to be sent over a computer network, they need to be first broken down to smaller segments that can pass through all the network elements like routers and switches between the source and destination computers. This process is referred to as ''segmentation''. Segmentation is often done by the [[Transmission Control Protocol|TCP]] protocol in the host computer. Offloading this work to the [[network card]] is called ''TCP segmentation offload'' (TSO). For example, a unit of 64KB (65,536 bytes) of data is usually segmented to 46 segments of 1448 bytes each before it is sent over the network through the network interface controller ([[network card|NIC]]). With some intelligence in the NIC, the host CPU can hand over the 64 KB of data to the NIC in a single transmit request, the NIC can break that data down into smaller segments of 1448 bytes, add the TCP, [[Internet Protocol|IP]], and data link layer protocol headers -- according to a template provided by the host's TCP/IP stack -- to each segment, and send the resulting frames over the network. This significantly reduces the work done by the CPU. Many new NICs on the market today support TSO. Some network cards implement TSO generically enough that it can be used for offloading fragmentation of other [[transport layer]] protocols, or by doing [[IP fragmentation]] for protocols that don't support fragmentation by themselves, such as [[User Datagram Protocol|UDP]]. This is not as useful, though, as other protocols aren't commonly used for transmitting large amounts of data. == See also == * [[Large receive offload]] (LRO) * [[TCP Offload Engine]] (TOE) ==External links== * [http://www.microsoft.com/whdc/device/network/taskoffload.mspx Windows Network Task Offload] * [http://www.linux-foundation.org/en/Net:GSO GSO in Linux] * [http://kb.pert.geant2.net/PERTKB/LargeSendOffloadLSO Brief Description on LSO in Linux] * [http://kb.pert.geant2.net/PERTKB/PerformanceCaseStudies Case Studies of Performance issues with LSO and Traffic Shaping (Linux)] * [http://www.onlamp.com/pub/a/bsd/2008/02/26/whats-new-in-freebsd-70.html?page=1 FreeBSD 7.0 new features, brief discussion on TSO support] [[Category:Networking hardware]] [[Category:Network acceleration]] [[Category:TCP/IP]] [[de:TCP segmentation offload]]</text> </page> <page> <id>21183</id> <title>Larry Kaufman</title> <text><!-- Deleted image removed: [[Image:LarryKaufman.jpg|thumb|Larry Kaufman]] --> '''Lawrence C. "Larry" Kaufman''' (born 1947) is a [[Grandmaster (chess)|Grandmaster]] of [[chess]]. He is also a mathematics professor and currently lives in Potomac, Maryland. In 2008, as an [[International Master]], Kaufman won the [[World Senior Chess Championship|World Senior Championship]] (which he later retroactively shared with [[Mihai Șubă]]) which automatically earned him the Grandmaster title.<ref>[http://main.uschess.org/content/view/8880/497/ Larry Kaufman World Senior Champion!]</ref> A long time researcher in [[computer chess]], he helped write the opening book for the pioneering program [[Mac Hack]], co-developed [[Socrates II]], edited the journal ''Computer Chess Reports'', and worked on many other research and commercial [[chess engine]]s.<ref>https://chessprogramming.wikispaces.com/Larry+Kaufman</ref> He is 