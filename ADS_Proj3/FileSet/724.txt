TELECOM; Telecom Bretagne; France Telecom & TDF), France, April 1992. * {{fr}} ''Décodage itératif de codes produits'' (Iterative decoding of product codes) by Ramesh Pyndiah, Alain Glavieux and Claude Berrou (Institut TELECOM; Telecom Bretagne; France Telecom), France, November 1993. * {{fr}} ''Dispositif de réception de signaux numériques à structure itérative, module et procédé correspondents'' (Numeric signals device with iterative structure, associated module and process), by Catherine Douillard, Alain Glavieux, Michel Jezequel and Claude Berrou (Institut TELECOM; Telecom Bretagne; France Telecom & TDF), France, February 1995. * {{fr}} ''Procédé et dispositif de codage convolutif de blocs de données et procédé et dispositif de décodage correspondents'' (Apparatus and devices for the convolutive encoding of data blocks, and associated process and decoding device) by Claude Berrou and Michel Jezequel (Institut TELECOM; Telecom Bretagne; France Telecom et TDF), France, April 1996. * {{fr}} ''Procédé et dispositif de codage à au moins deux codages en parallèle et permutation améliorée, et procédé et dispositif de décodage correspondents'' (Apparatus and device for the encoding with at least two parallel encoders and enhanced permutation, and associated process and decoding device) by Claude Berrou and Alain Glavieux (Institut TELECOM; Telecom Bretagne; [[Institut TELECOM|GET]]), France, July 1999. * {{fr}} ''Procédé de qualification de codes correcteurs d’erreurs, procédé d’optimisation, codeur, décodeur et application correspondents'' (Apparatus for the qualification of error-correcting codes, and associated optimization process, encoder, decoder and application) by Claude Berrou, Michel Jezequel and Catherine Douillard (Institut TELECOM; Telecom Bretagne; France Telecom & GET), France September 2001. == Distinctions == He has received several distinctions:<ref name="bio">See Claude Berrou's personal biography page on the ENST Bretagne web site (external link below).</ref> * the SEE [[Ampère]] Medal (1997); * the [[IEEE]] (Information Theory) Golden Jubilee Award for Technological Innovation (1998), also given to Punya Thitimajshima; * the IEEE [[Richard W. Hamming]] Medal (2003); * the French Grand Prix [[France Télécom]] of [[French Academy of Sciences|Académie des sciences]] (2005); * the [[Marconi Electronic Systems|Marconi]] Prize (2005). He was nominated for the European Inventor of the Year Award (2006). He was finally elected a member of the [[French Academy of Sciences]] in 2007. == See also == * [[Institut TELECOM]] * [[Low-density parity-check code]] (LDPC code) == Notes == <references/> == External links == * [http://perso.enst-bretagne.fr/claudeberrou/ Claude Berrou's personal biography page], on the ENST Bretagne web site. {{Richard W. Hamming Medal recipients}} {{Persondata <!-- Metadata: see [[Wikipedia:Persondata]]. --> | NAME = Berrou, Claude | ALTERNATIVE NAMES = | SHORT DESCRIPTION = | DATE OF BIRTH = 1951 | PLACE OF BIRTH = | DATE OF DEATH = | PLACE OF DEATH = }} {{DEFAULTSORT:Berrou, Claude}} [[Category:1951 births]] [[Category:Living people]] [[Category:Information theorists]] [[Category:Members of the French Academy of Sciences]] [[de:Claude Berrou]] [[fr:Claude Berrou]] [[it:Claude Berrou]] [[pl:Claude Berrou]]</text> </page> <page> <id>6414</id> <title>Clausal normal form</title> <text>The '''clausal normal form''' (or '''clause normal form''', '''conjunctive normal form''', '''CNF''') of a logical formula is used in [[logic programming]] and many [[automated theorem proving|theorem proving]] systems. A formula in clause normal form is a set of clauses, interpreted as a conjunction. A [[Clause (logic)|clause]] is an implicitly universally quantified set of literals, interpreted as a disjunction.<ref>{{cite book|last=Loveland|first=Donald W.|title=Automated Theorem Proving: A Logical Basis|publisher=North Holland|date=1978}}</ref> ==Conversion to clausal normal form== The procedure to convert a formula into clausal form can destroy the structure of the formula, and naive translations often causes [[exponential growth|exponential blowup]] in the size of the resulting formula. The procedure begins with any formula of classical [[First-order predicate calculus|first-order logic]]: # Put the formula into [[negation normal form]]. # Standardize variables #* <math>(\forall x\, P(x)) \vee (\exists x\, P(x))</math> becomes <math>(\forall x\, P(x)) \vee (\exists c\, P(c))</math>, where <math>c</math> is new # [[Skolem normal form|Skolemize]] -- replace [[Existential quantification|existential]] variables with Skolem constants or Skolem functions of [[Universal quantification|universal]] variables, from the outside inward. Make the following replacements: #* <math>\forall x \exists y \, P(y)</math> becomes <math>, \forall x \, P(f_c(x))</math>, where <math>f_c</math> is new # Discard the [[universal quantifier]]s (which are implicit in CNF). # Put the formula into [[conjunctive normal form]]. # Replace <math>C1 \wedge \cdots \wedge Cn</math> with <math>\{ C1 , \dots , Cn \}</math>. Each conjunct is of the form <math>\neg A1 \vee \cdots \vee \neg Am \vee B1 \vee \cdots \vee Bn</math>, which is equivalent to <math>( A1 \wedge \cdots \wedge Am ) \to ( B1 \vee \cdots \vee Bn )</math>. # Finally, replace each conjunct <math>( A1 \wedge \cdots \wedge Am ) \to ( B1 \vee \cdots \vee Bn )</math> with <math>\{ A1 \wedge \cdots \wedge Am \to B1 , A1 \wedge \cdots \wedge Am \to B2 , \cdots , A1 \wedge \cdots \wedge Am \to Bn \}</math>. When ''n'' ≤ 1 for all clauses, the logic is called [[Horn clause]] logic and is equivalent in computational power to a [[universal Turing machine]]. Horn logic is the basis of [[Prolog]], the most widely used [[logic programming]] language. Often it is sufficient to generate an equisatisfiable (not an equivalent) CNF for a formula. In this case, the worst-case exponential blow-up can be avoided by introducing ''definitions'' and using them to ''rename'' parts of the formula. <ref>{{cite book|last=Nonnengart|first=Andreas|coauthors=Christoph Weidenbach|title=Handbook of Automated Reasoning|editor=A. Robinson and A. Voronkov|publisher=Elsevier Science and MIT Press|date=2001|volume=I|pages=335–367|chapter=Computing Small Clause Normal Forms|url=http://www.mpi-inf.mpg.de/~weidenb/publications/handbook99small.ps.gz|accessdate=2009-07-05}}</ref> == References == <references/> [[Category:Logic programming]] [[Category:Normal forms (logic)]] [[ja:節標準形]] [[pt:Forma normal clausal]]</text> </page> <page> <id>6418</id> <title>Claytronics</title> <text>'''Claytronics''' is an abstract future concept that combines [[nanoscale]] robotics and [[computer science]] to create individual nanometer-scale computers called claytronic atoms, or catoms, which can interact with each other to form tangible 3-D objects that a user can interact with. This idea is more broadly referred to as [[programmable matter]].<ref>Goldstein (2005), p. 99-101</ref> Claytronics has the potential to greatly affect many areas of daily life, such as telecommunication, human-computer interfaces, and entertainment. == Current research == Current research is exploring the potential of [[self-reconfiguring modular robot|modular reconfigurable robotics]] and the complex software necessary to control the “shape changing” robots. “Locally Distributed Predicates or LDP is a distributed, high-level language for programming modular reconfigurable robot systems (MRRs)”. There are many challenges associated with programming 