usually degraded quality and performance compared to the hardware equivalent. The API does include a ''[[Reference Rasterizer]]'' (or REF device), which emulates a generic graphics card in software, although it is too slow for most real-time 3D applications and is typically only used for debugging. A new real-time software rasterizer, ''[[Windows Advanced Rasterization Platform|WARP]]'', designed to emulate complete feature set of Direct3D 10.1, will be included with [[Windows 7]]; its performance is said to be on par with lower-end 3D cards.{{Citation needed|date=April 2010}} Direct3D's main competitor is [[OpenGL]]. There are numerous features and issues that proponents for either API disagree over, see [[Comparison of OpenGL and Direct3D]] for a summary. ==History== In 1992, [[Servan Keondjian]] started a company named [[RenderMorphics]], which developed a 3D graphics API named [[Reality Lab]], which was used in medical imaging and CAD software. Two versions of this API were released. Microsoft bought RenderMorphics in February 1995, bringing Keondjian on board to implement a 3D graphics engine for [[Windows 95]]. This resulted in the first version of Direct3D that shipped in '''DirectX 2.0''' and '''DirectX 3.0'''. Direct3D initially implemented "retained mode" and "immediate mode" 3D APIs. The retained mode was a [[Component Object Model|COM]]-based [[scene graph]] API that attained little adoption. Game developers clamored for more direct control of the hardware's activities than the Direct3D retained mode could provide. Only one game that sold a significant volume, [[Lego Island]], was based on the Direct3D retained mode, so Microsoft did not update the retained mode after DirectX 3.0. The first version of Direct3D immediate mode was based on an "execute buffer" programming model that Microsoft hoped hardware vendors would support directly. Execute buffers were intended to be allocated in hardware memory and parsed by the hardware in order to perform the 3D rendering. They were extremely awkward to program, however, hindering adoption of the new API and stimulating calls for Microsoft to adopt OpenGL as the official 3D rendering API for games as well as workstation applications. (see [[Comparison of Direct3D and OpenGL|OpenGL vs. Direct3D]]) Rather than adopt OpenGL as a gaming API, Microsoft chose to continue improving Direct3D, not only to be competitive with OpenGL, but to compete more effectively with proprietary APIs such as [[3dfx]]'s [[Glide API|Glide]]. A team in Redmond took over development of the Direct3D ''Immediate mode'', while Servan's RenderMorphics team continued work on the ''Retained mode''. '''Direct3D 5.0''' introduced the DrawPrimitive API that eliminated the need for applications to construct execute buffers. '''Direct3D 6.0''' introduced numerous features to cover contemporary hardware (such as [[Texture mapping|multitexture]] <ref>{{ cite web |url=http://www.gamedev.net/reference/articles/article1028.asp |title=Direct3D 6.0 introduces multitextures }}</ref> and [[stencil buffer]]s) as well as optimized [[geometry pipeline]]s for [[x87]], [[Streaming SIMD Extensions|SSE]] and [[3DNow!]] and optional texture management to simplify programming. Direct3D 6.0 also included support for features that had been licensed by Microsoft from specific hardware vendors for inclusion in the API, in exchange for the time-to-market advantage to the licensing vendor. [[S3TC|S3 texture compression]] support was one such feature, renamed as DXTC for purposes of inclusion in the API. Another was TriTech's proprietary [[bump mapping]] technique. By including these features in DirectX, Microsoft virtually guaranteed that all PC graphics hardware vendors would support the feature at their earliest opportunity{{Citation needed|date=November 2010}}. '''Direct3D 7.0''' introduced the [[DirectDraw Surface|.dds]] texture format<ref>{{ cite web |url=http://msdn.microsoft.com/en-us/library/bb943990(VS.85).aspx |title=Direct3D 7 introduces DirectDraw Surface (.dds) format }}</ref> and support for [[transform and lighting]] [[hardware acceleration]] (first available on PC hardware with NVIDIA's [[Geforce 256|GeForce]]), as well as the ability to allocate vertex buffers in hardware memory. Hardware vertex buffers represent the first substantive improvement over OpenGL in DirectX history. Direct3D 7.0 also augmented DirectX support for multitexturing hardware, and represents the pinnacle of fixed-function multitexture pipeline features: although powerful, it was so complicated to program that a new programming model was needed to expose the shading capabilities of graphics hardware. '''Direct3D 8.0''' introduced programmability in the form of vertex and pixel [[shader]]s, enabling developers to write code without worrying about superfluous hardware state. The complexity of the shader programs depended on the complexity of the task, and the [[device driver|display driver]] [[compiled]] those shaders to instructions that could be understood by the hardware. Direct3D 8.0 and its programmable shading capabilities were the first major departure from an OpenGL-style fixed-function architecture, where drawing is controlled by a complicated state machine. Direct3D 8.0 also eliminated [[DirectDraw]] as a separate API.<ref>{{ cite web |url=http://www.gamedev.net/reference/articles/article1247.asp |title=Direct3D takes over DirectDraw }}</ref> Direct3D subsumed all remaining DirectDraw API calls still needed for application development, such as Present(), the function used to display rendering results. Direct3D was not considered to be user friendly, but as of DirectX version 8.1, many usability problems were resolved. Direct3D 8 contained many powerful 3D graphics features, such as [[vertex shaders]], [[pixel shaders]], [[Distance fog|fog]], [[bump mapping]] and [[texture mapping]]. '''Direct3D 9.0''' added a new version of the [[High Level Shader Language]],<ref>{{ cite web |url=http://www.microsoft.com/presspass/press/2003/Jan03/01-22DirectXHLSLPR.mspx |title=HLSL in Direct3D 9.0 }}</ref> support for floating-point texture formats, [[Multiple Render Targets]], and texture lookups in the vertex shader. An extension only available in Windows Vista, called '''Direct3D 9Ex''' (previously versioned 9.0L), allows the use of the advantages offered by Windows Vista's [[Windows Display Driver Model]] (WDDM) and is used for [[Windows Aero]].<ref>{{cite web | url=http://msdn2.microsoft.com/en-us/library/bb173477.aspx | title=Graphics APIs in Windows Vista | author=Chuck Walbourn | month=August | year=2006 | work=MSDN | accessdate=2007-02-26}}</ref> D3D 9Ex, in conjunction with DirectX 9 class WDDM drivers allows graphics memory to be virtualized and [[paging|paged out]] to system memory, allows graphics operations to be interrupted and scheduled and allow DirectX surfaces to be shared across processes.<ref name="gs">{{cite web | url = http://blogs.msdn.com/greg_schechter/archive/2006/04/02/566767.aspx | title = The role of the Windows Display Driver Model in the DWM | accessdate = 2007-10-20}}</ref> DirectX 9.0Ex was previously known as version 1.0 of Windows Graphics Foundation (WGF). '''Direct3D 10.0''', was launched with and included in [[Windows Vista]]. Previously known as Windows Graphics Foundation (WGF) 2.0, D3D10 adds a number of capabilities including [[shader model]] 4.0, [[geometry shader]]s and optional interruptibility for shader programs.<ref name="gs"/> The 