the map, the analyst tries to assign or transform the spectral classes into thematic information of interest (i.e. forest, agriculture, urban). This process may not be easy because some spectral clusters represent mixed classes of surface materials and may not be useful. The analyst has to understand the spectral characteristics of the terrain to be able to label clusters as a specific information class. There are hundreds of clustering algorithms. Two of the most conceptually simple algorithms are the chain method and the ISODATA method. ===Chain method=== The algorithm used in this method operates in a two-pass mode (it passes through the multispectral dataset two times. In the first pass, the program reads through the dataset and sequentially builds clusters (groups of points in spectral space). Once the program reads though the dataset, a mean vector is associated to each cluster. In the second pass, a minimum distance to means classification algorithm is applied to the dataset, pixel by pixel. Then, each pixel is assigned to one of the mean vectors created in the first step..... ===ISODATA method=== The Iterative Self-Organizing Data Analysis Technique (ISODATA) method used a set of [[rule-of-thumb]] procedures that have incorporated into an iterative classification algorithm. Many of the steps used in the algorithm are based on the experience obtained through experimentation. The ISODATA algorithm is a modification of the k-means clustering algorithm. This algorithm includes the merging of clusters if their separation distance in multispectral feature space is less than a user-specified value and the rules for splitting a single cluster into two clusters. This method makes a large number of passes through the dataset until specified results are obtained. ==References== *Duda, R. O., Hart, P. E., & Stork, D. G. (2001). Pattern Classification. New York: John Wiley & Sons. *Jensen, J. R. (2005). Introductory Digital Image Processing: A Remote Sensing Perspective. Upper Saddle River : Pearson Prentice Hall. *Logicon Geodynamics. (1997). Multisprectal Imagery Reference Guide. Faifax: Logicon Geodynamics. [[Category:Classification algorithms]] [[Category:Imaging]]</text> </page> <page> <id>25406</id> <title>Multitail</title> <text>[[Image:Multitail-logo-2pk.jpg|thumb]] '''MultiTail''' is a program for monitoring multiple log files,<ref>[http://www.vanheusden.com/multitail/ MultiTail<!-- Bot generated title -->]</ref> in the fashion of the original [[tail (Unix)|tail]] program. The original tail presents the last few lines of a single log file, optionally providing a real-time display of the growing file. MultiTail started as an attempt to provide a program which would display two log files in a split screen. Originally it was a copy of wtail.<ref>[http://www.teaser.fr/~amajorel/wtail/ Index of /~amajorel/wtail<!-- Bot generated title -->]</ref> The difference was that wtail started reading at the start of the file by itself while MultiTail invoked one or more tail processes which only display the last few lines. MultiTail splits the terminal window or the console of a [[Unix]] system into two or more subwindows into which it can merge log files and command outputs. It can also display (like the original tail) in a single window. Capabilities include: * Monitoring of wildcards: if another file matching the wildcard has a more recent modification date, it will automatically switch to that file. This allows monitoring a complete directory of files * Merging of two or more input sources * Use of colors when displaying the log files (through [[regular expressions]]), to distinguish important information. * Filtering of lines (through regular expressions) * Interactive menus for editing regular expressions and for deleting and adding windows. * Use the output of [[shell scripts]] and other software. * Mimicking the functionality of tools such as [[Watch (Unix)|watch]] when viewing the output of external software. Platforms: * Multitail runs on all major [[Unix]] platforms ([[IBM AIX (operating system)|AIX]], [[Berkeley Software Distribution#Significant BSD descendants|*BSD]], [[HP-UX]], [[IRIX]], [[Linux]], [[Mac OS X]], [[SCO OpenServer]], [[Solaris (operating system)|Solaris]], [[Tru64]]) and also on [[Cygwin]] 1.5.19-4; Cygwin allows running Unix programs on [[Microsoft Windows]]. ==References== {{reflist}} == External links == * Features: [http://www.vanheusden.com/multitail/features.html] * Website: [http://www.vanheusden.com/multitail/ www.multitail.org] * Logo design: [http://2pk.nl/ Peterpaul Kloosterman ontwerp en typografie]: [[Category:Unix]]</text> </page> <page> <id>25413</id> <title>Multiunit auction</title> <text>{{Unreferenced stub|auto=yes|date=December 2009}} A '''multiunit auction''' is an [[auction]] in which several items are sold. The units can be sold each at the same price (a [[uniform price auction]]) or at different prices(a [[discriminatory price auction]]). {{DEFAULTSORT:Multiunit Auction}} [[Category:Game theory]] {{Economics-stub}}</text> </page> <page> <id>25414</id> <title>Multiuse Model View</title> <text>{{Notability|date=December 2009}} The '''Multiuse-Model View''' (MMV) is an architectural pattern used in software engineering that came about as an enhancement to the MVVM design pattern <ref>[http://andresusandi.blogspot.com/2009/10/multiusemodel-view-mmv-object-modeling.html MultiuseModel-View (MMV) Object modeling pattern with WPF and WCF: Is MVVM the antichrist?]</ref>. The pattern is specific for Windows Presentation Foundation (WPF) and Windows Communication Foundation (WCF) applications. While keeping the logical separation of user interface (View) versus logic (Model), MMV's primary objective is to address the shortcomings of the MVVM pattern. The Multiuse-Model of MMV typically relies on reflection to facilitate object building in order to easily integrate logic-centric object models with view-centric object models minimizing the amount of duplicate code. MMV was designed to make use of specific functions in C#, WPF and WCF to better facilitate the reuse of code between the server and the client. == Pattern Description == The Multiuse-Model View pattern attempts to leverage the advantages of separation of logic as well as the advantages of XAML and the Windows Presentation Foundation just like MVVM does, however, it also attempts to deal with most of the disadvantages of MVVM including promoting a more “object oriented” class design, reducing the amount of duplicate code required, simplifying maintenance and reducing the amount of metadata generated. To accomplish this MMV relies on a set of base classes which provide generic functionality for sending data from/to the client and displaying data on the UI. == References == <!--- See [[Wikipedia:Footnotes]] on how to create references using <ref></ref> tags which will then appear here automatically --> {{Reflist}} == See also == *[[Model View ViewModel (MVVM)]] <!--- Categories ---> [[Category:Software design patterns]] [[Category:Software architecture]]</text> </page> <page> <id>25416</id> <title>Multivalued function</title> <text>[[Image:Multivalued function.svg|frame|right|This diagram does not represent a "true" [[function (mathematics)|function]], because the element 3 in ''X'' is associated with two elements, ''b'' and ''c'', 