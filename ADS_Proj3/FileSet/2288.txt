systems]] * [[YAFFS]] * [[UBIFS]] * [[LogFS]] * [[ZFS]] * [[Btrfs]] * [[NILFS]] == External links == *[http://sources.redhat.com/jffs2/ Red Hat JFFS2 site] *[http://sources.redhat.com/jffs2/jffs2-html JFFS: The Journalling Flash File System] by David Woodhouse ([http://sources.redhat.com/jffs2/jffs2.pdf PDF]) *[http://lists.infradead.org/pipermail/linux-mtd/ JFFS2 official mailing list] == References == <references /> {{Filesystem}} [[Category:Disk file systems]] [[Category:Flash file systems]] [[Category:Embedded Linux]] [[Category:Linux file systems]] [[Category:Compression file systems]] [[Category:Free special purpose file systems]] [[es:JFFS2]] [[fr:JFFS2]] [[ko:JFFS2]] [[it:JFFS2]] [[ja:JFFS2]] [[pl:JFFS2]] [[zh:JFFS2]]</text> </page> <page> <id>19524</id> <title>JGroups</title> <text>{{ Infobox_Software | name = JGroups | logo = | screenshot = | caption = | collapsible = | developer = | status = Active | latest_release_version = 2.11.0 GA | latest_release_date = {{release_date|2010|10|29}} | latest_preview_version = | latest_preview_date = | operating_system = [[Cross-platform]] | size = | programming_language = [[Java_(programming_language)|Java]] | genre = [[Reliability (computer networking)|reliable]] [[multicast]] system | license = [[GNU Lesser General Public License]] | website = http://www.jgroups.org/ }} '''JGroups''' is a [[Reliability (computer networking)|reliable]] [[multicast]] system that's written in the [[Java (programming language)|Java]] language. JGroups adds a "grouping" layer over a transport protocol, internally keeping a list of participants. This list is used to: * Make the application aware of the listeners * Make some or all transmissions reliable * Allow [[Atomic operation|atomic]] (all or none) transmissions * Allow totally ordered transmissions JGroups is a toolkit for reliable multicast communication. It can be used to create groups of processes whose members can send messages to each other. JGroups enables developers to create reliable multipoint (multicast) applications where reliability is a deployment issue. JGroups also relieves the application developer from implementing this logic themselves. This saves significant development time and allows for the application to be deployed in different environments without having to change code. ==JGroups Features== * Group creation and deletion. Group members can be spread across LANs or WANs * Joining and leaving of groups * Membership detection and notification about joined/left/crashed members * Detection and removal of crashed members * Sending and receiving of member-to-group messages (point-to-multipoint) * Sending and receiving of member-to-member messages (point-to-point) ==Flexible Protocol Stack== The most powerful feature of JGroups is its flexible protocol stack, which allows developers to adapt it to exactly match their application requirements and network characteristics. The benefit of this is that you only pay for what you use. By mixing and matching protocols, various differing application requirements can be satisfied. JGroups comes with a number of protocols (but anyone can write their own), for example * Transport protocols: [[User Datagram Protocol|UDP]] ([[IP Multicast]]), [[Transmission Control Protocol|TCP]], [[Java Message Service|JMS]] * Fragmentation of large messages * Reliable unicast and multicast message transmission. Lost messages are retransmitted * Failure detection: crashed members are excluded from the membership * Ordering protocols: Atomic (all-or-none message delivery), Fifo, Causal, Total Order (sequencer or token based) * Membership * Encryption == External links == * [http://www.jgroups.org/javagroupsnew/docs/index.html The JGroups website] * [http://www.alishomepage.com/Scholar/Master/JGroups/RequestDistributor.java A simple request distribution example in JGroups] * [http://www.alishomepage.com/Scholar/Master/JGroups/Slideshow.pdf A slideshow presenting JGroups] [[Category:Computer networking]] [[Category:Java programming language]] {{Compu-network-stub}} [[fr:JGroups]] [[tr:JGroups]]</text> </page> <page> <id>19525</id> <title>JHDL</title> <text>'''JHDL''' (Just-Another Hardware Description Language) is a low-level structural [[hardware description language]], focused primarily on building circuits via an [[Object-oriented programming|Object Oriented]] approach that bundles collections of gates into Java objects. Implemented as a toolset and class library on top of the [[Java (programming language)|Java programming language]], its primary use is for the design of digital circuits for implementation in [[FPGA|field-programmable gate arrays]] (FPGAs). Particular attention was paid to supporting the [[Xilinx]] series of chips. When the design is ready to be placed in a fabric, the developer simply generates an [[EDIF|Electronic Design Interchange Format]] (EDIF) [[netlist]] and imports it into his favorite toolkit. Once imported, the developer should be able to transfer the circuit via a [[JTAG|Joint Test Action Group]] (JTAG) cable. EDIF netlisting is supported for the XC4000, Virtex, and Virtex-II series of [[FPGA]]s. JHDL was developed at [[Brigham Young University|BYU]] in the [[Configurable Computing Laboratory]], the project initiated in 1997.<ref>Brent E. Nelson, "[http://doi.ieeecomputersociety.org/10.1109/ASAP.2006.65 The Mythical CCM: In Search of Usable (and Resuable) FPGA-Based General Computing Machines]," asap, pp.5-14, IEEE 17th International Conference on Application-specific Systems, Architectures and Processors (ASAP'06), 2006</ref> == Features == The JHDL language features include: * Structural hardware design * Flexible module generators * Table-generated finite state machines * A graphical "Workbench" toolkit Behavioral synthesis is not yet fully supported. The integrated JHDL Workbench environment is designed to allow developers to graphically test and trace their circuit designs. This tool includes: * A graphical schematic viewer * A multiclock cycle-based simulator * A command line interface * A complete list of all wires and gates * A complete status of all values passing through the circuit == Naming == Originally, the '''J''' in "JHDL" stood for "Java". However, to prevent trademark issues, the name has been [[backronym]]ed to stand for '''J'''ust-Another '''H'''ardware '''D'''escription '''L'''anguage. ==References== * [http://www.jhdl.org/ Official JHDL website] * [http://ccl.ee.byu.edu BYU's Configurable Computing Laboratory] * [http://www.alanfeldstein.com/products/software/jhdl/ Cosmic Horizon JHDL] <references/> [[Category:Hardware description languages]] [[de:Just Another Hardware Definition Language]]</text> </page> <page> <id>19528</id> <title>JISC Collections</title> <text>{{orphan|date=August 2010}} {{refimprove|date=October 2010}} In 2006, the '''JISC Content Procurement Company Ltd''' (trading as '''JISC Collections''') was formed. Originally operating within the [http://www.jisc.ac.uk Joint Information Systems Committee] (JISC), JISC Collections was made into a company limited by guarantee that mutually trades with its members and is now a JISC funded service. JISC Collections services all UK [[Higher education|Higher Education]] (HE) and [[Further education|Further Education]] (FE) institutions and [[Research Council]]s (RCs) that receive direct funding from the UK HE and FE funding bodies. It provides institutions with a [http://www.jisc-collections.ac.uk/catalogue.aspx collections catalogue] of free and subscription-based online resources such as full text databases, e-books, digital images, e-journals, online film, learning materials and geospatial data. The negotiations for e-journals are managed under the [http://www.nesli2.ac.uk/ NESLi2] scheme. The online resources in the collections catalogue (hence the name JISC Collections) are licensed from publishers, aggregators, content providers and each institution decides which resources it wishes to subscribe to based on the needs of their users. Core to the service provided by JISC Collections is 