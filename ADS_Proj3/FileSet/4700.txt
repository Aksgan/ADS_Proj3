latest release version = 6.1 | latest release date = February 2010 | frequently updated = | programming language = | operating system = [[Cross-platform]] | size = | genre = [[Triplestore]], [[Relational database management system|RDBMS]], [[Application server]], [[Web server]] | license = [[GNU GPL|GPLv2]]<ref>{{cite web |url=http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSLicense |title=Virtuoso Open-Source License Terms |author=OpenLink Software |accessdate=2010-02-03 }}</ref> and proprietary | website = [http://virtuoso.openlinksw.com/ virtuoso.openlinksw.com] }} '''Virtuoso Universal Server''' is a [[middleware]] and [[database engine]] hybrid that combines the functionality of a traditional [[Relational database management system|RDBMS]], [[Object-relational database|ORDBMS]], [[Federated database system|virtual database]], [[Resource Description Framework|RDF]], [[XML]], [[free-text]], [[application server|web application server]] and [[file server]] functionality in a single system. Rather than have dedicated servers for each of the aforementioned functionality realms, Virtuoso is a "universal server"; it enables a single [[Thread (computer science)|multithreaded]] server [[process (computing)|process]] that implements multiple protocols. The [[open source]] edition of Virtuoso Universal Server is also known as '''OpenLink Virtuoso'''. The software has been developed by [[OpenLink Software]] with [[Kingsley Idehen]] and [[Orri Erling]] as the chief [[software architect]]s. == Database structure == === Core database engine === Virtuoso provides an extended object-relational model, which combines the flexibility of relational access with inheritance, run time data typing, late binding, and identity based access. Virtuoso Universal Server database includes physical file and in memory storage and operating system processes that interact with the storage. There is one main process, which has listeners on a specified port for [[Hypertext Transfer Protocol|HTTP]], [[SOAP]], and other protocols. ====Architecture==== Virtuoso is designed to take advantage of operating system threading support and multiple CPUs. It consists of a single process with an adjustable pool of threads shared between clients. Multiple threads may work on a single index tree with minimal interference with each other. One cache of database pages is shared among all threads and old dirty pages are written back to disk as a background process. The database has at all times a clean checkpoint state and a delta of committed or uncommitted changes to this checkpointed state. This makes it possible to do a clean backup of the checkpoint state while transactions proceed on the commit state. A transaction log file records all transactions since the last checkpoint. Transaction log files may be preserved and archived for an indefinite time, providing a full, recoverable history of the database. A single set of files is used for storing all tables. A separate set of files is used for all temporary data. The maximum size of a file set is 32 terabytes, for 4G x 8K pages. ====Locking==== Virtuoso provides dynamic locking, starting with row level locks and escalating to page level locks when a cursor holds a large percentage of a page's rows or when it has a history of locking entire pages. Lock escalation only happens when no other transactions hold locks on the same page, hence it never deadlocks. Virtuoso SQL provides means for exclusive read and for setting transaction isolation. ====Transactions==== All four levels of isolation are supported: Dirty read, read committed, repeatable read and serializable. The level of isolation may be specified operation by operation within a single transaction. Virtuoso can also act as a [[resource manager]] and/or transaction coordinator under Microsoft's Distributed Transaction Coordinator ( [[Distributed Transaction Coordinator|MS DTC]] ) or the [[X/Open|XA]] [[standardization|standard]]. ====Data integrity==== Virtuoso [[Object-relational database|ORDBMS]] database supports [[entity integrity]] and [[referential integrity]]. Virtuoso ensures that relationships between records in related tables are valid by enforcing [[referential integrity]]. Integrity constraints include: * [[Null (SQL)|NOT NULL]] - Within the definition of a table, Virtuoso allows data to contain a NULL value. This NULL value is not really a value at all and is considered an absence of value. The constraint of NOT NULL forces a value to be given to a column. * [[Unique key|Unique Key]] - Uniqueness for a column or set of columns means that the values in that column or set of columns must be different from all other columns or set of columns in that table. A unique key may contain NULL values since they are by definition a unique non-valued value. * [[Unique key|Primary Key]] - Primary key are much like unique keys except that they are designed to uniquely identify a row in a table. They can consist of a single column or multiple columns. The primary key cannot contain a NULL value. * [[Check Constraint|CHECK Constraint]] - Virtuoso provides on a column an integrity constraint that requires certain conditions to be met before the data is inserted or modified. If the checks are not satisfied then the transaction cannot be completed. ====Data dictionary==== Virtuoso stores all its information about all user objects in the database in the system catalog tables designated by db.dba*. === Components and files === ==== Components ==== Virtuoso is made up of client and server components. These are the components typically used to communicate with a local or remote Virtuoso server which include: * Virtuoso Drivers for [[Open Database Connectivity|ODBC]], [[Java Database Connectivity|JDBC]], [[ADO.NET]] and [[OLE DB]] * Conductor, a Web Based Database Administration User Interface * ISQL (Interactive SQL) and ISQO Utilities * Documentation and Tutorials * Samples All database installation come with two databases, a default database and a demo database. == History == The Virtuoso project was born in 1998 from a merger of the '''OpenLink''' data access [[middleware]] and '''Kubl''' RDBMS. === Kubl RDBMS === The Kubl [[Object-relational database|ORDBMS]] was one of a list of [[Relational database management system|relational database system]]s with roots in [[Finland]]. This list also includes [[MySQL]], [[InnoDB]], and [[Solid RDBMS]]/[[Solid Technologies]]. As is the case with most technology products, key personnel behind OpenLink Virtuoso, [[InnoDB]], and [[Solid Technologies|Solid]] share periods of professional overlap that provide noteworthy insight into the history database technology development in Finland. [[Heikki Tuuri]] (creator of [[InnoDB]]), [[Ora Lassila]] (W3C and Nokia Research, a technology lead and visionary in the areas [[Resource Description Framework|RDF]] and [[Semantic Web]] in general alongside [[Tim Berners-Lee]]), and [[Orri Erling]] (Virtuoso Program Manager at OpenLink Software) all worked together 