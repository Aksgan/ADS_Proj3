part is under an Intel proprietary license.<ref>[http://www.intel.com/cd/software/products/asmo-na/eng/219740.htm Intel Software Development Products] (download page)</ref> ==References== <references /> *[http://www.intel.com/cd/software/products/asmo-na/eng/219773.htm IA-32 EL Linux link from Intel] <small>dead link</small> [[Category:Device drivers]] [[Category:Intel]] [[Category:x86 emulators]] {{software-stub}}</text> </page> <page> <id>17295</id> <title>IBM Future Systems project</title> <text>The '''Future Systems project''' was a research and development project undertaken in [[IBM]] in the early '70s, aiming to develop a revolutionary line of computer products, including new software models which would simplify software development by exploiting modern powerful hardware. == Background and goals == Until the end of the 60s, IBM had been making most of its profit on the hardware, bundling support software and services along with its systems. Only hardware boxes carried a price tag, but those prices included an allocation for software and services. Other manufacturers had started to market compatible hardware, mainly peripherals such as tape and [[disk drives]], at a price significantly lower than IBM, thus shrinking the possible base for recovering the cost of software and services. Early in 1971, after [[Gene Amdahl]] had left IBM to set up his own company offering [[IBM-compatible]] [[mainframes]], an internal IBM taskforce (project Counterpoint) concluded that the compatible mainframe business was indeed a viable business, and that the basis for charging for software and services as part of the hardware price would quickly vanish. Another strategic issue was that the cost of computing was steadily going down while the costs of programming and operations, being made of personnel costs, were steadily going up. Therefore, the part of the customer's IT budget available for hardware vendors would be significantly reduced in the coming years, and with it the base for IBM revenue. It was imperative that IBM, by addressing the cost of application development and operations in its future products, would at the same time reduce the total cost of IT to the customers and capture a larger portion of that cost. At the same time, IBM was under legal attack for its dominant position and its policy of bundling software and services in the hardware price, so that any attempt at "re-bundling" part of its offerings had to be firmly justified on a pure technical basis, so as to withstand any legal challenge. In May-June 1971, an international task force convened in [[Armonk]] under [[John Opel]], then a vice-president of IBM. Its assignment was to investigate the feasibility of a new line of computers which would take advantage of IBM's technological advantages in order to render obsolete all previous computers - compatible offerings but also IBM's own products. The task force concluded that the project was worth pursuing, but that the key to acceptance in the marketplace was an order of magnitude reduction in the costs of developing, operating and maintaining application software. The major objectives of the FS project were consequently stated as follows: *render obsolete all existing computing equipment, including IBM's, by fully exploiting the latest technologies, *offer a major reduction in the costs and efforts involved in application development and operations, *provide a technically sound basis for re-bundling as much as possible of IBM's offerings (hardware, software and services) It was hoped that a new architecture that took advantage of the cheaper hardware would simplify software development and would make a major reduction in total costs both for IBM and for their customers. == Technology == === Data access === One design principle of FS was a "single-level store" which extended the idea of [[virtual memory]] to cover persistent data. Working memory, files, and databases were all accessed in a uniform way by an abstraction of the notion of address. Therefore, programmers would not have to be concerned whether the object they were trying to access was in memory or on the disk. This and other planned enhancements were expected to make programming easier and thereby reduce the cost of developing software. Implementation of that principle required that the addressing mechanism at the heart of the machine would incorporate a complete storage hierarchy management system and major portions of a data base management system, that until then were implemented as add-on software. === Processor === Another principle was the use of very high-level complex instructions to be implemented in [[microcode]]. As an example, one of the instructions, CreateEncapsulatedModule, was a complete linkage editor. Other instructions were designed to support the internal data structures and operations of programming languages such as [[FORTRAN]], [[COBOL]], and [[PL/I]]. In effect, FS was designed to be the ultimate complex instruction set computer ([[Complex instruction set computer|CISC]]). Another way of presenting the same concept was that the entire collection of functions previously implemented as [[hardware]], [[operating system]] software, [[data base]] software and more would now be considered as making up one integrated system, with each and every elementary function implemented in one of many layers including circuitry, [[microcode]], and conventional [[software]]. More than one layer of microcode and code were contemplated, sometimes referred to as picocode or millicode. Depending on the people one was talking to, the very notion of a "machine" therefore ranged between those functions which were implemented as circuitry (for the hardware specialists) to the complete set of functions offered to users, irrespective of their implementation (for the systems architects). The overall design also called for a "universal controller" to handle primarily input-output operations outside of the main processor. That universal controller would have a very limited instruction set, restricted to those operations required for I/O, pioneering the concept of a reduced instruction set computer (RISC). Meanwhile, [[John Cocke]], one of the chief designers of early IBM computers, began a research project to design the first reduced instruction set computer ([[RISC]]). In the long run, the RISC architecture, which eventually evolved into IBM's Power and [[PowerPC]] architecture, proved to be vastly cheaper to implement and capable of achieving much higher clock rate. == History == === Project start === In the late 1960s and early 1970s, [[IBM]] considered a radical redesign of their entire product line to take advantage of the much lower cost of computer circuitry expected 