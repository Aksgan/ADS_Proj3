[[Image:LyapunovDiagram.svg|thumb|LyapunovDiagram|333px|right|Depiction of the asymmetric growth of perturbations along an evolved trajectory.]] Given a model ''M'' that evolves states <math>x</math> through time define a linear operator, <math>L</math>, valid at time <math>t</math>, which evolves states to a nearby <math>t+1</math>. Because this operator is linear we can easily consider the growth of nearby perturbations of the state <math>x</math>, <math>x+\delta x</math> and how they evolve to time <math>t+1</math> relative to the original state. : <math> \begin{align} & {} \quad M_{t\rightarrow t+1}(x+\delta x) - M_{t\rightarrow t+1}(x) \\ & \approx L(x+\delta x) - Lx \\ & = Lx + L\delta x - Lx = L \, \delta x \end{align} </math> And so we see that perturbations (errors) of the initial conditions evolve approximately with L. Often we are interested in how these perturbations <math> \delta x </math> grow. In chaotic systems a small subspace of the space of perturbations will grow very quickly relative to the rest (see figure). These directions are the Lyapunov vectors and they describe the fastest growing errors that can occur in our system. These vectors often lie within the [[attractor]] of the [[dynamical system]]. As a result they are often used to generate other perturbations that lie within the attractor for initial conditions of [[ensemble forecasting]]. ==Method== To compute the Leading Lyapunov Vectors (LLVs) we apply a sequence of linear operators <math>L_{x_i}</math> to a random seed of uniform perturbations <math> \{v_j\}</math> along a trajectory <math> \{x_1, x_2, x_3, \dots, x_n\}</math> of states evolved through time. As we replace <math> v_j := L_{x_i}v_j </math> the dominant Lyapunov Vectors grow more strongly in each of the <math> v_j </math> and they will eventually all converge on the single Leading Lyapunov Vector. To obtain several vectors rather than this one and to avoid computational blowup we can orthonormalize the set <math>\{v_j\}</math> at each step. This process is very similar to [[Krylov_subspace_methods|Krylov subspace methods]]. ==References== *Kalnay, E. (2007), "Atmospheric Modeling, Data Assimilation and Predictability", Cambridge: Cambridge University Press *Kalnay E, Corazza M, Cai M. Are Bred Vectors the same as Lyapunov Vectors? EGS XXVII General Assembly,. 2002. Available at: http://www.atmos.umd.edu/~ekalnay/lyapbredamsfinal.htm [[Category:Functional analysis]] [[Category:Mathematical physics]] [[Category:Dynamical systems]] {{mathanalysis-stub}}</text> </page> <page> <id>22789</id> <title>Lycoris (company)</title> <text>'''Lycoris''', (formerly Redmond Linux Corp.), was started in the year 2000 with the intent to make [[free software]] easy enough for anyone to use.<ref>[http://www.linux.com/articles/15497 Linux.com]</ref> Redmond Linux was founded by Joseph Cheek, an [[entrepreneur]] who had previously worked for [[Linuxcare]].<ref>[http://desktoplinux.com/articles/AT3599362330.html Desktoplinux.com]</ref> In late 2001 it merged with embedded systems company DeepLinux; the merged entity was named Redmond Linux Corporation.<ref>[http://www.linux.com/articles/15497 Linux.com]</ref> The company's first product was Redmond Linux Personal, an easy-to-use [[Linux]] desktop operating system. The company was renamed Lycoris in January 2002 and its assets were acquired by [[Mandriva]] on June 15, 2005.<ref>[http://www.desktoplinux.com/news/NS6659836508.html Desktoplinux.com]</ref> The flagship product of Lycoris was '''Lycoris Desktop/LX''', a [[Linux distribution]]. The company was based in [[Maple Valley, Washington]], [[United States|USA]].<ref>[http://distrowatch.lafox.net/table.php?distribution=lycoris Distrowatch.lafox.net]</ref> Lycoris is currently part of Mandriva. == Lycoris Desktop/LX == Lycoris Desktop/LX installer was originally based on [[Caldera OpenLinux|Caldera]]'s Workstation 3.1 Linux distribution with the rest of the distribution built from the kernel up.<ref>[http://www.linux.com/articles/15497 Linux.com]</ref><ref>[http://www.linux.com/articles/15497 Linux.com]</ref> The desktop and applications looked a lot like [[Microsoft]] [[Windows XP]], right down to the background image<ref>[http://www.osnews.com/img/5517/lycoris1.jpg Osnews.org]</ref> that shipped with the software.<ref>[http://www.time.com/time/business/article/0,8599,338704,00.html Time.com]</ref> {{Linux distributions}} ==References== <references/> {{DEFAULTSORT:Lycoris (Company)}} [[Category:Discontinued Linux distributions]] [[Category:Linux companies]] [[de:Lycoris]] [[es:Lycoris]] [[fr:Lycoris]] [[pl:Lycoris]] [[pt:Lycoris Desktop/LX]]</text> </page> <page> <id>22799</id> <title>Lynxmotion</title> <text>'''Lynxmotion''' is a [[Robot kit|Robot Parts and Kits]] manufacturing company based in Pekin, IL. They design and manufacture a variety of hobby and research level robot kits and parts, and specialize in a modular robotics building system known as the [[Servo Erector Set]]. Lynxmotion also hosts an active online community forum of hobby [[roboticist]]s at [http://www.lynxmotion.net Lynxmotion.net] where projects, code, and technology is shared and support is provided for products. ==See also== {{Portal|Robotics}} {{Main|Outline of robotics}} * [[:Category:Robotics suites]] * [[Future of robotics]] * [[Glossary of robotics]] * [[Human virtualization]] * [[Industrial robot]] * [[List of emerging technologies#Robotics and applied mechanics|List of emerging robotic technologies]] * [[NASA robots]] * [[Open source hardware]] * [[Robot]] * [[Robotics suite]] * [[Whegs]] ==External links== * http://www.lynxmotion.com *[http://www.basicmicro.com/ARC32_p_141.html Robot Kit Controllers For Lynxmotion - On The Fly Inverse Kinematics - See A-POD] [[Category:Robotics]]</text> </page> <page> <id>22805</id> <title>M-tree</title> <text>{{Context|date=June 2010}} '''M-trees''' are [[tree data structure]]s that are similar to [[R-tree]]s and [[B-tree]]s. It is constructed using a [[Metric (mathematics)|metric]] and relies on the [[triangle inequality]] for efficient range and k-NN queries. While M-trees can perform well in many conditions, the tree can also have large overlap and there is no clear strategy on how to best avoid overlap. In addition, it can only be used for [[distance function]]s that satisfy the triangle inequality, while many advanced dissimilarity functions used in [[information retrieval]] do not satisfy this.<ref name="p426">{{cite conference | first = Paulo | last = Ciaccia | authorlink = | coauthors = Patella,Marco Zezula, Pavel | title = M-tree An Efficient Access Method for Similarity Search in Metric Spaces | booktitle = Proceedings of the 23rd VLDB Conference Athens, Greece, 1997 | pages = 426-435 | publisher = Very Large Databases Endowment Inc. | year = 1997 | location = IBM Almaden Research Center | url = http://www.vldb.org/conf/1997/P426.PDF | accessdate = 2010-09-07 | id = p426 }}</ref> ==Overview== [[File:Mtree-2d.svg|thumb|350px|2D M-Tree visualized using [[Environment for Developing KDD-Applications Supported by Index-Structures|ELKI]]. The tree has a single level of leaf nodes. Due to a suboptimal split heuristic, there is a large overlap.]] As in any Tree-based data structure, the M-Tree is composed of Nodes and Leafs. In each node there is a data object that identifies it uniquely and a pointer to a sub-tree where its children reside. Every leaf has several data objects. For each node there is a radius '''''r''''' that defines a Ball in the desired metric space. Thus, every node <math>n</math> and leaf <math>l</math> residing in a particular node <math>N</math> is at most distance <math>r</math> from <math>N</math>, and every node ''n'' and leaf ''l'' with node parent ''N'' keep the distance from it. ==M-Tree construction== === Components === An M-Tree 