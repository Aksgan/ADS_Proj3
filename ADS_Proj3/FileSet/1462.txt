domain object model provides an overall framework in which to add features. * '''Developing by Feature'''. Any function that is too complex to be implemented within two weeks is further decomposed into smaller functions until each sub-problem is small enough to be called a feature. This makes it easier to deliver correct functions and to extend or modify the system. * '''Individual Class (Code) Ownership'''. Individual class ownership means that distinct pieces or grouping of code are assigned to a single owner. The owner is responsible for the consistency, performance, and conceptual integrity of the class. * '''Feature Teams'''. A feature team is a small, dynamically formed team that develops a small activity. By doing so, multiple minds are always applied to each design decision and also multiple design options are always evaluated before one is chosen. * '''Inspections'''. [[Software inspection|Inspections]] are carried out to ensure good quality design and code, primarily by detection of defects. * '''Configuration Management'''. Configuration management helps with identifying the source code for all features that have been completed to date and to maintain a history of changes to classes as feature teams enhance them. * '''Regular Builds'''. Regular builds ensure there is always an up to date system that can be demonstrated to the client and helps highlighting integration errors of source code for the features early. * '''Visibility of progress and results'''. By frequent, appropriate, and accurate progress reporting at all levels inside and outside the project, based on completed work, managers are helped at steering a project correctly. == Metamodel (MetaModeling) == [[Image:Fdd process data diagram.png|thumb|150px|Process-Data Model for FDD]][[Metamodeling]] helps visualizing both the processes and the data of a [[Method (software engineering)|method]], such that methods can be compared and method fragments in the [[Method Engineering Encyclopedia|method engineering]] process can easily be reused. The advantage of the technique is that it is clear, compact, and consistent with [[Unified Modeling Language|UML]] standards. The left side of the metadata model, depicted on the right, shows the five basic activities involved in a software development project using FDD. The activities all contain sub-activities that correspond to the sub-activities in the FDD process description on [http://www.nebulon.com/ Jeff De Luca´s website]. The right side of the model shows the concepts involved. These concepts originate from the activities depicted in the left side of the diagram. A definition of the concepts is given in Table 3. == Tools used for Feature Driven Development == * [http://www.casespec.net CASE Spec]. CASE Spec is a commercial enterprise tool for Feature-Driven development. * [http://www.techexcel.com/solutions/alm/fdd.html TechExcel DevSuite]. TechExcel DevSuite is a commercial suite of applications to enable Feature-Driven development. * [http://www.fddpma.net/ FDD Project Manager Application]. FDDPMA is a web-based effort that aims to facilitate iterative development by reducing FDD management overhead, producing graphical progress reports, and providing a workplace where all the FDD related documentation is collected. * [http://fddtools.sourceforge.net/ FDD Tools]. The FDD Tools project aims to produce an open source, cross-platform toolkit supporting the Feature Driven Development methodology. * [http://www.featuredrivendevelopment.com/node/687 FDD Viewer]. FDD Viewer is a utility to display and print parking lots. == References == * 1. {{note|Coad}}[[Peter Coad|Coad, P.]], [[Eric Lefebvre|Lefebvre, E.]] & [[Jeff De Luca|De Luca, J.]] (1999). ''Java Modeling In Color With UML: Enterprise Components and Process''. Prentice Hall International. (ISBN 0-13-011510-X) * 2. {{note|Palmer}}[[Stephen Palmer|Palmer, S.R.]], & [[Mac Felsing|Felsing, J.M.]] (2002). ''A Practical Guide to Feature-Driven Development''. Prentice Hall. (ISBN 0-13-067615-2) == See also == * [[Agile Software Development]] * [[Project lifecycle]] * [[Software architecture]] * [[Software development process]] * [[Software engineering]] == External links == * [http://www.featuredrivendevelopment.com/ Feature Driven Development Community] * {{dmoz|Computers/Programming/Methodologies/Agile/Feature_Driven_Development}} * [http://www.nebulon.com/fdd/index.html Nebulon FDD Page] - Nebulon is the consulting practice of Jeff De Luca * [http://www.sitepoint.com/article/successful-development Successful Web Development Methodologies] - Use of FDD for Web Development projects * [http://www.methodsandtools.com/archive/archive.php?id=19 Delivering Real Business Value using Feature Driven Development] - Article gives basic overview of FDD * [http://www.agilemodeling.com/essays/fdd.htm FDD and Agile Modeling] * [http://www.bettersoftwarefaster.com/index.htm Better Software Faster] - Another book in the Coad Series referencing Feature Driven Development. Authors Andy Carmichael and Dan Haywood ISBN 0-13-008752-1 * [http://www.se-radio.net/2008/01/episode-83-jeff-deluca-on-feature-driven-development/ Interview with FDD-Creator Jeff DeLuca] (Podcast) {| class="wikitable" |+ Table 2: Activities and sub-activities ! | Activity ! | Sub-activity ! | Description |- | rowspan="7" | '''Develop Overall Model''' | | Form Modeling Team | | The MODELING TEAM comprises permanent members from the domain and development areas, specifically the domain experts and the chief programmers. Other project staff members are then rotated through the modeling sessions so that everyone gets a chance to participate and to see the process in action. |- | | Conduct Domain Walk-through | | A domain expert gives a DOMAIN OVERVIEW of the domain area to be modeled. This should also include information that is related to this DOMAIN AREA but not necessarily a part of its implementation. |- | | Study Documents | | Optionally the team studies available REFERENCE or REFERENCED REQUIREMENTS documents such as object models, functional requirements (traditional or use-case format), data models, and user guides. |- | | Develop Small Group Models | | Forming groups of no more than three, each SMALL GROUP will compose a SMALL GROUP MODEL in support of the domain area. The Chief Architect may propose a ´[[Straw man proposal|strawman]]´ model to facilitate the progress of the teams. A member from each small group presents that groups proposed model for the domain area. The Chief Architect may also propose further model alternatives. |- | | Develop Team Model | | The MODELING TEAM selects a proposed TEAM MODEL or composes a model by merging ideas from the proposed models. |- | | Refine Overall Object Model | | Every so often, the OVERALL MODEL, consisting of an overall SEQUENCE DIAGRAM and a CLASS DIAGRAM, is REFINED with the new model shapes produced by iterations of the ‘Develop Team Model’ task above. |- | | Write Model Notes | | EXPLANATORY NOTES on detailed or complex model shapes and on significant model alternatives are made for future reference by the 