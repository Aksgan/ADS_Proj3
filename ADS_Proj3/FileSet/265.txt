with the upgrade. This may range from simply blocking the initiation of an upgrade campaign when the application performs some critical task to coordinating application level upgrade action, such as upgrading the database schema or deploying new protocols. For software vendors delivering applications to be deployed in a SA Forum cluster, the Software Management Framework also defines an XML schema for the '''entity types file''', which describes the software entity types implemented by the application. This information is used to come up with appropriate deployment configurations. ==AIS Utility Services== ===Checkpoint Service (CKPT)=== The Checkpoint Service provides a facility for processes to record [[Application checkpointing|checkpoint]] data incrementally, which can be used to protect an application against failures. When a process recovers from a failure (with a restart or a [[failover]] procedure), the Checkpoint Service can be used to retrieve the previously checkpointed data and resume execution from the recorded state, thus minimizing the impact of the failure. Checkpoints are cluster-wide entities. A copy of the data stored in a checkpoint is called a checkpoint replica, which is typically stored in main memory rather than on disk for performance reasons. A checkpoint may have several checkpoint replicas stored on different nodes in the cluster to protect it against node failures. The process creating the checkpoint may chose from synchronous and asynchronous replica-update policies. In case of asynchronous replica, collocation can also be selected to optimize update performance. ===Event Service (EVT)=== The Event Service is a publish/subscribe multipoint-to-multipoint communication mechanism that is based on the concept of event channels: one or more publishers communicate asynchronously with one or more anonymous subscribers by using events over an event channel. Event channels are cluster-wide named entities that provide best effort delivery of events. Publishers can also be subscribers on the same event channel. Events consist of a standard header and zero or more bytes of published event data. The Event Service API does not impose a specific layout for the published event data. When a process subscribes on an event channel to receive published events, it specifies the filters to apply on the published events. Events are only delivered to the process if they satisfy the provided filters. ===Lock service (LCK)=== The Lock Service is a [[Distributed lock manager|distributed lock service]], which is intended for use in a cluster where processes in different nodes might compete with each other for access to a shared resource. For them, the Lock Service provides entities called lock resources, which in turn, application processes use to coordinate access to those shared resources. The Lock Service provides a simple lock model supporting one locking mode for exclusive access and another one for shared access. The locks provided by the Lock Service are non-recursive. Thus, claiming one lock does not implicitly claim another lock; rather, each lock must be claimed individually. ===Message Service (MSG)=== The Message Service specifies APIs for a cluster-wide [[Interprocess communication|inter-process communication]]system. The communication is based on message queues identified by a logical name. Any number of processes can send messages to a message queue, but one process at a time at most can open it for receiving. The single message queue thus supports [[Point-to-point (telecommunications)|point-to-point]] or multi-point-to-point communication patterns. Processes sending messages to a message queue are unaware of the identity of the receiving process; therefore, the process that was originally receiving these messages may have been replaced by another process during a [[failover]] or switch-over. Message queues can be grouped together to form message queue groups. Message queue groups permit multipoint-to-multipoint communication. They are identified by logical names so that a sender process is unaware of the number of message queues and of the location of the message queues within the cluster with which it is communicating. The message queue groups can be used to distribute messages among message queues pertaining to the message queue group. MSG defines three [[unicast]] distribution policies – equal load distribution, local equal load distribution and local best queue – and the broadcast ([[multicast]]) policy. On request, the Message Service provides different delivery guarantees (e.g. acknowledgement, message persistency, etc.) on message queues and on unicast message queue groups. ===Naming Service (NAM)=== The Naming Service provides a mechanism by which human-friendly names are associated with (‘bound to’) objects, so that these objects can be looked up given their names. The objects typically represent service access points, communication end-points and other resources that provide some sort of service. The Naming Service imposes neither a specific layout nor a convention on either the names ([[UTF-8]] encoding assumed) or the objects to which they are bound. It allows the users of the service to select and use their own naming schema without assuming any specific hardware or logical software configuration. The clients of the Naming Service are expected to understand the structure, layout, and semantics of the object-bindings they intend to store inside and retrieve from the service. ===Timer Service (TMR)=== The Timer Service provides a mechanism by which client processes can set timers and be notified when a timer expires. A timer is a logical object that is dynamically created and represents its expiry time as either an absolute time or duration from the current point in time. The Timer Service provides two types of timers: single event timers and periodic timers. Single event timers will expire once and are deleted after notification. Periodic timers will expire each time a specified duration is reached, and the process is notified about the expirations. Periodic timers have to be explicitly deleted by invoking a timer deletion function. ===AIS Programming Model=== All the AIS services share the same programming model. The same naming conventions, standard predefined types and constants, API semantics, library life cycle control, etc. are used throughout the specification. The SA Forum Application Interface occurs between a [[Process (computing)|process]] and a library that implements the interface. The interface is designed for use by both threaded and non-threaded application processes. The term process can be regarded as being equivalent to a process defined by the POSIX 