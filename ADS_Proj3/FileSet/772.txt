space from the first. ** It is also used in Holub's book, in rule 31. */ </source> ===End-of-line=== In this form, all the text from the ASCII characters // to the end of the line is ignored. <source lang="c"> /// begin: Variation Three. /// ------------------------- /// This is the comment body. /// ------------------------- </source> Different styles can be chosen for different areas of code, from individual lines to paragraphs, routines, files, and programs. If the syntax supports both line comments and block comments, one method is to use line comments only for minor comments (declarations, blocks and edits) and to use block comments to describe higher-level abstractions (functions, classes, files and modules). Sometimes projects try to enforce rules like "one comment every ten lines". These kinds of rules can be counterproductive when too rigorous, but may provide a useful standard of measurement and consistency if the project participants deem it necessary. ===Tags=== Certain [[tag (metadata)|tags]] are used in comments to assist in indexing common issues. Such tags are commonly [[syntax-highlighted]] and can be searched with common programming tools, such as the [[Unix]] [[grep]] utility. Examples of tag conventions include: * '''FIXME''' to mark potential problematic code that requires special attention and/or review. * '''NOTE''' to document inner workings of code and indicate potential pitfalls. * '''TODO''' to indicate planned enhancements. * '''XXX''' to warn other programmers of problematic or misguiding code. There is a risk that tags accumulate over time; it is advisable to include the date and the tag owner in the tag comment to ease tracking.<ref name="todoOrNotTodo">{{cite web | title = TODO or not TODO | url = http://www.approxion.com/?p=39 | accessdate = 2009-02-08 }}</ref> ==Examples== ===Comparison=== {{main|Comparison of programming languages (syntax)#Comments}} Typographic conventions to specify comments vary widely. Further, individual programming languages sometimes provide unique variants. For a detailed review, please consult the [[comparison of programming languages (syntax)#Comments|programming language comparison]] article. ===In context=== ====BASIC classic==== This [[BASIC]] code fragment is a completely functioning program in which the comments describe what the program does for the benefit of novice programmers. <source lang="qbasic"> 10 REM This BASIC program shows the use of the PRINT and GOTO statements. 15 REM It fills the screen with the word "WIKIPEDIA" 20 PRINT "WIKIPEDIA" 30 GOTO 20 </source> When run, this program repeatedly prints the word "WIKIPEDIA" (without quotes) in an [[infinite loop]]. ====C==== This [[C (programming language)|C]] code fragment demonstrates the use of a prologue comment or "block comment" to describe the purpose of a [[conditional statement]]. The comment explains key terms and concepts, and includes a short signature by the programmer who authored the code. <source lang="c"> /* * Check if we are over our maximum process limit, but be sure to * exclude root. This is needed to make it possible for login and * friends to set the per-user process limit to something lower * than the amount of processes root is running. -- Rik */ if (atomic_read(&p->user->processes) >= p->rlim[RLIMIT_NPROC].rlim_cur && !capable(CAP_SYS_ADMIN) && !capable(CAP_SYS_RESOURCE)) goto bad_fork_free; </source> This excerpt is from the <code>fork.c</code> file from the [[Linux kernel]] source. ====ColdFusion==== [[ColdFusion]] uses comments similar to HTML/XML, but instead of two dashes, it uses three. These comments are caught by the ColdFusion engine and not printed to the browser. <source lang="html4strict"> <!--- This prints "Hello World" to the browser. ---> <cfoutput> Hello World<br /> </cfoutput> </source> ====Fortran IV==== This [[Fortran IV]] code fragment demonstrates how comments are used in that language, with the comments themselves describing the basic formatting rules. <source lang="Fortran"> C C Lines that begin with 'C' (in the first or 'comment' column) are comments C WRITE (6,10) 10 FORMAT(12H HELLO WORLD) END </source> ====Fortran 90==== This [[Fortran]] code fragment demonstrates how comments are used in that language, with the comments themselves describing the basic formatting rules. <source lang="Fortran"> !* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * !* All characters after an exclamation mark are considered as comments * !* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * PRINT "WIKIPEDIA" ! Fortran 90 introduced the option for inline comments. END </source> ====Java==== This [[Java (programming language)|Java]] code fragment shows a block comment used to describe the <code>setToolTipText</code> method. The formatting is consistent with [[Sun Microsystems]] [[Javadoc]] standards. The comment is designed to be read by the Javadoc processor. <source lang="Java"> /** * Registers the text to display in a tool tip. The text * displays when the cursor lingers over the component. * * @param text the string to display. If the text is null, * the tool tip is turned off for this component. */ public void setToolTipText(String text) { </source> ====Objective Caml==== OCaml uses nestable comments, which is useful when commenting a code block. <source lang="ocaml"> codeLine(* comment level 1(*comment level 2*)*) </source> ====Perl==== Line comments in [[Perl]], and many other scripting languages, begin with a hash (#) symbol. A comment at the beginning, called the [[shebang (Unix)|shebang]], tells the system what interpreter to use. <source lang="Perl"> #!/usr/bin/perl my $s = "Wikipedia"; # Sets the variable s to "Wikipedia". print $s . "\n"; # Add a newline character after printing for shells that do not do so automatically. </source> ====PHP==== Comments in [[PHP]] can be either in C++ style (both inline and block), or in Perl style. [[PHPDoc]] is a style adapted from Javadoc and is a common standard for documenting PHP code. ====Python==== Comments in [[Python (programming language)|Python]] use the hash character. Python programs start with [[shebang|#!]] to tell the operating system which interpreter to use. <source lang=python> #!/usr/bin/env python # this program prints "Hello World" to the screen and then quits. print "Hello World!" </source> Python also supports [[docstring]]s a special sort of comment usually enclosed in triple-quotes (<nowiki>'''</nowiki>). <source 