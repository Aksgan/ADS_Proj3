and automated [[image processing]] to improve the accuracy and cost-effectiveness of data collection and reduction. Recorders can incorporate in-flight voice records from the cockpit intercom system. The addition of audio narration is an extremely valuable tool for documentation and communication. Global positioning system ([[GPS]]) data is incorporated with a text-captioning device on each video frame. Helicopter platforms enable ‘low and slow’ flights, acquiring a continuous visual record without motion blur. Innovations in [[remote sensing]] cameras have allowed the identification of objects that could not have been previously identified. Pipeline and power corridors and their infrastructure can be documented with [[digital media]] recording. Video Mapping System is an example of how this technology is used today. Since the 1980s, aerial videography has seen increased use in applications where its advantages over traditional photography (lower cost and immediate availability of data) outweigh its disadvantages (poorer [[spatial resolution]] and difficulty of analysis due to lack of [[stereo imaging]]) (Mausel et al. 1992; Meisner 1986). King (1995) provides a comprehensive review of the evolution of video sensors and their applications, many of which focused on 1.The measurement of transient phenomena such as wildlife populations (Sidle and Ziewits 1990; Strong and Cowardin 1995) and pest infestations (Everitt et al. 1994);<br /> 2. Mapping of dynamic land features such as wetland plant communities (Jennings et al. 1992) and coastal <br /> landforms(Eleveld et al. 2000);<br /> 3.Land cover mapping in remote areas with limited existing aerial photography and poor infrastructure <br />(Marshet al. 1994; Slaymaker and Hannah 1997). == References == {{reflist}} {{refbegin}} 1. Mirchandani, Pitu , Mark Hickman,, and Alejandro Angel. APPLICATION OF AERIAL VIDEO FOR TRAFFIC FLOW MONITORING AND MANAGEMENT. Tucson, AZ <br /> 2. "Geotagging". Wikipedia. 12/10/2009 <http://en.wikipedia.org/wiki/Geotagging>.<br /> 3. "The rise of aerial video mapping and spatial multimedia". The Australian Pipeliner January 2008. <br /> 4. "Specializing in Multimedia Asset and Risk Mapping". Red Hen Systems. 12/01/2008 <http://www.redhensystems.com/>.<br /> 5. "Review of Aerial Video Survey Technique". British Columbia Resources Inventory Committee. 12/01/2008 < http://www.ilmb.gov.bc.ca/risc/pubs/coastal/aerial/aerial-03.htm#3>. {{refend}} {{DEFAULTSORT:Aerial Video}} [[Category:Cartography]] [[Category:Geographic information systems]] [[Category:Remote sensing]]</text> </page> <page> <id>1173</id> <title>Affinity mask</title> <text>{{Context|date=October 2009}} An '''affinity mask''' is a [[mask (computing)|bit mask]] indicating what [[Central processing unit|processor(s)]] a [[thread (computer science)|thread]] or [[process (computing)|process]] should be run on by the [[Scheduling (computing)|scheduler]] of an [[operating system]]. Setting the affinity mask for certain processes running under Windows can be useful as there are several system processes (especially on domain controllers) that are restricted to the first CPU / Core. So, excluding the first CPU might lead to better application performance. == Windows API == Thread affinity in [[Microsoft Windows]] can be specified with the ''SetThreadAffinityMask'' function. Forcing of each [[OpenMP]] thread to distinctive cores in Windows can be accomplished by means of the following [[C (programming language)|C]] code: <source lang="c"> #include <windows.h> #include <omp.h> // Set OpenMP thread affinity void set_thread_affinity () { #pragma omp parallel default(shared) { DWORD_PTR mask = (1 << omp_get_thread_num()); SetThreadAffinityMask( GetCurrentThread(), mask ); } } </source> == See also == * [[Processor affinity]] == External links == *[http://msdn.microsoft.com/en-us/library/ms686247(VS.85).aspx MSDN article on SetThreadAffinityMask function] *[http://www.linuxcommand.org/man_pages/taskset1.html Taskset, a tool to set the affinity mask on Linux] *[http://cpubalancer.brels.net/ CPU Balancer, a free, open-source utility that distributes Windows XP processes uniformly over logical processors using the affinity mask] [[Category:Scheduling (computing)]] {{Comp-sci-stub}}</text> </page> <page> <id>1174</id> <title>Affix grammar</title> <text>{{Noref|date=February 2009}} An '''affix grammar''' is a kind of [[formal grammar]]; it is used to describe the [[syntax]] of languages, mainly [[computer language]]s, using an approach based on how natural language is typically described. The grammatical rules of an affix grammar are those of a [[context-free grammar]], except that certain parts in the nonterminals (the [[affix]]es) are used as arguments. If the same affix occurs multiple times in a rule, its value must [[agreement (linguistics)|agree]], i.e. it must be the same everywhere. In some types of affix grammar, more complex relationships between affix values are possible. == Example == We can describe an extremely simple fragment of English in the following manner: <code> ''Sentence'' &rarr; ''Subject'' ''Predicate'' ''Subject'' &rarr; ''Noun'' ''Predicate'' &rarr; ''Verb'' ''Object'' ''Object'' &rarr; ''Noun'' ''Noun'' &rarr; John ''Noun'' &rarr; Mary ''Noun'' &rarr; children ''Noun'' &rarr; parents ''Verb'' &rarr; like ''Verb'' &rarr; likes ''Verb'' &rarr; help ''Verb'' &rarr; helps </code> This [[context-free grammar]] describes simple sentences such as <code> John likes children Mary helps John children help parents parents like John </code> With more nouns and verbs, and more rules to introduce other parts of speech, a large range of English sentences can be described; so this is a promising approach for describing the syntax of English. However, the given grammar also describes sentences such as <code> John like children children helps parents </code> These sentences are wrong: in English, subject and verb have a [[grammatical number]], which must agree. An affix grammar can express this directly: <code> ''Sentence &rarr; Subject+number Predicate+number'' ''Subject+number &rarr; Noun+number'' ''Predicate+number &rarr; Verb+number Object'' ''Object &rarr; Noun+number'' ''Noun+''singular &rarr; John ''Noun+''singular &rarr; Mary ''Noun+''plural &rarr; children ''Noun+''plural &rarr; parents ''Verb+''singular &rarr; like ''Verb+''plural &rarr; likes ''Verb+''singular &rarr; help ''Verb+''plural &rarr; helps </code> This grammar only describes correct English sentences, although it could be argued that <code> John likes John </code> is still incorrect and should instead read <code> John likes himself </code> This, too, can be incorporated using affixes, if the means of describing the relationships between different affix values are powerful enough. As remarked above, these means depend on the type of affix grammar chosen. == Types of affix grammars == In the simplest type of affix grammar, affixes can only take values from a finite domain, and affix values can only be related through agreement, as in the example. Applied in this way, affixes increase compactness of grammars, but do not add expressive power. Another approach is to allow affixes to take arbitrary strings as values and allow concatenations of affixes to be used in rules. The ranges of allowable values for affixes can be described with context-free grammar rules. This produces the formalism of ''two-level grammars'', also known as ''[[Van 