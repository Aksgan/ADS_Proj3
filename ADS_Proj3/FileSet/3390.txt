the NIST model which assumes the centralised assignment of roles to users. PERMIS provides a cryptographically secure privilege management infrastructure ([[PMI]]) using [[public key encryption]] technologies and [[X.509]] [[Attribute certificate]]s to maintain users' attributes. PERMIS does not provide any authentication mechanism, but leaves it up to the application to determine what to use. PERMIS's strength comes from its ability to be integrated into virtually any application and any authentication scheme like [[Shibboleth (Internet2)]], [[Kerberos]], username/passwords, [[Grid]]{{dn}} proxy certificates and Public Key Infrastructure ([[Public key infrastructure|PKI]]). As a standard RBAC system, PERMIS's main entities are an authorisation policy, a set of users, a set of administrators (attribute authorities) who assign roles/attributes to users, a set of resources that are to be protected, a set of actions on resources, a set of access control rules, and optional obligations and constraints. The PERMIS policy is eXtensible Markup Language ([[XML]])-based and has rules for user-role assignments and role-privilege assignments, the latter containing optional obligations that are returned to the application when a user is granted access to a resource. A PERMIS policy can be stored as either a simple text XML file, or as an attribute within a signed X.509 attribute certificate to provide integrity protection and tampering detection. User roles and attributes may be held in secure signed X.509 attributes certificates, and stored in Lightweight Directory Access Protocol ([[LDAP]]) directories or Web-based Distributed Authoring and Versioning ([[WebDAV]]) repositories, or they may be created on demand as Security Assertion Markup Language ([[SAML]]) attribute assertions. The PERMIS authorisation engine comprises two components: a Credential Validation Service that validates users' roles according to the user-role assignment rules, and the Policy Decision Point (PDP) that evaluates users' access requests according to the role-permission assignment rules (or access control rules). Access to a resource depends upon the roles/attributes assigned to the user, and the role-permission assignments, which can contain constraints based on the user's access request (e.g. "print less than 10 pages") and the environment (e.g. time of day). PERMIS can work in either push mode (the user attribute assignments are sent to PERMIS by the application) or in pull mode (PERMIS fetches the attribute assignments itself from LDAP/WebDAV repositories or SAML attribute authorities). PERMIS is an [[open source]] project and the Java source code can be downloaded from http://www.openpermis.org. Alternatively, precompiled Java libraries can be downloaded from http://sec.cs.kent.ac.uk/permis/. PERMIS is unique with its support for cryptographically protecting the user attributes/roles and the policy, which guarantees their integrity and protects them from being tampered with. [http://sec.cs.kent.ac.uk/permis/DevPlans.shtml New features] are continually being added to it, like a standard eXtensible Access Control Markup Language ([[XACML]]) interface which allows PERMIS and XACML PDPs to be seamlessly interchanged, the ability to accept [[SAML]] attribute assertions, support for dynamic delegation of authority and separation of duty policies, and the recent addition of a controlled natural language interface (in English) for writing simple PERMIS policies. ==See also== * [[authorisation]] * [[Identity management]] * [[Java Authentication and Authorization Service]] (JAAS) * [[Lightweight Directory Access Protocol]] (LDAP) * [[RBAC]] (Role-Based Access Control) * [[X.509]] * [[Shibboleth]] * [[SAML]] (Security Assertion Markup Language) * [[Kerberos]] * [[XACML]] (eXtensible Access Control Markup Language) * [[Public key infrastructure|PKI]] (Public Key Infrastructure) == External links == *[http://www.openpermis.org/ PERMIS Home Page] *[http://www.permis.org/ PERMIS Home Page] (alternate) *[http://shibboleth.internet2.edu/ Shibboleth Project] *[http://sec.cs.kent.ac.uk/permis/ Modular PERMIS project] *[http://csrc.nist.gov/rbac/ NIST RBAC] *[http://sec.cs.kent.ac.uk/permis/DevPlans.shtml PERMIS future development plans] [[Category:Computer security software]]</text> </page> <page> <id>28071</id> <title>PE router</title> <text>{{Unreferenced|date=July 2009}} '''Provider Edge router''' ('''PE router''') is a [[router]] between one [[computer network|network]] service provider's area and areas administered by other network providers. A network provider is usually an [[Internet Service Provider]] as well (or only that). The term ''PE router'' covers equipment capable of a broad range of [[routing]] [[Communications protocol|protocol]]s, notably: *[[Border Gateway Protocol]] (BGP) *[[Open Shortest Path First]] (OSPF) *[[Multi-protocol label switching|Multi-Protocol Label Switching]] (MPLS) PE routers need not be aware of what kind of traffic is coming from the provider's network. However, some PE routers also do labeling. ==See also== * [[CE router]] {{DEFAULTSORT:Pe Router}} [[Category:Routers]] [[Category:MPLS networking]]</text> </page> <page> <id>28086</id> <title>PICT</title> <text>{{Dablink|For the ancient tribe that inhabited what is now Scotland, see the [[Pict]]s.}} {{Dablink|For the Parliamentary IT department see [[Parliamentary Information and Communication Technology Service]].}} {{Dablink|For the engineering college in Pune, India, see [[Pune Institute of Computer Technology]].}} {{Infobox file format | name = PICT | icon = <!-- Deleted image removed: [[Image:PICT.png|PICT icon from Preview.]] --> | extension = .pict, .pct, .pic | mime = image/x-pict | type code = PICT | uniform type = com.apple.pict | owner = [[Apple Computer]] | genre = [[computer graphics|graphics]] | container for = | contained by = | extended from = | extended to = | standard = }} '''PICT''' is a [[computer graphics|graphics]] [[file format]] introduced on the original [[Apple Macintosh]] computer as its standard [[metafile]] format. It allows the interchange of graphics (both [[bitmap]]ped and [[vector graphics|vector]]), and some limited text support, between Mac applications, and was the native graphics format of [[QuickDraw]]. The original version, PICT 1, was designed to be as compact as possible while describing vector graphics. To this end, it featured single byte [[opcode]]s, many of which embodied operations such as "do the previous operation again". As such it was quite memory efficient, but not very expandable. With the introduction of the [[Macintosh II]] and Color [[QuickDraw]], PICT was revised to version 2. This version featured 16-bit opcodes and numerous changes which enhanced its utility. PICT 1 opcodes were supported as a subset for backward compatibility. Within a Mac application, any sequence of drawing operations could be simply recorded/encoded to the PICT format by opening a "Picture", then closing it after issuing the required commands. By saving the resulting byte stream as a [[Resource fork|resource]], a ''PICT resource'' resulted, which could be loaded and played back at any time. The same stream could be saved to a data file on disk (with 512 bytes of unused header space added) as a PICT file. With the change to [[Mac OS X]] and 