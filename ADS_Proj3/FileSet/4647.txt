experience signals other than <code>SIGINT</code> or Control-C and would die right away if one was raised. For the few other programs&mdash;things like shells or text editors that respond to job control key presses&mdash;small wrappers could be added to system calls so as to retry the call right away if this <code>EINTR</code> error was raised. Thus, the problem was solved in a simple manner. ==Eric Raymond== [[Eric S. Raymond]], in his book ''[[The Art of Unix Programming]]''<ref>{{cite book |title=The Art of Unix Programming |first=Eric |last=Raymond |authorlink=Eric S. Raymond |date=2003-09-19 |isbn=0-13-142901-9 |publisher=Addison-Wesley |url=http://www.catb.org/~esr/writings/taoup/html/ |accessdate=2009-02-09 }}</ref>, summarizes the Unix philosophy as the widely-used [[KISS Principle]] of "Keep it Simple, Stupid" <ref>{{cite book |title=The Art of Unix Programming |first=Eric |last=Raymond |authorlink=Eric S. Raymond |date=2003-09-19 |isbn=0-13-142901-9 |publisher=Addison-Wesley |url=http://www.catb.org/~esr/writings/taoup/html/ |chapter=The Unix Philosophy in One Lesson |chapterurl=http://www.catb.org/~esr/writings/taoup/html/ch01s07.html |accessdate=2009-02-09 }}</ref>. He also provides a series of design rules: *Rule of [[Modularity (programming)|Modularity]]: Write simple parts connected by clean interfaces. *Rule of Clarity: Clarity is better than cleverness. *Rule of Composition: Design programs to be connected to other programs. *Rule of Separation: Separate policy from mechanism; separate interfaces from engines. *Rule of Simplicity: Design for simplicity; add complexity only where you must. *Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do. *Rule of Transparency: Design for visibility to make inspection and debugging easier. *Rule of Robustness: Robustness is the child of transparency and simplicity. *Rule of Representation: Fold knowledge into data so program logic can be stupid and robust.<ref>{{cite book |title=The Art of Unix Programming |first=Eric |last=Raymond |authorlink=Eric S. Raymond |date=19 September 2003 |isbn=0-13-142901-9 |publisher=Addison-Wesley |url=http://www.catb.org/~esr/writings/taoup/html/ |chapter=Basics of the Unix Philosophy |chapterurl=http://www.catb.org/~esr/writings/taoup/html/ch01s06.html#id2878263 |accessdate=2009-02-09 }}</ref> *Rule of Least Surprise: In interface design, always do the least surprising thing. *Rule of Silence: When a program has nothing surprising to say, it should say nothing. *Rule of Repair: When you must fail, fail noisily and as soon as possible. *Rule of Economy: Programmer time is expensive; conserve it in preference to machine time. *Rule of [[Code generation|Generation]]: Avoid hand-hacking; write programs to write programs when you can. *Rule of [[Optimization (computer science)|Optimization]]: [[Prototype]] before polishing. Get it working before you optimize it. *Rule of Diversity: Distrust all claims for "one true way". *Rule of Extensibility: Design for the future, because it will be here sooner than you think. ==Controversy== It is controversial as to whether the [[Free Software Foundation]]'s [[GNU]] work-alikes of standard Unix programs (such as diff, find, etc.) follow the "Unix Philosophy" or misunderstand it. Certainly at least some Unix old timers claim the latter, since GNU tools are often substantially larger and contain more features than their Unix equivalents. Already in 1983 [[Brian Kernighan]] and [[Rob Pike]] wrote a paper titled [http://harmful.cat-v.org/cat-v/ ''Program Design in the UNIX Environment''] and gave a presentation on ''UNIX Style, or cat -v Considered Harmful'' criticizing BSD's expansion of the functionality of basic Unix tools like [[cat (Unix)|cat]]. This trend only became much more significant with the advent of GNU and commercial Unix variants, and it is common for a single program to provide numerous features based on how it is called (for example, a program that either compresses or decompresses a file based on what name it is called by; an extreme example being the embedded Linux application [[BusyBox]], which consolidates the most common command line functions into a single binary). ==Quotes== *"''Unix is simple. It just takes a genius to understand its simplicity.''" – [[Dennis Ritchie]] *"''UNIX was not designed to stop its users from doing stupid things, as that would also stop them from doing clever things.''" – [[Doug Gwyn]] *"''Unix never says 'please'''." – [[Rob Pike]] *"''Unix is user-friendly. It just isn't promiscuous about which users it's friendly with.''" – [[Steven King (documentary producer)|Steven King]] *"''Those who don't understand UNIX are condemned to reinvent it, poorly.''" – [[Henry Spencer]] ==See also== *[[Unix architecture]] *[[Plan 9 from Bell Labs]] *[[Pipes and filters]] <!--*[[The Elements of Style]] – One of the sources of inspiration for the Unix philosophy. {{citation needed}}--> *[[The UNIX-HATERS Handbook]] *[[Software engineering]] *[[Hacker (programmer subculture)]] *[[List of software development philosophies]] ==References== *''[http://cm.bell-labs.com/cm/cs/upe/ The Unix Programming Environment]'' by [[Brian Kernighan]] and [[Rob Pike]], 1984 * ''[http://harmful.cat-v.org/cat-v/ Program Design in the UNIX Environment]'' - The paper by Pike and Kernighan that preceded the book. *[http://doc.cat-v.org/bell_labs/pikestyle ''Notes on Programming in C''], Rob Pike, September 21, 1989 *''A Quarter Century of Unix'', Peter H. Salus, Addison-Wesley, May 31, 1994 (ISBN 0-201-54777-5) *[http://www.faqs.org/docs/artu/philosophychapter.html ''Philosophy''] &mdash; from [http://www.catb.org/~esr/writings/taoup ''The Art of Unix Programming''], Eric S. Raymond, Addison-Wesley, September 17, 2003 (ISBN 0-13-142901-9) *[http://citeseer.ist.psu.edu/schroeder77final.html Final Report of the Multics Kernel Design Project] by M. D. Schroeder, D. D. Clark, J. H. Saltzer, and D. H. Wells, 1977. * ''The UNIX Philosophy'', Mike Gancarz, ISBN 1555581234 ==Notes== {{reflist}} ==External links== *[http://www.linfo.org/unix_philosophy.html The Unix Philosophy: A Brief Introduction] - by The Linux Information Project (LINFO) *[http://www.joelonsoftware.com/articles/Biculturalism.html Joel on Software - Biculturalism] *[http://www.linux.org.uk/~dan/rumor/rumor.shrink The truth about Unix: ''"The user interface is horrid"''] (1981) *[http://hebb.cis.uoguelph.ca/~dave/27320/new/unixphil.html The Unix Philosophy] *[http://marmaro.de/docs/studium/unix-phil/unix-phil.pdf Why the Unix Philosophy still matters] {{DEFAULTSORT:Unix Philosophy}} [[Category:Software development philosophies]] [[Category:Unix]] [[de:Unix-Philosophie]] [[fr:Philosophie d'Unix]] [[ja:UNIX哲学]] [[pt:Filosofia Unix]] [[ru:Философия UNIX]] [[zh:Unix哲学]]</text> </page> <page> <id>38966</id> <title>Unix security</title> <text>{{tone|date=January 2008}} '''Unix security''' refers to the means of [[Computer security|securing]] a [[Unix]] or [[Unix-like]] [[operating system]]. A secure environment is achieved not only by the design concepts of these operating systems, but also through vigilant [[User (computing)|user]] and [[System administrator|administrative]] practices. {{Wikibooks|UNIX Computing Security}} ==Design concepts== === Permissions === A core security feature in these systems is the [[File system permissions|permissions]] system. All files in a typical Unix-style filesystem have permissions set enabling different access to a file. Permissions on a file are commonly set using the [[chmod]] command and seen through the [[ls]] command. For example: -r-xr-xr-x 1 root wheel 745720 Sep 8 2002 /bin/sh Unix permissions permit different users access to a file. Different ''user groups'' have different permissions on a file. More advanced Unix filesystems include the ''Access Control List'' concept which allows permissions to be granted to multiple users or 