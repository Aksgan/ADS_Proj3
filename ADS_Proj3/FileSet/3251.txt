{{Yes}} | {{Yes}} | {{Yes}} | {{Yes}} |- | Connectionless network | {{No}} | {{No}} | {{No}} | {{No}} | {{Yes}} |- | Concatenation and separation | {{No}} | {{Yes}} | {{Yes}} | {{Yes}} | {{Yes}} |- | Segmentation and reassembly | {{Yes}} | {{Yes}} | {{Yes}} | {{Yes}} | {{Yes}} |- | Error Recovery | {{No}} | {{Yes}} | {{Yes}} | {{Yes}} | {{Yes}} |- | Reinitiate connection (if an excessive number of [[Protocol data unit|PDUs]] are unacknowledged) | {{No}} | {{Yes}} | {{No}} | {{Yes}} | {{No}} |- | Multiplexing and demultiplexing over a single [[virtual circuit]] | {{No}} | {{No}} | {{Yes}} | {{Yes}} | {{Yes}} |- | Explicit flow control | {{No}} | {{No}} | {{Yes}} | {{Yes}} | {{Yes}} |- | Retransmission on timeout | {{No}} | {{No}} | {{No}} | {{No}} | {{Yes}} |- | Reliable Transport Service | {{No}} | {{Yes}} | {{No}} | {{Yes}} | {{Yes}} |} Perhaps an easy way to visualize the Transport Layer is to compare it with a Post Office, which deals with the dispatch and classification of mail and parcels sent. Do remember, however, that a post office manages the outer envelope of mail. Higher layers may have the equivalent of double envelopes, such as cryptographic presentation services that can be read by the addressee only. Roughly speaking, [[tunneling protocol]]s operate at the Transport Layer, such as carrying non-IP protocols such as [[IBM]]'s [[IBM Systems Network Architecture|SNA]] or [[Novell]]'s [[Internetwork Packet Exchange|IPX]] over an IP network, or end-to-end encryption with [[IPsec]]. While [[Generic Routing Encapsulation]] (GRE) might seem to be a Network Layer protocol, if the encapsulation of the payload takes place only at endpoint, GRE becomes closer to a transport protocol that uses IP headers but contains complete frames or packets to deliver to an endpoint. [[Layer 2 Tunneling Protocol|L2TP]] carries [[Point-to-Point Protocol|PPP]] frames inside transport packet. ===Layer 5: Session Layer=== The [[Session Layer]] controls the dialogues (connections) between computers. It establishes, manages and terminates the connections between the local and remote application. It provides for [[Duplex (telecommunications)|full-duplex]], [[half-duplex]], or [[Simplex communication|simplex]] operation, and establishes checkpointing, adjournment, termination, and restart procedures. The OSI model made this layer responsible for graceful close of sessions, which is a property of the [[Transmission Control Protocol]], and also for session checkpointing and recovery, which is not usually used in the Internet Protocol Suite. The Session Layer is commonly implemented explicitly in application environments that use [[remote procedure call]]s. ===Layer 6: Presentation Layer=== The [[Presentation Layer]] establishes context between Application Layer entities, in which the higher-layer entities may use different syntax and semantics if the presentation service provides a mapping between them. If a mapping is available, presentation service data units are encapsulated into session protocol data units, and passed down the stack. This layer provides independence from data representation (e.g., encryption) by translating between application and network formats. The presentation layer transforms data into the form that the application accepts. This layer formats and encrypts data to be sent across a network. It is sometimes called the syntax layer.{{Citation needed|date=August 2010}} The original presentation structure used the basic encoding rules of [[Abstract Syntax Notation One]] (ASN.1), with capabilities such as converting an [[EBCDIC]]-coded text [[computer file|file]] to an [[ASCII]]-coded file, or [[serialization]] of [[object (computer science)|object]]s and other [[data structure]]s from and to [[XML]]. ===Layer 7: Application Layer=== The [[Application Layer]] is the OSI layer closest to the end user, which means that both the OSI application layer and the user interact directly with the software application. This layer interacts with software applications that implement a communicating component. Such application programs fall outside the scope of the OSI model. Application layer functions typically include identifying communication partners, determining resource availability, and synchronizing communication. When identifying communication partners, the application layer determines the identity and availability of communication partners for an application with data to transmit. When determining resource availability, the application layer must decide whether sufficient network or the requested communication exist. In synchronizing communication, all communication between applications requires cooperation that is managed by the application layer. Some examples of application layer implementations include: * On OSI stack: ** [[FTAM]] File Transfer and Access Management Protocol ** [[X.400]] Mail ** [[Common management information protocol]] (CMIP) * On TCP/IP stack: ** [[Hypertext Transfer Protocol]] (HTTP), ** [[File Transfer Protocol]] (FTP), ** [[Simple Mail Transfer Protocol]] (SMTP) ** [[Simple Network Management Protocol]] (SNMP) == Cross Layer Functions == There are some functions or services that are not tied to a given layer, but they can affect more than one layer. Examples are * [[security service (telecommunication)]]<ref name=x800> [http://www.itu.int/rec/T-REC-X.800-199103-I/e X.800 : Security architecture for Open Systems Interconnection for CCITT applications]</ref> as defined by [[ITU-T]] X.800 Recommendation. * management functions, i.e functions that permit to configure, instantiate, monitor, terminate the communications of two or more entities: there is a specific application layer protocol [[Common management information protocol]] (CMIP) and its corresponding service [[common management information service]] (CMIS), they need to interact with every layer in order to deal with their instances. ==Interfaces== Neither the OSI Reference Model nor OSI protocols specify any programming interfaces, other than as deliberately abstract service specifications. Protocol specifications precisely define the interfaces between different computers, but the software interfaces inside computers are implementation-specific. For example [[Microsoft Windows]]' [[Winsock]], and [[Unix]]'s [[Berkeley sockets]] and [[UNIX System V|System V]] [[Transport Layer Interface]], are interfaces between applications (Layer 5 and above) and the transport (Layer 4). [[Network Driver Interface Specification|NDIS]] and [[Open Data-Link Interface|ODI]] are interfaces between the media (Layer 2) and the network protocol (Layer 3). Interface standards, except for the Physical Layer to media, are approximate implementations of OSI Service Specifications. ==Examples== {{Unreferenced section|June 2010|date=June 2010}} {| class="wikitable" |- !colspan="2"| Layer !rowspan="2"| [[Open Systems Interconnection|OSI]] protocols !rowspan="2"| [[Internet Protocol Suite|TCP/IP protocols]] !rowspan="2"| [[Signaling System 7]]<ref>[http://www.itu.int/rec/T-REC-Q.1400/en/ ITU-T Recommendation Q.1400 (03/1993)], ''Architecture framework for the development of signaling and OA&M protocols using OSI concepts'', pp 4, 7.</ref> !rowspan="2"| [[AppleTalk]] !rowspan="2"| [[IPX]] !rowspan="2"| [[Systems Network Architecture|SNA]] !rowspan="2"| [[UMTS]] !rowspan="2"| Misc. examples |- 