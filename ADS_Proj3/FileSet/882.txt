(computing)|executing]] the program's instructions in a [[central processing unit|central processor]].<ref name="osc-ch3-p58">{{cite book | last = Silberschatz | first = Abraham | title = Operating System Concepts, Fourth Edition | publisher = Addison-Wesley | year = 1994 | pages = 58 | isbn = 0-201-50480-4 }}</ref> The program has an [[execution (computing)|executable]] form that the computer can use directly to execute the instructions. The same program in its human-readable [[source code]] form, from which [[executable]] programs are derived (e.g., [[compiler|compiled]]), enables a [[programmer]] to study and develop its [[algorithm#Formalization|algorithms]]. Computer source code is often written by [[computer programmer]]s. Source code is written in a [[programming language]] that usually follows one of two main [[programming paradigm|paradigms]]: [[imperative programming|imperative]] or [[declarative language|declarative]] programming. Source code may be converted into an [[executable file]] (sometimes called an executable program or a binary) by a [[compiler]] and later executed by a [[central processing unit]]. Alternatively, computer programs may be executed with the aid of an [[interpreter (computing)|interpreter]], or may be [[firmware|embedded]] directly into [[computer hardware|hardware]]. Computer programs may be categorized along functional lines: [[system software]] and [[application software]]. Two or more computer programs may run simultaneously on one computer, a process known as [[computer multitasking|multitasking]]. ==Programming== {{main|Computer programming}} <div class="thumb tright"> <div class="thumbinner" style="width:252px;"> <div style="width:240px;" style="font-size: 12px; font-family: monospace; background-color: #ffffff; text-align: left"> <nowiki>#</nowiki>include <stdio.h><br /> <br /> int main()<br /> {<br /> <div style="margin-left: 10%"> printf("Hello world!\n"); <br /> return 0; <br /> </div> } <br /> </div> <div class="thumbcaption"> Source code of a program written in the [[C (programming language)|C programming language]] </div> </div> </div> [[Computer programming]] is the iterative process of writing or editing [[source code]]. Editing source code involves testing, analyzing, and refining, and sometimes coordinating with other programmers on a jointly developed program. A person who practices this skill is referred to as a computer [[programmer]], software developer or coder. The sometimes lengthy process of computer programming is usually referred to as [[software development]]. The term [[software engineering]] is becoming popular as the process is seen as an [[engineering]] discipline. === Paradigms === Computer programs can be categorized by the [[programming language]] [[programming paradigm|paradigm]] used to produce them. Two of the main paradigms are [[imperative programming|imperative]] and [[declarative language|declarative]]. Programs written using an imperative language specify an [[algorithm]] using declarations, expressions, and statements.<ref name="cpl-ch4-75">{{cite book | last = Wilson | first = Leslie B. | title = Comparative Programming Languages, Second Edition | publisher = Addison-Wesley | year = 1993 | pages = 75 | isbn = 0-201-56885-3 }}</ref> A declaration couples a [[variable (programming)|variable]] name to a [[datatype]]. For example: <code> var x: integer; </code>. An expression yields a value. For example: <code> 2 + 2 </code> yields 4. Finally, a statement might assign an expression to a variable or use the value of a variable to alter the program's [[control flow]]. For example: <code>x := 2 + 2; if x = 4 then do_something();</code> One criticism of imperative languages is the side effect of an assignment statement on a class of variables called non-local variables.<ref name = "cpl-ch9-213"/> Programs written using a declarative language specify the properties that have to be met by the output. They do not specify details expressed in terms of the control flow of the executing machine but of the mathematical relations between the declared objects and their properties. Two broad categories of declarative languages are [[functional language]]s and [[logical language]]s. The principle behind functional languages (like [[Haskell (programming language)|Haskell]]) is to not allow [[side effect (computer science)|side effects]], which makes it easier to reason about programs like mathematical functions.<ref name="cpl-ch9-213">{{cite book | last = Wilson | first = Leslie B. | title = Comparative Programming Languages, Second Edition | publisher = Addison-Wesley | year = 1993 | pages = 213 | isbn = 0-201-56885-3 }}</ref> The principle behind logical languages (like [[Prolog]]) is to define the problem to be solved — the goal — and leave the detailed solution to the Prolog system itself.<ref name="cpl-ch10-244">{{cite book | last = Wilson | first = Leslie B. | title = Comparative Programming Languages, Second Edition | publisher = Addison-Wesley | year = 1993 | pages = 244 | isbn = 0-201-56885-3 }}</ref> The goal is defined by providing a list of subgoals. Then each subgoal is defined by further providing a list of its subgoals, etc. If a path of subgoals fails to find a solution, then that subgoal is [[backtracking|backtracked]] and another path is systematically attempted. The form in which a program is created may be textual or visual. In a [[visual programming language|visual language]] program, elements are graphically manipulated rather than textually specified. ===Compiling or interpreting=== A ''computer program'' in the form of a [[human-readable]], computer programming language is called [[source code]]. Source code may be converted into an [[executable file|executable image]] by a [[compiler]] or executed immediately with the aid of an [[Interpreter (computing)|interpreter]]. Either compiled or interpreted programs might be [[execution (computing)|executed]] in a [[batch processing|batch process]] without human interaction, but interpreted programs allow a user to type [[command (computing)|commands]] in an [[session (computer science)|interactive session]]. In this case the programs are the separate commands, whose execution occurs sequentially, and thus together. When a language is used to give commands to a software application (such as a [[shell (computing)|shell]]) it is called a [[scripting language]]. Compiled computer programs are commonly referred to as executables, binary images, or simply as [[binary file|binaries]] &mdash; a reference to the [[binary numeral system|binary]] [[file format]] used to store the executable code. Compilers are used to translate source code from a programming language into either [[object file|object code]] or [[machine code]]. Object code needs further processing to become machine code, and machine code is the [[central processing unit]]'s native [[microcode|code]], ready for execution. Interpreted computer programs -in a batch or interactive session- are either decoded and then immediately executed or are decoded into some efficient intermediate representation for future execution. [[BASIC]], [[Perl]], and [[Python (programming language)|Python]] are examples of immediately executed computer programs. Alternatively, [[Java (programming 