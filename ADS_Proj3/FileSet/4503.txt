seat reservation data must be locked until the reservation is made, otherwise another user may get the impression a seat is still free while it is actually being booked at the time. Without proper transaction monitoring, double bookings may occur. Other transaction monitor functions include [[deadlock]] detection and resolution (deadlocks may be inevitable in certain cases of cross-dependence on data), and transaction logging (in 'journals') for 'forward recovery' in case of massive failures. Transaction Processing is not limited to application programs. The 'journaled file system' provided with IBMs AIX Unix operating system employs similar techniques to maintain file system integrity, including a journal. ==Types== ===Contrasted with batch processing=== [[Batch processing]] is not transaction processing. Batch processing involves processing several transactions at the same time, and the results of each transaction are not immediately available when the transaction is being entered;{{ref|HSC}} there is a time delay. transactions are accumulated for a certain period (say for day) where updates are made especially after work. ===Real-time and batch processing=== There are a number of differences between '''real-time''' and '''batch processing'''. These are outlined below: Each transaction in real-time processing is unique. It is not part of a group of transactions, even though those transactions are processed in the same manner. Transactions in real-time processing are stand-alone both in the entry to the system and also in the handling of output. Real-time processing requires the master file to be available more often for updating and reference than batch processing. The database is not accessible all of the time for batch processing. Real-time processing has fewer errors than batch processing, as transaction data is validated and entered immediately. With batch processing, the data is organised and stored before the master file is updated. Errors can occur during these steps. Infrequent errors may occur in real-time processing; however, they are often tolerated. It is not practical to shut down the system for infrequent errors. More computer operators are required in real-time processing, as the operations are not centralised. It is more difficult to maintain a real-time processing system than a batch processing system. ==Features== ===Rapid response=== Fast [[performance testing|performance]] with a rapid response time is critical. Businesses cannot afford to have customers waiting for a TPS to respond, the turnaround time from the input of the transaction to the production for the output must be a few seconds or less. ===Reliability=== Many organizations rely heavily on their TPS; a breakdown will disrupt operations or even stop the business. For a TPS to be effective its failure rate must be very low. If a TPS does fail, then quick and accurate recovery must be possible. This makes well–designed [[backup]] and recovery procedures essential. ===Inflexibility=== A TPS wants every transaction to be processed in the same way regardless of the user, the customer or the time for day. If a TPS were flexible, there would be too many opportunities for non-standard operations, for example, a commercial [[airline]] needs to consistently accept airline reservations from a range of travel agents, accepting different transactions data from different travel agents would be a problem. ===Controlled processing=== The processing in a TPS must support an organization's operations. For example if an organization allocates roles and responsibilities to particular employees, then the TPS should enforce and maintain this requirement. Example : ATM Transaction ==ACID test properties: first definition== ===Atomicity=== {{main|Atomicity (database systems)}} A transaction’s changes to the state are atomic: either all happen or none happen. These changes include database changes, messages, and actions on transducers.{{ref|Gray&ReuterTPOverview}} ===Consistency=== [[Consistency_(database_systems)#Consistency|Consistency]]: A transaction is a correct transformation of the state. The actions taken as a group do not violate any of the integrity constraints associated with the state. This requires that the transaction be a correct program!{{ref label|Gray&Reuter TP Overview|2|a}} ===Isolation=== Even though transactions execute concurrently, it appears to each transaction T, that others executed either before T or after T, but not both.{{ref label|Gray&ReuterTPOverview|2|b}} ===Durability=== Once a transaction completes successfully (commits), its changes to the state survive failures.{{ref label|Gray&ReuterTPOverview|2|c}} ===Concurrency=== Ensures that two users cannot change the same data at the same time. That is, one user cannot change a piece of data before another user has finished with it. For example, if an airline ticket agent starts to reserve the last seat on a flight, then another agent cannot tell another passenger that a seat is available. ==Storing and retrieving== Storing and retrieving information from a TPS must be efficient and effective. The data are stored in warehouses or other databases, the system must be well designed for its backup and recovery procedures. ===Databases and files=== The storage and retrieval of data must be accurate as it is used many times throughout the day. A [[database]] is a collection of data neatly organized, which stores the accounting and operational records in the [[database]]. Databases are always protective of their delicate data, so they usually have a restricted view of certain data. Databases are designed using hierarchical, network or relational structures; each structure is effective in its own sense. * Hierarchical structure: organizes data in a series of levels, hence why it is called hierarchal. Its top to bottom like structure consists of [[Node (computer science)|nodes]] and branches; each child node has branches and is only linked to one higher level parent node. * Network structure: Similar to hierarchical, network structures also organizes data using nodes and branches. But, unlike hierarchical, each child node can be linked to multiple, higher parent nodes. * Relational structure: Unlike network and hierarchical, a relational database organizes its data in a series of related tables. This gives flexibility as relationships between the tables are built. {| | valign="top" | [[Image:Hierachical-Diagram.PNG|left|frame|200px|A hierarchical structure.]] | valign="top" | [[Image:Network-Diagram.PNG|left|frame|200px|A network structure.]] | valign="top" | [[Image:Relational-Diagram.PNG|left|frame|200px|A relational structure.]] |} The following features are included in real time transaction processing systems: * '''Good data placement''': The database should be designed to access patterns of data from many simultaneous users. * '''Short transactions''': Short transactions enables quick processing. This avoids concurrency and paces the systems. 