concept of a relation with a familiar everyday example. Consider the relation involving three roles that people might play, expressed in a statement of the form "''X'' thinks that ''Y'' likes ''Z'' ". The facts of a concrete situation could be organized in a Table like the following: {| align="center" border="1" cellpadding="4" cellspacing="0" style="background:lightcyan; text-align:center; width:60%" |+ '''Relation S : X thinks that Y likes Z''' |- style="background:paleturquoise" ! Person X !! Person Y !! Person Z |- | Alice || Bob ||Denise |- | Charles || Alice || Bob |- | Charles || Charles || Alice |- | Denise || Denise || Denise |} Each row of the Table records a fact or makes an assertion of the form "''X'' thinks that ''Y'' likes ''Z'' ". For instance, the first row says, in effect, "Alice thinks that Bob likes Denise". The Table represents a relation ''S'' over the set ''P'' of people under discussion: : ''P'' = {Alice, Bob, Charles, Denise}. The data of the Table are equivalent to the following set of ordered triples: : ''S'' = {(Alice, Bob, Denise), (Charles, Alice, Bob), (Charles, Charles, Alice), (Denise, Denise, Denise)}. By a slight abuse of notation, it is usual to write ''S''(Alice, Bob, Denise) to say the same thing as the first row of the Table. The relation ''S'' is a ''ternary'' relation, since there are ''three'' items involved in each row. The relation itself is a [[mathematical object]] defined in terms of concepts from [[set theory]] (i.e., the relation is a subset of the [[Cartesian product]] on {Person X, Person Y, Person Z}), that carries all of the information from the Table in one neat package. Mathematically, then, a relation is simply a "set". The Table for relation ''S'' is an extremely simple example of a [[relational database]]. The theoretical aspects of databases are the specialty of one branch of [[computer science]], while their practical impacts have become all too familiar in our everyday lives. Computer scientists, logicians, and mathematicians, however, tend to see different things when they look at these concrete examples and samples of the more general concept of a relation. For one thing, databases are designed to deal with empirical data, and experience is always finite, whereas mathematics at the very least concerns itself with potential infinity. This difference in perspective brings up a number of ideas that may be usefully introduced at this point, if by no means covered in depth. ==Formal definitions== {{quote|When two objects, qualities, classes, or attributes, viewed together by the mind, are seen under some connexion, that connexion is called a relation.|[[Augustus De Morgan]]<ref>De Morgan, A. (1858) "On the syllogism, part 3" in Heath, P., ed. (1966) ''On the syllogism and other logical writings''. Routledge. P. 119,</ref>}} The simpler of the two definitions of ''k''-place relations encountered in mathematics is: '''Definition 1.''' A '''relation''' ''L'' over the sets ''X''<sub>1</sub>, …, ''X''<sub>''k''</sub> is a [[subset]] of their [[Cartesian product]], written ''L'' ⊆ ''X''<sub>1</sub> &times; … &times; ''X''<sub>''k''</sub>. Relations are classified according to the number of sets in the defining Cartesian product, in other words, according to the number of terms following ''L''. Hence: :* ''Lu'' denotes a [[unary relation]] or [[property (philosophy)|property]]; :* ''Luv'' or ''uLv'' denote a [[binary relation]]; :* ''Luvw'' denotes a [[ternary relation]]; :* ''Luvwx'' denotes a ''quaternary'' relation. Relations with more than four terms are usually referred to as ''k''-ary or ''n''-ary, for example, "a 5-ary relation". A ''k''-ary relation is simply a set of ''k''-[[tuple]]s. The second definition makes use of an idiom that is common in mathematics, stipulating that "such and such is an ''n''-tuple" in order to ensure that such and such a mathematical object is determined by the specification of ''n'' component mathematical objects. In the case of a relation ''L'' over ''k'' sets, there are ''k'' + 1 things to specify, namely, the ''k'' sets plus a subset of their Cartesian product. In the idiom, this is expressed by saying that ''L'' is a (''k'' + 1)-tuple. '''Definition 2.''' A relation ''L'' over the sets ''X''<sub>1</sub>, …, ''X''<sub>''k''</sub> is a (''k'' + 1)-tuple ''L'' = (''X''<sub>1</sub>, …, ''X''<sub>''k''</sub>, ''G''(''L'')), where ''G''(''L'') is a subset of the Cartesian product ''X''<sub>1</sub> &times; … &times; ''X''<sub>''k''</sub>. ''G''(''L'') is called the ''graph'' of ''L''. Elements of a relation are more briefly denoted by using boldface characters, for example, the constant element <math>\mathbf{a}</math> = (a<sub>1</sub>, …, a<sub>''k''</sub>) or the variable element <math>\mathbf{x}</math> = (''x''<sub>1</sub>, …, ''x''<sub>''k''</sub>). A statement of the form "<math>\mathbf{a}</math> is in the relation ''L'' " is taken to mean that <math>\mathbf{a}</math> is in ''L'' under the first definition and that <math>\mathbf{a}</math> is in ''G''(''L'') under the second definition. The following considerations apply under either definition: * The sets ''X''<sub>''j''</sub> for ''j'' = 1 to ''k'' are called the [[domain (mathematics)|domain]]s of the relation. Under the first definition, the relation does not uniquely determine a given sequence of domains. * If all of the domains ''X''<sub>''j''</sub> are the same set ''X'', then it is simpler to refer to ''L'' as a ''k''-ary relation over ''X''. * If any of the domains ''X''<sub>''j''</sub> is empty, then the defining Cartesian product is empty, and the only relation over such a sequence of domains is the empty relation ''L'' = <math>\varnothing</math>. Hence it is commonly stipulated that all of the domains be nonempty. As a rule, whatever definition best fits the application at hand will be chosen for that purpose, and anything that falls under it will be called a relation for the duration of that discussion. If it becomes necessary to distinguish the two definitions, an entity satisfying the second definition may be called an ''embedded'' or ''included'' relation. If ''L'' is a relation over the domains ''X''<sub>1</sub>, …, ''X''<sub>''k''</sub>, it is conventional to consider a sequence of terms called ''variables'', ''x''<sub>1</sub>, …, ''x''<sub>''k''</sub>, that are said to ''range over'' the respective domains. Let a [[Boolean domain]] '''B''' be a two-element set, say, '''B''' = {0, 1}, whose elements can be interpreted as logical values, typically 0 