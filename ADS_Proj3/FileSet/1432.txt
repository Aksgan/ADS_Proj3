the project. * Our highest priority is customer satisfaction: The customer must set and continuously adjust the objectives and priorities based on estimates and other information provided by the developers or other members of the team. Objectives are defined in terms of what not how. * Deliver working software frequently: Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter time scale ([[timeboxing]]). * Working software: Working software is the primary measure of progress. * Global awareness: At any point, any member of the team must be able to measure the team’s progress towards the customer’s objectives and the team reflects on how to become more effective, then tunes and adjusts its behaviour accordingly. * The team must act as an effective social network, which means: ** Honest communication leading to continuous learning and an emphasis on person-to-person interaction, rather than documentation. ** Minimal degrees of separation from what is needed by the team to make progress and the people/resources that can meet those needs. ** Alignment of authority and responsibility. === Principles === The principles that form the basis of XP are based on the values just described and are intended to foster decisions in a system development project. The principles are intended to be more concrete than the values and more easily translated to guidance in a practical situation. ==== Feedback ==== Extreme programming sees feedback as most useful if it is done rapidly and expresses that the time between an action and its feedback is critical to learning and making changes. Unlike traditional system development methods, contact with the customer occurs in more frequent iterations. The customer has clear insight into the system that is being developed. He or she can give feedback and steer the development as needed. Unit tests also contribute to the rapid feedback principle. When writing code, the unit test provides direct feedback as to how the system reacts to the changes one has made. If, for instance, the changes affect a part of the system that is not in the scope of the programmer who made them, that programmer will not notice the flaw. There is a large chance that this bug will appear when the system is in production. ==== Assuming simplicity ==== This is about treating every problem as if its solution were "extremely simple". Traditional system development methods say to plan for the future and to code for reusability. Extreme programming rejects these ideas. The advocates of extreme programming say that making big changes all at once does not work. Extreme programming applies incremental changes: for example, a system might have small releases every three weeks. When many little steps are made, the customer has more control over the development process and the system that is being developed. ==== Embracing change ==== The principle of embracing change is about not working against changes but embracing them. For instance, if at one of the iterative meetings it appears that the customer's requirements have changed dramatically, programmers are to embrace this and plan the new requirements for the next iteration. == Practices == {{details|Extreme programming practices}} Extreme programming has been described as having 12 practices, grouped into four areas: === Fine scale feedback === * [[Pair programming]]<small><ref name=Cworld92/></small> * [[Extreme programming practices#Planning game|Planning game]] * [[Test-driven development]] * [[Extreme programming practices#Whole team|Whole team]] === Continuous process === * [[Continuous integration]] * [[Refactoring]] or design improvement<small><ref name=Cworld92/></small> * [[Extreme programming practices#Small releases|Small releases]] === Shared understanding === * [[Extreme programming practices#Coding standard|Coding standards]] * [[Extreme programming practices#Collective code ownership|Collective code ownership]]<small><ref name=Cworld92/></small> * [[Extreme programming practices#Simple design|Simple design]]<small><ref name=Cworld92/></small> * [[Extreme programming practices#System metaphor|System metaphor]] === Programmer welfare === * [[Extreme programming practices#Sustainable pace|Sustainable pace]] === Coding === * The customer is always available * Code the [[Unit test]] first * Only one pair integrates code at a time * Leave [[Program optimization|Optimization]] till last * No [[Overtime]] === Testing === * All code must have [[Unit tests]] * All code must pass all [[Unit tests]] before it can be released. * When a [[Software bug|Bug]] is found tests are created before the bug is addressed (a bug is not an error in logic, it is a test you forgot to write) * [[Acceptance tests]] are run often and the results are published == Controversial aspects == The practices in XP have been heavily debated.<ref name=Cworld92/> Proponents of extreme programming claim that by having the on-site customer<small><ref name=Cworld92/></small> request changes informally, the process becomes flexible, and saves the cost of formal overhead. Critics of XP claim this can lead to costly [[rework]] and project [[scope creep]] beyond what was previously agreed or funded. Change control boards are a sign that there are potential conflicts in project objectives and constraints between multiple users. XP's expedited methodology is somewhat dependent on programmers being able to assume a unified client viewpoint so the programmer can concentrate on coding rather than documentation of compromise objectives and constraints. This also applies when multiple programming organizations are involved, particularly organizations which compete for shares of projects.{{Citation needed|date=July 2008}} Other potentially controversial aspects of extreme programming include: * Requirements are expressed as automated acceptance tests rather than specification documents. * Requirements are defined incrementally, rather than trying to get them all in advance. * Software developers are usually required to work in pairs. * There is no [[Big Design Up Front]]. Most of the design activity takes place on the fly and incrementally, starting with <span id="SimplestThingThatCouldPossiblyWork"></span>"the simplest thing that could possibly work" and adding complexity only when it's required by failing tests. Critics compare this to "debugging a system into appearance" and fear this will result in more re-design effort than only re-designing when requirements change. * A [[customer representative]] is attached to the [[project]]. This role can become a single-point-of-failure for the project, and some people have found it to be a source of stress. Also, there is the danger of [[micro-management]] by a non-technical representative trying 