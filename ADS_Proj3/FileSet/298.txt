function]]. The transfer functions usually have a [[sigmoid function|sigmoid shape]], but they may also take the form of other non-linear functions, [[piecewise]] linear functions, or [[#Step function|step functions]]. They are also often [[Monotonic function|monotonically increasing]], [[Continuous function|continuous]], [[Differentiable function|differentiable]] and [[Bounded function|bounded]]. The artificial neuron transfer function should not be confused with a linear system's [[transfer function]]. == Basic structure == For a given artificial neuron, let there be ''m'' + 1 inputs with signals ''x''<sub>0</sub> through ''x''<sub>''m''</sub> and weights ''w''<sub>0</sub> through ''w''<sub>''m''</sub>. Usually, the ''x''<sub>0</sub> input is assigned the value +1, which makes it a ''bias'' input with ''w''<sub>''k''0</sub> = ''b''<sub>''k''</sub>. This leaves only ''m'' actual inputs to the neuron: from ''x''<sub>1</sub> to ''x''<sub>''m''</sub>. The output of ''k''th neuron is: :<math>y_k = \varphi \left( \sum_{j=0}^m w_{kj} x_j \right)</math> Where <math>\varphi</math> (phi) is the transfer function. [[Image:artificial neuron.png]] The output is analogous to the [[axon]] of a biological neuron, and its value propagates to input of the next layer, through a synapse. It may also exit the system, possibly as part of an output vector. ==History== The first artificial neuron was the Threshold Logic Unit (TLU) first proposed by [[Warren McCulloch]] and [[Walter Pitts]] in 1943. As a transfer function, it employed a threshold, equivalent to using the [[Heaviside step function]]. Initially, only a simple model was considered, with binary inputs and outputs, some restrictions on the possible weights, and a more flexible threshold value. Since the beginning it was already noticed that any boolean function could be implemented by networks of such devices, what is easily seen from the fact that one can implement the AND and OR functions, and use them in the disjunctive or the [[conjunctive normal form]]. Researchers also soon realized that cyclic networks, with [[feedback]]s through neurons, could define dynamical systems with memory, but most of the research concentrated (and still does) on strictly feed-forward networks because of the smaller difficulty they present. One important and pioneering artificial neural network that used the linear threshold function was the [[perceptron]], developed by [[Frank Rosenblatt]]. This model already considered more flexible weight values in the neurons, and was used in machines with adaptive capabilities. The representation of the threshold values as a bias term was introduced by [[Widrow]] in 1960{{Fact|date=March 2008}}. In the late 1980s, when research on neural networks regained strength, neurons with more continuous shapes started to be considered. The possibility of differentiating the activation function allows the direct use of the [[gradient descent]] and other optimization algorithms for the adjustment of the weights. Neural networks also started to be used as a general function approximation model. ==Types of transfer functions== The transfer function of a neuron is chosen to have a number of properties which either enhance or simplify the network containing the neuron. Crucially, for instance, any [[multilayer perceptron]] using a ''linear'' transfer function has an equivalent single-layer network; a non-linear function is therefore necessary to gain the advantages of a multi-layer network. Below, ''u'' refers in all cases to the weighted sum of all the inputs to the neuron, i.e. for ''n'' inputs, :<math> u = \sum_{i = 1}^n w_{i} x_{i} </math> where '''w''' is a vector of ''synaptic weights'' and '''x''' is a vector of inputs. ===Step function=== The output ''y'' of this transfer function is binary, depending on whether the input meets a specified threshold, ''θ''. The "signal" is sent, i.e. the output is set to one, if the activation meets the threshold. :<math>y = \left\{ \begin{matrix} 1 & \mbox{if }u \ge \theta \\ 0 & \mbox{if }u < \theta \end{matrix} \right.</math> This function is used in [[perceptron]]s and often shows up in many other models. It performs a division of the [[Vector space|space]] of inputs by a [[hyperplane]]. It is specially useful in the last layer of a network intended to perform binary classification of the inputs. It can be approximated from other sigmoidal functions by assigning large values to the weights. ===Linear combination=== In this case, the output unit is simply the weighted sum of its inputs plus a ''bias'' term. A number of such linear neurons perform a linear transformation of the input vector. This is usually more useful in the first layers of a network. A number of analysis tools exist based on linear models, such as [[harmonic analysis]], and they can all be used in neural networks with this linear neuron. The bias term allows us to make [[homogeneous coordinates|affine transformations]] to the data. See: [[Linear transformation]], [[Harmonic analysis]], [[Linear filter]], [[Wavelet]], [[Principal component analysis]], [[Independent component analysis]], [[Deconvolution]]. ===Sigmoid=== A fairly simple non-linear function, a [[Sigmoid function]] such as the logistic function also has an easily calculated derivative, which can be important when calculating the weight updates in the network. It thus makes the network more easily manipulable mathematically, and was attractive to early computer scientists who needed to minimize the computational load of their simulations. It is commonly seen in [[multilayer perceptron]]s using a [[backpropagation]] algorithm. <!-- This part of the article needs to be expanded --> See: [[Sigmoid function]] ==Pseudocode algorithm== The following is a simple [[pseudocode]] implementation of a single TLU which takes [[Boolean data type|boolean]] inputs (true or false), and returns a single boolean output when activated. An [[object oriented|object-oriented]] model is used. No method of training is defined, since several exist. If a purely functional model were used, the class TLU below would be replaced with a function TLU with input parameters threshold, weights, and inputs that returned a boolean value. '''class''' TLU '''defined as:''' '''data member''' threshold ''':''' number '''data member''' weights ''': list of''' numbers '''of size''' X '''function member''' fire( inputs ''': list of''' booleans '''of size''' X ) ''':''' boolean '''defined as:''' '''variable''' T ''':''' number T '''←''' 0 '''for each''' i '''in''' 1 '''to''' X ''':''' '''if''' inputs(i) '''is''' true ''':''' T '''←''' T + weights(i) '''end if''' '''end for each''' '''if''' T > threshold ''':''' '''return''' true '''else:''' '''return''' false '''end if''' '''end function''' '''end class''' == Spreadsheet example == {| class="wikitable" <hiddentext>generated 