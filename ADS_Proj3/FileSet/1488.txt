third and final set of three characters represents the others class. Each of the three characters represent the read, write, and execute permissions respectively: *<tt>r</tt> if the read bit is set, <tt>-</tt> if it is not. *<tt>w</tt> if the write bit is set, <tt>-</tt> if it is not. *<tt>x</tt> if the execute bit is set, <tt>-</tt> if it is not. <!-- * The <tt>x</tt> will be an <tt>s</tt> if the setuid or setgid bit is also set, and in the third, it will be a <tt>t</tt> if the [[sticky bit]] is set. If these are set but the execute bit is not, the letter will be in uppercase. --> The following are some examples of symbolic notation: *<code>-rwxr-xr-x</code> for a regular file whose user class has full permissions and whose group and others classes have only the read and execute permissions. *<code>crw-rw-r--</code> for a character special file whose user and group classes have the read and write permissions and whose others class has only the read permission. *<code>dr-x------</code> for a directory whose user class has read and execute permissions and whose group and others classes have no permissions. <!-- not permissions at all ===Symbolic notation and additional permission=== The three additional permissions are indicated by changing one of the three "execute" characters as shown in the following table: {|class="wikitable" !style="text-align:left"|Permission !style="text-align:left"|Class !style="width: 6em"|Executable<sup>1</sup> !style="width: 6em"|Non-executable<sup>2</sup> |- |[[Setuid|Set User ID]] (<tt>setuid</tt>) |User |style="text-align: center"|<tt>s</tt> |style="text-align: center"|<tt>S</tt> |- |[[Setgid|Set Group ID]] (<tt>setgid</tt>) |Group |style="text-align: center"|<tt>s</tt> |style="text-align: center"|<tt>S</tt> |- |[[Sticky bit]] |Others |style="text-align: center"|<tt>t</tt> |style="text-align: center"|<tt>T</tt> |- |} <ol style="font-size: 0.75em"> <li>The character that will be used to indicate that the execute bit is also set.</li> <li>The character that will be used when the execute bit is not set.</li> </ol> Here is an example: *<tt>"-rwsr-Sr-x"</tt> for a file whose user class has read, write and execute permissions; whose group class has read permission; whose others class has read and execute permissions; and which has ''[[setuid]]'' and ''[[setgid]]'' permissions set. --> ===Octal notation=== Another common method for representing Unix permissions is ''[[octal]] notation''. Octal notation consists of a three- or four-digit [[Number base#Bases_used|base]]-8 value. With three-digit octal notation, each numeral represents a different component of the permission set: user class, group class, and "others" class respectively. Each of these digits is the sum of its component bits (see also [[Binary numeral system]]). As a result, specific bits add to the sum as it is represented by a numeral: *The read bit adds 4 to its total (in binary 100), *The write bit adds 2 to its total (in binary 010), and *The execute bit adds 1 to its total (in binary 001). These values never produce ambiguous combinations; each sum represents a specific set of permissions. These are the examples from the [[#Symbolic_notation|Symbolic notation]] section given in octal notation: *<tt>"-rwxr-xr-x"</tt> would be represented as <tt>755</tt> in three-digit octal. *<tt>"-rw-rw-r--"</tt> would be represented as <tt>664</tt> in three-digit octal. *<tt>"-r-x------"</tt> would be represented as <tt>500</tt> in three-digit octal. Here is a summary of the meanings for individual octal digit values: 0 --- no permission 1 --x execute 2 -w- write 3 -wx write and execute 4 r-- read 5 r-x read and execute 6 rw- read and write 7 rwx read, write and execute Note the similarity to binary counting (starting at the right and going left): 0: 000 1: 001 2: 010 3: 011 4: 100 5: 101 6: 110 7: 111 Octal digit values can be added together to make Symbolic Notations:<br /> (4=r)+(1=x) == (5=r-x)<br /> (4=r)+(2=w) == (6=rw-)<br /> (4=r)+(2=w)+(1=x) == (7=rwx) Here is a summary showing which octal digits affect permissions for user, group, and other: *UGO = User, Group, Other *777 = <tt>"-rwxrwxrwx"</tt> = rwx for all *754 = <tt>"-rwxr-xr--"</tt> = rwx for owner, r-x for group, r-- for other *124 = <tt>"--x-w-r--"</tt> = x for owner, w for group, r for other <!-- no permissions at all! ===Octal notation and additional permissions=== There is also a ''four-digit'' form of octal notation. In this scheme, the standard three digits described above become the last three digits. The first digit represents the additional permissions. On some systems, this first digit cannot be omitted; it is therefore common to use all four digits (where the first digit is zero). This first digit is also the sum of component bits: *The setuid bit adds 4 to the total, *The setgid bit adds 2 to the total, and *The sticky bit adds 1 to the total. The example from the ''Symbolic notation and additional permissions'' section, <tt>"-rwsr-Sr-x"</tt> would be represented as <tt>6745</tt> in four-digit octal. In addition, the examples in the previous section (<tt>755</tt>, <tt>664</tt>, and <tt>500</tt>) would be represented as <tt>0755</tt>, <tt>0664</tt>, and <tt>0500</tt> respectively in four-digit octal notation. --> ===Listing Permissions=== '''ls -l''' prints symbolic notation for files and directories. '''stat -c '%n %a %A'''' can be used to print out octal notation. ==User private group== Some systems diverge from the traditional POSIX-model of users and groups, by creating a new group &ndash; a "user private group" &ndash; for each user. The "user private group" scheme can be preferred for a variety of reasons<ref> O'Reilly ONLamp Blog, [http://www.oreillynet.com/onlamp/blog/2006/09/using_user_private_groups.html Using User Private Groups] </ref><ref> Red Hat 9 Manual, [http://www.redhat.com/docs/manuals/linux/RHL-9-Manual/ref-guide/s1-users-groups-private-groups.html User Private Groups] </ref><ref> Red Hat Enterprise Linux 5 Manual, [http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/Deployment_Guide-en-US/s1-users-groups-private-groups.html 32.5. User Private Groups] </ref> including using a umask of 002 and not having every "user" able to write to newly created files. In this case however, no other users must be added to the "user private group" or they will have write-permission on all files. ==See also== *[[Access control list]] *[[chattr]] *[[chmod]], the command used to set permissions on Unix-like systems *[[File system]] *[[Group identifier (Unix)]] *[[lsattr]] *[[POSIX]] *[[User identifier (Unix)]] ==References== {{Reflist}} ==External links== * [http://manuals.info.apple.com/en/File_Services_v10.4.pdf Apple Mac OS X Server version 10.4+ ''File Services Administration'' Manual (see pages 16-26)] * [http://www.hackinglinuxexposed.com/articles/20030417.html "Linux File Permission Confusion"] by Brian Hatch 2003. * [http://www.hackinglinuxexposed.com/articles/20030424.html "Linux File Permission Confusion pt 2"] by Brian Hatch 2003. * [http://dsl.org/cookbook/cookbook_9.html The Linux Cookbook: Groups and How to 