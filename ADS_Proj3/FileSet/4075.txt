journal |first1=I. I. |last1=Guseinov |first2= B. A. |last2=Mamedov |title=On the calculation of arbitrary multielectron molecular integrals over Slater-Type Orbitals using recurrence relations for overlap integrals: III. auxiliary functions Q<sup>1</sup><sub>nn'</sub> and G<sup>q</sup><sub>-nn</sub> |journal=Int. J. Quant. Chem. |volume=86 |issue=5 |pages=440–449 |year=2002 |doi=10.1002/qua.10045 }} *{{cite journal |first1=I. I. |last1=Guseinov |first2= B. A. |last2=Mamedov |title=On the calculation of arbitrary multielectron molecular integrals over Slater-Type Orbitals using recurrence relations for overlap integrals: IV. Use of recurrence relations for basic two-center overlap and hybrid integrals |journal=Int. J. Quant. Chem. |volume=86 |issue=5 |pages=450–455 |year=2002 |doi=10.1002/qua.10044 }} *{{cite journal |first1=T. |last1= &Ouml;zdogan |first2= M. |last2=Orbay |title = Evaluation of two-center overlap and nuclear attraction integrals over Slater-type orbitals with integer and non-integer principal quantum numbers |journal = Int. J. Quant. Chem. |volume = 87 |issue=1 |year = 2002 |pages = 15–22 |doi=10.1002/qua.10052 }} *{{cite journal |first1=I. I. |last1=Guseinov |title=New complete orthonormal sets of exponential-type orbitals and their application to translation of Slater Orbitals |journal=Int. J. Quant. Chem. |volume=90 |issue=1 |pages=114–118 |year=2002 |doi=10.1002/qua.927 }} *{{cite journal |first1=Frank E. |last1=Harris |title = Comment on ``Computation of Two-Center Coulomb integrals over Slater-Type orbitals using elliptical coordinates'' |journal = Int. J. Quant. Chem. |volume =93 |issue=5 |pages = 332–334 |year =2003 |doi=10.1002/qua.10567 }} *{{cite journal |first1=A. |last1=Bouferguene |first2=M. |last2=Fares |first3= P. E. |last3=Hoggan |title=STOP: Slater Type Orbital Package for general molecular electronic structure calculations |journal=Int. J. Quant. Chem. |volume=57 |issue=4 |pages=801–810 |year=1996 |doi=10.1002/(SICI)1097-461X(1996)57:4<801::AID-QUA27>3.0.CO;2-0 }} ==See also== [[Basis set (chemistry)|Basis sets used in computational chemistry]] [[Category:Quantum chemistry]] [[Category:Computational chemistry]] {{quantum-stub}} [[de:Slater Type Orbitals]] [[fr:Orbitale de type Slater]] [[id:Orbital Slater]] [[ja:スレーター軌道]] [[ru:Орбитали слэтеровского типа]]</text> </page> <page> <id>34627</id> <title>Sleep (operating system)</title> <text>A [[computer program]] ([[process (computing)|process]], [[task (computers)|task]], or [[Thread (computer science)|thread]]) may '''sleep''', which places it into an [[process state|inactive state]] for a period of time. Eventually the expiration of an interval [[timer]], or the receipt of a [[signal (computing)|signal]] or [[interrupt]] causes the program to resume execution. == Usage == A typical ''sleep'' [[system call]] takes a time value as a parameter, specifying the minimum amount of time that the process is to sleep before resuming execution. The parameter typically specifies seconds, although some operating systems provide finer resolution, such as milliseconds or microseconds. === Windows === On Windows 2000 and newer, the <code>Sleep()</code> [[function (computer science)|function]] takes a single parameter of the number of milliseconds to sleep. <ref>[http://msdn.microsoft.com/en-us/library/ms686298(VS.85).aspx MSDN Library Reference - Sleep()]</ref> The <code>sleep()</code> function is included in the [[kernel32.dll]], but no sleep command ([[executable]]) is natively available for scripts ([[batch files]]). It can be found in collections of Windows utilities like Windows 2003 Resource Kit. <ref>[http://malektips.com/xp_dos_0002.html batch file sleep command]</ref> ===Unix === On [[Unix-like]] operating systems, the <code>sleep()</code> function is called providing a single parameter of type unsigned integer of the number of seconds to sleep. <ref>[http://ibm5.ma.utexas.edu/cgi-bin/man-cgi?sleep+3 UNIX Man Page - SLEEP(3)]</ref> (For more precise sleep times one can use the <code>usleep()</code> function.) <ref>[http://www.manpagez.com/man/3/usleep/ UNIX Man Page - usleep(3)]</ref> === C/C++ Examples === In Windows OS: <source lang="c"> while (myInt <= 100) { Sleep(2*1000); // Sleep for 2 seconds } </source> In Unix: <source lang="c"> while (myInt <= 100) { sleep(2); // Sleep for 2 seconds } </source> == Low Level Functionality == Sleep causes the thread or process to enter the '''Not Runnable''' state. This allows the CPU to suspend the thread or process and continue executing other threads or processes until the sleep has finished, and the thread or process is allowed to continue executing. The sleep system call is non-interruptible, which differs from the [[Wait (system call)|Wait]] system call, which can be interrupted.<ref>[http://www.jguru.com/faq/view.jsp?EID=47127 Sleep vs. Wait (1)]</ref><ref>[http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep Sleep vs. Wait (2)]</ref> == Applications of Sleep == Some [[daemon (computer software)|system programs]] that never terminate execute an [[event loop]], going to sleep at the start of each cycle and waiting for some event to awaken them. Once an event is received, the program services the event, then returns to the beginning of the next wait cycle. Other programs periodically [[polling (computer science)|poll]] for events by going to sleep and resuming execution after a specific interval of time. Once execution is resumed, the program polls for events or status changes, and then services any that occurred while it was asleep. After servicing the events, the program then goes to sleep again for the next time interval. Certain kinds of ''[[watchdog timer|heartbeat]]'' events or ''keep-alive'' signals can be generated by these kinds of programs. ===Uninterruptible sleep=== An uninterruptible sleep state is a sleep state that cannot handle a signal (such as waiting for disk or network IO (input/output)). When the process is sleeping uninterruptibly, the signal will be noticed when the process returns from the system call or trap. In Unix-like systems the command 'ps -l' uses code "D" for the uninterruptible sleep state of a process. Such processes cannot be killed even with 'kill -9' command, and the only nonsophisticated way to get rid of them is to reboot the system. == See also == * [[Signal (computing)|Signal]] * [[System time]] * [[Sleep (Unix)|Unix sleep command]] * [[Sleep mode]] * [[Wait (operating system)]] == References == {{Reflist}} {{DEFAULTSORT:Sleep (Operating System)}} [[Category:Process (computing)]] [[simple:Sleep (operating system)]]</text> </page> <page> <id>34638</id> <title>Slide attack</title> <text>{{nofootnotes|date=March 2009}} The '''slide attack''' is a form of [[cryptanalysis]] designed to deal with the prevailing idea that even weak [[cipher]]s can become very strong by increasing the number of rounds, which can ward off a [[differential attack]]. The slide attack works in such a way as to make the number of rounds in a cipher irrelevant. Rather than looking at the data-randomizing aspects of the block cipher the slide attack works by analyzing the [[key schedule]] and exploiting weaknesses in it to break the cipher. The most common one is the keys repeating in a cyclic manner. The attack was first described by [[David A. Wagner|David Wagner]] and [[Alex Biryukov]]. [[Bruce Schneier]] first suggested the term ''slide attack'' to them, and they used it in their 1999 paper describing the attack. The only requirements for a slide attack to work on a cipher is that it can be 