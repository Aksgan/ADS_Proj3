attribute. [[Solaris (operating system)|Solaris]] ACL support depends on the filesystem being used - older [[UFS]] filesystem supports POSIX.1e ACLs, while [[ZFS]] supports only [[NFSv4]] ACLs.<ref>http://docs.sun.com/app/docs/doc/819-5461/ftyxi?a=view</ref> [[Linux]] supports POSIX.1e ACLs. There is experimental support for NFSv4 ACLs for [[ext3]] filesystem.<ref>http://www.suse.de/~agruen/nfs4acl/</ref> [[FreeBSD]] supports POSIX.1e ACLs on [[UFS]] and NFSv4 ACLs on [[ZFS]].. There is experimental support for NFSv4 ACLs for [[UFS]].<ref>http://wiki.freebsd.org/NFSv4_ACLs</ref> <!--Where are IBM mainframe and mini OSs?--> [[IBM z/OS]] implements file security via RACF (Resource Access Control Facility )<ref>http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?topic=/com.ibm.zos.r9.ieab600/xddprot.htm</ref> ==Traditional Unix permissions== Permissions on [[Unix-like]] systems are managed in three distinct ''classes''. These classes are known as ''user'', ''group'', and ''others''. In effect, Unix permissions are a simplified form of [[access control list]]s (ACLs). When a new file is created on a Unix-like system, its permissions are determined from the [[umask]] of the process that created it. ===Classes=== [[Computer file|Files]] and [[directory (file systems)|directories]] are owned by a user. The owner determines the file's ''owner class''. Distinct permissions apply to the owner. Files and directories are assigned a group, which define the file's ''group class.'' Distinct permissions apply to members of the file's group members. The owner need not be a member of the file's group. Users who are not the owner, nor a member of the group, comprise a file's ''others class''. Distinct permissions apply to others. The ''effective permissions'' are determined based on the user's class. For example, the user who is the owner of the file will have the permissions given to the owner class regardless of the permissions assigned to the group class or others class. === Permissions=== There are three specific permissions on [[Unix-like]] systems that apply to each class: *The ''read'' permission, which grants the ability to read a file. When set for a directory, this permission grants the ability to read the '''names''' of files in the directory (but '''not''' to find out any further information about them such as contents, file type, size, ownership, permissions, etc.) *The ''write'' permission, which grants the ability to modify a file. When set for a directory, this permission grants the ability to modify entries in the directory. This includes creating files, deleting files, and renaming files. *The ''execute'' permission, which grants the ability to execute a file. This permission must be set for executable binaries (for example, a compiled C++ program) or shell scripts (for example, a Perl program) in order to allow the operating system to run them. When set for a directory, this permission grants the ability to traverse its tree in order to access files or subdirectories, but not see the content of files inside the directory (unless ''read'' is set). The effect of setting the permissions on a directory (rather than a file) is "one of the most frequently misunderstood file permission issues" (Hatch 2003). When a permission is not set, the rights it would grant are denied. Unlike [[Access control list|ACL]]-based systems, permissions on a Unix-like system are not ''inherited''. Files created within a directory will not necessarily have the same permissions as that directory. The permissions to be assigned are determined using [[umask]]s. <!-- These are not permissions and are discussed in chmod ===Additional Permissions=== [[Unix-like]] systems typically employ three additional modes. These are actually attributes but are referred to as permissions or modes. These special modes are for a file or directory overall, not by a class. *The ''[[Setuid|set user ID]]'', ''setuid'', or SUID mode. When a file with setuid is executed, the resulting process will assume the effective [[User identifier (Unix)|user ID]] given to the owner class. This enables users to be treated temporarily as root (or another user). *The ''[[Setgid|set group ID]]'', ''setgid'', or SGID permission. When a file with setgid is executed, the resulting process will assume the [[Group identifier (Unix)|group ID]] given to the group class. When setgid is applied to a directory, new files and directories created under that directory will inherit the group from that directory. (Default behaviour is to use the primary group of the effective user when setting the group of new files and directories.) *The ''[[Sticky bit|sticky]]'' mode. (Also known as the ''Text'' mode.) The typical behaviour of the sticky bit on executable files encourages the [[Kernel (computer science)|kernel]] to retain the resulting process image in memory beyond termination. On a directory, the sticky permission prevents users from renaming, moving or deleting contained files owned by users other than themselves, even if they have write permission to the directory. Only the directory owner and superuser are exempt from this. These additional modes are also referred to as ''setuid bit'', ''setgid bit'', and ''sticky bit'', due to the fact that they each occupy only one bit. --> ==Notation of traditional Unix permissions== ===Symbolic notation=== There are many ways by which Unix permission schemes are represented. The most common form is '''symbolic notation'''. <!--lets stay on topic, permissions, other filds of the ls command are described elsewhere This scheme represents permissions as a series of 10 characters. --> {|class="wikitable" style="float: right; margin-right:0; margin-left: 1em" <!-- !colspan="2" style="text-align: left"|First Character |- |style="text-align: center"|<tt>-</tt>||a regular file |- |style="text-align: center"|<tt>d</tt>||a [[directory (file systems)|directory]] |- |style="text-align: center"|<tt>l</tt>|| a symbolic link |- --> !colspan="2" style="text-align: left"|Three groups of three |- |style="text-align: center"|first||what the owner can do |- |style="text-align: center"|second||what the group members can do |- |style="text-align: center"|third||what other users can do |- !colspan="2" style="text-align: left"|The triplet |- |style="text-align: center"|first||<tt>r</tt>: readable. |- |style="text-align: center"|second||<tt>w</tt>: writable. |- |style="text-align: center"|third||<tt>x</tt>: executable.<br><tt>s</tt> or <tt>t</tt>: executable and [[setuid]]/[[setgid]]/[[sticky bit|sticky]].<br><tt>S</tt> or <tt>T</tt>: setuid/setgid or sticky, but not executable. <!-- |- |other: see [[#Symbolic notation and additional permission|below]]. --> |} The first character indicates the [[Unix file types|file type]]: *<tt>-</tt> denotes a regular file *<tt>d</tt> denotes a [[directory (file systems)|directory]] *<tt>b</tt> denotes a [[block special file]] *<tt>c</tt> denotes a [[character special file]] *<tt>l</tt> denotes a [[symbolic link]] *<tt>p</tt> denotes a [[named pipe]] *<tt>s</tt> denotes a [[Unix domain socket|domain socket]] Each class of permissions is represented by three characters. The first set of characters represents the user class. The second set represents the group class. The 