0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 <span style="color:green;">''Pre-processing:''</span> append the bit '1' to the message append k bits '0', where k is the minimum number >= 0 such that the resulting message length (in ''bits'') is [[modular arithmetic|congruent]] to 448 (mod 512) append length of message (before pre-processing), in ''bits'', as 64-bit big-endian integer <span style="color:green;">''Process the message in successive 512-bit chunks:''</span> break message into 512-bit chunks '''for''' each chunk break chunk into sixteen 32-bit big-endian words w&#91;0..15&#93; <span style="color:green;">''Extend the sixteen 32-bit words into sixty-four 32-bit words:''</span> '''for''' i '''from''' 16 to 63 s0 := (w&#91;i-15&#93; '''rightrotate''' 7) '''xor''' (w&#91;i-15&#93; '''rightrotate''' 18) '''xor''' (w&#91;i-15&#93; '''rightshift''' 3) s1 := (w&#91;i-2&#93; '''rightrotate''' 17) '''xor''' (w&#91;i-2&#93; '''rightrotate''' 19) '''xor''' (w&#91;i-2&#93; '''rightshift''' 10) w&#91;i&#93; := w&#91;i-16&#93; '''+''' s0 '''+''' w&#91;i-7&#93; '''+''' s1 <span style="color:green;">''Initialize hash value for this chunk:''</span> a := h0 b := h1 c := h2 d := h3 e := h4 f := h5 g := h6 h := h7 <span style="color:green;">''Main loop:''</span> '''for''' i '''from''' 0 to 63 s0 := (a '''rightrotate''' 2) '''xor''' (a '''rightrotate''' 13) '''xor''' (a '''rightrotate''' 22) maj := (a '''and''' b) '''xor''' (a '''and''' c) '''xor''' (b '''and''' c) t2 := s0 + maj s1 := (e '''rightrotate''' 6) '''xor''' (e '''rightrotate''' 11) '''xor''' (e '''rightrotate''' 25) ch := (e '''and''' f) '''xor''' (('''not''' e) '''and''' g) t1 := h + s1 + ch + k&#91;i&#93; + w&#91;i&#93; h := g g := f f := e e := d + t1 d := c c := b b := a a := t1 + t2 <span style="color:green;">''Add this chunk's hash to result so far:''</span> h0 := h0 + a h1 := h1 + b h2 := h2 + c h3 := h3 + d h4 := h4 + e h5 := h5 + f h6 := h6 + g h7 := h7 + h <span style="color:green;">''Produce the final hash value (big-endian):''</span> digest = hash = h0 '''append''' h1 '''append''' h2 '''append''' h3 '''append''' h4 '''append''' h5 '''append''' h6 '''append''' h7 The computation of the <code>ch</code> and <code>maj</code> values can be optimized the same way [[SHA-1#SHA-1 pseudocode|as described for SHA-1]]. SHA-224 is identical to SHA-256, except that: * the initial variable values <code>h0</code> through <code>h7</code> are different, and * the output is constructed by omitting <code>h7</code>. <span style="color:green;">Here the initial values for the variables (in big endian):</span> <span style="color:green;">(The second 32 bits of the fractional parts of the square roots of the 9th through 16th primes 23..53)</span> h0 := 0xc1059ed8 h1 := 0x367cd507 h2 := 0x3070dd17 h3 := 0xf70e5939 h4 := 0xffc00b31 h5 := 0x68581511 h6 := 0x64f98fa7 h7 := 0xbefa4fa4 SHA-512 is identical in structure, but: * all numbers are 64 bits long, * there are 80 rounds instead of 64, * the initial values and additive constants are extended to 64 bits, and * the shift and rotate amounts used are different. SHA-384 is identical to SHA-512, except that: * the initial values <code>h0</code> through <code>h7</code> are different (taken from the 9th through 16th primes), and * the output is constructed by omitting <code>h6</code> and <code>h7</code>. ==See also== * [[Comparison of cryptographic hash functions]] * [[Digital timestamping]] * [[FORK-256]] * [[Hash collision]] * [[Hashcash]] * [[International Association for Cryptologic Research]] (IACR) * [[RIPEMD-160]] * [[Secure Hash Standard]] * <tt>[[sha1sum]]</tt> (sha224sum, sha256sum, sha384sum and sha512sum) * [[Tiger (cryptography)|Tiger]] * [[Whirlpool (cryptography)|Whirlpool]] ==References== {{Reflist|colwidth=30em}} {{refbegin|colwidth=30em}} * [[Henri Gilbert]], [[Helena Handschuh]]: Security Analysis of SHA-256 and Sisters. [[Selected Areas in Cryptography]] 2003: pp175–193 * {{cite journal|title=Proposed Revision of Federal Information Processing Standard (FIPS) 180, Secure Hash Standard|journal=Federal Register|date=1994-07-11|first=|last=|coauthors=|volume=59|issue=131|pages=35317–35318|id= |url=http://frwebgate1.access.gpo.gov/cgi-bin/waisgate.cgi?WAISdocID=5963452267+0+0+0&WAISaction=retrieve|format=|accessdate=2007-04-26}} {{refend}} ==External links== <!-- We suffer from a lot of self promotion here. --- Please do not add a link to your own site. See http://en.wikipedia.org/w/index.php?title=WP:COI --- It will be removed, and you may be blocked without further warning. --> ===Standards: SHA-1, SHA-2=== * [http://www.eff.org/Privacy/Digital_signature/?f=fips_sha_shs.standard.txt Specifications for a Secure Hash Standard (SHS)] – Draft for proposed SHS (SHA-0) * [http://www.eff.org/Privacy/Digital_signature/?f=fips_sha_shs.info.txt Secure Hash Standard (SHS)] – Proposed SHS (SHA-0) * [http://csrc.nist.gov/CryptoToolkit/tkhash.html CSRC Cryptographic Toolkit] – Official [[National Institute of Standards and Technology|NIST]] site for the Secure Hash Standard ** [http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf FIPS 180-3: Secure Hash Standard (SHS)] ([[Portable Document Format|PDF]], 236 kB) – Current version of the Secure Hash Standard (SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512), October 2008 * [https://www.cosic.esat.kuleuven.be/nessie/testvectors/hash/sha/index.html Test vectors for SHA-256/384/512] from the [[NESSIE]] project * [http://csrc.nist.gov/groups/STM/cavp/index.html#03 Test vectors for SHA-1, SHA-2] from [[National Institute of Standards and Technology|NIST]] site * [http://www.csrc.nist.gov/groups/ST/hash/index.html NIST Cryptographic Hash Project] SHA-3 competition * RFC 3874: A 224-bit One-way Hash Function: SHA-224. * RFC 4634: US Secure Hash Algorithms (SHA and HMAC-SHA). Contains sample C implementation. ===Implementations=== <!-- This section should include only implementations that are commercially or algorithmically significant, such as those widely used in existing technologies and platforms --> ;[http://directory.fsf.org/project/libgcrypt/ Libgcrypt]: A general purpose cryptographic library based on the code from [[GNU Privacy Guard]]. ;[[OpenSSL]]: The widely used OpenSSL <code>crypto</code> library includes [[free software|free]], [[open source|open-source]] – implementations of SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 ;[[Crypto++]]: A public domain C++ class library of cryptographic schemes, including implementations of the SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512 algorithms. ;[[Bouncy Castle (cryptography)|Bouncy Castle]]: The Bouncy Castle Library is a free Java and C# class library that contains implementations of the SHA-1, SHA-224, SHA-256, SHA-384 and SHA-512 algorithms as well as other algorithms like [[Whirlpool (cryptography)|Whirlpool]], [[Tiger (hash)|Tiger]], [[RIPEMD]], GOST-3411, [[MD2 (cryptography)|MD2]], [[MD4]] and [[MD5]]. ;[http://jssha.sourceforge.net/ jsSHA]: A cross-browser [[JavaScript]] library for client-side calculation of SHA digests, despite the fact that JavaScript does not natively support the 64-bit operations required for SHA-384 and SHA-512. ;[http://libtom.org/?page=features&newsitems=5&whatfile=crypt LibTomCrypt]: A portable ISO C cryptographic toolkit, Public Domain. ;[[md5deep]]: A set of programs to compute MD5, SHA-1, SHA-256, Tiger, or Whirlpool cryptographic message digests on an arbitrary number of files. It is used in computer security, system administration and computer 