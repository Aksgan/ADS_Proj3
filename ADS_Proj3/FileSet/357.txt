[[Japan]], [[South Korea]], the [[Netherlands]] and [[Brasil]]. Unlike MSX, BASICODE defined no hardware, but a language standard for the programming language BASIC, which mas near-ubiquitous in home computers, plus a data format for [[Compact Cassette]]s which could be read and written on all computers for which BASICODE was available. As a result, the implementation of BASICODE was exclusively dependent on additional software and thus was not limited to computers by specific manufacturers. The [[installed base]] of BASICODE is hard to estimate, because both the Bascoders and the programs written in BASICODE were freely available. There was a Bascoder for nearly every home computer sold during this era. Commercially, BASICODE was of no importance because it was always shared for free. It must be stated that BASICODE was, by design, unable to use the capabilities of the host computers to their full extent. The language standard defined by BASICODE was the lowest common denominator of all relevant computer systems. This concept was partially abandoned only with BASICODE3/3C, as some computers or computer variants like the [[ZX80]]/[[ZX81]] and the [[KC87]] were not capable of graphics and color and the new sections of BASICODE using these capabilities were not usable on them. Especially for applications that relied on timing and graphics or sound, for example [[computer games]], BASICODE was clearly inferior to programs written in "native" BASIC or [[machine code]]. The strengths of BASICODE were in the areas of application design, education software and data sharing. The BASICODE format was also used for [[Pascal (programming language)|Pascal]] programs. Pascal was a much more consistent language across systems, but compilers were available only for very few types of home computers. The underlying concept of BASICODE, which is the definition of a language standard for platform-independent software development and the implementation of said standard as system-specific runtimes (Bascoder) was later revisited in the programming language [[Java (programming language)|Java]], in the form of the [[operating system]]-specific [[Java Virtual Machine]]s which execute Java programs. Additionally, the distribution of data and information in the BASICODE data format is reminiscent of current platform-agnostic document types like the [[Portable Document Format]] (PDF) and the PDF reader applications it necessitates. ==The BASICODE data format== [[Image:Basicode2.jpg|200px|thumb|A BASICODE compact audio cassette, the typical ''BASICODE'' data storage medium.]] In the BASICODE format, the recording of programs is analogous to the recording of data. So, when recording programs, the commands are not read and written in the form of single [[byte]] units ([[token (parser)|token]]s), but character by character. A data block begins with the character 02 (STX, start of text), and ends with the character 03 (ETX, end of text). After ETX, a check byte made up of the previous bytes including STX and ETX by binary addition (XOR), is transmitted. A 0D character (decimal 13) marks the end of a line during transmission. Data files created by programs are able to use all characters as data and must contain no control characters. They are read and written in blocks of 1024 bytes. Each byte is transmitted in the sequence "1 start bit - 8 data bits - 2 stop bits". The data bits are little-endian ordered. The resulting [[redundancy (information theory)|redundancy]] is intended for maximising compatibility with different computers. Bit 7 is always 0, which is especially useful when transmitting [[ASCII]] characters, because these always have bit 7 set to 0. For the audio signals, square waves in the form of a 1200 [[Hertz|Hz]] wave for a "0" bit and two 2400 Hz waves for a "1" bit are used, resulting in a time of 1/1200 seconds for each bit. A pause longer than 1/1800 seconds between waves marks the beginning of a byte, making the following wave the start bit. After the start bit and before the eight data bits is another pause of at least 1/1800 seconds. A 2400 Hz signal with a length of five seconds marks the beginning of a transmission and is used for synchronization of the reading program. At the end of the transmission, a 2400 Hz signal with a length of one second is sent. The theoretical [[data rate]] of this format is 1200 bits per second. Considering the transmission of three additional bits per data byte and the pauses before and after the start bit, this results in a usable data rate of 102 bytes per second, and about 6 kilobytes per minute. ==The BASICODE language standard== ===BASICODE 2=== '''Commands, functions and operators allowed in BASICODE 2''' The following elements of the BASIC programming language are available in the BASIC dialects of all supported computer models with identical functionality. So, they are part of the BASICODE language standard as well. * Commands: <pre> DATA DIM END FOR GOSUB GOTO IF INPUT NEXT ON PRINT READ REM RESTORE RETURN RUN STEP STOP THEN TAB TO </pre> * Functions: <pre> ABS ASC ATN COS EXP INT LEN LOG SGN SIN SQR TAN VAL CHR$ LEFT$ MID$ RIGHT$ AND OR NOT </pre> * Mathematical operators: <pre> ^ Exponential function * Multiplication / Division + Addition and concatenation of string variables - Subtraction </pre> * Comparison operators: <pre> = <> < > <= >= </pre> '''Routines implemented in the Bascoder of BASICODE 2''' The following routines are implemented in the various BASIC dialects with differing and syntax-incompatible commands and have to be provided by the Bascoder. By calling them via GOSUB, they are available in the same form across all supported computers. <pre> GOSUB 100 Clear screen GOSUB 110 Set the cursor to the specified position The position is passed in the variables HO and VE GOSUB 120 Get the position of the cursor The values are returned in the variables HO and VE GOSUB 200 Read a character from the keyboard The character is returned in the variable IN$ IN$ is returned empty if no key is pressed GOSUB 210 Wait for a keypress The character is returned in the variable IN$ GOSUB 250 Play a short tone ("beep") GOSUB 260 Create a random number between 0 and 1 The 