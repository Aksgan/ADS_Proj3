! Name !! Remarks |- | [http://dsource.org/projects/dmocks DMocks] || |- |} == [[Java (programming language)|Java]] == {| class="wikitable" |- ! Name !! Remarks |- | [http://www.easymock.org/ EasyMock] || |- | [http://www.jmock.org/ JMock] || |- | [https://jmockit.dev.java.net/ JMockit] || |- | [http://mockito.org Mockito] || |- | [http://code.google.com/p/mockachino Mockachino] || |- | [https://mocquer.dev.java.net/ Mocquer] || |- | [http://moxiemocks.org/ Moxie] || |- | [http://rmock.sourceforge.net/ rMock] || |- | [http://mocklib.sourceforge.net/ MockLib] || |- | [http://seven-mock.sourceforge.net/ SevenMock] || |- | [http://code.google.com/p/powermock/ PowerMock] || |- |} == [[JavaScript]] == {| class="wikitable" |- ! Name !! Remarks |- | [http://jsmock.sourceforge.net JSMock] || |- | [http://code.google.com/p/jsmocktool/ JSMockTool] || |- | [http://mock4js.sourceforge.net/ Mock4JS] || |- | [http://jsmockito.org/ JSMockito] || |- | [http://closure-library.googlecode.com/svn/docs/class_goog_testing_Mock.htm Closure Library testing.Mock] || |- | [http://boss.bekk.no/display/BOSS/Jack Jack] || |- |} == [[.NET Framework|.NET]] programming languages == {| class="wikitable" |- ! Name !! Remarks |- | [http://code.google.com/p/fakeiteasy/ FakeItEasy] || |- | [[Moq]] || |- | [http://www.prettyobjects.com/pocmock.aspx POCMock] || |- | [http://ayende.com/projects/rhino-mocks.aspx Rhino Mocks] || |- | [http://www.jayflowers.com/doku/doku.php?id=doubler Doubler] || |- | [http://www.telerik.com/products/mocking.aspx JustMock] || |- |} ==[[Objective-C]]== {| class="wikitable" |- ! Name !! Remarks |- | [http://www.mulle-kybernetik.com/software/OCMock OCMock] || |- |} == [[Pascal (programming language)]]== {| class="wikitable" |- ! Name !! Remarks |- | [http://sourceforge.net/projects/pascalmock/ Pascal Mock] || |- |} == [[Perl]] == {| class="wikitable" |- ! Name !! Remarks |- | [http://search.cpan.org/dist/Test-MockObject/lib/Test/MockObject.pm Test::MockObject] || |- | [http://search.cpan.org/perldoc?Test::Mock::Class Test::Mock::Class] || |- |} ==[[PHP]]== {| class="wikitable" |- ! Name !! Remarks |- | [http://simpletest.org SimpleTest] || |- | [http://yaymock.googlecode.com/ Yay! Mock] || |- | [http://snaptest.googlecode.com SnapTest] || |- | [http://www.phpunit.de/manual/3.0/en/mock-objects.html PHPUnit] || |- |} == [[Python (programming language)|Python]] == {| class="wikitable" |- ! Name !! Remarks |- | [https://github.com/has207/flexmock FlexMock] || [https://github.com/has207/flexmock/wiki/Documentation Usage Documentation] |- | [http://pycheesecake.org/browser/trunk/tests/unit/mock.py Dave Kirby's python-mock library] || |- | [http://www.voidspace.org.uk/python/mock/ Mock] || |- | [http://pmock.sourceforge.net/ pMock] || |- | [http://code.google.com/p/pymox/ pymox] || |- | [http://labix.org/mocker Python Mocker] || |- | [http://code.google.com/p/pyamof/ Yet Another Mock Framework] || |- |} == [[Ruby (programming language)|Ruby]] == {| class="wikitable" |- ! Name !! Remarks |- | [http://mocha.rubyforge.org Mocha] || |- | [http://rspec.rubyforge.org RSpec] || |- | [http://flexmock.rubyforge.org/ FlexMock] || |- | [http://hardmock.rubyforge.org/ HardMock] || |- |} == [[Smalltalk]] == {| class="wikitable" |- ! Name !! Remarks |- | [http://www.macta.f2s.com/Thoughts/smock.html SMock] || |- |} [[Category:Mock object frameworks]] [[Category:Lists of programming languages]]</text> </page> <page> <id>22211</id> <title>List of multi-paradigm programming languages</title> <text>{{Original research|date=August 2009}} [[Programming language]]s can be grouped by the number and types of [[Programming paradigm|paradigms]] supported. ==Paradigm summaries== A concise reference for the programming paradigms listed in this article. ; [[Actor model]] : concurrent computation with "actors" that makes local decisions in response to the environment (capable of selfish or competitive behavior) ; [[Constraint programming]] : relations between variables are expressed as constraints (or constraint networks), directing allowable solutions (uses constraint satisfaction or [[simplex algorithm]]) ; [[Dataflow]] : forced recalculation of formulas when data values change (e.g. [[Spreadsheet]]s) ; [[Declarative programming]] : describes actions (e.g. [[HTML]] describes a page but not how to actually display it) ; [[Functional programming]] : uses evaluation of mathematical functions and avoids state and mutable data ; [[Imperative programming]] : explicit statements that change a program state ; [[Logic programming]] : uses object-oriented programming that avoids classes and implements inheritance via the cloning of instances ; [[Reflective programming]] : special case of [[metaprogramming]] (modification of programs as data by another program or ability to do part of the work in runtime instead of compile time) in which the program modifies or extends itself ; [[Rule-based programming]] : a network of rules of thumb that comprise a knowledge base and can be used for expert systems and problem deduction & resolution ; [[Visual programming language]] : manipulating program elements graphically rather than by specifying them textually (e.g. [[Simulink]]); also known as ''diagrammatic programming'' [http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=381508]. ==Two paradigm-languages== *[[Visual programming language|visual]], [[Dataflow programming|dataflow]] **[[LabVIEW]] *[[Imperative programming|imperative]], [[Functional programming|functional]] **[[APL (programming language)|APL]] *[[Functional programming|functional]], [[Logic programming|logic]] **[[Algebraic Logic Functional programming language|ALF]] *[[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Functional programming|functional]] **[[Dylan (programming language)|Dylan]] {{Citation needed|date=March 2007}} **[[Sather]] {{Citation needed|date=March 2007}} **[[Claire (programming language)|Claire]] *[[Functional programming|functional]], [[Visual programming language|visual]] **[[Spreadsheet]]s *[[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]) **[[AmigaE]] {{Citation needed|date=March 2007}} **[[Simula]] {{Citation needed|date=March 2007}} *[[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), ([[Prototype-based programming|prototype-based]]) **[[Metaobject]] protocols *[[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Visual programming language|visual]] **[[Lava (programming language)|Lava]] ==Three paradigm-languages== * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]], [[Visual programming language|visual]] **[[PointDragon]] * [[Functional programming|functional]], [[Concurrent programming language|concurrent]], [[dataflow]] ** [[SISAL]] * [[Functional programming|functional]], [[Concurrent programming language|concurrent]], [[Distributed programming|distributed]] ** [[Erlang (programming language)|Erlang]] * [[Functional programming|functional]], [[Concurrent programming language|concurrent]], [[logic programming|logic]] ** [[Curry (programming language)|Curry]] * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Concurrent programming language|concurrent]] **[[ChucK]] {{Citation needed|date=March 2007}} * [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Visual programming language|visual]], [[dataflow]] ** [[Prograph]] * [[Imperative programming|imperative]], [[Functional programming|functional]], [[logic programming|logic]] ** [[Poplog]] * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Functional programming|functional]] ** [[BETA]] {{Citation needed|date=March 2007}} ** [[F Sharp (programming language)|F#]] {{Citation needed|date=January 2008}} ** [[J (programming language)|J]] {{Citation needed|date=March 2007}} ** [[Perl]] {{Citation needed|date=March 2007}} ** [[Pliant]] {{Citation needed|date=March 2007}} ** [[Tcl]] with [[Incr Tcl|itcl]] or [[XOTcl]] extensions {{Citation needed|date=March 2007}} ** [[PHP]]<ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.functions.php Chapter 17. Functions]</ref><ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.oop5.php Chapter 19. Classes and Objects (PHP 5)]</ref><ref>[http://php.net/manual/en/index.php PHP Manual], [http://docs.php.net/functions.anonymous Anonymous functions]</ref> * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Prototype-based programming|prototype-based]]), [[Functional programming|functional]] **[[ECMAScript]] <ref>[http://www.crockford.com/javascript/little.html The Little JavaScripter] demonstrates fundamental commonality with Scheme, a functional language.</ref><ref>[http://mckoss.com/jscript/object.htm Object Oriented Programming in JavaScript] gives an overview of object-oriented programming techniques in JavaScript.</ref> ***[[ActionScript]] ***[[DMDScript]] ***[[E4X]] ***[[JavaScript]] ***[[JScript]] ** [[Lua (programming language)|Lua]] {{Citation needed|date=March 2007}} ** [[Tcl]] with [[Snit]] extension {{Citation needed|date=March 2007}} * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Generic programming|generic]] ([[template metaprogramming]]) ** [[C++]] ** [[D (programming language)|D]] version 1.0 ==Four paradigm-languages== * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Reflection (computer science)#|reflective]], [[Generic programming|generic]] **[[Java (programming language)|Java]] * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Reflection (computer science)#|reflective]], [[Functional programming|functional]] ** [[Python (programming language)|Python]] <ref>[http://www-128.ibm.com/developerworks/library/l-prog.html Charming Python: Functional programming in Python, Part 1<!-- Bot generated title -->]</ref> ** [[Ruby (programming language)|Ruby]] * [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]]), [[Functional programming|functional]], [[Generic programming|generic]] ([[template 