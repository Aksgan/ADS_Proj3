analysis</title> <text>In [[computer science]], '''live variable analysis''' (or simply '''liveness analysis''') is a classic [[data flow analysis]] performed by [[compiler]]s to calculate for each program point the [[Variable (programming)|variables]] that may be potentially read before their next write, that is, the variables that are ''live'' at the exit from each program point. Stated simply: a variable is '''live''' if it holds a value that may be needed in the future. It is a "backwards may" analysis. The analysis is done in a backwards order, and the dataflow [[confluence operator]] is [[set union]]. <table> <tr><td> <code> L1: b := 3; L2: c := 5; L3: a := f(b + c); goto L1; </code> </td> <td> The set of live variables at line L2 is {<code>b</code>, <code>c</code>} because both are used in the addition, and thereby the call to <code>f</code> and assignment to <code>a</code>. But the set of live variables at line L1 is only {<code>b</code>} since variable <code>c</code> is updated in line 2. The value of variable <code>a</code> is never used, so the variable is never live. Note that <code>f</code> may be stateful, so the never-live assignment to <code>a</code> can be eliminated, but there is insufficient information to rule on the entirety of <code>L3</code>. </td></tr> </table> The dataflow equations used for a given basic block ''s'' and exiting block ''f'' in live variable analysis are (GEN(s) means the set of variables used in s before any assignment; KILL (s) means the set of variables assigned a value in s (in many books, KILL (s) is also defined as the set of variables assigned a value in s ''before any use'', but this doesn't change the solution of the dataflow equation): :<math> {\mbox{LIVE}}_{in}[s] = {\mbox{GEN}}[s] \cup ({\mbox{LIVE}}_{out}[s] - {\mbox{KILL}}[s]) </math> :<math> {\mbox{LIVE}}_{out}[final] = {\emptyset} </math> :<math> {\mbox{LIVE}}_{out}[s] = \bigcup_{p \in succ[S]} {\mbox{LIVE}}_{in}[p] </math> :<math> {\mbox{GEN}}[d : y \leftarrow f(x_1,\cdots,x_n)] = \{x_1,...,x_n\} </math> :<math> {\mbox{KILL}}[d : y \leftarrow f(x_1,\cdots,x_n)] = \{y\} </math> The in-state of a block is the set of variables that are live at the start of the block. Its out-state is the set of variables that are live at the end of it. The out-state is the union of the in-states of the block's successors. The transfer function of a statement is applied by making the variables that are written dead, then making the variables that are read live. <table> <tr><td> // in: {} b1: a = 3; b = 5; d = 4; x = 100; //x is never being used later thus not in the out set {a,b,d} if a > b then // out: {a,b,d} //union of all (in) successors of b1 => b2: {a,b}, and b3:{b,d} // in: {a,b} b2: c = a + b; d = 2; // out: {b,d} // in: {b,d} b3: endif c = 4; return b * d + c; // out:{} </td> </tr> </table> The in-state of b3 only contains ''b'' and ''d'', since ''c'' has been written. The out-state of b1 is the union of the in-states of b2 and b3. The definition of ''c'' in b2 can be removed, since ''c'' is not live immediately after the statement. Solving the data flow equations starts with initializing all in-states and out-states to the empty set. The work list is initialized by inserting the exit point (b3) in the work list (typical for backward flow). Its computed out-state differs from the previous one, so its predecessors b1 and b2 are inserted and the process continues. The progress is summarized in the table below. {| class="wikitable" |- ! processing ! in-state ! old out-state ! new out-state ! work list |- | b3 | {} | {} | {b,d} | (b1,b2) |- | b1 | {b,d} | {} | {} | (b2) |- | b2 | {b,d} | {} | {a,b} | (b1) |- | b1 | {a,b,d} | {} | {} | () |} Note that b1 was entered in the list before b2, which forced processing b1 twice (b1 was re-entered as predecessor of b2). Inserting b2 before b1 would have allowed earlier completion. Initializing with the empty set is an optimistic initialization: all variables start out as dead. Note that the out-states cannot shrink from one iteration to the next, although the out-state can be smaller than the in-state. This can be seen from the fact that after the first iteration the out-state can only change by a change of the in-state. Since the in-state starts as the empty set, it can only grow in further iterations. <!-- Is this paragraph relevant? --> Recently {{As of|2006|lc=on}}, various program analyses such as live variable analysis have been solved using [[Datalog]]. The Datalog specifications for such analyses are generally an order of magnitude shorter than their imperative counterparts (e.g. [[iterative analysis]]), and are at least as efficient.<ref>{{cite book | author=Whaley et al. | title=Using Datalog with Binary Decision Diagrams for Program Analysis | year=2004}}</ref> ==References== <references/> [[Category:Static code analysis]]</text> </page> <page> <id>22414</id> <title>Livermore loops</title> <text>'''Livermore loops''' (also known as the '''Livermore Fortran kernels''' or '''LFK''') is a [[Benchmark (computing)|benchmark]] for [[parallel computing|parallel computers]]. It was created by Francis H. McMahon from scientific [[source code]] run on computers at [[Lawrence Livermore National Laboratory]]. It consists of 24 [[Do while loop|do loops]], some of which can be vectorized, and some of which cannot. The benchmark was published in 1986 in ''Livermore fortran kernels: A computer test of numerical performance range''.<ref>F. H. McMahon. Livermore fortran kernels: A computer test of numerical performance range. Technical Report UCRL-53745, Lawrence Livermore National Laboratory, Livermore, CA, December 1986. NTIS report #[http://www.ntis.gov/search/product.aspx?ABBR=DE87009360 DE87009360].</ref> The Livermore loops were originally written in [[Fortran]], but have since been ported to many programming languages. Each loop carries out a different mathematical kernel<!-- The article titled [[kernel (mathematics)]] does not include this usage. What does it mean? -->. Those kernels are: [[hydrodynamics]] fragment, incomplete [[Cholesky decomposition|Cholesky]] [[conjugate gradient]], [[inner product]], banded [[linear system]]s solution, tridiagonal linear systems solution, general [[linear recurrence]] equations, [[equation of state]] fragment, alternating direction [[implicit integration]], [[integrate predictor]]s, [[difference 