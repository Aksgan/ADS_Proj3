[[round-trip engineering]] that provides support for adapting implementation artifacts. * Specialised Skillsets: Practitioners of MDA based software engineering are (as with other toolsets) required to have a high level of expertise in their field. Current expert MDA practitioners (often referred to as Modeller/Architects) are scarce relative to the availability of traditional developers.<ref name=amblermda>[http://www.agilemodeling.com/essays/readyForMDA.htm "Are You Ready For the MDA?"]</ref> * OMG Track Record: The OMG consortium who sponsor the MDA approach (and own the MDA trademark) also introduced and sponsored the CORBA standard which itself failed to materialise as a widely utilised standard<ref name=corba>[http://www.acmqueue.com/modules.php?name=Content&pa=showpage&pid=396 "The Rise and Fall of CORBA"]</ref>. * Uncertain Value Proposition (UVP): As discussed, the vision of MDA allows for the specification of a system as an abstract model, which may be realized as a concrete implementation (program) for a particular computing platform (e.g. .NET). Thus an application that has been successfully developed via a pure MDA approach could theoretically be ported to a newer release .NET platform (or even a Java platform) in a deterministic manner &ndash; although significant questions remain as to real-world practicalities during translation (such as user interface implementation). Whether this capability represents a significant value proposition remains a question for particular adopters. Regardless, adopters of MDA who are seeking value via an "alternative to programming" should be very careful when assessing this approach. The complexity of any given problem domain will always remain, and the programming of business logic needs to be undertaken in MDA as with any other approach. The difference with MDA is that the programming language used (e.g. xtUML) is more abstract (than, say, Java or C#) and exists interwoven with traditional UML artifacts (e.g. class diagrams). Whether programming in a language that is more abstract than mainstream [[Third-generation programming language|3GL]] languages will result in systems of better quality, cheaper cost or faster delivery, is a question that has yet to be adequately answered. == Conferences == Among the various conferences on this topic we may mention [http://www.ecmda-fa.org/ ECMDA], the European Conference on MDA and also [[MoDELS]], former firmed as <<UML>> conference series (till 2004), the [http://mdaforum.soluta.net Italian Forum on MDA] in collaboration with the [[OMG]]. There are also several conferences and workshops (at [[OOPSLA]], [[ECOOP]] mainly) focusing on more specific aspects of MDA like model transformation, model composition, and generation. == Code generation controversy == <!-- MDA isn't just about UML - this section needs to be rewritten --> [[Automatic programming|Code generation]] means that the user abstractly models solutions, which are connoted by some model data, and then an automated tool derives from the models parts or all of the [[source code]] for the software system. In some tools, the user can provide a skeleton of the program source code, in the form of a source code [[Template (programming)|template]] where predefined tokens are then replaced with program source code parts during the code generation process. An often cited criticism is that the UML diagrams just lack the detail which is needed to contain the same information as is covered with the program source. Some developers even claim that "the Code ''is'' the design" <ref>http://www.developerdotstar.com/mag/articles/reeves_design_main.html by Jack W. Reeves</ref><ref>[http://www.bleading-edge.com/ Bleading-Edge<!-- Bot generated title -->]</ref>. ==See also== * [[Algebra of Systems]] * [[ATLAS Transformation Language]] * [[Code generation]] * [[CodeGear ECO]] * [[Customer Relationship Management]] * [[Compiere]] * [[Domain-driven design]] * [[Enterprise Resource Planning]] * [[Executable UML]] * [[Executable Architecture]] * [[Jean-Marc Jézéquel]] * [[Meta-Object Facility]] * [[Metamodeling]] * [[Model-driven engineering]] * [[Model-driven integration]] * [[Model Transformation Language]] * [[Modeling Maturity Levels]] * [[openCRX]] * [[Platform-independent model|Platform Independent Model]] * [[Platform-specific model|Platform Specific Model]] * [[Software factory]] * [[Unified Modeling Language]] * [[Universal Systems Language]] * [[QVT]] * [[Web engineering]] * [[WebML]] * [http://Witchcraftmda.com Witchcraftmda] == References == {{reflist|2}} == Further reading == * David S. Frankel. ''Model Driven Architecture: Applying MDA to Enterprise Computing''. John Wiley & Sons, ISBN 0-471-31920-1 * Meghan Kiffer ''The MDA Journal: Model Driven Architecture Straight From The Masters''. ISBN 0-929652-25-8 * Anneke Kleppe (2003). ''MDA Explained, The Model Driven Architecture: Practice and Promise''. Addison-Wesley. ISBN 0-321-19442-X * [[Stephen J. Mellor]] (2004). ''MDA Distilled, Principles of Model Driven Architecture''. Addison-Wesley Professional. ISBN 0-201-78891-8 * Chris Raistrick. ''Model Driven Architecture With Executable UML''. Cambridge University Press, ISBN 0-521-53771-1 * Stanley J. Sewall. ''Executive Justification for MDA'' * Soylu A., De Causmaecker Patrick. ''Merging model driven and ontology driven system development approaches pervasive computing perspective'', in Proc 24th Intl Symposium on Computer and Information Sciences. 2009, pp 730–735. == External links == * [http://www.omg.org/mda/ OMG's MDA Web site] {{UML}} {{DEFAULTSORT:Model-Driven Architecture}} [[Category:Systems engineering]] [[Category:Unified Modeling Language]] [[ca:Model Driven Architecture]] [[cs:Model driven architecture]] [[de:Model Driven Architecture]] [[es:Model Driven Architecture]] [[fa:معماری مدل-محور]] [[fr:Model driven architecture]] [[gl:Model-driven architecture]] [[id:Model-driven architecture]] [[it:Architettura guidata dal modello]] [[it:Model Driven Architecture]] [[nl:Model driven architecture]] [[ja:モデル駆動型アーキテクチャ]] [[pl:Model Driven Architecture]] [[pt:Model Driven Architecture]] [[ru:Model Driven Architecture]] [[vi:Kiến trúc định hướng mô hình]] [[zh:模型驱动架构]]</text> </page> <page> <id>24866</id> <title>Model-driven software development</title> <text>{{Multiple issues||orphan =November 2010}} '''Model-driven software development''' (MDSD) is an alternative to [[Round-trip engineering]]. Round-trip engineering is the concept of being able to make any kind of change to a [[model]] as well as to the [[code]] generated from that model. The changes always propagate [[bidirectional]] and both artifacts are always consistent. The transition from code to model(the reverse Engineering) is especially interesting in this context.<ref name="lulu">Model-Driven Software Development,(Technology, Engineering, Management) Thomas Stahl, Markus Volter</ref> In the context of these approaches the model typically prossesses the same [[abstraction level]] as the code(that is, 'one rectangle per class'). It is actually the [[visualization]] of a program's structure. In such a scenario, it is both feasible and useful to track changes to the code in the model automatically. MDSD takes a different approach: the model is definitely more abstract than the code generated from it. Thus it is generally impossible to keep the model consistent automatically after a [[manual change]] of the [[generated code]]. For this reason, manual changes to generated code should be avoided.A precise definition that states which parts are generated and which are implemented manually is 