to be standard and interoperable ways to: * Demarcate and coordinate web service activities * Propagate and coordinate context information * Notify participants of changes in an activity * Define the relationship of coordinators to each other * Recover transactions predictably and consistently in a business process execution. * Interact across multiple transaction models (such as are used in [[CORBA]], [[CICS]], [[Enterprise JavaBean]]s or [[.NET Framework|.NET]] environments)<ref>[http://www.oasis-open.org/committees/ws-caf/charter.php OASIS Web Services Composite Application Framework Charter], [[OASIS (organization)|OASIS]], [[2006]]</ref>. ==See also== * [[WS-Coordination]] - an alternative transaction standard == References == <references/> [[Category:Web service specifications]] [[Category:Web services]] [[Category:Enterprise application integration]]</text> </page> <page> <id>39760</id> <title>WYMeditor</title> <text>{{unreferenced|date=May 2010}} {{notability|products|date=April 2009}} {{Infobox_Software | name = WYMeditor | latest_release_version = 0.5-rc3 | latest_release_date = {{release date|2010|06|3}} | operating_system = [[Cross-platform]] | genre = [[HTML editor]] | license = [[GNU General Public License]], [[MIT License]] | website = [http://www.wymeditor.org/ www.wymeditor.org] }} '''WYMeditor''' is an [[open source]] [[WYSIWYM]] [[text editor]] written in the [[JavaScript]] programming language for editing content on web pages. It is based on the [[jQuery]] [[JavaScript library|JavaScript framework]]. It differs from other embeddable text editors such as [[FCKeditor]] and [[TinyMCE]] in that it concentrates on the semantics and meaning of content leaving out visual details. Unlike [[WYSIWYG]] editors, it explicitly shows the [[XHTML]] structure of content to the user. Presentation and visual coherence is added using [[CSS]] which is either provided prepackaged, or can be customized. WYMeditor is web server agnostic meaning it can be integrated into web pages built with any server side language. Amongst other features, although lacking in some areas, WYMeditor statedly has more readable and cleaner source code, the opposite of which is often said about its competitors. == External links == * [http://www.wymeditor.org/ WYMeditor web site] * [http://sourceforge.net/projects/wym-editor WYMeditor on SourceForge] * [http://drupal.org/project/wymeditor WYMeditor Drupal module] * [http://www.ohloh.net/p/wym-editor WYMeditor on Ohloh] ==See also== * [[FCKeditor]] * [[TinyMCE]] * [http://www.standards-schmandards.com/2006/wysiwym/ Visually Editing Semantics, WYSIWYM] * [http://www.456bereastreet.com/archive/200612/forget_wysiwyg_editors_use_wysiwym_instead/ Forget WYSIWYG editors - use WYSIWYM instead] * [http://mashable.com/2008/11/03/embeddable-html-editors/ 6 Embeddable HTML Editors for Your Website Compared] [[Category:Free HTML editors]] [[Category:Free text editors]] [[Category:JavaScript-based HTML editors]]</text> </page> <page> <id>39768</id> <title>Wait (command)</title> <text>{{this|the Unix command|Wait}} {{lowercase|title=wait}} In [[computing]], '''<code>wait</code>''' is a [[command (computing)|command]] which pauses until execution of a [[Background (computer software)|background process]] has ended. ==Usage== <source lang="bash"> wait [n] </source> where '''n''' is the [[process identifier|pid]] or [[Job control (Unix)#Job ID|job ID]] of a currently executing background process (job). If '''n''' is not given, the command waits until all jobs known to the invoking shell have terminated. '''wait''' normally returns the [[exit status]] of the last job which terminated. It may also return 127 in the event that '''n''' specifies a non-existent job or zero if there were no jobs to wait for. Because <code>wait</code> needs to be aware of the job table of the current shell execution environment, it is usually implemented as a [[shell builtin]]. ==Example== This command can be useful where part of a script can execute in parallel to implement a barrier where an upcoming section depends on the successful completion of the preceding sections. The following example will fetch the '''src/''' directory from a machine named '''iona''' using [[rsync]] and simultaneously update the libraries on which this program depends, before building the combination. <source lang="bash"> #!/bin/bash # Parallel update script which makes use of the wait command # Update local copy rsync iona:src/ . & # Upgrade required libraries, or exit indicating failure if make failed for some reason make -C lib || exit 1 # Wait for rsync to terminate (may have already happened) and finish the job, unless rsync failed wait && make </source> ==See also== * [[Wait (system call)]] ==External links== *[http://www.gnu.org/software/bash/manual/bashref.html GNU bash reference manual] {{unix commands}} [[Category:Unix SUS2008 utilities]] [[Category:Unix process and task management-related software]] [[ca:Wait]] [[cs:Wait (Unix)]] [[el:Wait (Unix)]] [[es:Wait]] [[ja:Wait]] [[pl:Wait (Unix)]] [[ru:Wait (команда)]] [[uk:Wait]]</text> </page> <page> <id>39782</id> <title>Walled garden (technology)</title> <text>{{about|a technology term||Walled garden (disambiguation)}} A '''walled garden''' is an analogy used in various senses in information technology. In the telecommunications and media industries, a "walled garden" refers to a carrier's or service provider's control over applications, content, and media on platforms (such as mobile devices) and restriction of convenient access to non-approved applications or content. For example, in telecommunications, the services and applications accessible on any device on a given wireless network were historically tightly controlled by the mobile operators. The mobile operators determined which applications from which developers were available on a device's home portal or home page. This has long been a central issue constraining the telecommunications sector, as developers face huge hurdles in getting their applications onto devices and into the hands of end-users. More generally, a '''walled garden''' refers to a closed or exclusive set of information services provided for users. This is in contrast to giving consumers open access to applications and content. Another use of the term refers to quarantining [[malware]]-infected computers which exhibit symptoms of [[botnet]] activity in such a way that the user can still access tools to disinfect the machine, usually with a [[Web browser]].<ref>[http://www.maawg.org/about/whitepapers/MAAWG_Walled_Garden_BP_2007-09.pdf MAAWG Best Practices for the Use of a Walled Garden], [[MAAWG]] whitepaper, October, 2007.</ref> The term can also refer to a situation in which an unauthenticated user is given access to a limited environment for the purpose of setting up an account. After the account is established, the user is allowed out of the walled garden. Some walled gardens are created and maintained by the use of firmware upgrades that wall out alternatives (e.g., [[Apple Inc.]] [[iPhone]] hacks). Alternatively, a walled garden can be information that has few authors and rich interlinkage, but a paucity of links to and from its surrounding information network.<ref>[http://c2.com/cgi/wiki?WalledGarden Walled gardens on the Wiki Wiki Web]</ref> (See [[Wikipedia: Walled garden]].) == Examples == {{Unreferenced section|date=April 2010}} Some examples of walled gardens: * [[NTT DoCoMo]]'s [[i-mode]] is a [[wireless Internet service]] popular in [[Japan]] and elsewhere. * [[America Online]]. AOL started its business with revenue-sharing agreements with certain information providers in their subscriber-only space. * [[Full Service Network]]. A pilot project from [[Time 