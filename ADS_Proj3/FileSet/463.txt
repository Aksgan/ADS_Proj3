done in wiki style, with a version history for each page and special markup tags. As with wikis, the fact that a site is a bliki does not mean that any reader can edit any page; editing permission is at the discretion of the administrator(s). According to software expert (and bliki enthusiast) [[Martin Fowler]], the name and concept were conceived in 2003 by wiki originator [[Ward Cunningham]].<ref>[http://martinfowler.com/bliki/WhatIsaBliki.html MF Bliki: WhatIsaBliki<!-- Bot generated title -->]</ref> == Software that supports blikis == * [[Confluence (software)|Confluence]] * [[DokuWiki]] * [http://folksonomy.co/ Folksonomy] * [[ikiwiki]] * [[Mediawiki]] through the [[mw:Extension:Wikilog|Wikilog]] and [[mw:Extension:My blog|My blog]] extensions * [[MoinMoin]] * [[OddMuse]] * [[pimki]] * [[PmWiki]] * [[SnipSnap]] * [[Tiki Wiki CMS Groupware]] * [[TWiki]] * [[XWiki]] ==References== {{reflist}} {{Wiki topics}} [[Category:Blikis| ]] [[Category:Wikis]] [[Category:Blogs]] [[Category:Web 2.0]] {{web-stub}} [[ca:Bliki]] [[fr:Bliki]] [[it:Bliki]] [[ja:Bliki]] [[pt:Bliki]] [[vi:Bliki]]</text> </page> <page> <id>4116</id> <title>Blobotics</title> <text>{{Orphan|date=February 2009}} '''Blobotics''' is a term describing research into chemical based computer processors based on [[ions]] rather than [[electrons]]. [[Andrew Adamatzky]], a computer scientist at the [[University of the West of England]] in [[Bristol]] used the term in an article in [[New Scientist]] March 28, 2005 [http://www.newscientist.com/channel/fundamentals/mg18524921.000-introducing-the-glooper-computer.html]. The aim is to create 'liquid logic gates' which would be 'infinitely reconfigurable and self-healing'. The process relies on the [[Belousov-Zhabotinsky reaction]], a repeating cycle of three separate sets of reactions. Such a processor could form the basis of a [[robot]] which, using artificial sensors, interact with its surroundings in a way which mimics living creatures. The coining of the term was featured by [[ABC radio]] in [[Australia]] [http://www.abc.net.au/newsradio/txt/s1363466.htm]. ==References== * Motoike I., Adamatzky A. "Three-valued logic gates in reaction-diffusion excitable media." ''Chaos, Solitons & Fractals'' 24 (2005) 107-114 * Adamatzky, A. "Collision-based computing in Belousov–Zhabotinsky medium." ''Chaos, Solitons & Fractals'' 21:(5), (2004), p1259-1264 DOI:10.1016/j.chaos.2003.12.068 ==External links== * [http://uncomp.uwe.ac.uk/adamatzky/index.html Andy Adamatzky] Homepage at the University of the West of England, Bristol [[Category:Robots]] {{Robo-stub}}</text> </page> <page> <id>4117</id> <title>Block-oriented terminal</title> <text>{{Unreferenced stub|auto=yes|date=December 2009}} A '''block-oriented terminal''' is a type of [[computer terminal]] that communicates with its host in blocks of data, usually chunks of text, as opposed to a [[character-oriented terminal]] that communicates with its host one character at a time. The [[IBM 3270]] is perhaps the most common implementation of a block-oriented terminal. The host sends to the terminal a description of the fields to be displayed. The terminal processes and then displays the page. When the user submits data, like updates in a [[database]] entry, an entire field is sent to the host in one burst. This behavior has the advantage of causing less [[Load (computing)|system load]] on the host and less [[network traffic]] than [[character-oriented terminal]]s. They are also more responsive to the user, especially over slow connections, since editing within a field is done locally on the terminal itself. {{Commons category|Data terminals}} ==See also== * [[Dumb terminal]] * [[Text user interface]] * [[Command line interface]] {{DEFAULTSORT:Block-Oriented Terminal}} [[Category:Computer terminals]] {{Compu-hardware-stub}}</text> </page> <page> <id>4134</id> <title>Block reflector</title> <text>"A '''block reflector''' is an orthogonal, symmetric matrix that reverses a subspace whose dimension may be greater than one." * see abstract here http://locus.siam.org/SINUM/volume-25/art_0725014.html It is built out of many [[elementary reflector]]s. It is also referred to as a [[triangular factor]], and is a [[triangular matrix]] and they are used in the [[Householder transformation]]. A reflector <math> Q </math> belonging to <math>\mathcal M_n(\R) </math> can be written in the form : <math> Q = I -auu^T </math> where <math>I</math> is the [[identity matrix]] for <math>\mathcal M_n(\R) </math> , <math>a</math> is a [[Scalar (mathematics)|scalar]] and <math>u</math> belongs to <math>\mathcal \R^n </math> . ==LAPACK routines== Here are some of the [[LAPACK]] routines that apply to block reflectors * "*larft" forms the triangular vector T of a block reflector H=I-VTVH. * "*larzb" applies a block reflector or its [[transpose]]/[[conjugate transpose]] as returned by "*tzrzf" to a general [[matrix (mathematics)|matrix]]. * "*larzt" forms the triangular vector T of a block reflector H=I-VTVH as returned by "*tzrzf". * "*larfb" applies a block reflector or its [[transpose]]/[[conjugate transpose]] to a general rectangular matrix. ==See also== * [[Reflection (mathematics)]] * [[Householder transformation]] * [[Unitary matrix]] * [[Triangular matrix]] [[Category:Matrices]] {{algebra-stub}} {{compu-prog-stub}}</text> </page> <page> <id>4139</id> <title>Blocking (computing)</title> <text>{{Mergefrom|blocking (scheduling)|date=February 2009}} {{Refimprove|date=June 2008}} '''Blocking''' occurs when a [[subroutine|function]] does not return until it either completes its task or results in an [[error]]. A process that is blocked is one that waits for the completion of some event, such as an I/O operation <ref>{{harv|Stallings|2004}}</ref> In a hypothetical two [[Process states|state]] model (running and not-running), processes would go onto the (running) queue before being dispatched for execution. In the absence of a blocked state, if priority is measured by holdup time, blocked processes would erroneously get scheduled despite having nothing to operate on. This is undesirable from a processor utilization viewpoint. Hence the efficient use of resources makes a case for a blocked queue in which processes line up until the event dependency resolves. Once the event fires, the process is advanced from blocked state to an imminent one, such as [[Process states#Ready|runnable]]. ==References== {{Reflist}} * <cite id="Stallings2004">{{cite book| title = Operating Systems: Internals and Design Principles | first = William | last = Stallings | year = 2004 | publisher = Prentice Hall | edition = 5th}}</cite> <!-- How does this citation thing work? --> [[Category:Inter-process communication]] {{operating-system-stub}} [[he:פעולה חוסמת]]</text> </page> <page> <id>4145</id> <title>Blog</title> <text>{{About|the type of website}} {{pp-semi-protected|small=yes}} {{Journalism}} A '''blog''' (a [[blend]] of the term '''''web log''''')<ref>{{cite web|url=http://www.rebeccablood.net/essays/weblog_history.html|title=Weblogs: A History And Perspective|last=Blood|first=Rebecca|date=September 7, 2000}}</ref> is a type of [[website]] or part of a [[website]]. Blogs are usually maintained by an individual with regular entries of commentary, descriptions of events, or other material such as graphics or video. Entries are commonly displayed in reverse-chronological order. ''Blog'' can also be used as a verb, meaning ''to maintain or add content to a blog''. Most blogs are interactive, allowing visitors to leave comments and even message each other via widgets on the blogs and it is this interactivity that distinguishes them from other static websites.<ref>{{cite book|last1=Mutum|first1=Dilip|last2=Wang|first2=Qing|editor=Neal M. Burns, Terry Daugherty, Matthew S. Eastin|title=Handbook of Research on Digital 