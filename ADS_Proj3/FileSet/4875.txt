|- | FLDPI || Load &pi; onto stack || |- | FLDZ || Load 0.0 onto stack || |- | FMUL || Multiply || |- | FMULP || Multiply and pop || |- | FNCLEX || Clear exceptions, no wait || |- | FNDISI || Disable interrupts, no wait || 8087 only, otherwise FNOP |- | FNENI || Enable interrupts, no wait || 8087 only, otherwise FNOP |- | FNINIT || Initialize floating point processor, no wait || |- | FNOP || No operation || |- | FNSAVE || Save FPU state, no wait, 8-bit || |- | FNSAVEW || Save FPU state, no wait, 16-bit || |- | FNSTCW || Store control word, no wait || |- | FNSTENV || Store FPU environment, no wait || |- | FNSTENVW || Store FPU environment, no wait, 16-bit || |- | FNSTSW || Store status word, no wait || |- | FPATAN || Partial arctangent || |- | FPREM || Partial remainder || |- | FPTAN || Partial tangent || |- | FRNDINT || Round to integer || |- | FRSTOR || Restore saved state || |- | FRSTORW || Restore saved state || Perhaps not actually available in 8087 |- | FSAVE || Save FPU state || |- | FSAVEW || Save FPU state, 16-bit || |- | FSCALE || Scale by factor of 2 || |- | FSQRT || Square root || |- | FST || Floating point store || |- | FSTCW || Store control word || |- | FSTENV || Store FPU environment || |- | FSTENVW || Store FPU environment, 16-bit || |- | FSTP || Store and pop || |- | FSTSW || Store status word || |- | FSUB || Subtract || |- | FSUBP || Subtract and pop || |- | FSUBR || Reverse subtract || |- | FSUBRP || Reverse subtract and pop || |- | FTST || Test for zero || |- | FWAIT || Wait while FPU is executing || |- | FXAM || Examine condition flags || |- | FXCH || Exchange registers || |- | FXTRACT || Extract exponent and significand || |- | FYL2X || y * log<sub>2</sub>(x) || |- | FYL2XP1 || y * log<sub>2</sub>(x+1) || |} ===Added in specific processors=== ====Added with [[80287]]==== FSETPM ====Added with [[80387]]==== FCOS, FLDENVD, FNSAVED, FNSTENVD, FPREM1, FRSTORD, FSAVED, FSIN, FSINCOS, FSTENVD, FUCOM, FUCOMP, FUCOMPP ====Added with Pentium Pro==== * [[FCMOV]] variants: FCMOVB, FCMOVBE, FCMOVE, FCMOVNB, FCMOVNBE, FCMOVNE, FCMOVNU, FCMOVU * [[FCOMI]] variants: FCOMI, FCOMIP, FUCOMI, FUCOMIP ====Added with SSE==== * FXRSTOR*, FXSAVE* * Also supported on later Pentium IIs, though they do not contain SSE support ====Added with SSE3==== FISTTP (x87 to integer conversion) ===Undocumented instructions=== FFREEP performs FFREE ST(i) and pop stack ==[[SIMD]] instructions== ===[[MMX (instruction set)|MMX]] instructions=== ''added with [[Pentium MMX]]'' EMMS, MOVD, MOVQ, PACKSSDW, PACKSSWB, PACKUSWB, PADDB, PADDD, PADDSB, PADDSW, PADDUSB, PADDUSW, PADDW, PAND, PANDN, PCMPEQB, PCMPEQD, PCMPEQW, PCMPGTB, PCMPGTD, PCMPGTW, PMADDWD, PMULHW, PMULLW, POR, PSLLD, PSLLQ, PSLLW, PSRAD, PSRAW, PSRLD, PSRLQ, PSRLW, PSUBB, PSUBD, PSUBSB, PSUBSW, PSUBUSB, PSUBUSW, PSUBW, PUNPCKHBW, PUNPCKHDQ, PUNPCKHWD, PUNPCKLBW, PUNPCKLDQ, PUNPCKLWD, PXOR ===[[Extended MMX|MMX+]] instructions=== ====added with [[Athlon]]==== Same as the SSE [[SIMD]] Integer Instructions which operated on [[MMX (instruction set)|MMX]] registers. ===[[Extended MMX|EMMX]] instructions=== ====added with [[6x86MX]] from [[Cyrix]], deprecated now==== PAVEB, PADDSIW, PMAGW, PDISTIB, PSUBSIW, PMVZB, PMULHRW, PMVNZB, PMVLZB, PMVGEZB, PMULHRIW, PMACHRIW ===[[3DNow!]] instructions=== ====added with [[K6-2]]==== FEMMS, PAVGUSB, PF2ID, PFACC, PFADD, PFCMPEQ, PFCMPGE, PFCMPGT, PFMAX, PFMIN, PFMUL, PFRCP, PFRCPIT1, PFRCPIT2, PFRSQIT1, PFRSQRT, PFSUB, PFSUBR, PI2FD, PMULHRW, PREFETCH, PREFETCHW ===3DNow!+ instructions=== ====added with [[Athlon]]==== PF2IW, PFNACC, PFPNACC, PI2FW, PSWAPD<br /> ====added with [[Geode GX]]==== PFRSQRTV, PFRCPV ===[[Streaming SIMD Extensions|SSE]] instructions=== ''added with [[Pentium III]]'' ''also see integer instruction added with Pentium III'' <blockquote> ====SSE SIMD Floating-Point Instructions==== ADDPS, ADDSS, CMPPS, CMPSS, COMISS, CVTPI2PS, CVTPS2PI, CVTSI2SS, CVTSS2SI, CVTTPS2PI, CVTTSS2SI, DIVPS, DIVSS, LDMXCSR, MAXPS, MAXSS, MINPS, MINSS, MOVAPS, MOVHLPS, MOVHPS, MOVLHPS, MOVLPS, MOVMSKPS, MOVNTPS, MOVSS, MOVUPS, MULPS, MULSS, RCPPS, RCPSS, RSQRTPS, RSQRTSS, SHUFPS, SQRTPS, SQRTSS, STMXCSR, SUBPS, SUBSS, UCOMISS, UNPCKHPS, UNPCKLPS ====SSE SIMD Integer Instructions==== ANDNPS, ANDPS, ORPS, PAVGB, PAVGW, PEXTRW, PINSRW, PMAXSW, PMAXUB, PMINSW, PMINUB, PMOVMSKB, PMULHUW, PSADBW, PSHUFW, XORPS </blockquote> {| class="wikitable" ! Instruction !! Opcode !! Meaning !! Notes |- |MOVUPS xmm1, xmm2/m128||0F 10 /r||Move Unaligned Packed Single-Precision Floating-Point Values|| |- |MOVSS xmm1, xmm2/m32||F3 0F 10 /r||Move Scalar Single-Precision Floating-Point Values|| |- |MOVUPS xmm2/m128, xmm1||0F 11 /r||Move Unaligned Packed Single-Precision Floating-Point Values|| |- |MOVSS xmm2/m32, xmm1||F3 0F 11 /r||Move Scalar Single-Precision Floating-Point Values|| |- |MOVLPS xmm, m64||0F 12 /r||Move Low Packed Single-Precision Floating-Point Values|| |- |MOVHLPS xmm1, xmm2||0F 12 /r||Move Packed Single-Precision Floating-Point Values High to Low|| |- |MOVLPS m64, xmm||0F 13 /r||Move Low Packed Single-Precision Floating-Point Values|| |- |UNPCKLPS xmm1, xmm2/m128||0F 14 /r||Unpack and Interleave Low Packed Single-Precision Floating-Point Values|| |- |UNPCKHPS xmm1, xmm2/m128||0F 15 /r||Unpack and Interleave High Packed Single-Precision Floating-Point Values|| |- |MOVHPS xmm, m64||0F 16 /r||Move High Packed Single-Precision Floating-Point Values|| |- |MOVLHPS xmm1, xmm2||0F 16 /r||Move Packed Single-Precision Floating-Point Values Low to High|| |- |MOVHPS m64, xmm||0F 17 /r||Move High Packed Single-Precision Floating-Point Values|| |- |PREFETCHNTA||0F 18 /0||Prefetch Data Into Caches (non-temporal data with respect to all cache levels)|| |- |PREFETCH0||0F 18 /1||Prefetch Data Into Caches (temporal data)|| |- |PREFETCH1||0F 18 /2||Prefetch Data Into Caches (temporal data with respect to first level cache)|| |- |PREFETCH2||0F 18 /3||Prefetch Data Into Caches (temporal data with respect to second level cache)|| |- |NOP||0F 1F /0||No Operation|| |- |MOVAPS xmm1, xmm2/m128||0F 28 /r||Move Aligned Packed Single-Precision Floating-Point Values|| |- |MOVAPS xmm2/m128, xmm1||0F 29 /r||Move Aligned Packed Single-Precision Floating-Point Values|| |- |CVTPI2PS xmm, mm/m64||0F 2A /r||Convert Packed Dword Integers to Packed Single-Precision FP Values|| |- |CVTSI2SS xmm, r/m32||F3 0F 2A /r||Convert Dword Integer to Scalar Single-Precision FP Value|| |- |MOVNTPS m128, xmm||0F 2B /r||Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint|| |- |CVTTPS2PI mm, xmm/m64||0F 2C /r||Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers|| |- |CVTTSS2SI r32, xmm/m32||F3 0F 2C /r||Convert with Truncation Scalar Single-Precision FP Value to Dword Integer|| |- |CVTPS2PI mm, xmm/m64||0F 2D /r||Convert Packed Single-Precision FP Values to Packed Dword Integers|| |- 