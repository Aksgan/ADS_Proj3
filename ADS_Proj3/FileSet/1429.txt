other companies, such as an online banking application managed by one company on behalf of affiliated banks ==Disadvantages== * Extranets can be expensive to implement and maintain within an organization (e.g., hardware, software, employee training costs), if hosted internally rather than by an [[application service provider]]. * Security of extranets can be a concern when hosting valuable or proprietary information. ==See also== *[[LAN]] *[[List of collaborative software]] *[[Web portal]] *[[Wide area network]] ==References== {{reflist}} ==Further reading== <div class="references-small"> * Callaghan, J. (2002), ''Inside Intranets & Extranets: Knowledge Management and the Struggle for Power'', Palgrave Macmillan, ISBN 0-333-98743-8 *Stambro, Robert and Svartbo, Erik (2002), ''[http://epubl.ltu.se/1404-5508/2002/003/LTU-SHU-EX-02003-SE.pdf Extranet Use in Supply Chain Management]'', University of Technology *{{cite book | author=Wilkinson, Paul| title=Collaboration Technologies: The Extranet Evolution | publisher=Taylor & Francis | year=2005 |isbn=0-415-35859-0}} *IGLOO Software(2010), ''[http://www.igloosoftware.com/documents/whitepapers/whitepapermarketplacecommunitiespdf Improving Marketplace Relationships with online Community & Social Software Solutions]'' </div> [[Category:Computer network security]] [[Category:Network architecture]] [[ar:إكسترانت]] [[bg:Екстранет]] [[cs:Extranet]] [[da:Extranet]] [[de:Extranet]] [[es:Extranet]] [[eu:Estranet]] [[fa:اکسترانت]] [[fr:Extranet]] [[hr:Ekstranet]] [[id:Ekstranet]] [[it:Extranet]] [[he:אקסטראנט]] [[nl:Extranet]] [[ja:エクストラネット]] [[no:Ekstranett]] [[pl:Ekstranet]] [[pt:Extranet]] [[ru:Экстранет]] [[fi:Ekstranet]] [[th:เอกซ์ทราเน็ต]] [[zh:外部网]]</text> </page> <page> <id>12981</id> <title>Extreme Programming</title> <text>[[Image:XP-feedback.gif|thumb|240px|Planning and feedback loops in Extreme Programming.]] {{Software development process}} '''Extreme Programming''' (XP) is a [[software development methodology]] which is intended to improve software quality and responsiveness to changing customer [[requirement]]s. As a type of [[agile software development]],<ref name="Informatics85"><!-- --> "Human Centred Technology Workshop 2005",<!-- --> 2005, PDF webpage: <!-- -->[ftp://ftp.informatics.sussex.ac.uk/pub/reports/csrp/csrp585.pdf Informatics-UK-report-cdrp585]. </ref><ref name=UPenn49/><ref name=USFCA601/> it advocates frequent "releases" in short development cycles ([[timeboxing]]), which is intended to improve productivity and introduce checkpoints where new customer requirements can be adopted. Other elements of extreme programming include: programming [[Pair programming|in pairs]] or doing extensive [[code review]], [[unit testing]] of all code, avoiding programming of features until they are actually needed, a flat management structure, simplicity and clarity in code, expecting changes in the customer's requirements as time passes and the problem is better understood, and frequent communication with the customer and among programmers.<ref name="UPenn49"> "Design Patterns and Refactoring", University of Pennsylvania, 2003, webpage: [http://www.cis.upenn.edu/~matuszek/cit591-2003/Lectures/49-design-patterns.ppt UPenn-Lectures-design-patterns]. </ref><ref name="USFCA601"> "Extreme Programming" (lecture paper), USFCA.edu, webpage: [http://www.cs.usfca.edu/~parrt/course/601/lectures/xp.html USFCA-edu-601-lecture]. </ref><ref name="MASD"> "Manifesto for Agile Software Development", Agile Alliance, 2001, webpage: [http://agilemanifesto.org/ Manifesto-for-Agile-Software-Dev] </ref> The methodology takes its name from the idea that the beneficial elements of traditional software engineering practices are taken to "extreme" levels, on the theory that if some is good, more is better. It is unrelated to "[[cowboy coding]]", which is more free-form and unplanned. It does not advocate "[[Death march (software development)|death march]]" work schedules, but instead working at a sustainable pace.<ref name="tr"/> Critics have noted several potential drawbacks,<ref name=Cworld92/> including problems with unstable requirements, no documented compromises of user conflicts, and lack of an overall design specification or document. {{TOC limit|3}} == History == Extreme Programming was created by [[Kent Beck]] during his work on the [[Chrysler Comprehensive Compensation System]] (C3) payroll project.<ref name=Cworld92/> Beck became the C3 [[Project management|project leader]] in March 1996 and began to refine the development method used in the project and wrote a book on the method (in October 1999, ''Extreme Programming Explained'' was published).<ref name="Cworld92"> "Extreme Programming", ''Computerworld'' (online), December 2001, webpage: [http://www.computerworld.com/softwaretopics/software/appdev/story/0,10801,66192,00.html Computerworld-appdev-92]. </ref> Chrysler cancelled the C3 project in February 2000, after the company was acquired by Daimler-Benz.<ref>{{cite book | coauthors=Matt Stephens, Doug Rosenberg | title=Extreme Programming Refactored: The Case Against XP | isbn=1590590961 }}</ref> Although extreme programming itself is relatively new, many of its practices have been around for some time; the methodology, after all, takes "best practices" to extreme levels. For example, the "practice of test-first development, planning and writing tests before each micro-increment" was used as early as NASA's [[Project Mercury]], in the early 1960s {{Harvard citation | Larman | 2003}}. To shorten the total development time, some formal test documents (such as for [[acceptance testing]]) have been developed in parallel (or shortly before) the software is ready for testing. A NASA independent test group can write the test procedures, based on formal requirements and logical limits, before the software has been written and integrated with the hardware. In XP, this concept is taken to the extreme level by writing automated tests (perhaps inside of software modules) which validate the operation of even small sections of software coding, rather than only testing the larger features. Some other XP practices, such as [[refactoring]], [[Modularity (programming)|modularity]], [[Top-down and bottom-up design|bottom-up design]], and [[Iterative and incremental development|incremental design]] were described by [[Leo Brodie]] in his book published in 1984.<ref>{{cite book | last=Brodie | first=Leo | coauthors= | editor= | others= | title=Thinking Forth | origdate= | origyear= | origmonth= | url=http://thinking-forth.sourceforge.net | format=paperback | accessdate=2006-06-19 | edition= | date= | year=1984 | month= | publisher=Prentice-Hall | location= | isbn=0-13-917568-7 | pages= | chapter= | chapterurl= }}</ref> === Origins === Software development in the 1990s was shaped by two major influences: internally, [[object-oriented programming]] replaced [[procedural programming]] as the programming paradigm favored by some in the industry; externally, the rise of the Internet and the [[dot-com boom]] emphasized speed-to-market and company-growth as competitive business factors. Rapidly-changing requirements demanded shorter [[Product life cycle management|product life-cycles]], and were often incompatible with traditional methods of software development. The [[Chrysler Comprehensive Compensation System]] was started in order to determine the best way to use object technologies, using the payroll systems at Chrysler as the object of research, with [[Smalltalk]] as the language and [[Gemstone Database Management System|GemStone]] as the [[data access layer]]. They brought in [[Kent Beck]],<ref name=Cworld92/> a prominent Smalltalk practitioner, to do [[performance tuning]] on the system, but his role expanded as he noted several problems they were having with their development process. He took this opportunity to propose and implement some changes in their practices based on his work with his frequent collaborator, [[Ward Cunningham]]. Beck describes the early conception of the methods:<ref>[http://www.informit.com/articles/article.aspx?p=20972 Interview with Kent Beck and Martin Fowler]</ref> {{quote|The first time I was asked to lead a team, I asked them to do a little bit of the things I thought were sensible, like testing and reviews. The second time there was a lot more on 