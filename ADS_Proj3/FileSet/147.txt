Languages Europe, pages 146–160, London, UK, 1993. Springer-Verlag</ref><ref>''J. Darlington, Y. Guo, H. W. To, and J. Yang.'' "Functional skeletons for parallel coordination." In Euro-Par ’95: Proceedings of the First International Euro-Par Conference on Parallel Processing, pages 55–66, London, UK, 1995. Springer-Verlag.</ref>.<ref>''J. Darlington, Y. ke Guo, H. W. To, and J. Yang.'' "Parallel skeletons for structured composition." In PPOPP ’95: Proceedings of the fifth ACM SIGPLAN symposium on Principles and practice of parallel programming, pages 19–28, New York, NY, USA, 1995. ACM.</ref> SCL is considered a base language, and was designed to be integrated with a host language, for example Fortran. In '''SCL''', skeletons are classified into three types: '''configuration''', '''elementary''' and '''computation'''. Configuration skeletons abstract patterns for commonly used data structures such as distributed arrays (ParArray). Elementary skeletons correspond to data parallel skeletons such as map, scan, and fold. Computation skeletons which abstract the control flow and correspond mainly to task parallel skeletons such as farm, SPMD, and iterateUntil. ===SKiPPER & QUAFF=== '''SKiPPER''' is a domain specific skeleton library for vision applications <ref>''J. Serot, D. Ginhac, and J. Derutin.'' "SKiPPER: a skeleton-based parallel programming environment for real-time image processing applications." In V. Malyshkin, editor, 5th International Conference on Parallel Computing Technologies (PaCT-99), volume 1662 of LNCS,pages 296–305. Springer, 6–10 September 1999.</ref> which provides skeletons in CAML, and thus relies on CAML for type safety. Skeletons are presented in two ways: declarative and operational. Declarative skeletons are directly used by programmers, while their operational versions provide an architecture specific target implementation. From the runtime environment, CAML skeleton specifications, and application specific functions (provided in C by the programmer), new C code is generated and compiled to run the application on the target architecture. One of the interesting things about '''SKiPPER''' is that the skeleton program can be executed sequentially for debugging. Different approaches have been explored in '''SKiPPER''' for writing operational skeletons: static data-flow graphs, parametric process networks, hierarchical task graphs, and tagged-token data- flow graphs <ref>''J. Serot and D. Ginhac.'' "Skeletons for parallel image processing : an overview of the SKiPPER project". Parallel Computing, 28(12):1785–1808, Dec 2002.</ref>. '''QUAFF''' <ref>''J. Falcou, J. Serot, T. Chateau, and J. T. Lapreste.'' "Quaff: efficient c++ design for parallel skeletons." Parallel Computing, 32(7):604–615, 2006.</ref> is a more recent skeleton library written in C++ and MPI. QUAFF relies on template-based meta-programming techniques to reduce runtime overheads and perform skeleton expansions and optimizations at compilation time. Skeletons can be nested and sequential functions are stateful. Besides type checking, QUAFF takes advantage of C++ templates to generate, at compilation time, new C/MPI code. QUAFF is based on the CSP-model, where the skeleton program is described as a process network and production rules (single, serial, par, join) <ref>''J. Falcou and J. Serot.'' "Formal semantics applied to the implementation of a skeleton-based parallel programming library." In G. R. Joubert, C. Bischof, F. J. Peters, T. Lippert, M. Bcker, P. Gibbon, and B. Mohr, editors, Parallel Computing: Architectures, Algorithms and Applications (Proc. of PARCO 2007, Julich, Germany), volume 38 of NIC, pages 243–252, Germany, September 2007. John von Neumann Institute for Computing.</ref>. ===SkeTo=== The '''SkeTo''' <ref>''K. Matsuzaki, H. Iwasaki, K. Emoto, and Z. Hu.'' "A library of constructive skeletons for sequential style of parallel programming." In InfoScale ’06: Proceedings of the 1st international conference on Scalable information systems, page 13, New York, NY, USA, 2006. ACM.</ref> project is a C++ library which achieves parallelization using MPI. SkeTo is different to other skeleton libraries because instead of providing nestable parallelism patterns, SkeTo provides parallel skeletons for parallel data structures such as: lists, trees <ref>''K. Matsuzaki, Z. Hu, and M. Takeichi.'' "Parallelization with tree skeletons." In Euro-Par, volume 2790 of Lecture Notes in Computer Science, pages 789–798. Springer, 2003.</ref><ref>''K. Matsuzaki, Z. Hu, and M. Takeichi.'' "Parallel skeletons for manipulating general trees." Parallel Comput., 32(7):590–603, 2006.</ref>, and matrices <ref>''K. Emoto, Z. Hu, K. Kakehi, and M. Takeichi.'' "A compositional framework for developing parallel programs on two dimensional arrays." Technical report, Department of Mathematical Informatics, University of Tokyo, 2005.</ref>. The data structures are typed using templates, and several parallel operations can be invoked on them. For example the list structure provides parallel operations such as: map, reduce, scan, zip, shift, etc... Additional research around SkeTo has also focused on optimizations strategies by transforma- tion, and more recently domain specific optimizations <ref>''K. Emoto, K. Matsuzaki, Z. Hu, and M. Takeichi.'' "Domain-specific optimization strategy for skeleton programs." In Euro-Par, volume 4641 of Lecture Notes in Computer Science, pages 705–714. Springer, 2007.</ref>. For example, '''SkeTo''' provides a fusion transformation <ref>''K. Matsuzaki, K. Kakehi, H. Iwasaki, Z. Hu, and Y. Akashi.'' "A fusion-embedded skeleton library." In M. Danelutto, M. Vanneschi, and D. Laforenza, editors, Euro-Par, volume 3149 of Lecture Notes in Computer Science, pages 644–653. Springer, 2004.</ref> which merges two successive function invocations into a single one, thus decreasing the function call overheads and avoiding the creation of intermediate data structures passed between functions. ===Skil=== '''Skil''' <ref>''G. H. Botorog and H. Kuchen.'' "Efficient high-level parallel programming." Theor. Comput. Sci., 196(1-2):71–107, 1998.</ref> is an imperative language for skeleton programming. Skeletons are not directly part of the language but are implemented with it. '''Skil''' uses a subset of C language which provides functional language like features such as higher order functions, curring and polymorphic types. When '''Skil''' is compiled, such features are eliminated and a regular C code is produced. Thus, '''Skil''' transforms polymorphic high order functions into monomorphic first order C functions. '''Skil''' does not support nestable composition of skeletons. Data parallelism is achieved using specific data parallel structures, for example to spread arrays among available processors. Filter skeletons can be used. ==Frameworks comparison== * '''Activity Years''' is the known activity years span. The dates represented in this column correspond to the first and last publication date of a related article in a scientific journal or conference proceeding. Note that a project may still be active beyond the activity span, and that we have failed to find a publication for it beyond the given date. * '''Programming Language''' is the 