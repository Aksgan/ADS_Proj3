Execute interface, and is in charge of sorting the sub-array specified by <code>Range r</code>. In this case we simply invoke Java's default (Arrays.sort) method for the given sub-array. <source lang="java"> public class Sort implements Execute<Range, Range> { @Override public Range execute(Range r){ if (r.right <= r.left) return r; Arrays.sort(r.array, r.left, r.right+1); return r; } } </source> Finally, once a set of sub-arrays are sorted we merge the sub-array parts into a bigger array with the MergeList class which implements a Merge interface. <source lang="java"> public class MergeList implements Merge<Range, Range>{ @Override public Range merge(Range[] r){ Range result = new Range( r[0].array, r[0].left, r[1].right); return result; } } </source> ==Frameworks and libraries== === ASSIST === '''ASSIST''' <ref>{{cite doi|10.1016/S0167-8191(02)00188-6}}</ref><ref name="assist_CMST2006">''M. Aldinucci, M. Coppola, M. Danelutto, N. Tonellotto, M. Vanneschi, and C. Zoccolo.'' "High level grid programming with ASSIST." Computational Methods in Science and Technology, 12(1):21–32, 2006.</ref> is a programming environment which provides programmers with a structured coordination language. The coordination language can express parallel programs as an arbitrary graph of software modules. The module graph describes how a set of modules interact with each other using a set of typed data streams. The modules can be sequential or parallel. Sequential modules can be written in C, C++, or Fortran; and parallel modules are programmed with a special ASSIST parallel module (''parmod''). AdHoc <ref>M. Aldinucci and M. Torquati. Accelerating apache farms through ad-HOC distributed scalable object repository. In Proc. of 10th Intl. Euro-Par 2004 Parallel Processing, volume 3149 of LNCS, pages 596–605. Springer, 2004.</ref><ref>{{cite doi|10.1007/978-0-387-72812-4_6}}</ref>, a hierarchical and fault-tolerant Distributed Shared Memory (DSM) system is used to interconnect streams of data between processing elements by providing a repository with: get/put/remove/execute operations. Research around AdHoc has focused on transparency, scalability, and fault-tolerance of the data repository. While not a classical skeleton framework, in the sense that no skeletons are provided, ASSIST's generic ''parmod'' can be specialized into classical skeletons such as: ''farm'', ''map'', etc. ASSIST also supports autonomic control of ''parmods''s, and can be subject to a performance contract by dynamically adapting the number of resources used. ===CO2P3S=== '''CO2P3S''' (Correct Object-Oriented Pattern-based Parallel Programming System), is a pattern oriented development environment <ref>'S. MacDonald, J. Anvik, S. Bromling, J. Schaeffer, D. Szafron, and K. Tan.' "From patterns to frameworks to parallel programs." Parallel Comput., 28(12):1663–1683, 2002.</ref>, which achieves parallelism using threads in Java. '''CO2P3S''' is concerned with the complete development process of a parallel application. Programmers interact through a programming GUI to choose a pattern and its configuration options. Then, programmers fill the hooks required for the pattern, and new code is generated as a framework in Java for the parallel execution of the application. The generated framework uses three levels, in descending order of abstraction: patterns layer, intermediate code layer, and native code layer. Thus, advanced programmers may intervene the generated code at multiple levels to tune the performance of their applications. The generated code is mostly type safe, using the types provided by the programmer which do not require extension of superclass, but fails to be completely type safe such as in the reduce(..., Object reducer) method in the mesh pattern. The set of patterns supported in CO2P3S corresponds to method-sequence, distributor, mesh, and wavefront. Complex applications can be built by composing frameworks with their object references. Nevertheless, if no pattern is suitable, the MetaCO2P3S graphical tool addresses extensibility by allowing programmers to modify the pattern designs and introduce new patterns into CO2P3S. Support for distributed memory architectures in CO2P3S was introduced in later <ref>''K. Tan, D. Szafron, J. Schaeffer, J. Anvik, and S. MacDonald.'' "Using generative design patterns to generate parallel code for a distributed memory environment." In PPoPP ’03: Proceedings of the ninth ACM SIGPLAN symposium on Principles and practice of parallel programming, pages 203–215, New York, NY, USA, 2003. ACM.</ref>. To use a distributed memory pattern, programmers must change the pattern’s memory option from shared to distributed, and generate the new code. From the usage perspective, the distributed memory version of the code requires the management of remote exceptions. ===Calcium & Skandium=== '''Calcium''' is greatly inspired by Lithium and Muskel. As such, it provides algorithmic skeleton programming as a Java library. Both task and data parallel skeletons are fully nestable; and are instantiated via parametric skeleton objects, not inheritance. '''Calcium''' supports the execution of skeleton applications on top of the [[ProActive]] environment for distributed cluster like infrastructure. Additionally, Calcium has three distinctive features for algorithmic skeleton programming. First, a performance tuning model which helps programmers identify code responsible for performance bugs<ref>''D. Caromel and M. Leyton.'' "Fine tuning algorithmic skeletons." In 13th International Euro-Par Conference: Parallel Processing, volume 4641 of Lecture Notes in Computer Science, pages 72–81. Springer-Verlag, 2007.</ref>. Second, a type system for nestable skeletons which is proven to guaranty subject reduction properties and is implemented using Java Generics<ref>''D. Caromel, L. Henrio, and M. Leyton.'' "Type safe algorithmic skeletons." In Proceedings of the 16th Euromicro Conference on Parallel, Distributed and Network-based Processing, pages 45–53, Toulouse, France, Feb. 2008. IEEE CS Press.</ref>. Third, a transparent algorithmic skeleton file access model, which enables skeletons for data intensive applications<ref>''D. Caromel and M. Leyton.'' "A transparent non-invasive file data model for algorithmic skeletons." In 22nd International Parallel and Distributed Processing Symposium (IPDPS), pages 1–8, Miami, USA, March 2008. IEEE Computer Society.</ref>. [http://skandium.niclabs.cl Skandium] is a complete re-implementation of '''Calcium''' for multi-core computing. Programs written on '''Skandium''' may take advantage of shared memory to simplify parallel programming<ref>''Mario Leyton, Jose M. Piquer.'' "Skandium: Multi-core Programming with algorithmic skeletons", IEEE Euro-micro PDP 2010.</ref> . ===Eden=== '''Eden''' <ref>''Rita Loogen and Yolanda Ortega-Mallén and Ricardo Peña-Marí.'' "Parallel Functional Programming in Eden", Journal of Functional Programming, No. 15(2005),3, pages 431-475</ref> is a parallel programming language for distributed memory environments, which extends Haskell. Processes are defined explicitly to achieve parallel programming, while their communications remain implicit. Processes communicate through unidirectional channels, which connect one writer to exactly one reader. Programmers only need to specify which data a processes depends on. Eden’s process model provides direct control over process granularity, data distribution 