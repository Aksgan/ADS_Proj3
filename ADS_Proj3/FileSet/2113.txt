scanned copies of a license. More complex ID cards are now being created by printing on a material called Teslin or Artisyn, which are paper-like materials that are actually micro-porous plastic sheets. When butterfly pouches and holograms are applied, the card is then run through a heat laminator which creates a professional-looking ID card. Numerous security printing techniques have been used to attempt to enhance the security of ID cards. For example, many modern documents include holograms, which are difficult to replicate without expensive equipment which is not generally available. Though accurate recreation of these holograms is extremely difficult, using a mixture of pigments and base can create a similar shiny multi-coloured look which may pass cursory inspection. In addition, some documents include a magnetic strip, which will also contain the same information, and may thus be checked against the machine-readable information on the barcode. Magnetic strips may also contain other secret identifying information. Although magnetic strips can also be faked, they provide another barrier to entry for the amateur forger. Other hidden security devices can also be added, including embedded secure cryptoprocessor chips which are designed to be very difficult to forge, and RFID tags: the two technologies may also be combined, in the case of contactless smart cards. Another effective technique is the use of online verification of security information against a central database. In many cases, online verification can detect simple copying of a document by detecting attempted use in multiple places at the same time, or completely false IDs, as the information on the ID will be found to be invalid. A simple method of confirming that an ID is genuine is to print a serial number on it unique to the card and stored on a centralised database. If checked, it will quickly become clear that the ID is false; either the number on the ID is not registered for the holder, or no ID has the number at all. Online verification also has the advantage that it allows easy revocation of lost or stolen documents. Many modern credentials now contain some kind of barcode. For example, many U.S. driving licences include a 2-dimensional code in PDF417 format, which contains the same information as on the front of the license. Barcodes allow rapid checking of credentials for low-security applications, and may potentially contain extra information which can be used to verify other information on the card. == Systemic attacks == The combination of multiple high-security features, biometrics, and well-trained document inspectors with technical assistance can be very effective at preventing forged documents from being easily produced. Instead of acquiring the expensive specialised equipment needed to make fake documents, it may be more economical to produce a "genuine fake"; a legitimate document, but one which contains false information. One way of doing this is to present the document issuing authority with false credentials, which they will then endorse by issuing a new document. In this way, false identities and credentials can be "bootstrapped" over a period of time. Another simpler way of generating false credentials is to suborn one of the officials involved in the document issuing process through bribery or intimidation. This may also be combined with the bootstrapping process mentioned above to mount complex attacks. Corruption in the document-issuing process is hard to counter, since as the value of a credential increases, the economic incentives for corruption also increase. This is particularly true in the case of fake ID cards that combine many functions in one document, and for documents which are issued in large numbers, thus requiring many thousands of people to have authorizing powers, thus creating a longer chain of people who can possibly be exploited. Detection of a "genuine fake" document is also a difficult process; as such a fake is a legitimate document, it will pass any tests for forgery. To detect such fakes, it is necessary to perform a [[background check]] on the individual in question to confirm the legitimacy of the document's information. Nowadays, drivers licenses and identification cards are verified by scanning the magnetic stripe on the back of the license or by using an ultraviolet light to view images printed by the government on the identification which are only visible under ultraviolet light. == See also == *[[Adolfo Kaminsky]] ==References== {{Reflist}} ==External links== *[http://www.havocscope.com/tag/counterfeit-identification/ Counterfeit Identification database-Havocscope Black Market.] [[Category:Security engineering]] [[Category:Document forgery]] [[de:Ausweisfälschung]] [[zh:办假证]]</text> </page> <page> <id>17880</id> <title>Identity transform</title> <text>The '''identity transform''' is a [[data transformation]] that copies the source data into the destination data without change. The identity transformation is considered an essential process in creating a reusable [[transformation library]]. By creating a library of variations of the base identity transformation, a variety of [[data transformation filter]]s can be easily maintained. These filters can be chained together in a format similar to [[UNIX]] shell pipes. == Examples == === Using XSLT === The most frequently cited example of the identity transform (for XSLT version 1.0) is the "copy.xsl" transform as expressed in [[XSLT]]. This transformation uses the xsl '''copy''' command to perform the identity transformation: <source lang="xml"><xsl:stylesheet version="1.0"> <xsl:template match="@*|node()"> <xsl:copy> <xsl:apply-templates select="@*|node()"/> </xsl:copy> </xsl:template> </xsl:stylesheet></source> This template works by matching all attributes ('''@*''') and other nodes ('''node()'''), copying each node matched, then applying the identity transformation to all attributes and child nodes of the context node. This recursively descends the element tree and outputs all structures in the same structure they were found in the original file, within the limitations of what information is considered significant in the [[XPath data model]]. Since '''node()''' matches text, processing instructions, root, and comments, as well as elements, all XML nodes are copied. A more explicit version of the identity transform is: <source lang="xml"><xsl:stylesheet version="1.0"> <xsl:template match="@*|*|processing-instruction()|comment()" mode="recursive-copy"> <xsl:copy> <xsl:apply-templates select="*|@*|text()|processing-instruction()|comment()" mode="recursive-copy"/> </xsl:copy> </xsl:template> </xsl:stylesheet></source> This version is equivalent to the first, but explicitly enumerates the types of XML nodes that it will copy. Both versions copy data that is unnecessary for most XML usage (e.g., comments). Finally, note that markup details, such as the use of 