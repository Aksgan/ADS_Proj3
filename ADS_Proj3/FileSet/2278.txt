[[Category:Music software plugin architectures]] [[Category:Acronyms]] [[Category:Audio libraries]] [[de:JACK Audio Connection Kit]] [[es:JACK Audio Connection Kit]] [[fr:JACK Audio Connection Kit]] [[it:JACK Audio Connection Kit]] [[nl:JACK Audio Connection Kit]] [[ja:JACK Audio Connection Kit]] [[nn:JACK Audio Connection Kit]] [[pl:JACK Audio Connection Kit]] [[pt:JACK Audio Connection Kit]] [[ru:JACK Audio Connection Kit]] [[sv:Jack Audio Connection Kit]] [[zh:JACK Audio]]</text> </page> <page> <id>19482</id> <title>JAD (file format)</title> <text>{{Unreferenced|date=July 2007}} {{Infobox file format | name = Java application descriptor | icon = | logo = | caption = | extension = <tt>.jad</tt> | mime = text/vnd.sun.j2me.app-descriptor | type code = | uniform type = | magic = | owner = Sun Microsystems, Inc. | genre = Descriptor file | container for = | contained by = | extended from = | extended to = | standard = [[Java application]] }} '''Java Application Descriptor''' (JAD) files describe the [[MIDlet]]s ([[Java ME]] applications) that are distributed as [[JAR (file format)|JAR files]]. JAD files are commonly used to package [[Java (programming language)|Java]] applications or games that can be downloaded to mobile phones. Java applications enable Mobile phones to interact programmatically with online [[web services]], such as the ability to send [[SMS]] messages via [[GSM]] mobile internet or interact in multiplayer games. Some BlackBerry devices use JAD files for themes. Recent [[midlet]]s contain a manifest file in the [[JAR (file format)|JAR archive]]. This file contains much of the information stored in the JAD file, rendering it unnecessary in most cases. ==JAD files format== <pre> MIDlet-1: <Application name>, <icon path>, <midlet class> MIDlet-Jar-Size: <Size in bytes> MIDlet-Jar-URL: <Associated JAR file> MIDlet-Name: <Application name> MIDlet-Vendor: <Company> MIDlet-Version: <Application version number> MicroEdition-Configuration: <CLDC version> MicroEdition-Profile: <MIDP version></pre> ==JAD mime type== The [[MIDP2]] specification instructs that web servers should serve JAD files with a [[MIME type]] of "<tt>text/vnd.sun.j2me.app-descriptor</tt>". If this mime type is not correctly configured, many phones will fail to install the [[midlet]]. ==See also== *[[.sis]] *[[Decompilation]] *[[Mobile development]] *[[Midp2]] == External links == * [http://developers.sun.com/mobility/learn/midp/lifecycle/#jadsnjars JADs and JARs] * [http://developers.sun.com/mobility/midp/ttips/getAppProperty/ Retrieving MIDlet Attributes] * [http://jadcheck.appspot.com Online check of JAD file syntax and mime type] [[Category:Java programming language]] [[ru:.jad]] {{compu-lang-stub}}</text> </page> <page> <id>19484</id> <title>JAL (compiler)</title> <text>'''JAL (Just Another Language)''' is a [[Pascal programming language|Pascal]]-like [[programming language]] and [[compiler]] that generates executable code for [[PIC microcontroller]]s. It is a free-format language with a compiler that runs on Linux, MS-Windows and MS-DOS (OSX support). It is configurable and extendable through the use of libraries and can even be combined with PIC assembly language. ==History== JAL was originally created by Wouter van Ooijen and released as [[free software]] under the [[GNU General Public License]] in 2003. In 2006, Stef Mientki initiated the development of a new version, JALV2, which was programmed by Kyle York and beta tested by an international user group.<ref>Beta testing by: Bert van Dam, Sunish Isaac, Dave Lagzdin, Javier Martinez, Stef Mientki, Wouter van Ooijen, Michael Reynolds, André Steenveld, Joep Suijs, Vasile Surducan, and Michael Watterson</ref> ==Sample code== -- JAL 2.3 include 16f877_bert—define the variables var byte resist—define the pins pin_a0_direction = input—variable resistor pin_d7_direction = input—switch pin_c2_direction = output—pwm led—enable pulse width modulation PWM_init_frequency (true, true) forever loop—convert analog on a0 to digital resist = ADC_read_low_res(0) -- run measurement through flash memory program_eeprom_write(2000,resist) program_eeprom_read(2000,resist) -- run measurement through data memory data_eeprom_write(10,resist) data_eeprom_read(10,resist) -- if the switch is pressed return random value if pin_d7 == high then resist = random_byte end if—send resistance to PC serial_sw_write(resist) delay_100ms(1) -- set actual PWM duty cycle PWM_Set_DutyCycle (resist, resist) end loop ==References== <references /> ==External links== *[http://www.casadeyork.com/jalv2/ JALv2 home page] [[Category:Procedural programming languages]] [[es:JAL (compilador)]] [[fr:JAL (compiler)]] [[nl:JAL (compiler)]] [[sv:Just another language]]</text> </page> <page> <id>19485</id> <title>JAMA (numerical linear algebra library)</title> <text>'''JAMA''' is a [[software library]] for performing numerical [[linear algebra]] tasks created at [[NIST]] similar in functionality to [[LAPACK]]. Versions exist for both [[C++]] and the [[Java programming language]]. The C++ version uses the [[Template Numerical Toolkit]] for lower-level operations. The Java version provides the lower-level operations itself. The main capabilities provided by JAMA are: * [[Eigensystem]] solving * [[LU decomposition]] * [[Singular value decomposition]] * [[QR decomposition]] * [[Cholesky decomposition]] JAMA is in the public domain. ==See also== * [[list of numerical analysis software]] == External links == * [http://math.nist.gov/tnt/download.html JAMA/C++ download and documentation page] at NIST * [http://math.nist.gov/javanumerics/jama/ JAMA/Java homepage] at NIST [[Category:Numerical software]] [[uk:JAMA]]</text> </page> <page> <id>19497</id> <title>JAligner</title> <text>'''JAligner''' is an open source [[Java (programming language)|Java]] implementation of the [[Smith-Waterman algorithm]]<ref>Smith TF and Waterman MS (1981). Identification of common molecular subsequences. ''J Mol Biol, 147:195-197''.</ref> with Gotoh's improvement<ref>Gotoh O (1982). An improved algorithm for matching biological sequences. ''J Mol Biol, 162:705-708''.</ref> for biological local pairwise [[sequence alignment]] using the [[Gap penalty|affine gap penalty]] model. It was written by Ahmed Moustafa. == See also == * [[Sequence alignment software]] * [[Clustal]] == References == <references/> == External links == * [http://jaligner.sourceforge.net/ Official website] {{bioinformatics-stub}} [[Category:Bioinformatics software]] [[Category:Computational phylogenetics]]</text> </page> <page> <id>19500</id> <title>JBIG</title> <text>{{Infobox file format | name = JBIG | icon = | extension = .jbg, .jbig | mime = | type code = | creatorcode = | owner = [[International Organization for Standardization|ISO]], [[International Electrotechnical Commission|IEC]], [[ITU-T]] | genre = [[Image file formats]] | containerfor = | containedby = | extendedfrom = | extendedto = [[JBIG2]] | standards = ISO/IEC 11544, ITU-T Recommendations T.82, T.85 }} {{about|the bi-level image compression scheme|its designers|Joint Bi-level Image Experts Group}} '''JBIG''' is a [[Lossless data compression|lossless]] [[image compression]] standard from the [[Joint Bi-level Image Experts Group]], standardized as [[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]] standard 11544 and as [[ITU-T]] recommendation T.82. Now that the newer [[binary image|bi-level image]] compression standard [[JBIG2]] has been released, JBIG is also known as '''JBIG1'''. JBIG was designed for compression of binary images, particularly for [[fax]]es, but can also be used on other images. In most situations JBIG offers between a 20% and 50% increase in compression efficiency over the [[Group 4 (fax)|Fax Group 4]] standard, and in some situations, it offers a 30-fold improvement. JBIG uses a form of [[arithmetic coding]] patented by [[IBM]] known as the Q-coder. It bases the probabilities of each 