positioning (GPOS), and glyph substitution (GSUB). Panorama also offers complete support for advanced typography features, such as ligatures, swashes, small caps, ornaments, ordinals, superiors, old style, kerning, fractions, etc. In [[free software]] environments such as [[Linux]], OpenType rendering is provided by the [[FreeType]] project, included in free implementations of the [[X Window System]] such as [[Xorg]]. Complex text handling is provided either by [[pango]] or [[Qt (toolkit)|Qt]]. The [[XeTeX]] system allows [[TeX]] documents to use OpenType fonts, along with most of their typographic features. ==OpenType Feature File (<code>.fea</code>)== OpenType features are tedious to define using a GUI.<ref>Christopher Slye - OpenType feature files, ATypI 2006 [http://blogs.adobe.com/typblography/atypi2006/slye_lisbon-05.pdf slides]</ref> Consequently, Adobe standardized<ref>{{cite web|url=http://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html |title=OpenType Feature File Specification |publisher=Adobe.com |date= |accessdate=2009-11-11 |archiveurl = http://web.archive.org/web/20080622121312/http://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html |archivedate = June 22, 2008}}</ref> a text specification format for feature files, which typically have a name ending in a <code>.fea</code> extension. These files can be compiled into the binary font container (<code>.ttf</code> or <code>.otf</code>) using [[Adobe FDK]] (AFDKO), [[FontLab]] or [[FontForge]]. The latter program implements a few features that are documented in the Adobe standard but are not implemented by AFDKO.<ref>{{cite web|url=http://fontforge.sourceforge.net/featurefile.html |title=FontForge's implementation of Adobe's Feature File syntax |publisher=Fontforge.sourceforge.net |date= |accessdate=2009-11-11}}</ref> ==Layout tags== OpenType Layout tags are 4-byte character strings that identify the scripts, language systems, features and baselines in an OpenType Layout font. Microsoft's Layout tag registry establishes conventions for naming and using these tags. OpenType features are created by using the tags in creating feature scripts that describe how characters are to be manipulated to make the desired feature. These feature scripts can be created and incorporated into OpenType fonts by advanced font editors such as [[Fontlab|FontLab Studio]], AsiaFont Studio, and [[FontForge]]. Operating system and application support for layout tags varies widely. A 2007 presentation<ref>Jürgen Willrodt - TypoTechnica Frankfurt 2007 [http://www.fontmaster.nl/pdf/OT_docs/OpenType_Status_2007.pdf slides]</ref> summarizing the state of affairs was given by Jürgen Willrodt at [[TypoTechnica]] 2007. ===Script tags=== Script tags identify the scripts (writing systems) represented in an OpenType typeface. Each tag corresponds to contiguous character code ranges in Unicode. A script tag can consist of 4 or fewer lowercase letters, such as <tt>{{Sic|hide=y|ar|ab}}</tt><!-- note that arab is intentionally lower case because it is a normalized tag --> for the [[Arabic alphabet]], <tt>{{Sic|hide=y|cy|rl}}</tt> for the [[Cyrillic alphabet]] and <tt>{{Sic|hide=y|la|tn}}</tt> for the [[Latin alphabet]]. The <tt>math</tt> script tag, added by Microsoft for [[Cambria (typeface)|Cambria Math]], has been added to the specification.<ref name="scipttagregistry">{{cite web|url=http://www.microsoft.com/typography/otspec/scripttags.htm|title=Script tags|date=2008-01-29|work=OpenType Layout tag registry|accessdate=2009-11-02}}</ref><ref name="isoiec14496222009">{{cite web|url=http://standards.iso.org/ittf/PubliclyAvailableStandards/c052136_ISO_IEC_14496-22_2009(E).zip|title=ISO/IEC 14496-22:2009(E)|coauthors=International Organization for Standardization and International Electrotechnical Commission|date=2009-08-15|work=Information technology &mdash; Coding of audio-visual objects &mdash; Part 22: Open Font Format (2nd ed)|pages=286 (section 6.4.1)|accessdate=2009-11-02}} (consent to non-chargeable online licence agreement required to download specification)</ref> ===Language system tags=== Language system tags identify the language systems supported in an OpenType typeface. Examples include <tt>ARA</tt> for [[Arabic language|Arabic]], <tt>ESP</tt> for [[Spanish language|Spanish]], <tt>HYE</tt> for [[Armenian language|Armenian]], etc. The codes are not in general the same as [[ISO 639-2]] codes. ===Feature tags=== {{main|OpenType feature tag list}} OpenType has a long list of feature tags. An abbreviated list of the most important features, sorted by their English description is given in the [[List of typographic features#OpenType Typographic Features|OpenType section of the list of typographic features]]. ===Baseline tags=== Baseline tags have a specific meaning when used in the horizontal writing direction (used in the 'BASE' table's HorizAxis table), vertical writing direction (used in the 'BASE' table's VertAxis table), or both. {|class="wikitable" |- | Baseline Tag |HorizAxis |VertAxis |- |'hang' |horizontal line from which the syllabograms seem to hang in the [[Tibetan script]] |The same line in Tibetan vertical writing mode. |- |'icfb' |Ideographic character face bottom edge baseline. |Ideographic character face left edge baseline. |- |'icft' |Ideographic character face top edge baseline. |Ideographic character face right edge baseline. |- |'ideo' |Ideographic em-box bottom edge baseline. |Ideographic em-box left edge baseline. |- |'idtp' |Ideographic em-box top edge baseline. |Ideographic em-box right edge baseline. |- |'math' |The baseline about which mathematical characters are centered. |The baseline about which mathematical characters are centered in vertical writing mode. |- |'romn' |The baseline used by simple alphabetic scripts such as Latin, Cyrillic and Greek. |The alphabetic baseline for characters rotated 90 degrees clockwise for vertical writing mode. |} ==SING ''gaiji'' solution== In 2005, Adobe shipped a new technology in their [[Adobe Creative Suite|Creative Suite]] applications bundle that offers a solution for the ''[[Kanji#Gaiji|gaiji]]'' (Japanese for "outside character") problem. Ideographic writing scripts such as Chinese and Japanese do not have fixed collections of characters. They use thousands of glyphs commonly and tens of thousands less commonly. Not all glyphs ever invented and used in Far Eastern literature have even been catalogued. A typical font might contain 8,000 to 15,000 of the most commonly used glyphs. From time to time, though, an author needs a glyph not present in the font of choice. Such missing characters are known in Japan as ''gaiji'', and they often disrupt work. Another aspect of the ''gaiji'' problem is that of variant glyphs for certain characters. Often certain characters have been written differently over periods of time. It is not unusual for place names or personal family names to use a historical form of a character. Thus it is possible for an [[End-user (computer science)|end user]] using standard fonts to be left unable to spell correctly either their own name or the name of the place where they live. Several ways to deal with ''gaiji'' have been devised. Solutions that treat them as characters usually assign arbitrary Unicode values to them in the [[Mapping of Unicode characters#Private Use Area|Private Use Area]] (PUA). Such characters cannot be used outside the environment in which the association of the private Unicode to the glyph shape is known. Documents based on them are not portable. Other installations treat ''gaiji'' as graphics. This can be cumbersome because text layout and composition cannot apply to graphics. They cannot be searched for. Often their rendering looks different from surrounding characters because the machinery for rendering graphics usually is different from the machinery for rendering glyphs from fonts. The SING (Smart INdependent Glyphlets)<ref>{{cite web|url=http://www.adobe.com/devnet/opentype/gdk/topic.html |title=Adobe 