an [[Open-source software|open-source]] [[Ajax (programming)|Ajax]] [[Web application framework]], written in [[Java (programming language)|Java]],<ref name="ZK - Ajax without JavaScript">{{cite book | last = Chen | first = Henri | title = ZK - Ajax without JavaScript | publisher = Apress | year = 2008 | isbn = 978-1590599013 | page = 125}}</ref><ref name="ZK Developer's Guide">{{cite book | last = Staeuble | first = Markus | title = ZK Developer's Guide | publisher = Packt Publishing | year = 2008 | isbn = 978-1847192004 | page = 184}}</ref><ref name="ITWeb">{{cite web | last = Van der Schyff | first = Andre | title = A look at MVC frameworks | url = http://www.itweb.co.za/sections/industryinsight/software/vanderschyff090331.asp?S=Software&A=SFT&O=google | date = 03-31-2009 | publisher = ITWeb | quote = MVC frameworks provide limited functionality when compared to ZK, Echo and other Java Web frameworks.}}</ref> that enables creation of rich [[graphical user interface]]s for [[Web applications]] with no JavaScript and little programming knowledge. The core of ZK consists of an [[Ajax (programming)|Ajax]]-based [[event-driven]] mechanism, over 123 [[XUL]] and 83 [[XHTML]]-based components,<ref>{{cite web | title = ZK Explorer | url = http://www.zkoss.org/zkdemo/ | accessdate = 08-25-2010}} </ref> and a markup language for designing user interfaces. Programmers design their application pages in [[feature-rich]] [[XUL]]/[[XHTML]] components, and manipulate them upon events triggered by end user's activity. It is similar to the programming model found in desktop GUI-based applications. ZK takes the so called server-centric approach that the content synchronization of components and the event pipelining between clients and servers are automatically done by the engine and Ajax plumbing codes are completely transparent to web application developers. Therefore, the end users get the similar engaged interactivity and responsiveness as a desktop application, while programmers' development retains a similar simplicity to that of desktop applications. In addition to component-based programming in a manner similar to [[Swing (Java)|Swing]], ZK supports a markup language for rich user interface definition called ZUML. * ZUML is designed for non-programmer developers to design user interfaces intuitively. * ZUML allows developers to meld different markup languages, such as [[Mozilla]] XUL language and XHTML, seamlessly into the same page. * ZUML allows developers to embed scripts in pure Java language (interpreted by [[BeanShell]]) and use [[JavaServer Pages|EL]] expressions to manipulate the components and access data. == Features == * Declarative high level specification of rich (rather than plain HTML) user interfaces. For example the XUL widget set includes support for trees, comboboxes, bandboxes and sliders [http://www.zkoss.org/zkdemo/userguide/]. * Embedding scripting support with Java (Beanshell [http://www.beanshell.org/]). This is an important benefit as you can use a unified programming language for both user interface and backend programming. Optional support for other serverside Java scripting in other languages such as JavaScript (Rhino [http://www.mozilla.org/rhino/]), Ruby (JRuby [http://jruby.codehaus.org/]), Python (Jython [http://www.jython.org/Project/]) and Groovy [http://groovy.codehaus.org/]. * High level Ajax support. User input passes from the browser to the serverside desktop model over Ajax. * Event-driven component-based model (similar to desktop programming models). * Support for creating user interfaces using different patterns. A MVC programming approach can be adopted with all events forwarded to a central controller class [http://www.zkoss.org/smalltalks/mvc3/]. Alternatively event handlers can be defined within the page using zscript [http://www.zkoss.org/doc/devguide/ch06s08s02.html]. The MVC page approach is analogous to Swing programming and the in-page approach is analogous to DHTML programming on the server. * Support for integrating with existing web frameworks via a JSP custom tag library, JSF support and a Servlet Filter. Has support for Spring and Hibernate. * Extensible in that programmers can create new custom UI controls. Groups of controls can be re-used as a macro component. * Databinding capability via in-page annotations that transparently bind screen controls to the fields of POJOs on the server. == Differences from XUL == * ZK is a server side framework which emits HTML and thus does not depend on client side presence of [[Gecko (layout engine)|Gecko]] making it portable to any browser. ZK takes ZUML (xul and xhtml) serverside pages as input and outputs dhtml for the browser. * ZK processes user interface logic on the server in Java. This increases choice in the scripting engines and application libraries that can be used to create logic. Presentation effects can be delegated to the browser using the Client-side Actions feature to reduce server load for dhtml effects. Running the application logic on the server in a single application container reduces the amount of cross browser and browser version testing when compared to extensively programming the DOM at the browser. * While ZK and XUL have an overlapping subset of components, ZK has its own unique component sets. The component library can be extended with custom components. Macro components can be defined that are composites of components. * ZK provides serverside databinding annotations to declaratively bind UI components to serverside data. * [[Look and feel#In widget toolkits|Look and Feel]] differences. ==System requirements== * [[JRE]] version 1.4 or later * A Web server supporting [[Servlet]] 2.3 or later ==Prerequisites of programming skills== ===Required=== * Basic knowledge of Java or a Java scripting engine language such as [[Groovy (programming language)|Groovy]], [[Rhino (JavaScript engine)|Rhino]] (Java JavaScript), [[JRuby]] (Java Ruby) or [[Jython]] (Java Python) * Basic knowledge of [[HTML]] and [[XUL]] ===Optional=== * Knowledge of a scripting language to write the glue logic (running on the server): ** [[BeanShell]] (Java interpreter), [[JavaScript]], [[Groovy (programming language)|Groovy]], [[Ruby (programming language)|Ruby]], and [[Python (programming language)|Python]] currently supported. * Object Oriented Programming. You can choose to do AWT/Swing style programming against the ZK API. You can choose to program one or more custom UI controller classes in Java. This is entirely optional. Alternatively you can choose to use zscript script tags for user interface logic which is similar to dhtml programming. * Servlet Programming. ZK is built on top of the Servlet API. You can choose to do regular Servlet programming and use ZUML as the page language. * Ajax. ZK is built on top of Ajax but it automatically converts user input at the browser to Java events at the server so you do not have to either 