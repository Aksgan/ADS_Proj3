JNL, JNLE, JNO, JNP, JNS, JNZ, JO, JP, JPE, JPO, JS, JZ'') |- | [[JMP (x86 instruction)|JMP]] || '''J'''u'''mp''' || |- | LAHF || '''L'''oad '''f'''lags into '''AH''' register || |- | LDS || '''L'''oad pointer using '''DS''' || |- | LEA || '''L'''oad '''E'''ffective '''A'''ddress || |- | LES || '''L'''oad '''ES''' with pointer || |- | LOCK || Assert BUS '''LOCK'''# signal || (for multiprocessing) |- | LODSB || '''Lo'''a'''d''' '''b'''yte || |- | LODSW || '''Lo'''a'''d''' '''w'''ord || |- | LOOP/LOOPx || '''Loop''' control || (''LOOPE, LOOPNE, LOOPNZ, LOOPZ'') |- | [[MOV (x86 instruction)|MOV]] || '''Mov'''e |- | MOVSB || '''Mov'''e '''b'''yte from '''s'''tring to string || |- | MOVSW || '''Mov'''e word from '''s'''tring to '''s'''tring || |- | MUL || Unsigned '''mul'''tiply || |- | NEG || Two's complement '''neg'''ation || |- | [[NOP]] || '''N'''o '''op'''eration || opcode (0x90) equivalent to XCHG EAX, EAX |- | NOT || Negate the operand, logical '''NOT''' || |- | OR || [[Logical disjunction|Logical '''OR''']] || |- | OUT || '''Out'''put to port || |- | POP || '''Pop''' data from [[Stack (data structure)|stack]] || POP CS (opcode 0x0F) works only on 8086/8088. Later CPUs use 0x0F as a prefix for newer instructions. |- | POPF || '''Pop''' data into [[FLAGS register (computing)|'''f'''lags register]] || |- | PUSH || '''Push''' data onto stack || |- | PUSHF || '''Push f'''lags onto stack || |- | RCL || '''R'''otate '''l'''eft (with '''c'''arry) || |- | RCR || '''R'''otate '''r'''ight (with '''c'''arry) || |- | REPxx || '''Rep'''eat CMPS/MOVS/SCAS/STOS || (''REP, REPE, REPNE, REPNZ, REPZ'') |- | RET || '''Ret'''urn from procedure || |- | RETN || '''Ret'''urn from '''n'''ear procedure || |- | RETF || '''Ret'''urn from '''f'''ar procedure || |- | ROL || '''Ro'''tate '''l'''eft || |- | ROR || '''Ro'''tate '''r'''ight || |- | SAHF || '''S'''tore '''AH''' into '''f'''lags || |- | SAL || [[Arithmetic shift|'''S'''hift '''A'''rithmetically]] '''l'''eft (signed shift left) || |- | SAR ||''' S'''hift '''A'''rithmetically '''r'''ight (signed shift right) || |- | SBB || '''S'''u'''b'''traction with '''b'''orrow || |- | SCASB || '''C'''omp'''a'''re '''b'''yte '''s'''tring || |- | SCASW || '''C'''omp'''a'''re '''w'''ord '''s'''tring || |- | SHL || [[Logical shift|'''Sh'''ift]] '''l'''eft (unsigned shift left) || |- | SHR || '''Sh'''ift '''r'''ight (unsigned shift right) || |- | STC || '''S'''e'''t''' '''c'''arry flag || |- | STD || '''S'''e'''t''' '''d'''irection flag || |- | [[STI (x86 instruction)|STI]] || '''S'''e'''t''' '''i'''nterrupt flag || |- | STOSB || '''Sto'''re '''b'''yte in '''s'''tring || |- | STOSW || '''Sto'''re '''w'''ord in '''s'''tring || |- | SUB || '''Sub'''traction || |- | [[TEST (x86 instruction)|TEST]] || Logical compare (AND) || |- | WAIT || '''Wait''' until not busy || Waits until BUSY# pin is inactive (used with [[floating-point unit]]) |- | XCHG || E'''xch'''an'''g'''e data || |- | XLAT || Table look-up translation || |- | XOR || [[Exclusive or|E'''x'''clusive '''OR''']] || |} ===Added in specific processors=== ====Added with [[80186]]/[[80188]]==== {| class="wikitable" ! Instruction !! Meaning !! Notes |- | BOUND || Check array index against '''bound'''s || raises software interrupt 5 if test fails |- | ENTER || '''Enter''' stack frame || equivalent to <pre>PUSH BP MOV BP, SP SUB SP, n</pre> |- | INS || '''In'''put from port to '''s'''tring || equivalent to <pre> IN (E)AX, DX MOV ES:[(E)DI], (E)AX ; adjust (E)DI according to operand size and DF </pre> |- | LEAVE || '''Leave''' stack frame || equivalent to <pre>MOV SP, BP POP BP</pre> |- | OUTS || '''Out'''put '''s'''tring to port || equivalent to <pre> MOV (E)AX, DS:[(E)SI] OUT DX, (E)AX ; adjust (E)SI according to operand size and DF </pre> |- | POPA || '''Pop a'''ll general purpose registers from stack || equivalent to <pre>POP DI, SI, BP, SP, BX, DX, CX, AX</pre> |- | PUSHA || '''Push a'''ll general purpose registers onto stack || equivalent to <pre>PUSH AX, CX, DX, BX, SP, BP, SI, DI</pre> |} ====Added with [[80286]]==== {| class="wikitable" ! Instruction !! Meaning !! Notes |- | ARPL || '''A'''djust '''RPL''' field of selector || |- | CLTS || '''Cl'''ear '''t'''ask-'''s'''witched flag in register CR0 || |- | LAR || '''L'''oad '''a'''ccess '''r'''ights byte || |- | LGDT || '''L'''oad '''g'''lobal '''d'''escriptor '''t'''able || |- | LIDT || '''L'''oad '''i'''nterrupt '''d'''escriptor '''t'''able || |- | LLDT || '''L'''oad '''l'''ocal '''d'''escriptor '''t'''able || |- |- | LMSW || '''L'''oad '''m'''achine '''s'''tatus '''w'''ord || |- | [[LOADALL]] || '''Load all''' CPU registers, including internal ones such as GDT || Undocumented, (80)286 and 386 only |- |LSL || '''L'''oad '''s'''egment '''l'''imit || |- |[[Load Task Register|LTR]] || '''L'''oad '''t'''ask '''r'''egister || |- | SGDT || '''S'''tore '''g'''lobal '''d'''escriptor '''t'''able || |- | SIDT || '''S'''tore '''i'''nterrupt '''d'''escriptor '''t'''able || |- | SLDT || '''S'''tore '''l'''ocal '''d'''escriptor '''t'''able || |- | SMSW || '''S'''tore '''m'''achine '''s'''tatus '''w'''ord || |- | STR || '''S'''tore '''t'''ask '''r'''egister || |- | VERR || '''Ver'''ify a segment for '''r'''eading || |- | VERW || '''Ver'''ify a segment for '''w'''riting || |} ====Added with [[80386]]==== {| class="wikitable" ! Instruction !! Meaning !! Notes |- | BSF || '''B'''it '''s'''can '''f'''orward || |- | BSR || '''B'''it '''s'''can '''r'''everse || |- | BT || '''B'''it '''t'''est || |- | BTC || '''B'''it '''t'''est and '''c'''omplement || |- | BTR || '''B'''it '''t'''est and '''r'''eset || |- | BTS || '''B'''it '''t'''est and '''s'''et || |- | CDQ || '''C'''onvert '''d'''ouble-word to '''q'''uad-word || Sign-extends EAX into EDX, forming the quad-word EDX:EAX. Since (I)DIV uses EDX:EAX as its input, CDQ must be called after setting EAX if EDX is not manually initialized (as in 64/32 division) before (I)DIV. |- | CMPSD || '''C'''ompare '''s'''tring '''d'''ouble-word || Compares ES:[(E)DI] with DS:[SI] |- | CWDE || '''C'''onvert '''w'''ord to '''d'''ouble-word || Unlike CWD, CWDE sign-extends AX to EAX instead of AX to DX:AX |- | INSB, INSW, INSD || '''In'''put from port to '''s'''tring with explicit size || same as INS |- | IRETx || '''I'''nterrupt '''ret'''urn; D suffix means 32-bit return, F 