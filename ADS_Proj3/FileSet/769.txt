2002 | isbn = 0471219746 }}, {{cite book | last = Hewitt | first = Eben | title = Java for Coldfusion Developers | publisher = Pearson Education | location = Upper Saddle River | year = 2003 | isbn = 0130461806}}</ref> used to embed programmer-readable [[annotation]]s in the [[source code]] of a [[computer program]].<ref name="PennyGrubb000">Source code can be divided into ''program code'' (which consists of machine-translatable instructions); and ''comments'' (which include human-readable notes and other kinds of annotations in support of the program code).{{ cite book | last = Penny Grubb | first = Armstrong Takang | title = Software Maintenance: Concepts and Practice | publisher = World Scientific | year = 2003 | isbn = 981238426X | pp = 7, 120â€“121}}</ref> Those annotations are potentially significant to programmers but typically ignorable to [[compiler]]s and [[interpreter (computing)|interpreter]]s.<ref>Some programming environments include comments as one element of the language syntax that is retained for further processing, instead of discarded once recognized by the language processor.</ref><ref name="CmmtIgnored">Comments must be indicated in a way that allows a source code processor to recognize them as such. This is often simplified by saying comments are "ignored" (after they have been recognized and discarded) by the processor.</ref> Comments are usually added with the purpose of making the source code easier to understand. The syntax and rules for comments vary and are usually defined in a [[programming language specification]] (see the [[comparison of programming languages (syntax)#Comments|syntax of comments in various programming languages]]). Comments have a wide range of potential uses: from augmenting program code with basic descriptions, to generating external [[documentation generator|documentation]].<ref name="generate">Comments can be processed in various ways to generate documentation external to the source code itself. See e.g., [[Comparison of documentation generators]].</ref> Comments are also used for integration with [[source code management]] systems and other kinds of external [[programming tool]]s. The flexibility provided by comments often allows for a wide degree of variability and potentially non-useful information inside source code. To address this, many technical commentators and software analysts subscribe to any of several "philosophies" and guidelines regarding the proper use of comments. == Overview == Comments are generally formatted as ''block comments'' (also called ''prologue comments'' or ''stream comments'') or ''line comments'' (also called ''inline comments'').<ref name="JBDixit000">{{cite book | last = Dixit | first = J.B. | title = Computer Fundamentals and Programming in C | publisher = Laxmi Publications | year = 2003 | isbn = 8170088828 }}</ref> Block comments [[delimiter#Bracket delimiters|delimit]] a region of source code in which the region is allowed to span multiple lines. This region is specified with a ''start'' delimiter and an ''end'' delimiter. Some programming languages (such as [[MATLAB]]) allow block comments to be recursively nested inside one another, but others (such as [[Java (programming language)|Java]]) do not.<ref name="Higham000">{{cite book | title = MATLAB Guide | first = Desmond | last = Higham | publisher = SIAM | year = 2005 | isbn = 0898715784 }}</ref><ref name="Vermeulen000">{{cite book | title = The Elements of Java Style | first = Al | last = Vermeulen | publisher = Cambridge University Press | year = 2000 | isbn = 0521777682 }}</ref><ref name="javadude000">{{cite web | title = Using the right comment in Java | url = http://javadude.com/articles/comments.html | accessdate = 2007-07-24 }}</ref> Line comments either start with a comment delimiter and continue until the end of the line, or in some cases, start at a specific column (character line offset) in the source code, and continue until the end of the line.<ref name="javadude000" /> Some programming languages employ both block and line comments with different comment delimiters. For example, [[C++]] has block comments delimited by <code>/*</code> and <code>*/</code> that can span multiple lines and line comments delimited by <code>//</code>. Other languages support only one type of comment. For example, [[Ada (programming language)|Ada]] comments are line comments: they start with <code>--</code> and continue to the end of the line.<ref name="javadude000" /> ==Uses== How best to make use of comments is subject to dispute; different commentators have offered varied and sometimes opposing viewpoints.<ref name="Dietrich000">{{cite book | last = W. R. | first = Dietrich | title = Applied Pattern Recognition: Algorithms and Implementation in C++ | publisher = Springer | year = 2003 | isbn = 3528355581 }} offers viewpoints on proper use of comments in source code. p. 66.</ref><ref name="Keyes000">{{cite book | last = Keyes | first = Jessica | title = Software Engineering Handbook | publisher = CRC Press | year = 2003 | isbn = 0849314798 }} discusses comments and the "Science of Documentation" p. 256.</ref> There are many different ways of writing comments and many commentators who offer sometimes conflicting advice.<ref name="Keyes000" /> === Code description === Comments can be used to summarize code or to explain the programmer's intent. According to this school of thought, restating the code in plain English is considered superfluous; the need to re-explain code may be a sign that it is too complex and should be rewritten. :"Don't document bad code &ndash; rewrite it."<ref name="BadComment000">''[[The Elements of Programming Style (book)|The Elements of Programming Style]]'', [[Brian Kernighan|Kernighan]] & [[P. J. Plauger|Plauger]]</ref> :"Good comments don't repeat the code or explain it. They clarify its intent. Comments should explain, at a higher level of abstraction than the code, what you're trying to do."<ref name="GoodComment000">''[[Code Complete]]'', [[Steve McConnell|McConnell]]</ref> Comments may also be used to explain why a block of code does not seem to fit conventions or best practices. This is especially true of projects involving very little development time, or in bug fixing. For example: <source lang="vb">' Second variable dim because of server errors produced when reuse form data. No ' documentation available on server behavior issue, so just coding around it. vtx = server.mappath("local settings") </source> === Algorithmic description === Sometimes source code contains a novel or noteworthy solution to a specific problem. In such cases, comments may contain an explanation of the methodology. Such explanations may include diagrams and formal mathematical proofs. This may constitute explanation of the code, rather than a clarification 