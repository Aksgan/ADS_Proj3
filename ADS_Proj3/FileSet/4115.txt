EADS Nucletudes] - A company dedicated to hardening system in harsh elctromagnetic and radiative environments == References == {{reflist}} *Ziegler, J. F. and W. A. Lanford, "Effect of Cosmic Rays on Computer Memories", ''Science'', 206, 776 (1979). *Mukherjee, S, "Architecture Design for Soft Errors," Elsevier, Inc., Feb. 2008. *Mukherjee, S, "Computer Glitches from Soft Errors: A Problem with Multiple Solutions," Microprocessor Report, May 19, 2008. [[Category:Digital electronics]] [[Category:Computer memory]] [[de:Soft Error]]</text> </page> <page> <id>34908</id> <title>Soft independent modelling of class analogies</title> <text>'''Soft independent modelling by class analogy''' (SIMCA) is a [[statistics|statistical]] method for [[Supervised learning|supervised classification]] of data. The method requires a training data set consisting of samples (or objects) with a set of attributes and their class membership. The term soft refers to the fact the classifier can identify samples as belonging to multiple classes and not necessarily producing a classification of samples into non-overlapping classes. ==Method== In order to build the classification models, the samples belonging to each class need to be analysed using [[principal components analysis]] (PCA); only the significant components are retained. For a given class, the resulting model then describes either a line (for one Principal Component or PC), plane (for two PCs) or hyper-plane (for more than two PCs). For each modelled class, the mean orthogonal distance of training data samples from the line, plane or hyper-plane (calculated as the residual standard deviation) is used to determine a critical distance for classification. This critical distance is based on the [[F-distribution]] and is usually calculated using 95% or 99% confidence intervals. New observations are projected into each PC model and the residual distances calculated. An observation is assigned to the model class when its residual distance from the model is below the statistical limit for the class. The observation may be found to belong to multiple classes and a measure of [[goodness of fit|goodness of the model]] can be found from the number of cases where the observations are classified into multiple classes. The classification efficiency is usually indicated by [[Receiver operating characteristic]]s. In the original SIMCA method, the ends of the hyper-plane of each class are closed off by setting statistical control limits along the retained principal components axes (i.e. range: minimum score value minus 0.5 times score standard deviation to maximum score value plus 0.5 times standard deviation). More recent adaptations of the SIMCA method close off the hyper-plane by construction of ellipsoids (e.g. [[Hotelling's T-square distribution|Hotellings T<sup>2</sup>]] or [[Mahalanobis distance]]). With such modified SIMCA methods, classification of an object requires both that its orthogonal distance from the model and its projection within the model (i.e. score value within region defined by ellipsoid) are not significant. ==Application== SIMCA as a method of classification has gained widespread use especially in applied statistical fields such as [[chemometrics]] and spectroscopic data analysis. ==References== * Wold, Svante, and Sjostrom, Michael, 1977, SIMCA: A method for analyzing chemical data in terms of similarity and analogy, in Kowalski, B.R., ed., Chemometrics Theory and Application, American Chemical Society Symposium Series 52, Wash., D.C., American Chemical Society, p. 243-282. [[Category:Machine learning]] [[Category:Classification algorithms|*]]</text> </page> <page> <id>34941</id> <title>Software Industry Conference</title> <text>{{Refimprove|date=January 2009}} {{Primary sources|date=January 2009}}{{Notability|date=January 2009}} The '''Software Industry Conference''' is an annual conference for [[Micro ISV]]s, [[software developer]]s, [[Electronic commerce|e-commerce]] providers, [[software publisher]]s, and others who work in the software industry. The '''Software Industry Conference''' is planned and implemented by the [[Shareware Industry Awards Foundation]]. The conference is three days of educational sessions, tutorials, networking opportunities, exhibits, and an awards banquet for MicroISV's and software professionals. The 19th annual '''Software Industry Conference''' was held in Dallas, TX- July 15-17, 2010. The annual SIC Exhibit Night was held on July 16, and the Software Industry Awards dinner was held on July 17. ==History== The Software Industry Conference website notes: "From 1991 through 1994 the conference was called the Summer Shareware Seminar and was held in June. In 1994, due to a conflict with [[Ziff Davis|Ziff-Davis]], the conference name was changed to the Shareware Industry Conference and began being held in July. In 2007, the [[board of directors]] changed the name to Software Industry Conference to better reflect the needs of the industry." ==Board of directors== * Paris Karahalios * Harold Holmes * Gary Elfring * Sue Picchotta * Mitch Vincent * Sharon Housley ==External links== * http://www.sic.org [[Category:Computer-related awards]]</text> </page> <page> <id>34948</id> <title>Software Requirements Specification</title> <text>{{merge|Software requirements|date=December 2010}} {{Unreferenced|date=July 2010}} {{IEEE software documents}} A '''Software Requirements Specification''' ('''SRS''') - a [[requirements specification]] for a [[software system]] - is a complete description of the behavior of a system to be developed. It includes a set of [[use case]]s that describe all the interactions the users will have with the software. Use cases are also known as [[functional requirements]]. In addition to use cases, the SRS also contains non-functional (or supplementary) requirements. [[Non-functional requirements]] are requirements which impose constraints on the design or implementation (such as [[performance engineering]] requirements, [[Quality (business)|quality]] standards, or design constraints). == See also == * [[Functional specification]] * [[Product design specification]] * [[Requirements analysis]] * [[Software development process]] * [[Specification (technical standard)]] * [[Specification and Description Language]] * [[System requirements]] * [[Verification and Validation (software)]] ==External links== * [http://reqman.requirementone.com/web/forms/public/wiki/Requirements.aspx?SpecID=5f4c9a38-d78b-481d-959b-e3ca10fd9b23 Create an SRS IEEE 830 specification online ] [[Category:Software requirements]] [[Category:Software documentation]] [[Category:IEEE standards]] [[de:Software Requirements Specification]] [[es:Especificación de Requisitos Software]] [[it:Specifica dei requisiti]] [[he:מפרט דרישות תוכנה]] [[pl:Software Requirements Specification]] [[ru:Спецификация программного обеспечения]] [[fi:Ohjelmiston vaatimusmäärittely]] [[sv:Kravspecifikation]] [[th:การระบุข้อกำหนดซอฟต์แวร์]] [[uk:Специфікація вимог до програмного забезпечення]]</text> </page> <page> <id>34957</id> <title>Software archaeology</title> <text>'''Software archaeology''' or '''software archeology''' is the study of poorly documented or undocumented [[legacy system|legacy software]] implementations, as part of [[software maintenance]].<ref name="RGBH">Gregorio Robles, Jesus M. Gonzalez-Barahona, and Israel Herraiz, "[http://herraiz.org/papers/english/icsm05short.pdf An Empirical Approach to Software Archaeology]," ''Poster Proceedings of the International Conference on Software Maintenance'', 2005.</ref><ref>"[http://www.agilemodeling.com/essays/agileLegacyIntegrationModeling.htm Agile Legacy System Analysis and Integration Modeling]" by [[Scott Ambler|Scott W. Ambler]] at agilemodeling.com, accessed 20 August 2010: "Without accurate documentation, or access to knowledgeable people, your last resort may be to analyze the source code for the legacy system... This effort is often referred to as 