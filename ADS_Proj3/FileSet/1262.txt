is submitted, an [[Hypertext Transfer Protocol|HTTP]] request containing the token is generated, and sent to the SSL cryptographic provider for encryption and secure transmission to the remote server. Instead of the encryption happening on the host PC, which may be compromised, the session is redirected to the secure environment (secure input device, server, etc..) which would contain your real online banking [[password]]. Inside the secure environment, the token within the HTTP request would get swapped out with your real online banking password at the moment of encryption. The encrypted packet, containing your real online banking password, would then be returned to the SSL system of the host PC for transmission to the remote server. From the server's perspective, the request appears like any other regular keyed-in request. The packet was encrypted with the SSL session key negotiated with the client, and so is able to decrypt and process the packet as normal. It cannot tell the difference between a regular SSL transaction and a Dynamic SSL transaction. The only difference in the transaction was that the sensitive data was never present on the host PC. Any malicious attempt to harvest the data from the host PC would be unable to locate the data. A [http://208.68.104.126/smartswipe/dynamic-ssl/dynamic-ssl-white-paper.html whitepaper] is available which describes the process of Dynamic SSL in further detail. <!-- The process is likely best described in an application: Consider a web browser, where the default SSL cryptographic provider has been replaced with a Dynamic SSL cryptographic proxy. The actual cryptographic provider is implemented in a remote server which stores a user's health record. 1. When an application requests sensitive data from an input source, a token is generated and input into the location where sensitive data is expected. 2. The application sends the sensitive data to the remote server via SSL. Using this approach, any SSL-enabled system can be transparently retrofitted for endpoint security without changing the application on the client end or the server end. By replacing the default cryptographic provider of the host process with the proxy, Since Dynamic SSL is agnostic to the can transparently retrofit any existing cryptographic system. Dynamic SSL is agnostic to both the host process or the secure environment. --> <!--== Tokenized Encryption == A whitepaper on Dynamic SSL, available on the NetSecure Technologies site, refers to the process as "variable-based encryption". However, study of the process reveals that it is a tokenization approach. Tokenization. At the moment of encryption, the token is replaced by the real authentication credentials. --> ==Strengths and weaknesses== Dynamic SSL is the only known approach to endpoint security that requires no changes to existing server systems, and can therefore be used to transparently retrofit existing systems for endpoint security, while retaining the benefits of using a proven standard like SSL. By offloading cryptographic operations to a secure environment which acts as the point of origin for sensitive data, thereby ensuring the endpoint computer does not have access to said sensitive data, proactive protection from endpoint threats can in theory be achieved. However, since Dynamic SSL is simply a process that is applied to SSL implementation, rather than a new protocol, it remains vulnerable to protocol vulnerabilities inherent within SSL, namely Man-in-the-Middle attacks<ref>http://www.opera.com/support/kb/view/944/</ref>. Sharifimehr has proposed a supplementary solution involving Man-in-the-Middle Protection for Dynamic SSL<ref>http://www.smartswipe.ca/images/stories/site/dynamic-ssl-white-paper.pdf</ref>. His algorithm uses a combination of redundant cert verification and key tagging to prevent Man-in-the-Middle attacks and Keyjacking<!--<ref>John Marchesini, S.W.Smith, Meiyuan Zhao, “Keyjacking: risks of the current client-side infrastructure,” Proceedings of the 2nd Annual PKI Research Workshop, 2003. pp. 80-95</ref>-->. Most known implementations of Dynamic SSL include Sharifimehr's additional process, described below: ===Man-in-the-Middle protection=== Known valid root certificates are digitally signed by an independent third party. When an X509 certificate arrives containing the authentication information for a remote website as part of the SSL authentication phase. Since the root certificate signatures are redundantly verified in a secure environment against a pre-verified list of valid digital signatures for known valid root certificates, this prevents any compromise via tampering of the certificate authentication chain. Phony certificates or certification chains can therefore be detected and the session rejected before it begins. ===Keyjacking protection=== Session and authentication keys are contextually bound to the operations which they are semantically required to perform, and may not be exported. An encryption key may not be exported and used to decrypt the ciphertext which is encrypted. In laymans terms, keys are "tagged" to ensure that they can never be exported for use outside of their intended use. ==Commercial applications== A consumer product called [http://www.smartswipe.ca SmartSwipe] is the first known commercial application of Dynamic SSL. It claims to provide security against malware and other client-side attacks while providing universal support for virtually every eCommerce merchant that uses SSL.<ref>http://www.smartswipe.ca/benefits</ref> It is currently unknown whether other products are using this technology. ==References== <!--- See [[Wikipedia:Footnotes]] on how to create references using <ref></ref> tags which will then appear here automatically --> {{Reflist}} ==External links== * [http://www.dynamic-ssl.com/ www.dynamic-ssl.com] * [http://www.smartswipe.ca/images/stories/site/dynamic-ssl-white-paper.pdf Dynamic SSL White Paper] {{DEFAULTSORT:Dynamic Ssl}} [[Category:Computer security]]</text> </page> <page> <id>11245</id> <title>Dynamic device mapping</title> <text>[[Image:USB DDM logo.jpg|thumb|]] [[Image:DDM mapping.jpg|thumb|Full Device Mapping]] '''Dynamic device mapping''' is a technology for [[USB]] [[KVM switch]]es which is sometimes implemented as an alternative to standard [[USB]] [[Keyboard (computing)|keyboard]] and [[Mouse (computing)|mouse]] emulation. == Design == With DDM (Dynamic Device Mapping) Technology, the communication between shared [[peripherals]] and all connected systems are maintained 100% of the time, even as a user switches between the KVM ports. This makes generic device emulation unnecessary as the DDM allows each connected computer system to believe all connected [[I/O]] devices are remaining connected even as the [[KVM switch]] might move to another port. ==KVM device emulation== Many USB [[KVM Switch|KVM devices]] provide [[Hardware emulation|peripheral emulation]], sending signals to the computers that are not currently selected to simulate a keyboard, mouse and monitor being connected. The emulation is used to avoid problems with machines which may reboot in unattended operation. [[Hardware emulation|Peripheral emulation]] services embedded in the hardware also provides continuous support where computers require constant communication with 