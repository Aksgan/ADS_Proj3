(computer scientist)|Roger Moore]] || Canada || written for [[SaskPower | Saskatchewan Power Corp]] || [[Ferranti-Packard 6000 | FP6000]] |- |[[Whetstone (benchmark)|Whetstone]]|| 1964 || [[Brian Randell]] and L J Russell || UK || Atomic Power Division of English Electric Company. Precursor to [[Ferranti Pegasus]], National Physical Laboratories [[Automatic Computing Engine|ACE]] and [[English Electric DEUCE]] implementations. || English Electric Company [[English Electric KDF9|KDF9]] |- |[[NU ALGOL]]|| 1965 || || Norway || || [[UNIVAC]] |- |ALGEK|| 1965 || || [[Soviet Union|USSR]] || [[Minsk family of computers|Minsk-22]] || АЛГЭК, based on ALGOL-60 and [[COBOL]] support, for economical tasks |- |[[MALGOL]]|| 1966 || publ. A. Viil, M Kotli & M. Rakhendi, || [[Estonian Soviet Socialist Republic|Estonian SSR]] || [[Minsk family of computers|Minsk-22]] |- |[[ALGAMS]]|| 1967 || GAMS group (ГАМС, группа автоматизации программирования для машин среднего класса), cooperation of Comecon Academies of Science || [[Comecon]] || [[Minsk family of computers|Minsk-22]], later [[ES EVM]], [[BESM]] |- |[[ALGOL/ZAM]]|| 1967 || || Poland || || Polish [[ZAM (computer)|ZAM]] computer |- |[http://hopl.murdoch.edu.au/showlanguage.prx?exp=7288&language=Chinese%20Algol Chinese Algol]|| 1972 || || China || Chinese characters, expressed via the Symbol system |- |[[DG/L]]|| 1972 || || USA || || DG [[Data General Eclipse|Eclipse]] family of Computers |} The Burroughs dialects included special Bootstrapping dialects such as [[ESPOL]] and [[NEWP]]. ==Properties== ALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of ''transput'' (ALGOL 68 parlance for Input/Output) facilities. ALGOL 60 allowed for two [[evaluation strategy|evaluation strategies]] for [[Parameter (computer science)|parameter]] passing: the common call-by-value, and call-by-name. Call-by-name had certain limitations in contrast to call-by-reference, making it an undesirable feature in imperative language design. For example, it is impossible in ALGOL 60 to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.<ref> {{cite book | last=Aho | first=Alfred V. | authorlink=Alfred V. Aho | coauthors=[[Ravi Sethi]], [[Jeffrey Ullman|Jeffrey D. Ullman]] | title=[[Dragon Book (computer science)|Compilers: Principles, Techniques, and Tools]] | year=1986 | edition=1st | publisher=Addison-Wesley | isbn=0-201-10194-7}}, Section 7.5, and references therein</ref> However, call-by-name is still beloved of ALGOL implementors for the interesting "[[thunk]]s" that are used to implement it. [[Donald Knuth]] devised the "[[man or boy test]]" to separate compilers that correctly implemented "recursion and non-local references." This test contains an example of call-by-name. ===ALGOL 60 Reserved words and restricted identifiers=== There are 35 such reserved words in the standard [[Burroughs large systems]] sub-language: {| | *<code>ALPHA</code> *<code>ARRAY</code> *<code>BEGIN</code> *<code>BOOLEAN</code> *<code>COMMENT</code> | *<code>CONTINUE</code> *<code>DIRECT</code> *<code>DO</code> *<code>DOUBLE</code> *<code>ELSE</code> | *<code>END</code> *<code>EVENT</code> *<code>FALSE</code> *<code>FILE</code> *<code>FOR</code> | *<code>FORMAT</code> *<code>GO</code> *<code>IF</code> *<code>INTEGER</code> *<code>LABEL</code> | *<code>LIST</code> *<code>LONG</code> *<code>OWN</code> *<code>POINTER</code> *<code>PROCEDURE</code> | *<code>REAL</code> *<code>STEP</code> *<code>SWITCH</code> *<code>TASK</code> *<code>THEN</code> | *<code>TRUE</code> *<code>UNTIL</code> *<code>VALUE</code> *<code>WHILE</code> *<code>ZIP</code> |} There are 71 such restricted identifiers in the standard Burroughs large systems sub-language: {| | *<code>ACCEPT</code> *<code>AND</code> *<code>ATTACH</code> *<code>BY</code> *<code>CALL</code> *<code>CASE</code> *<code>CAUSE</code> *<code>CLOSE</code> *<code>DEALLOCATE</code> *<code>DEFINE</code> | *<code>DETACH</code> *<code>DISABLE</code> *<code>DISPLAY</code> *<code>DIV</code> *<code>DUMP</code> *<code>ENABLE</code> *<code>EQL</code> *<code>EQV</code> *<code>EXCHANGE</code> *<code>EXTERNAL</code> | *<code>FILL</code> *<code>FORWARD</code> *<code>GEQ</code> *<code>GTR</code> *<code>IMP</code> *<code>IN</code> *<code>INTERRUPT</code> *<code>IS</code> *<code>LB</code> *<code>LEQ</code> | *<code>LIBERATE</code> *<code>LINE</code> *<code>LOCK</code> *<code>LSS</code> *<code>MERGE</code> *<code>MOD</code> *<code>MONITOR</code> *<code>MUX</code> *<code>NEQ</code> *<code>NO</code> | *<code>NOT</code> *<code>ON</code> *<code>OPEN</code> *<code>OR</code> *<code>OUT</code> *<code>PICTURE</code> *<code>PROCESS</code> *<code>PROCURE</code> *<code>PROGRAMDUMP</code> *<code>RB</code> | *<code>READ</code> *<code>RELEASE</code> *<code>REPLACE</code> *<code>RESET</code> *<code>RESIZE</code> *<code>REWIND</code> *<code>RUN</code> *<code>SCAN</code> *<code>SEEK</code> *<code>SET</code> | *<code>SKIP</code> *<code>SORT</code> *<code>SPACE</code> *<code>SWAP</code> *<code>THRU</code> *<code>TIMES</code> *<code>TO</code> *<code>WAIT</code> *<code>WHEN</code> *<code>WITH</code> *<code>WRITE</code> |} and also the names of all the intrinsic functions. ==Examples and portability issues== ===Code sample comparisons=== ====ALGOL 60==== (The way the bold text has to be written depends on the implementation, e.g. 'INTEGER' (including the quotation marks) for '''integer'''; this is known as [[stropping (syntax)|stropping]].) '''procedure''' Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k); '''value''' n, m; '''array''' a; '''integer''' n, m, i, k; '''real''' y; '''comment''' The absolute greatest element of the matrix a, of size n by m is transferred to y, and the subscripts of this element to i and k; '''begin''' '''integer''' p, q; y := 0; i := k := 1; '''for''' p:=1 '''step''' 1 '''until''' n '''do''' '''for''' q:=1 '''step''' 1 '''until''' m '''do''' '''if''' abs(a[p, q]) > y '''then''' '''begin''' y := abs(a[p, q]); i := p; k := q '''end''' '''end''' Absmax Here's an example of how to produce a table using Elliott 803 ALGOL.<ref>[http://www.billp.org/ccs/A104/ "803 ALGOL"], the manual for Elliott 803 ALGOL</ref> FLOATING POINT ALGOL TEST' BEGIN REAL A,B,C,D' READ D' FOR A:= 0.0 STEP D UNTIL 6.3 DO BEGIN PRINT PUNCH(3),££L??' B := SIN(A)' C := COS(A)' PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C' END' END' PUNCH(3) sends output to the teleprinter rather than the tape punch.<br> SAMELINE suppresses the carriage return + line feed normally printed between arguments.<br> ALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point ====ALGOL 60 family==== Since ALGOL 60 had no I/O facilities, there is no portable [[hello world program]] in ALGOL. The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from [http://www.engin.umd.umich.edu/CIS/course.des/cis400/index.html The Language Guide] at the [[University of Michigan]]-Dearborn Computer and Information Science Department [http://www.engin.umd.umich.edu/CIS/course.des/cis400/algol/hworld.html Hello world! ALGOL Example Program page]. BEGIN FILE F(KIND=REMOTE); EBCDIC ARRAY E[0:11]; REPLACE E BY "HELLO WORLD!"; WRITE(F, *, E); END. A simpler program using an inline format: BEGIN FILE F(KIND=REMOTE); WRITE(F, <"HELLO WORLD!">); END. An even simpler program using the Display statement: BEGIN DISPLAY("HELLO WORLD!") END. An alternative example, using Elliott Algol I/O is as follows. Elliott Algol used different characters for "open-string-quote" and "close-string-quote", represented here by ‘ and ’. '''program''' HiFolks; '''begin''' '''print''' ‘Hello world’; '''end'''; Here's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5 hole paper tape and thus only had upper case. The code lacked any quote characters so £ (UK Pound Sign) was used for open quote and ? (Question Mark) for close quote. Special sequences were placed in double quotes (e.g. ££L?? produced a new line on the teleprinter). HIFOLKS' BEGIN PRINT £HELLO WORLD£L??' END' 