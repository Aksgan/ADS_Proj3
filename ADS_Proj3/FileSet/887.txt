engineering]], software is all [[information]] processed by [[computer system]], programs and [[data]].<ref name="NYTobit"/> The academic fields studying software are [[computer science]] and [[software engineering]]. <!-- replaced the following citation with the reusable one ><ref>{{cite news|url=http://query.nytimes.com/gst/fullpage.html?res=9500E4DA173DF93BA15754C0A9669C8B63|title=John Tukey, 85, Statistician; Coined the Word 'Software'|publisher=New York Times |date=July 28, 2000 | first=David | last=Leonhardt}}</ref> --> The history of computer software is most often traced back to the first [[software bug]] in 1946{{Citation needed|date=November 2010}}. As more and more programs enter the realm of firmware, and the hardware itself becomes smaller, cheaper and faster as predicted by [[Moore's law]], elements of computing first considered to be software, join the ranks of hardware. Most hardware companies today have more software programmers on the payroll than hardware designers{{Citation needed|date=November 2010}}, since software tools have automated many tasks of [[Printed circuit board]] engineers. Just like the [[Auto industry]], the [[Software industry]] has grown from a few visionaries operating out of their garage with [[prototype]]s. [[Steve Jobs]] and [[Bill Gates]] were the [[Henry Ford]] and [[Louis Chevrolet]] of their times{{Citation needed|date=November 2010}}, who capitalized on ideas already commonly known before they started in the business. In the case of [[Software development]], this moment is generally agreed to be the publication in the 1980s of the specifications for the [[IBM Personal Computer]] published by [[IBM]] employee [[Philip Don Estridge]]. Today his move would be seen as a type of [[crowd-sourcing]]. Until that time, software was ''[[Bundled software|bundled]]'' with the hardware by [[Original equipment manufacturer]]s (OEMs) such as [[Data General]], [[Digital Equipment]] and IBM{{Citation needed|date=November 2010}}. When a customer bought a [[minicomputer]], at that time the smallest computer on the market, the computer did not come with [[Pre-installed software]], but needed to be installed by engineers employed by the OEM. Computer hardware companies not only bundled their software, they also placed demands on the location of the hardware in a refrigerated space called a [[computer room]]. Most companies had their software on the books for 0 dollars, unable to claim it as an asset (this is similar to financing of popular music in those days). When Data General introduced the [[Data General Nova]], a company called Digidyne wanted to use its [[RDOS]] operating system on its own [[Clone (computing)|hardware clone]]. Data General refused to [[Software license|license their software]] (which was hard to do, since it was on the books as a free asset), and claimed their "bundling rights". The [[Supreme Court]] set a precedent called Digidyne v. Data General in 1985. The Supreme Court let a 9th circuit decision stand, and Data General was eventually forced into licensing the Operating System software because it was ruled that restricting the license to only DG hardware was an illegal ''tying arrangement''.<ref>[http://www.jstor.org/pss/1372482 Tying Arrangements and the Computer Industry: Digidyne Corp. vs. Data General]</ref> Soon after, IBM 'published' its [[DOS]] source for free, and [[Microsoft]] was born. Unable to sustain the loss from lawyer's fees, Data General ended up being taken over by [[EMC Corporation]]. The Supreme Court decision made it possible to value software, and also purchase [[Software patent]]s. The move by IBM was almost a protest at the time. Few in the industry believed that anyone would profit from it other than IBM (through free publicity). Microsoft and [[Apple Inc.|Apple]] were able to thus cash in on 'soft' products. It is hard to imagine today that people once felt that software was worthless without a machine. There are many successful companies today that sell only software products, though there are still many common software licensing problems due to the complexity of designs and poor documentation, leading to [[patent troll]]s. With open software specifications and the possibility of software licensing, new opportunities arose for software tools that then became the [[de facto standard]], such as DOS for operating systems, but also various proprietary word processing and [[spreadsheet]] programs. In a similar growth pattern, proprietary development methods became standard [[Software development methodology]]. == Overview == [[Image:Operating system placement.svg|thumb|A layer structure showing where [[operating system]] is located on generally used software systems on [[desktop computer|desktop]]s]] Software includes all the various forms and roles that digitally stored ''data'' may have and play in a computer (or similar system), regardless of whether the data is used as ''code'' for a CPU, or other [[interpreter]], or whether it represents other kinds of [[information]]. Software thus encompasses a wide array of products that may be developed using different techniques such as ordinary [[programming languages]], [[scripting languages]], [[microcode]], or an [[Field-programmable gate array|FPGA]] configuration. The types of software include [[web pages]] developed in languages and frameworks like [[HTML]], [[PHP]], [[Perl]], [[JavaServer Pages|JSP]], [[ASP.NET]], [[XML]], and [[desktop application]]s like [[OpenOffice.org]], [[Microsoft Word]] developed in languages like [[C (programming language)|C]], [[C++]], [[Java (programming language)|Java]], [[C Sharp (programming language)|C#]], or [[Smalltalk]]. [[Application software]] usually runs on an underlying software [[operating system]]s such as [[Linux]] or [[Microsoft Windows]]. Software (or [[firmware]]) is also used in [[video game]]s and for the configurable parts of the [[logic]] systems of [[automobile]]s, [[television]]s, and other [[consumer electronics]]. [[Computer]] software is so called to distinguish it from [[computer hardware]], which encompasses the physical interconnections and devices required to store and execute (or run) the software. At the lowest level, executable code consists of machine language instructions specific to an individual processor. A machine language consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state. Programs are an ordered sequence of instructions for changing the state of the computer in a particular sequence. It is usually written in [[high-level programming language]]s that are easier and more efficient for humans to use (closer to [[natural language]]) than machine language. High-level languages are compiled or interpreted into machine language object code. Software may also be written in an [[assembly language]], essentially, a mnemonic representation of a machine language using a natural language alphabet. Assembly language must be assembled into object code via an [[assembly language#Assembler|assembler]]. == Types of software == {{Unreferenced section|date=August 2010}} Practical [[computer system]]s divide [[software system]]s into three major 