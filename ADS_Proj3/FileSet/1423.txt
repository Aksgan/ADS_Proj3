return. The remaining "[[core competencies]]" determine the firm's unique [[value proposition]].<ref>[[Chris Zook]] with James Allen (2001). ''Profit From the Core: Growth Strategy in an Era of Turbulence'', Cambridge: Harvard Business School Press. ISBN 1-578512-30-1</ref> == References == {{reflist}} [[Category:Enterprise architecture]] [[Category:Management]]</text> </page> <page> <id>12918</id> <title>Extended Window Manager Hints</title> <text>'''Extended Window Manager Hints''', aka '''NetWM''' or '''Net WM''',<ref>[http://blackboxwm.sourceforge.net/NetWM Net WM - Blackbox<!-- Bot generated title -->]</ref> is an [[X Window System]] standard for [[X window manager|window managers]]. It defines various interactions between window managers, utilities, and applications, all part of an entire [[desktop environment]]. It builds on the functionality of the [[Inter-Client Communication Conventions Manual]] (ICCCM). == List of Window Managers that support Extended Window Manager Hints == * [[aewm]] * [[Awesome_(window_manager)|awesome]] * [[Blackbox]] * [[Equinox_Desktop_Environment|edewm]] * [[Enlightenment (window manager)|Enlightenment]] e16 * [[fwm]] (via a [[plugin]]) * [[fvwm]] (via a [[plugin]]) * [[interfacewm]] * [[kwin]] * [[Matchbox_(window_manager)|matchbox]] * [[metacity]] * [[openbox]] * [[Sawfish (window manager)|Sawfish]] (not completely) * [[wmii]] * [[xmonad]] (needs to be turned on in the config) {{unix-stub}} ==Notes and references== {{reflist}} == External links == *[http://www.freedesktop.org/wiki/Specifications/wm-spec The Window Manager Specification Project] at [[freedesktop.org]] * [http://fvwm-ewmh.sourceforge.net/ Extended Window Manager Hints Support For FVWM] {{XWinSys}} [[Category:X Window System]] [[Category:Freedesktop.org]] [[de:Extended Window Manager Hints]] [[ja:Extended Window Manager Hints]]</text> </page> <page> <id>12923</id> <title>Extended finite element method</title> <text>[[Image:Example_of_2D_mesh.png |thumb|2D [[FEM]] [[mesh]], the triangles are the elements, the [[vertex (graph theory)|vertices]] are the [[nodes]] The [[finite element method]] ([[FEM]]) has been the tool of choice since its inception in the 1940's ([[Alexander Hrennikoff|Hrennikoff]], [[Richard Courant|Courant]]) for the simulation of structural mechanics. Today, the [[FEM]] is used to model a much wider range of physical phenomena. ]] The '''extended finite element method (XFEM)''', also known as '''generalized finite element method (GFEM)''' or '''partition of unity method (PUM)''' is a numerical technique that extends the classical [[finite element method]] (FEM) approach by extending the solution space for solutions to differential equations with discontinuous functions. ==History== The extended finite element method (XFEM) was developed in 1999 by [[Ted Belytschko]] and collaborators<ref>{{cite journal | first1=Nicolas | last1=Moës | first2=John | last2=Dolbow | first3=Ted | last3=Belytschko | title=A finite element method for crack growth without remeshing | journal=International Journal for Numerical Methods in Engineering | year=1999 | issue=1 | pages= 131–150 | volume=46}}</ref>, to help alleviate shortcomings of the finite element method and has been used to model the propagation of various discontinuities: strong ([[crack]]s) and weak (material interfaces). The idea behind XFEM is to retain most advantages of meshfree methods while alleviating their negative sides. ==Rationale== The extended finite element method was developed to ease difficulties in solving problems with localized features that are not efficiently resolved by mesh refinement. One of the initial applications was the modelling of [[fracture]]s in a material. In this original implementation, discontinuous basis functions are added to standard polynomial basis functions for nodes that belonged to elements that are intersected by a crack to provide a basis that included crack opening displacements. A key advantage of XFEM is that in such problems the finite element mesh does not need to be updated to track the crack path. Subsequent research has illustrated the more general use of the method for problems involving [[Mathematical singularity|singularities]], material interfaces, regular meshing of microstructural features such as voids, and other problems where a localized feature can be described by an appropriate set of basis functions. ==Principle== Enriched finite element methods extend, or enrich, the approximation space so that it is able to naturally reproduce the challenging feature associated with the problem of interest: the discontinuity, [[Mathematical singularity|singularity]], [[boundary layer]], etc. It was shown that for some problems, such an embedding of the problem's feature into the approximation space can significantly improve convergence rates and accuracy. Moreover, treating problems with discontinuities with eXtended Finite Element Methods suppresses the need to mesh and remesh the discontinuity surfaces, thus alleviating the computational costs and projection errors associated with conventional finite element methods, at the cost of restricting the discontinuities to mesh edges. <!-- == Enrichment == to be written == Application to fracture mechanics == [[Image:Classical enriched nodes1.pdf]] --> == Existing XFEM codes == There exists several research codes implementing this technique to various degrees. * getfem++ * xfem++ * openxfem++ XFEM was also implemented in code ASTER and in Morfeo and is being taken up by industry, with a few plugins and actual core implementations available ([[ANSYS]], [[ABAQUS]], [[SAMCEF]], [[OOFELIE]], etc.). ==References== {{Reflist}} {{Numerical PDE}} [[Category:Numerical differential equations]] [[Category:Partial differential equations]] [[Category:Continuum mechanics]] [[Category:Finite element method]] [[fr:Méthode des éléments finis étendus]]</text> </page> <page> <id>12931</id> <title>Extensibility</title> <text>{{Unreferenced|date=December 2009}} {{Wiktionary}} In [[software engineering]], '''extensibility''' (sometimes confused with [[forward compatibility]]) is a [[system design]] principle where the implementation takes into consideration future growth. It is a systemic measure of the ability to extend a [[system]] and the level of effort required to implement the extension. Extensions can be through the addition of new functionality or through modification of existing functionality. The central theme is to provide for change while minimizing impact to existing system functions. Although forward compatibility and extensibility are similar, they are not the same. A forward compatible system can accept data from a future version of itself and pick out the "known" part of the data. An example is a text-only word processor ignoring picture data from a future version. An extensible system is one that can be upgraded to fully handle the new data in the newer input format. An example is the above mentioned word processor that can be upgraded to handle picture data. In [[systems architecture]], extensibility means the system is designed to include hooks and mechanisms for expanding/enhancing the system with new capabilities without having to make major changes to the system infrastructure. A good architecture provides the design principles to ensure this—a roadmap for that portion of the road yet to be built. Note that this usually means that capabilities and mechanisms must be built into the final delivery which will not be used in that delivery and, indeed, may never be used. These 