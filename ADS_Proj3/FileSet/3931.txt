unfinished user stories and defects are familiar from the Kanban model. Using these methods, the team’s [[workflow]] is directed in a way that allows for minimum completion time for each user story or programming error, and on the other hand ensures each team member is constantly employed.<ref>[http://www.crisp.se/henrik.kniberg/Kanban-vs-Scrum.pdf p.5 Crisp.se]</ref> To illustrate each stage of work, teams working in the same space often use post-it notes or a large whiteboard.<ref>[http://leansoftwareengineering.com/wp-content/uploads/2008/04/scrumban-001.jpg Leansoftwareengineering.com]</ref> In the case of decentralized teams stage illustration software, such as [[Assembla]], ScrumWorks, or [[JIRA]] in combination with GreenHopper can be used to visualize each team’s user stories, defects and tasks divided into separate phases. In their simplest, the tasks or usage stories are categorized into the work stages * Unstarted * Ongoing * Completed If desired, though, the teams can add more stages of work (such as “defined”, “designed”, “tested” or “delivered”). These additional phases can be of assistance if a certain part of the work becomes a bottleneck and the limiting values of the unfinished work cannot be raised. A more specific task division also makes it possible for employees to specialize in a certain phase of work.<ref name="scrumban">[http://leansoftwareengineering.com/ksse/scrum-ban/ Leansoftwareengineering.com]</ref> There are no set limiting values for unfinished work. Instead, each team has to define them individually by trial and error; a value too small results in workers standing idle for lack of work, whereas values too high tend to accumulate large amounts of unfinished work, which in turn hinders completion times.<ref>[http://www.crisp.se/henrik.kniberg/Kanban-vs-Scrum.pdf p.18 - 19 Crisp.se]</ref> A rule of thumb worth bearing in mind is that no team member should have more than two simultaneous selected tasks, and that on the other hand not all team members should have two tasks simultaneously.<ref name="scrumban"/> The major differences between Scrum and Kanban are derived from the fact that, in Scrum work is divided into sprints that last a certain amount of time, whereas in Kanban the workflow is continuous. This is visible in work stage tables, which in Scrum are emptied after each sprint. In Kanban all tasks are marked on the same table. Scrum focuses on teams with multifaceted know-how, whereas Kanban makes specialized, functional teams possible.<ref>[http://www.crisp.se/henrik.kniberg/Kanban-vs-Scrum.pdf p.22 - 23 Crisp.se]</ref> Since Scrum-ban is such a new development model, there is not much reference material. Kanban, on the other hand, has been applied in software development at least by Microsoft and Corbis.<ref>[http://www.infoq.com/presentations/kanban-for-software Infoq.com (The video and the summary)]</ref> === Product development === Scrum as applied to product development was first referred to in "[http://cb.hbsp.harvard.edu/cb/web/product_detail.seam;jsessionid=8D8BACDD4CC4F2F87B3CD58D2ED10332?R=86116-PDF-ENG&conversationId=22181&E=48834 New New Product Development Game]" (Harvard Business Review 86116:137–146, 1986) and later elaborated in "[http://books.google.ru/books?hl=en&id=B-qxrPaU1-MC&dq=The+Knowledge+Creating+Company&printsec=frontcover&source=web&ots=XfRLlzreeT&sig=B5tPPUD6s-hBTlmi4cQLVYosoWs The Knowledge Creating Company]" both by Ikujiro Nonaka and [[Hirotaka Takeuchi]] ([[Oxford University Press]], 1995). Today there are records of Scrum used to produce financial products, Internet products, and medical products by ADM. == See also == * [[Kaizen]] * [[List of software development philosophies]] ;Other Agile methods * [[DSDM|Dynamic System Development Method]] * [[Extreme programming]] (XP) * [[Feature Driven Development]] * [[Lean software development]] == References == {{Reflist|colwidth=30em}} ==Further reading== *{{cite web|url=http://members.cox.net/risingl1/Articles/IEEEScrum.pdf|title=The Scrum Software Development Process for Small Teams|coauthors=N.S. Janoff & L. Rising|year=2000|accessdate=2007-03-15}} *{{cite web|url=http://scrumtraininginstitute.com/home/stream_download/scrumprimer|title=The Scrum Primer|last1=Deemer |first1=Pete |last2=Benefield |first2=Gabrielle |last3=Larman |first3=Craig |last4=Vodde |first4=Bas|year=2009|accessdate=2009-06-01}} *{{cite web|url=http://www.infoq.com/minibooks/scrum-xp-from-the-trenches|title=Scrum and XP from the Trenches|last=Kniberg|first=Henrik|accessdate=2010-08-09}} == External links == <!-- *********************** ({{No More Links}}) *************************** * Please be cautious in adding more links to this article. Wikipedia * * is not a collection of links nor should it be used for advertising. * * * * Excessive or inappropriate links Will-Be-Deleted. * * See [[Wikipedia:External links]] & [[Wikipedia:Spam]] for details. * * * * If there are already plentiful links, please propose additions or * * replacements on this article's discussion page, or submit your link * * to the relevant category at the Open Directory Project (dmoz.org) * * and link back to that category using the {{dmoz}} template. * ********************** ({{No More Links}}) **************************** --> {{Commons category|Scrum}} * [http://www.scrum.org/ Scrum.org] by Ken Schwaber * [http://www.scrumalliance.org/ Scrum Alliance] * [http://cf.agilealliance.org/articles/article_list.cfm?CategoryID=17 Agile Alliance’s Scrum library] * [http://scrum.gem-up.com/ A Scrum Process Asset Library] * [http://epf.eclipse.org/wikis/scrum/ A Scrum Process Description] by the [http://www.eclipse.org/epf Eclipse Process Framework (EPF) Project] * [http://www.ariscommunity.com/users/sstein/2010-08-09-bpm-view-scrum BPMN process diagram of Scrum] * [http://ScrumReferenceCard.com/ A six-page illustrated Scrum reference] === Videos === * [http://video.google.com/videoplay?docid=8795214308797356840 Jeff Sutherland in ''Scrum Tuning: Lessons learned from Scrum implementation at Google''] Retrieved 2007-12-15 * [http://video.google.com/videoplay?docid=2531954797594836634 Ken Schwaber in ''Scrum et al.''] Retrieved 2008-01-19 * [http://www.youtube.com/watch?v=Ht2xcIJrAXo Jeff Sutherland in ''Hyperproductive Distributed Scrum Teams''] <!--* [http://www.youtube.com/watch?v=Q5k7a9YEoUI&fmt=22 Hamid Shojaee in ''Scrum in 10 Minutes'' (High Quality HD Video)]--> * [http://www.youtube.com/watch?v=M1q6b9JI2Wc Jeff Sutherland in ''Self-Organization: The Secret Sauce for Improving your Scrum team''] * [http://www.vimeo.com/4587652 Bruno Sbille and his team in ''Scrum applied on a real-world project'' (HD)] Retrieved 2009-05-19 * [http://www.tvagile.com/2009/07/24/scrum-at-large-managing-100-people-and-more/ Scrum at Large: Managing 100 People and More] {{Software Engineering}} {{DEFAULTSORT:Scrum (Development)}} [[Category:Agile software development]] [[Category:Management]] [[Category:Production and manufacturing]] [[Category:Project management]] [[Category:Software development philosophies]] [[Category:Software project management]] <!-- Interwikis --> [[bg:Scrum]] [[da:Scrum]] [[de:Scrum]] [[es:Scrum]] [[fr:Scrum (méthode)]] [[ko:스크럼 (애자일 개발 프로세스)]] [[it:Scrum]] [[he:Scrum]] [[lt:Scrum]] [[hu:Scrum]] [[nl:Scrum (softwareontwikkelmethode)]] [[ja:スクラム (ソフトウェア開発)]] [[no:Scrum]] [[pl:Scrum]] [[pt:Scrum]] [[ru:Scrum]] [[sr:Scrum]] [[sh:Scrum]] [[fi:Scrum]] [[sv:Scrum]] [[ta:இசுக்கிரம்]] [[uk:Scrum]] [[zh:Scrum]]</text> </page> <page> <id>33471</id> <title>SeaPerch</title> <text>{{Multiple issues|coi=September 2009|advert=September 2009}} The '''SeaPerch''' [[Remotely Operated Vehicle]] (ROV) educational program was inspired by the 1997 book, [http://www.amazon.com/Build-Underwater-Robot-Other-Projects/dp/0968161006 ''Build Your Own Underwater Robot and other Wet Projects''], by Harry Bohm and Vickie Jensen.<ref name="seaperch.org">[http://www.seaperch.org/getstarted/?tid=2 Get Started :: seaperch.org :: The official site of SeaPerch]</ref> A '''SeaPerch''' is an educational tool and kit that allows elementary, middle, and high-school students to construct a simple, remotely-operated underwater vehicle, or Remotely Operated Vehicle (ROV), from [[polyvinyl chloride]] (PVC) pipe and other readily made materials. The SeaPerch program is a curriculum designed program that teaches students basic skills in ship and submarine design and encourages students to explore naval architecture and marine and ocean engineering concepts. The [[Massachusetts Institute of Technology]] [[National Sea Grant Program|Sea Grant]] (MITSG) College Program created the SeaPerch initiative in 2003, and it is sponsored by the [[Office of Naval Research]], as part of the National Naval Responsibility for Naval Engineering (NNRNE) to find the 