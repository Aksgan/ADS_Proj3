the atmospheres of gas giants. The first occurrence of such creatures in science fiction was in [[Will A. Page]]'s 1911 short story "The Air Serpent", which, as the title implies, was about a flying, reptilian-looking creature. [[Arthur Conan Doyle]] elaborated upon the idea in his 1913 story "[[The Horror of the Heights]]", which portrayed an entire ecosystem of semi-solid beasts living at previously undiscovered heights in the atmosphere, as did [[Ray Bradbury]] in ''[[The Martian Chronicles]]''. [[Spider Robinson]]'s novel ''[[Telempath]]'' features such animals called "Muskys", which attacked the Earth when large amounts of [[pollution]] began to affect the air. [[Kenneth Oppel]]'s ''[[Airborn]]'' series take place in an [[alternate history]] in which a number of atmospheric beasts exist. [[James Blish]]'s ''[[Cities in Flight]]'' makes mention of a bioluminescent, jellyfish-like beast which exists as the only life form on the planet Jupiter, making its home strictly within the atmosphere. The game [[Star Control II]] includes a race of balloon-like aliens called the "Slylandro", who are native to a distant gas giant, living only within a certain air density. While intelligent and long lived, they have little technology and no means of travelling beyond their planet, as all material beyond a certain density sinks to levels of their atmosphere they cannot survive in. In the game [[City of Heroes]], Kheldians are energy beings that can bond with living creatures in a symbiotic relationship, and after generations are able to 'memorize' their 'host pattern' to transform to one of these species at will. One of the species they can transform into is a tentacled, squid-like creature that is said to have lived in the atmosphere of a gas giant. ==See also== *[[Bioship]] *[[Extremophiles]] *[[Skyfish]] *[[Star jelly]] ==References== {{reflist}} ==External links== *[http://www.freeweb.hu/tarrdaniel/documents/Transzhumanizmus/energyzoa.htm Extraterrestrial energyzoa hypothesis] *[http://outtheregrfx.com/meteors.html On the Track of the Gelatinous Meteor] *[http://www.newanimal.org/a-beasts.htm The Cryptid Zoo: Atmospheric Beasts] {{UFOs}} {{DEFAULTSORT:Atmospheric Beast}} [[Category:Science fiction themes]] [[Category:Forteana]] [[Category:Alleged UFO-related entities]] [[Category:Flying cryptids]]</text> </page> <page> <id>2690</id> <title>Atomicity (database systems)</title> <text>{{Unreferenced|date=December 2009}} {{Other uses|Atomicity (disambiguation)}} In [[database system]]s, '''atomicity''' (or '''atomicness''') is one of the [[ACID]] [[database transaction|transaction]] properties. In an '''atomic transaction''', a series of database operations either ''all'' occur, or ''nothing'' occurs. A guarantee of atomicity prevents updates to the database occurring only partially, which can cause greater problems than rejecting the whole series outright. The etymology of the phrase originates in the Classical Greek concept of a fundamental and indivisible component; see [[atom]]. An example of atomicity is ordering an airline ticket where two actions are required: payment, and a seat reservation. The potential passenger must either: # both pay for and reserve a seat; OR # neither pay for nor reserve a seat. The booking system does not consider it acceptable for a customer to pay for a ticket without securing the seat, nor to reserve the seat without payment succeeding. ==Orthogonality== Atomicity does not behave completely [[Orthogonality#Computer science|orthogonally]] with regard to the other [[ACID]] properties of the transactions. For example, [[isolation (computer science)|isolation]] relies on atomicity to roll back changes in the event of isolation failures such as [[deadlock]]; [[database consistency|consistency]] also relies on rollback in the event of a consistency-violation by an illegal transaction. Finally, atomicity itself relies on [[durability (computer science)|durability]] to ensure the atomicity of transactions even in the face of external failures. As a result of this, failure to detect errors and manually roll back the enclosing transaction may cause failures of isolation and consistency. ==Implementation== Typically, systems implement atomicity by providing some mechanism to indicate which transactions have started and which finished; or by keeping a copy of the data before any changes occurred. Several filesystems have developed methods for avoiding the need to keep multiple copies of data, using journaling (see [[journaling file system]]). Databases usually implement this using some form of logging/journaling to track changes. The system synchronizes the logs (often the [[metadata]]) as necessary once the actual changes have successfully taken place. Afterwards, crash recovery simply ignores incomplete entries. Although implementations vary depending on factors such as concurrency issues, the principle of atomicity — i.e. complete success or complete failure — remain. Ultimately, any application-level implementation relies on [[operating system|operating-system]] functionality, which in turn makes use of specialized hardware to guarantee that an operation remains non-interruptible: either by software attempting to re-divert system resources (see [[pre-emptive multitasking]]) or by resource-unavailability (such as power-outages). For example, [[POSIX]]-compliant systems provide the open(2) [[system call]] which allows applications to atomically open a file. Other popular system-calls that may assist in achieving atomic operations from [[userspace]] include mkdir(2), flock(2), fcntl(2), rasctl(2) (NetBSD re-startable sequences), semop(2), sem_wait(2), sem_post(2), fdatasync(2), fsync(2) and rename(2). The hardware level requires [[linearizability|atomic operations]] such as [[test-and-set]] (TAS), and/or atomic increment/decrement operations. In their absence, or when necessary, raising the interrupt level to disable all possible interrupts (of hardware and software origin) may serve to implement the atomic synchronization function [[language primitive|primitives]]. Systems often implement these low-level operations in [[machine language]] or in [[assembly language]]. ==See also== * [[Atomic operation]] * [[Transaction processing]] * [[Long-running transaction]] {{DEFAULTSORT:Atomicity (Database Systems)}} [[Category:Data management]] [[Category:Transaction processing]] [[es:Atomicidad]] [[simple:Atomicity]]</text> </page> <page> <id>2696</id> <title>Attachments (TV series)</title> <text>{{Infobox Television | | show_name = Attachments | image = [[Image:AttachmentsVHS.jpg|150px]] | format = [[Dramedy]] | country = [[United Kingdom]] | runtime = 30 minutes | starring = [[Justine Pierre]] as Mike and [[Claudia Harrison]] as Luce | network = [[BBC Two]] | first_aired = 2000 | last_aired = 2002 | num_episodes = 26 |}} '''''Attachments''''' is a [[BBC]] [[TV Series]] that ran for two seasons from 2000 to 2002, a total of 26 episodes. It focuses on a group of young professionals in [[London]] that work for an Internet [[startup company]] called "seethru" during the [[dot com boom]].<ref>[http://news.bbc.co.uk/1/hi/uk/941846.stm BBC News | UK | TV meets the net - at last<!-- Bot generated title -->]</ref> The fictional company ran an internet portal website at [http://www.seethru.co.uk/ seethru.co.uk] which was updated as the show progressed, and which remained on-line for some time after the end of the second series. The show was criticised for being too offensive<ref>[http://news.bbc.co.uk/1/hi/entertainment/1193146.stm 