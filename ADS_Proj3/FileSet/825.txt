{{n/a}} |} {{note|complex kinds|a}} The value of "n" is provided by the SELECTED_REAL_KIND<ref name="ReferenceA"/> intrinsic function. === Other variable types === {|class="wikitable" ! rowspan=2| ! colspan=2| Text ! rowspan=2| [[Boolean datatype|Boolean]] ! rowspan=2| [[Enumerated type|Enumeration]] ! rowspan=2| [[Object (computer science)|Object]]/[[Top type|Universal]] |- ! [[Character (computing)|Character]] ! [[String (computer science)|String]]{{ref|string|[a]}} |- | ALGOL 68 | '''char''' | '''string''' & '''bytes''' | '''bool''' & '''bits''' | {{n/a}} - [http://rosettacode.org/wiki/Enumerations#ALGOL_68 User defined] | {{n/a}} |- | C (C99) | rowspan=2| '''char''' | {{n/a}} | rowspan=2| '''bool'''{{ref|int bool|[b]}} | rowspan=3|'''enum''' «name» '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''};''' | rowspan=2| '''[[void type|void]] [[pointer (computing)|*]]''' |- | C++ (STL) | [[std::string|«'''std::'''»'''string]]''' |- | Objective-C | '''unichar''' | '''NSString *''' | '''BOOL''' | '''id''' |- | C# | rowspan=2| '''char''' | '''string''' | '''bool''' | rowspan=2| '''enum''' name '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''}''' | '''object''' |- | Java | '''String''' | '''boolean''' | '''Object''' |- | Go | '''byte''' | '''string''' | '''bool''' | '''const (<ul>'''item<sub>1</sub>''' = iota'''<br/>item<sub>2</sub><br/> ... '''</ul>)''' | '''interface{}''' |- | D | '''char''' | '''string''' | '''bool''' | '''enum''' name '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''}''' | '''Object''' |- | Common Lisp | | | | | |- | Scheme | | | | | |- | Pascal (ISO) | rowspan=2| '''char''' | {{n/a}} | rowspan=2| '''boolean''' | rowspan=2| '''('''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ...''')''' | {{n/a}} |- | Object Pascal (Delphi) | '''string''' | '''variant''' |- | Visual Basic | {{n/a}} | rowspan=2| '''String''' | rowspan=2| '''Boolean''' | rowspan=2| '''Enum''' name <ul> item<sub>1</sub> <br /> item<sub>2</sub> <br /> ... </ul> '''End Enum''' | '''[[Variant type|Variant]]''' |- | Visual Basic .NET | '''Char''' | '''Object''' |- | Python | {{n/a}}{{ref|string as char|[d]}} | '''str''' | '''bool''' | | '''object''' |- | JavaScript | {{n/a}}{{ref|string as char|[d]}} | '''String''' | '''Boolean''' | | '''Object''' |- | S-Lang | | | | | |- | Fortran | '''CHARACTER(LEN = *)''' | '''CHARACTER(LEN = :), allocatable ''' | '''LOGICAL(KIND = n)'''{{ref|logical kinds|[f]}} | | '''CLASS(*)''' |- | PHP | {{n/a}}{{ref|string as char|[d]}} | '''string''' | '''bool''' | | '''object''' |- | Perl | {{n/a}}{{ref|string as char|[d]}} | | | | |- | Perl 6 | '''Char''' | '''Str''' | '''Bool''' | '''enum''' name '''<'''item<sub>1</sub> item<sub>2</sub> ...'''>''' or<br /> '''enum''' name '''<<:'''item<sub>1</sub>'''('''value''')''' ''':'''item<sub>2</sub>'''('''value''')''' ...'''>>''' | '''Mu''' |- | Ruby | {{n/a}}{{ref|string as char|[d]}} | '''String''' | '''Object'''{{ref|Ruby's bool|[c]}} | | '''Object''' |- | Windows PowerShell | | | | | |- | OCaml | rowspan=3| '''char''' | rowspan=3| '''string''' | rowspan=3| '''bool''' | {{n/a}}{{ref|enum|[e]}} | {{n/a}} |- | F# | '''type''' name '''=''' item<sub>1</sub> '''=''' value '''<nowiki>|</nowiki>''' item<sub>2</sub> = value '''<nowiki>|</nowiki>''' ... | '''obj''' |- | Standard ML | {{n/a}}{{ref|enum|[e]}} | {{n/a}} |- | Haskell (GHC) | '''Char''' | '''String''' | '''Bool''' | {{n/a}}{{ref|enum|[e]}} | {{n/a}} |- | Eiffel | '''CHARACTER''' | '''STRING''' | '''BOOLEAN''' | {{n/a}} | '''ANY''' |} {{note|string|a}} specifically, strings of arbitrary length and automatically managed. <br/>{{note|int bool|b}} This language represents a boolean as an integer where false is represented as a value of zero and true by a non-zero value. <br/>{{note|Ruby's bool|c}} All values evaluate to either true or false. Everything in '''TrueClass''' evaluates to true and everything in '''FalseClass''' evaluates to false. <br/>{{note|string as char|d}}This language does not have a separate character type. Characters are represented as strings of length 1. <br/>{{note|enum|e}} Enumerations in this language are algebraic types with only nullary constructors <br/>{{note|logical kinds|f}} The value of "n" is provided by the SELECTED_INT_KIND<ref name="fortranwiki.org"/> intrinsic function. == Derived types == === [[Array data type|Array]] === {{see|Comparison of programming languages (array)}} {| class="wikitable" |- ! rowspan=2| ! colspan=2| fixed size array ! colspan=2| dynamic size array |- ! one-dimensional array ! [[array#Multi-dimensional array|multi-dimensional array]] ! one-dimensional array ! [[array#Multi-dimensional array|multi-dimensional array]] |- | ALGOL 68 | [''first'':''last'']'''«modename»''' or simply: [''size'']'''«modename»''' | [''first<sub>1</sub>'':''last<sub>1</sub>'',''first<sub>2</sub>'':''last<sub>2</sub>'']'''«modename»''' or [''first<sub>1</sub>'':''last<sub>1</sub>''][''first<sub>2</sub>'':''last<sub>2</sub>'']'''«modename»''' etc. | '''flex'''[''first'':''last'']'''«modename»''' or simply: '''flex'''[''size'']'''«modename»''' | '''flex'''[''first<sub>1</sub>'':''last<sub>1</sub>'',''first<sub>2</sub>'':''last<sub>2</sub>'']'''«modename»''' or '''flex'''[''first<sub>1</sub>'':''last<sub>1</sub>'']'''flex'''[''first<sub>2</sub>'':''last<sub>2</sub>'']'''«modename»''' etc. |- | C (C99) | {{ref|C's array|[a]}} | {{ref|C's array|[a]}} | | |- | C++ (STL) | | | colspan=2| '''[[std::vector|«std::»vector]]<'''type'''>''' |- | C# | type'''[]''' | type'''[,,'''...''']''' | '''System.Collections.ArrayList'''<br/>or<br/>'''System.Collections.Generic.List<'''type'''>''' | |- | Java | type'''[]'''{{ref|Java's array|[b]}} | type'''[][]'''...{{ref|Java's array|[b]}} |'''ArrayList''' or '''ArrayList<'''type'''>''' | |- | Go | '''['''size''']'''type | '''['''size<sub>1</sub>''']['''size<sub>2</sub>''']'''...type | '''vector.Vector''' | |- | Objective-C | | | '''NSMutableArray''' | |- | JavaScript | {{n/a}} | {{n/a}} | colspan=2|'''Array'''{{ref|JavaScript's array|[d]}} |- | Common Lisp | | | | |- | Scheme | | | | |- | Pascal | rowspan=2|'''array['''first'''..'''last'''] of''' type{{ref|subrange|[c]}} | rowspan=2|'''array['''first<sub>1</sub>'''..'''last<sub>1</sub>'''] of array['''first<sub>2</sub>'''..'''last<sub>2</sub>'''] ''' ... '''of''' type {{ref|subrange|[c]}}<br/> or<br/> ''' array['''first<sub>1</sub>'''..'''last<sub>1</sub>''', '''first<sub>2</sub>'''..'''last<sub>2</sub>''', '''...'''] of''' type {{ref|subrange|[c]}} | {{n/a}} | {{n/a}} |- | Object Pascal (Delphi) |'''array of''' type |'''array of array''' ... '''of''' type |- | Visual Basic | <!-- '''Dim x('''last''') As '''type''' --> | <!-- '''Dim x('''last<sub>1</sub>''', '''last<sub>2</sub>''','''...''') As '''type''' --> | | |- | Visual Basic .NET | | | '''System.Collections.ArrayList'''<br/>or<br/>'''System.Collections.Generic.List(Of''' type''')''' | |- | Python | | | '''list''' | |- | S-Lang | <!-- '''x = '''type'''['''size'''];''' --> | <!-- '''x = '''type'''['''size<sub>1</sub>''', '''size<sub>2</sub>''', '''...'''];''' --> | | |- | Fortran | ''' '''type''' :: '''name'''('''size''')''' | ''' '''type''' :: '''name'''('''size'''<sub>1</sub>, '''size'''<sub>2</sub>,...)''' | ''' '''type''', ALLOCATABLE :: '''name'''(:)''' | ''' '''type''', ALLOCATABLE :: '''name'''(:,:,...)''' |- | PHP | | | '''array''' | |- | Perl | | | | |- | Perl 6 | | | '''Array['''type''']''' or '''Array of''' type | |- | Ruby | | <!-- '''x = Array.new('''size<sub>1</sub>'''){ Array.new('''size<sub>2</sub>''') }''' --> | '''Array''' | |- | Windows PowerShell | type'''[]''' |type'''[,,'''...''']''' | | |- | OCaml | type '''array''' | type '''array''' ... '''array''' | | |- | F# | type '''[]''' or type '''array''' | type '''[,,'''...''']''' | '''System.Collections.ArrayList'''<br/>or<br/>'''System.Collections.Generic.List<'''type'''>''' | |- | Standard ML | type '''vector''' or type '''array''' | | | |- | Haskell (GHC) | <!-- '''x = Array.array (0, '''size'''-1)''' list_of_association_pairs --> | <!-- '''x = Array.array ((0, 0,'''...'''), ('''size<sub>1</sub>'''-1, '''size<sub>2</sub>'''-1,'''...'''))''' list_of_association_pairs --> | | |} {{note|C's array|a}}In most expressions (except the <tt>sizeof</tt> and <tt>&</tt> operators), values of array types in C are automatically converted to a pointer of its first argument. Also C's arrays can not 