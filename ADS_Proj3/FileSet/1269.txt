way. Drop the egg from the first-floor window; if it survives, drop it from the second floor window. Continue upward until it breaks. In the worst case, this method may require 36 droppings. Suppose 2 eggs are available. What is the least number of egg-droppings that is guaranteed to work in all cases? To derive a dynamic programming [[Bellman equation|functional equation]] for this puzzle, let the '''state''' of the dynamic programming model be a pair s = (n,k), where : n = number of test eggs available, n = 0,1,2,3,...,N-1. : k = number of (consecutive) floors yet to be tested, k = 0,1,2,...,H-1. For instance, s = (2,6) indicates that 2 test eggs are available and 6 (consecutive) floors are yet to be tested. The initial state of the process is s = (N,H) where N denotes the number of test eggs available at the commencement of the experiment. The process terminates either when there are no more test eggs (n = 0) or when k = 0, whichever occurs first. If termination occurs at state s=(0,k) and k>0, then the test failed. Now, let : W(n,k) := minimum number of trials required to identify the value of the critical floor under the Worst Case Scenario given that the process is in state s=(n,k). Then it can be shown that<ref name="sniedovich_03">Sniedovich, M. (2003). [http://archive.ite.journal.informs.org/Vol4No1/Sniedovich/index.php The joy of egg-dropping in Braunschweig and Hong Kong]. INFORMS Transactions on Education, 4(1) 48-64.</ref> : W(n,k) = 1 + min{max(W(n-1,x-1) , W(n,k-x)): x in {1,2,...,k}} , n = 2,...,N ; k = 2,3,4,...,H with W(n,1) = 1 for all n>0 and W(1,k) = k for all k. It is easy to solve this equation iteratively by systematically increasing the values of n and k. An [http://archive.ite.journal.informs.org/Vol4No1/Sniedovich/index.php interactive online facility] is available for experimentation with this model as well as with other versions of this puzzle (e.g. when the objective is to minimize the '''expected value''' of the number of trials.<ref name="sniedovich_03" /> <!--=== Matrix chain multiplication === ''Not yet written'' Show how the placement of parentheses affects the number of scalar multiplications required when multiplying a bunch of matrices. Show how to write a dynamic program to calculate the optimal parentheses placement. This is such a long example that it might be better to make it its own article.--> == Algorithms that use dynamic programming == * [[Backward induction]] as a solution method for finite-horizon [[discrete-time]] dynamic optimization problems * [[Method of undetermined coefficients]] can be used to solve the [[Bellman equation]] in infinite-horizon, discrete-time, [[discounting|discounted]], [[Time-invariant system|time-invariant]] dynamic optimization problems * Many [[String (computer science)|string]] algorithms including [[longest common subsequence problem|longest common subsequence]], [[Longest increasing subsequence problem|longest increasing subsequence]], [[Longest common substring problem|longest common substring]], [[Levenshtein distance]] (edit distance). * Many algorithmic problems on [[undirected graph|graphs]] can be solved efficiently for graphs of bounded [[treewidth]] or bounded [[clique-width]] by using dynamic programming on a [[tree decomposition]] of the graph. * The [[CYK algorithm|Cocke-Younger-Kasami (CYK) algorithm]] which determines whether and how a given string can be generated by a given [[context-free grammar]] * The use of [[transposition table]]s and [[refutation table]]s in [[computer chess]] * The [[Viterbi algorithm]] (used for [[hidden Markov model]]s) * The [[Earley algorithm]] (a type of [[chart parser]]) * The [[Needleman-Wunsch algorithm|Needleman-Wunsch]] and other algorithms used in [[bioinformatics]], including [[sequence alignment]], [[structural alignment]], [[RNA structure|RNA structure prediction]]. * [[Floyd-Warshall algorithm|Floyd's All-Pairs shortest path algorithm]] * Optimizing the order for [[chain matrix multiplication]] * Pseudopolynomial time algorithms for the [[subset sum problem|Subset Sum]] and [[Knapsack problem|Knapsack]] and [[Partition problem]] Problems * The [[dynamic time warping]] algorithm for computing the global distance between two time series * The [[Patricia Selinger|Selinger]] (a.k.a. [[IBM System R|System R]]) algorithm for relational database query optimization * [[De Boor algorithm]] for evaluating B-spline curves * [[Duckworth-Lewis method]] for resolving the problem when games of cricket are interrupted * The Value Iteration method for solving [[Markov decision process]]es * Some graphic image edge following selection methods such as the "magnet" selection tool in [[Photoshop]] * Some methods for solving [[interval scheduling]] problems * Some methods for solving [[word wrap]] problems * Some methods for solving the [[travelling salesman problem]], either exactly (in [[exponential time]]) or approximately (e.g. via the [[bitonic tour]]) * [[Recursive least squares]] method * [[Beat (music)|Beat]] tracking in [[Music Information Retrieval]]. * Adaptive Critic training strategy for [[artificial neural networks]] * Stereo algorithms for solving the [[Correspondence problem]] used in stereo vision. * [[Seam carving]] (content aware image resizing) * The [[Bellman-Ford algorithm]] for finding the shortest distance in a graph. * Some approximate solution methods for the [[linear search problem]]. == See also == {{Portal|Computer science}} * [[Bellman equation]] * [[Divide and conquer algorithm]] * [[Greedy algorithm]] * [[Markov Decision Process]] * [[Stochastic programming]] ==References== {{Reflist}} == Further reading == *{{citation|last1=Adda|first1=Jerome|last2=Cooper|first2=Russell|year=2003|url=http://www.eco.utexas.edu/~cooper/dynprog/dynprog1.html|title=Dynamic Economics|publisher=MIT Press}}. An accessible introduction to dynamic programming in economics. The link contains sample programs. *{{citation|first=Richard|last=Bellman|authorlink=Richard Bellman|title=The theory of dynamic programming|journal=[[Bulletin of the American Mathematical Society]]|year=1954|volume=60|pages=503–516|doi=10.1090/S0002-9904-1954-09848-8|id={{MR|0067459}}}}. Includes an extensive bibliography of the literature in the area, up to the year 1954. *{{citation|first=Richard|last=Bellman|authorlink=Richard Bellman|year=1957|title=Dynamic Programming|publisher=Princeton University Press}}. Dover paperback edition (2003), ISBN 0486428095. *{{citation|last=Bertsekas|first=D. P.|year=2000|title=Dynamic Programming and Optimal Control|edition=2nd|publisher=Athena Scientific|isbn=1-886529-09-4}}. In two volumes. *{{citation|last1=Cormen|first1=Thomas H.|author1-link=Thomas H. Cormen|last2=Leiserson|first2=Charles E.|author2-link=Charles E. Leiserson|last3=Rivest|first3=Ronald L.|author3-link=Ronald L. Rivest|last4=Stein|first4=Clifford|author4-link=Clifford Stein|year=2001|title=[[Introduction to Algorithms]]|edition=2nd|publisher=MIT Press & McGraw-Hill|isbn=0-262-03293-7}}. Especially pp. 323–69. *{{citation|first1=Stuart E.|last1=Dreyfus|first2=Averill M.|last2=Law|year=1977|title=The art and theory of dynamic programming|publisher=Academic Press|isbn=978-0122218606}}. *{{citation|last1=Giegerich|first1=R.|last2=Meyer|first2=C.|last3=Steffen|first3=P.|year=2004|url=http://bibiserv.techfak.uni-bielefeld.de/adp/ps/GIE-MEY-STE-2004.pdf|title=A Discipline of Dynamic Programming over Sequence Data|journal=Science of Computer Programming|volume=51|pages=215–263|issue=3|doi=10.1016/j.scico.2003.12.005}}. *{{citation|first=Sean|last=Meyn|url= https://netfiles.uiuc.edu/meyn/www/spm_files/CTCN/CTCN.html|title=Control Techniques for Complex Networks|publisher=Cambridge University Press|year=2007|isbn=9780521884419}}. *S. S. Sritharan, "Dynamic Programming of the Navier-Stokes Equations," in Systems and Control Letters, Vol. 16, No. 4, 1991, pp. 299–307. *{{citation|last1=Stokey|first1=Nancy|author1-link=Nancy Stokey|last2=Lucas|first2=Robert E.|author2-link=Robert E. Lucas|last3=Prescott|first3=Edward|author3-link=Edward Prescott|year=1989|title=Recursive Methods in Economic Dynamics|publisher=Harvard Univ. Press|isbn=9780674750968}}. ==External links== * [http://20bits.com/articles/introduction-to-dynamic-programming/ An Introduction to Dynamic Programming] * [http://www.dyna.org Dyna], a declarative programming language for dynamic programming algorithms * Wagner, David B., 1995, "[http://citeseer.ist.psu.edu/268391.html Dynamic Programming.]" An introductory article on dynamic programming in [[Mathematica]]. * [http://www.cse.ohio-state.edu/~gurari/course/cis680/cis680Ch21.html Ohio State University: CIS 680: class notes on dynamic programming], by Eitan M. Gurari * [http://mat.gsia.cmu.edu/classes/dynamic/dynamic.html A Tutorial on Dynamic programming] * 