instructions <br/> or <br/> '''Seq.iter (fun '''item''' -> '''instructions''') '''set |- | Standard ML | '''while''' condition '''do (''' instructions ''')''' | colspan=2 {{n/a}} | '''Array.app (fn '''item''' => '''instructions''') '''array <br/> '''app (fn '''item''' => '''instructions''') '''list |- | Haskell (GHC) | colspan=2 {{n/a}} | '''Control.Monad.forM_ [0..N-1] (\i -> do '''instructions''')''' | '''Control.Monad.forM_ '''list '''(\item -> do '''instructions''')''' |- | Eiffel | colspan=4 | '''from''' <ul>setup</ul> '''until''' <ul>condition</ul> '''loop''' <ul>instructions</ul> '''end''' |} {{note|step|a}} "'''step''' n" is used to change the loop interval. If "'''step'''" is omitted, then the loop interval is 1. === [[Exception handling|Exceptions]] === {{see|Exception handling syntax}} {| class="wikitable" |- ! ! throw ! handler ! assertion |- | C (C99) | '''[[longjmp]]('''state''',''' exception''');''' | '''switch ([[setjmp]]('''state''')) { case 0: '''instructions''' break; case '''exception''': '''instructions''' ... }''' | rowspan=2|'''assert('''condition''');''' |- | C++ (STL) | rowspan=7|'''throw''' exception''';''' | '''try { '''instructions''' } catch''' «'''('''exception''')'''» '''{ '''instructions''' }''' ... |- | C# | '''try { '''instructions''' } catch''' «'''('''exception''')'''» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''» | '''Debug.Assert('''condition''');''' |- | Java | '''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' ... «'''finally { '''instructions''' }'''» | '''assert '''condition''';''' |- | JavaScript | '''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' «'''finally { '''instructions''' }'''» | {{?}} |- | PHP | '''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' ... | '''assert('''condition''');''' |- | S-Lang | '''try { '''instructions''' } catch''' «exception» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''» | {{?}} |- | Windows PowerShell | '''trap''' «'''['''exception''']'''» '''{ '''instructions''' }''' ... instructions or '''try { '''instructions''' } catch''' «'''['''exception''']'''» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''» | '''[Debug]::Assert('''condition''')''' |- | Objective-C | '''@throw''' exception''';''' | '''@try { '''instructions''' } @catch ('''exception''') { '''instructions''' }''' ... «'''@finally { '''instructions''' }'''» | '''NSAssert('''condition''', '''description''');''' |- | Perl | rowspan=2| '''die''' exception''';''' | '''eval { '''instructions''' }; if ($@) { '''instructions''' }''' | {{?}} |- | Perl 6 | '''try { '''instructions''' CATCH { when '''exception''' { '''instructions''' } '''...'''}}''' | {{?}} |- | Ruby | '''raise''' exception | '''begin''' <ul>instructions</ul> '''rescue''' exception <ul>instructions</ul>... <br/> «'''else''' <ul>instructions»</ul> «'''ensure''' <ul>instructions»</ul> '''end''' | |- | Common Lisp | '''(error '''"exception"''')''' or <br/> '''(error (make-condition<ul>'''type</ul><ul>arguments'''))'''</ul> | '''(handler-case<ul>(progn '''instructions''')</ul><ul>('''exception instructions''')</ul><ul>'''...''')'''</ul> or <br/>'''(handler-bind<ul>('''condition <ul>'''(lambda</ul><ul>'''instructions</ul><ul>«'''invoke-restart''' restart args»'''))'''</ul>...''')'''{{ref|a|[a]}}</ul> | '''(assert '''condition''')''' or <br/>'''(assert '''condition<ul>«'''('''place''')'''</ul><ul>«error»»''')'''</ul> or <br/>'''(check-type '''var type''')''' |- | Scheme (R<sup>6</sup>RS) | '''(raise '''exception''')''' | '''(guard (con ('''condition''' '''instructions''') '''...''') '''instructions''')''' | {{?}} |- | Pascal | '''raise''' Exception.Create() | '''try''' Except '''on''' E: exception '''do begin ''' instructions ''' end; end;''' | {{?}} |- | Visual Basic | colspan=2 {{n/a}} | {{?}} |- | Visual Basic .NET | '''Throw''' exception | '''Try''' <ul>instructions</ul> '''Catch''' «exception» «'''When''' condition» <ul>instructions</ul> ... <br/> «'''Finally''' <ul>instructions»</ul> '''End Try''' | '''Debug.Assert('''condition''')''' |- | Python | '''raise''' exception | '''try:''' <br/> {{keypress|Tab}} instructions <br/> '''except''' «exception»''':''' <br/> {{keypress|Tab}} instructions <br/> ... <br/> «'''else:''' <br/> {{keypress|Tab}} instructions» <br/> «'''finally:''' <br/> {{keypress|Tab}} instructions» | '''assert '''condition |- | Fortran | colspan=3 {{n/a}} |- | Forth | code''' THROW''' | xt''' CATCH''' ( code or 0 ) | {{n/a}} |- | OCaml | rowspan=2| '''raise''' exception | '''try''' expression '''with''' pattern '''->''' expression ... | rowspan=2| '''assert''' condition |- | F# | '''try''' expression '''with''' pattern '''->''' expression ... <br/> or <br/>'''try''' expression '''finally''' expression |- | Standard ML | '''raise''' exception «arg» | expression '''handle''' pattern '''=>''' expression ... | |- | Haskell (GHC) | '''throw''' exception <br/> ''or'' <br/> '''throwError''' expression | '''catch''' tryExpression catchExpression <br/> ''or'' <br/> '''catchError''' tryExpression catchExpression | '''assert''' condition expression |} {{note|common lisp restarts|a}} Common Lisp allows <code>with-simple-restart</code>, <code>restart-case</code> and <code>restart-bind</code> to define restarts for use with <code>invoke-restart</code>. Unhandled conditions may cause the implementation to show a restarts menu to the user before unwinding the stack. === Other control flow statements === {| class="wikitable" |- ! ! exit block(break) ! continue ! [[Label (programming language)|label]] ! branch ([[goto]]) ! return value from generator |- | ALGOL 68 | value '''exit'''; ... | '''do''' statements; '''skip exit'''; label: statements '''od''' | label: ... | '''go to''' label; ...<br> '''goto''' label; ...<br> label; ... | ''yield''(''value'') ([[Callback (computer science)|Callback]] - [http://rosettacode.org/wiki/Prime_decomposition#ALGOL_68 example]) |- | C (C99) | rowspan=4| '''break;''' | rowspan=4| '''continue;''' | rowspan=10| label''':''' | rowspan=4| '''goto''' label''';''' | rowspan=3 {{n/a}} |- | Objective-C |- | C++ (STL) |- | C# | '''yield return''' value''';''' |- | Java | rowspan=2| '''break''' «label»''';''' | rowspan=2| '''continue''' «label»''';''' | rowspan=2 {{n/a}} | |- | JavaScript | '''yield''' value«;» |- | PHP | '''break''' «levels»''';''' | '''continue''' «levels»''';''' | rowspan=3| '''goto''' label''';''' | '''return()''' ''';''' |- | Perl | rowspan=2| '''last''' «label»''';''' | rowspan=2| '''next''' «label»''';''' | |- | Perl 6 | |- | Go | '''break''' «label» | '''continue''' «label» | '''goto''' label | |- | Common Lisp | '''(return)''' or <br/> '''(return-from '''block''')''' or <br/> '''(loop-finish)''' | | '''(tagbody '''tag<ul><ul>...</ul><ul>tag</ul>...''')''' | '''(go '''tag''')''' | |- | Scheme | | | | | |- | Pascal(ISO) | colspan=2 {{n/a}} | rowspan=2| label''':'''{{ref|Pascal's declarations|[a]}} | rowspan=2| '''goto''' label''';''' | rowspan=4 {{n/a}} |- | Pascal(FPC) | '''break;''' | '''continue;''' |- | Visual Basic | rowspan=2| '''Exit''' block | {{n/a}} | rowspan=2| label''':''' | rowspan=2| '''GoTo''' label |- | Visual Basic .NET | '''Continue''' block |- | Python | '''break''' | '''continue''' | colspan=2 {{n/a}} | '''yield '''value |- | S-Lang | '''break;''' | '''continue;''' | | | |- | Fortran | '''EXIT''' | '''CYCLE''' | label{{ref|Fortran label|[b]}} | '''GOTO''' label | {{n/a}} |- | Ruby | '''break''' | '''next''' | | |- | Windows PowerShell | '''break'''« label» | '''continue''' | | | |- | OCaml | rowspan=4 colspan=4 {{n/a}} | |- | F# | |- | Standard ML | |- | Haskell (GHC) | |} {{note|Pascal's declarations|a}} Pascal has declaration blocks. See [[Comparison of programming languages (basic instructions)#Functions]]. <br/>{{note|Fortran label|b}} label must be a number between 1 and 99999. == [[Subroutine|Functions]] == See [[Reflection (computer science)|reflection]] for calling and declaring functions by strings. {| class="wikitable" |- ! ! calling a function ! basic/void function ! value-returning function 