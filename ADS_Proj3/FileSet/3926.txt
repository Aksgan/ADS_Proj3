of IBM's JCL, or [[Job Control Language]], which was used for exactly this purpose.) Many of these languages' interpreters double as [[command-line interpreter]]s such as the [[Unix shell]] or the MS-DOS <code>[[COMMAND.COM]]</code>. Others, such as [[AppleScript]] offer the use of English-like commands to build scripts. This combined with [[Mac OS X]]'s [[Cocoa (API)|Cocoa]] frameworks allows user to build entire applications using [[AppleScript]] & [[Cocoa (API)|Cocoa]] objects. === GUI scripting === With the advent of [[graphical user interface]]s a specialized kind of scripting language emerged for controlling a computer. These languages interact with the same graphic windows, menus, buttons, and so on that a system generates. They do this by simulating the actions of a human user. These languages are typically used to automate user actions or configure a standard state. Such languages are also called "[[Macro (computer science)#Keyboard and mouse macros|macros]]" when control is through simulated key presses or mouse clicks. These languages could in principle be used to control any application running on a GUI-based computer; but, in practice, the support for such languages typically depends on the application and [[operating system]]. There are a few exceptions to this limitation. Some GUI scripting languages are based on recognizing graphical objects from their display screen [[pixel]]s. These GUI scripting languages do not depend on support from the operating system, or application. === Application-specific languages === Many large application programs include an idiomatic scripting language tailored to the needs of the application user. Likewise, many [[computer game]] systems use a custom scripting language to express the programmed actions of [[non-player character]]s and the game environment. Languages of this sort are designed for a single application; and, while they may superficially resemble a specific general-purpose language (e.g. [[QuakeC]], modeled after C), they have custom features that distinguish them. [[Emacs Lisp]], while a fully formed and capable dialect of [[Lisp (programming language)|Lisp]], contains many special features that make it most useful for extending the editing functions of Emacs. An application-specific scripting language can be viewed as a [[domain-specific programming language]] specialized to a single application. === Web browsers === {{main|Client-side scripting}} Web browsers are applications for displaying web pages. A host of special-purpose languages has developed to control their operation. These include [[JavaScript]], a scripting language superficially resembling [[Java (programming language)|Java]]; [[VBScript]] by [[Microsoft]], which only works in [[Internet Explorer]]; [[XUL]] by the [[Mozilla]] project, which only works in [[Firefox]]; and [[XSL Transformations|XSLT]], a presentation language that transforms XML content into a new form. Techniques involving the combination of XML and JavaScript scripting to improve the user's impression of responsiveness have become significant enough to acquire a name: [[Ajax (programming)|AJAX]]. === Text processing languages === The processing of text-based records is one of the oldest uses of scripting languages. Scripts written for the [[Unix]] tools [[AWK]], [[sed]], and [[grep]] automate tasks that involve text-based configuration and log files. Of high importance here is the [[regular expression]], a language developed for the formal description of the lexical structure of text, and used by all of these tools. [[Perl]] was originally designed to overcome limitations of these tools and has grown to be one of the most widespread general purpose languages. === General-purpose dynamic languages === {{seealso|Dynamic programming language}} Some languages, such as [[Perl]], began as scripting languages but were developed into programming languages suitable for broader purposes. Other similar languages &ndash; frequently interpreted, memory-managed, or [[dynamic language|dynamic]] &ndash; have been described as "scripting languages" for these similarities, even if they are more commonly used for applications programming. They are usually ''not'' called "scripting languages" by their own users. === Extension/embeddable languages === A number of languages have been designed for the purpose of replacing application-specific scripting languages by being embeddable in application programs. The application programmer (working in C or another systems language) includes "hooks" where the scripting language can control the application. These languages serve the same purpose as application-specific extension languages but with the advantage of allowing some transfer of skills from application to application. JavaScript began as and primarily still is a language for scripting inside [[web browser]]s; however, the standardization of the language as [[ECMAScript]] has made it popular as a general purpose embeddable language. In particular, the [[Mozilla]] implementation [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] is embedded in several environments such as the [[Yahoo! Widget Engine]]. Other applications embedding ECMAScript implementations include the [[Adobe Systems|Adobe]] products [[Adobe Flash]] ([[ActionScript]]) and [[Adobe Acrobat]] (for scripting [[PDF]] files). [[Tcl]] was created as an extension language but has come to be used more frequently as a general purpose language in roles similar to [[Python (programming language)|Python]], [[Perl]], and [[Ruby (programming language)|Ruby]]. Other complex and task-oriented applications may incorporate and expose an embedded programming language to allow their users more control and give them more functionality than can be available through a user interface, no matter how sophisticated. For example, [[Autodesk Maya]] 3D authoring tools embed the [[Autodesk Maya#Mel scripting|MEL]] scripting language, or [[Blender (software)|Blender]] which has [[Python (programming language)|Python]] to fill this role. Some other types of applications that need faster feature addition or tweak-and-run cycles (e.g. [[Game Engine|game engines]]) also use an embedded language. During the development, this allows them to prototype features faster and tweak more freely, without the need for the user to have intimate knowledge of the inner workings of the application or to rebuild it after each tweak (which can take a significant amount of time.) The scripting languages used for this purpose range from the more common and more famous [[Lua (programming language)|Lua]] and [[Python (programming language)|Python]] to lesser-known ones such as [[AngelScript]] and [[Squirrel (programming language)|Squirrel]]. ==Market analysis== According to a global survey performed by Evans Data in 2008 [http://www.cio.com/article/446829/PHP_JavaScript_Ruby_Perl_Python_and_Tcl_Today_The_State_of_the_Scripting_Universe?contentId=446829&slug=&], the most widespread scripting language is [[JavaScript]]. The second most widespread is [[PHP]]. [[Perl]] is the third most widespread scripting language, but in [[North America]] it enjoys significantly more popularity.<ref name="cio08">[http://www.cio.com/article/446829/PHP_JavaScript_Ruby_Perl_Python_and_Tcl_Today_The_State_of_the_Scripting_Universe?contentId=446829&slug=& PHP, JavaScript, Ruby, Perl, Python, and Tcl Today: The State of the Scripting Universe - CIO.com]</ref> == See also == * [[Architecture description language]] * [[Build automation]] 