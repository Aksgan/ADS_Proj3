fantasy MMORPG using JOGL * [[RuneScape]], a MMORPG using JOGL * [[Jake2]], a Java port of [[Quake II]] using JOGL or LWJGL for its low-level graphic API * [[Scilab]], a numerical computing program using JOGL for 2D, 3D rendering == External links == * {{official website|http://jogamp.org}} * [http://jogamp.org/deployment/jogamp-next/javadoc/jogl/javadoc/ JOGL 2.x Specification] * [http://jogamp.org/deployment/jogamp-next/javadoc/jogl/javadoc/overview-summary.html JSR 231 Specification (draft)] * [http://www.jcp.org/en/jsr/detail?id=231 JSR-231 Java Bindings for OpenGL] website * [http://ak.kiet.le.googlepages.com/theredbookinjava.html tool kiet], The OpenGL Programming Guide examples using JOGL * [http://nehe.gamedev.net/ NeHe's tutorials and sample code] * [http://pepijn.fab4.be/software/nehe-java-ports/ JOGL port of the Nehe tutorials] * [http://timelessname.com/jogl/lesson01/ Setting up JOGL in Eclipse] * [http://www.leolol.com/tutorials/graphics/lesson01.php Using JOGL in a Swing JFrame] * [http://projectkenai.com/projects/netbeans-opengl-pack NetBeans OpenGL Pack], OpenGL Development Environment plugin for the [[NetBeans]] IDE * [http://demo.dzzd.net/Viewer3D/ Viewer3D], an applet to display interactive 3D content with JOGL * [http://sourceforge.net/projects/eclipse-opengl/ Eclipse OpenGL Pack] OpenGL plugin for the [[Eclipse (software)|Eclipse]] IDE [[Category:Java platform]] [[Category:3D graphics software]] [[Category:Java APIs]] [[Category:Java libraries]] [[de:JOGL]] [[es:JOGL]] [[he:JOGL]] [[nl:Java OpenGL]] [[ru:Java OpenGL]]</text> </page> <page> <id>19785</id> <title>Java Virtual Machine</title> <text>A '''Java Virtual Machine''' ('''JVM''') enables a set of computer software programs and data structures to use a [[virtual machine]] model for the execution of other computer programs and [[scripting language|scripts]]. The model used by a JVM accepts a form of computer [[intermediate language]] commonly referred to as [[Java bytecode]]. This language conceptually represents the instruction set of a [[stack-oriented programming language|stack-oriented]], [[capability architecture]]. [[Sun Microsystems]] states there are over 4.5 billion JVM-enabled devices.<ref>http://www.java.com/en/about/ Learn about Java Technology</ref> ==Overview== A JVM can also implement programming languages other than Java. For example, [[Ada (programming language)|Ada]] source code can be compiled to Java bytecode, which may then be executed by a JVM. JVMs can also be released by other companies besides Sun (the developer of Java) &mdash; JVMs using the "Java" trademark may be developed by other companies as long as they adhere to the JVM specification published by Sun and to related contractual obligations. Java was conceived with the concept of WORA: "[[write once, run anywhere]]". This is done using the Java Virtual Machine. The JVM is the environment in which java programs execute. It is software that is implemented on non-virtual hardware and on standard [[operating system]]s. JVM is a crucial component of the [[Java (software platform)|Java platform]], and because JVMs are available for many hardware and software [[platform (computing)|platforms]], Java can be both [[middleware]] and a platform in its own right,{{Clarify|date=December 2009}} hence the trademark [[write once, run anywhere]]. The use of the same bytecode for all platforms allows Java to be described as "compile once, run anywhere", as opposed to "write once, compile anywhere", which describes cross-platform [[compiled language]]s. A JVM also enables such features as [[automated exception handling]], which provides "root-cause" debugging information for every software error ([[exception handling|exception]]), independent of the source code. A JVM is distributed along with a [[Java Class Library|set of standard class libraries]] that implement the Java [[application programming interface]] (API). Appropriate APIs bundled together form the Java Runtime Environment (JRE). == Execution environment == Programs intended to run on a JVM must be compiled into a standardized portable binary format, which typically comes in the form of [[class (file format)|.class]] files. A program may consist of many classes in different files. For easier distribution of large programs, multiple class files may be packaged together in a [[jar (file format)|.jar]] file (short for Java archive). The Java application launcher, <code>java</code>, offers a standard way of executing Java code. Compare <code>javaw</code>.<ref> {{cite web | url = http://publib.boulder.ibm.com/infocenter/realtime/v2r0/index.jsp?topic=/com.ibm.rt.doc.20/user/java.html | title = The java and javaw commands | year = 2010 | publisher = IBM | accessdate = 2011-01-16 | quote = The javaw command is identical to java, except that javaw has no associated console window. }} </ref> The JVM [[run-time system|runtime]] executes <tt>.class</tt> or <tt>.jar</tt> files, [[emulator|emulating]] the JVM [[instruction set]] by [[interpreter (computing)|interpreting]] it, or using a [[just-in-time compilation|just-in-time compiler]] (JIT) such as Sun's [[HotSpot (Java)|HotSpot]]. JIT compiling, not interpreting, is used in most JVMs today to achieve greater speed. There are also [[AOT compiler|ahead-of-time compilers]] that enable developers to precompile class files into native code for particular platforms. Like most virtual machines, the Java Virtual Machine has a [[stack machine|stack]]-based architecture akin to a microcontroller/microprocessor. However, the JVM also has low-level support for Java-like classes and methods, which amounts to a highly idiosyncratic{{clarify|date=October 2010}} [[Java Memory Model|memory model]] and capability-based architecture. ==JVM languages== {| class="wikitable" align="left" |+Versions of non-JVM languages !Language!!On JVM |- |[[Erlang (programming language)|Erlang]]||[[Erjang]] |- |[[JavaScript]]||[[Rhino (JavaScript engine)|Rhino]] |- |[[PHP]] ||[[Resin Server|Resin]] |- |[[Python (programming language)|Python]]||[[Jython]] |- |[[REXX]]||[[NetRexx]]<ref>1996, possibly the first new language specifically designed to run on the JVM)</ref> |- |[[Ruby (programming language)|Ruby]]||[[JRuby]] |- |[[Tcl]] ||[[Tcl/Java#Jacl|Jacl]] |} {| class="wikitable" align="right" |+Languages designed expressly for JVM |- |[[MIDletPascal]] |- |[[Lisp (programming language)|Lisp]]||[[Clojure]] |- |[[Groovy (programming language)|Groovy]] |- |[[Scala (programming language)|Scala]] |} {{See also|Da Vinci Machine|List of JVM languages}} Although the JVM was primarily aimed at running compiled Java programs, many other languages can now run on top of it.<ref>{{cite web|url = http://www.is-research.de/info/vmlanguages/|title = Languages for the Java VM|last = Tolksdorf|first = Robert|year = 2005|accessdate = 2008-06-08}}</ref> The JVM has currently no built-in support for [[type system#Dynamic typing|dynamically typed languages]]: the existing [[Java bytecode|JVM instruction set]] is [[type system#Static typing|statically typed]],<ref>{{cite web | url=http://headius.blogspot.com/2007/01/invokedynamic-actually-useful.html | title=InvokeDynamic: Actually Useful? | date=2007-01-03 |last=Nutter|first=Charles | accessdate=2008-01-25}}</ref> although the JVM can be used to implement interpreters for dynamic languages. The JVM has a limited support for [[hotswapping#Software|dynamically modifying]] existing classes and methods; this currently only works in a [[Java Platform Debugger Architecture|debugging environment]], where new classes and methods can be added dynamically. Built-in support for dynamic languages is currently planned for [[Java_version_history#Java SE 7.0|Java 7]].<ref>{{cite web | url = http://www.infoworld.com/article/08/01/31/davinci-machine_1.html | title=Sun's Da Vinci Machine broadens JVM coverage | last = Krill | first=Paul | date=2008-01-31 | accessdate=2008-02-06}}</ref> == Bytecode verifier == A basic philosophy of Java is that it is inherently "safe" from the standpoint that no user program can "crash" the host machine or otherwise interfere inappropriately with other operations on the host machine, and that it 