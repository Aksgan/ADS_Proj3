a specific static or dynamic strategy of ordering the vertices, these algorithms are sometimes called '''sequential coloring''' algorithms. ===Parallel and distributed algorithms=== <!-- [[Distributed graph coloring]] and [[Cole–Vishkin algorithm]] are redirects to this section --> In the field of [[distributed algorithm]]s, graph coloring is closely related to the problem of ''symmetry breaking''. The current state-of-the-art randomized algorithms are faster for sufficiently large maximum degree Δ than deterministic algorithms. The fastest randomized algorithms employ the [[multi-trials technique]] by Schneider et al.<ref name="Schneider 2010">{{harvtxt|Schneider|2010}}</ref> In a [[symmetric graph]], a [[deterministic algorithm|deterministic]] distributed algorithm cannot find a proper vertex coloring. Some auxiliary information is needed in order to break symmetry. A standard assumption is that initially each node has a ''unique identifier'', for example, from the set {1, 2, ..., ''n''}. Put otherwise, we assume that we are given an ''n''-coloring. The challenge is to ''reduce'' the number of colors from ''n'' to, e.g., Δ + 1. The more colors are employed, e.g. O(Δ) instead of Δ + 1, the fewer communication rounds are required.<ref name="Schneider 2010"/> A straightforward distributed version of the greedy algorithm for (Δ + 1)-coloring requires Θ(''n'') communication rounds in the worst case − information may need to be propagated from one side of the network to another side. The simplest interesting case is an ''n''-[[cycle graph|cycle]]. Richard Cole and [[Uzi Vishkin]]<ref>{{harvtxt|Cole|Vishkin|1986}}, see also {{harvtxt|Cormen|Leiserson|Rivest|1990|loc = Section 30.5}}</ref> show that there is a distributed algorithm that reduces the number of colors from ''n'' to ''O''(log ''n'') in one synchronous communication step. By iterating the same procedure, it is possible to obtain a 3-coloring of an ''n''-cycle in ''O''({{log-star}} ''n'') communication steps (assuming that we have unique node identifiers). The function {{log-star}}, [[iterated logarithm]], is an extremely slowly growing function, "almost constant". Hence the result by Cole and Vishkin raised the question of whether there is a ''constant-time'' distribute algorithm for 3-coloring an ''n''-cycle. {{harvtxt|Linial|1992}} showed that this is not possible: any deterministic distributed algorithm requires Ω({{log-star}} ''n'') communication steps to reduce an ''n''-coloring to a 3-coloring in an ''n''-cycle. The technique by Cole and Vishkin can be applied in arbitrary bounded-degree graphs as well; the running time is poly(Δ) + ''O''({{log-star}} ''n'').<ref>{{harvtxt|Goldberg|Plotkin|Shannon|1988}}</ref> The technique was extended to [[unit disk graph]]s by Schneider et al.<ref>{{harvtxt|Schneider|2008}}</ref> The fastest deterministic algorithms for (Δ + 1)-coloring for small Δ are due to Leonid Barenboim, Michael Elkin and Fabian Kuhn.<ref>{{harvtxt|Barenboim|Elkin|2009}}; {{harvtxt|Kuhn|2009}}</ref> The algorithm by Barenboim et al. runs in time ''O''(Δ) + {{log-star}}(''n'')/2, which is optimal in terms of ''n'' since the constant factor 1/2 cannot be improved due to Linial's lower bound. Panconesi et al.<ref>{{harvtxt|Panconesi|1995}}</ref> use network decompositions to compute a Δ+1 coloring in time <math> 2 ^{O(\sqrt{\log n})} </math>. The problem of edge coloring has also been studied in the distributed model. {{harvtxt|Panconesi|Rizzi|2001}} achieve a (2Δ &minus; 1)-coloring in ''O''(Δ + {{log-star}} ''n'') time in this model. The lower bound for distributed vertex coloring due to {{harvtxt|Linial|1992}} applies to the distributed edge coloring problem as well. ===Decentralized algorithms=== Decentralized algorithms are ones where no message passing is allowed (in contrast to distributed algorithms where local message passing takes places). Somewhat surprisingly, efficient decentralized algorithms exist that will color a graph if a proper coloring exists. These assume that a vertex is able to sense whether any of its neighbors are using the same color as the vertex i.e., whether a local conflict exists. This is a mild assumption in many applications e.g. in wireless channel allocation it is usually reasonable to assume that a station will be able to detect whether other interfering transmitters are using the same channel (e.g. by measuring the SINR). This sensing information is sufficient to allow algorithms based on learning automata to find a proper graph coloring with probability one, e.g. see {{harvtxt|Leith|2006}} and {{harvtxt|Duffy|2008}}. ===Computational complexity=== Graph coloring is computationally hard. It is [[NP-complete]] to decide if a given graph admits a ''k''-coloring for a given ''k'' except for the cases ''k'' = 1 and ''k'' = 2. Especially, it is NP-hard to compute the chromatic number. Graph coloring remains NP-complete even on [[planar graph]]s of degree 4.<ref>{{harvtxt|Dailey|1980}}</ref> The best known [[approximation algorithm]] computes a coloring of size at most within a factor O(''n''(log n)<sup>&minus;3</sup>(log log ''n'')<sup>2</sup>) of the chromatic number.<ref>{{harvtxt|Halldórsson|1993}}</ref> For all ''ε'' > 0, approximating the chromatic number within ''n''<sup>1&minus;''ε''</sup> is [[NP-hard]].<ref>{{harvtxt|Zuckerman|2007}}</ref> It is also NP-hard to color a 3-colorable graph with 4 colors<ref>{{harvtxt|Guruswami|Khanna|2000}}</ref> and a ''k''-colorable graph with ''k''<sup>(log ''k'' ) / 25</sup> colors for sufficiently large constant ''k''.<ref>{{harvtxt|Khot|2001}}</ref> Computing the coefficients of the chromatic polynomial is [[Sharp-P-complete|#P-hard]]. In fact, even computing the value of <math>\chi(G,k)</math> is #P-hard at any rational point ''k'' except for ''k'' = 1 and ''k'' = 2.<ref>{{harvtxt|Jaeger|Vertigan|Welsh|1990}}</ref> There is no [[FPRAS]] for evaluating the chromatic polynomial at any rational point ''k'' ≥ 1.5 except for ''k'' = 2 unless [[NP (complexity)|NP]] = [[RP (complexity)|RP]].<ref>{{harvtxt|Goldberg|Jerrum|2008}}</ref> For edge coloring, the proof of Vizing’s result gives an algorithm that uses at most Δ+1 colors. However, deciding between the two candidate values for the edge chromatic number is NP-complete.<ref>{{harvtxt|Holyer|1981}}</ref> In terms of approximation algorithms, Vizing’s algorithm shows that the edge chromatic number can be approximated within 4/3, and the hardness result shows that no (4/3 &minus; ''ε'' )-algorithm exists for any ''ε > 0'' unless [[P = NP]]. These are among the oldest results in the literature of approximation algorithms, even though neither paper makes explicit use of that notion.<ref>{{harvtxt|Crescenzi|Kann|1998}}</ref> ==Applications== ===Scheduling=== Vertex coloring models to a number of scheduling problems.<ref>{{harvtxt|Marx|2004}}</ref> In the cleanest form, a given set of jobs need to be assigned to time slots, each job requires one such slot. Jobs can be scheduled in any order, but pairs of jobs may be in ''conflict'' in the sense that they may not be assigned to the same time slot, for example because they both rely on a shared resource. The corresponding graph contains a vertex for every job and an edge for every conflicting pair of jobs. The chromatic number of the graph is exactly the minimum ''makespan'', the 