same token, +. Visual Basic .NET, however, has separate tokens, + for addition and & for concatenation, although + can be used for concatenation as well. * In Visual Basic .NET property methods may take parameters * C# is case-sensitive. ==Syntax comparisons== Visual Basic .NET terminates a block of code with <code>End ''BlockName''</code> statements (or <code>Next</code> statements, for a [[for loop]]) which are more familiar for programmers with experience using [[T-SQL]]. In C#, the braces, <code>{}</code>, are use to delimit blocks, which is more familiar to programmers with experience in other widely-deployed languages such as [[C++]] and [[Java (programming language)|Java]]. Additionally, in C# if a block consists of only a single statement, the braces may be omitted. C# is case sensitive while Visual Basic .NET is not. Thus in C# it is possible to have two variables with the same name, for example <code>variable1</code> and <code>Variable1</code>. Visual Studio will correct the case of variables as they are typed in VB.NET. In many cases however, [[case sensitivity]] can be useful. C# programmers typically capitalize type names and leave member and variable names lowercase. This allows, for example, fairly natural naming of method arguments: <code>public int CalculateOrders(Customer customer)</code>. Of course, this can cause problems for those converting C# code to a case-insensitive language, such as Visual Basic, or to those unaccustomed to reading a case sensitive language. ===Keywords=== Visual Basic is not case sensitive, which means any combinations of upper and lower cases in keywords are acceptable. However Visual Studio automatically converts all Visual Basic keywords to the default capitalised forms, e.g. "Public", "If". C# is case sensitive and all C# keywords are in lower cases. Visual Basic and C# share most keywords, with the difference being the ''default'' (Remember Visual Basic is not case sensitive) Visual Basic keywords are the capitalised versions of the C# keywords, e.g. "Public" vs "public", "If" vs "if". A few keywords have very different versions in Visual Basic and C#: * <code>Friend</code> vs <code>internal</code> - access modifiers allowing inter-class but intra-assembly reference * <code>Me</code> vs <code>this</code> - a self-reference to the current object instance * <code>MustInherit</code> vs <code>abstract</code> - prevents a class from being directly instantiated, and forces consumers to create object references to only derived classes * <code>MustOverride</code> vs <code>abstract</code> - for forcing derived classes to override this method * <code>MyBase</code> vs <code>base</code> - for referring to the base class from which the current class is derived * <code>NotInheritable</code> vs <code>sealed</code> - for declaring classes that may not be inherited * <code>NotOverridable</code> vs <code>sealed</code> - for declaring methods that may not be overridden by derived classes * <code>Overridable</code> vs <code>virtual</code> - declares a method as being able to be overridden in derived classes * <code>Shared</code> vs <code>static</code> - for declaring methods that do not require an explicit instance of an object Some C# keywords such as <code>sealed</code> represent different things when applied to methods as opposed to when they are applied to class definitions. VB.NET, on the other hand, uses different keywords for different contexts. {{examplefarm}} ===Comments=== {| |- ! [[C Sharp (programming language)|C#]] ! [[Visual Basic .NET]] |- |<source lang="csharp"> //Single line comment /*Multi-line comment line 2 line 3*/ ///XML single line comment /**XML multi-line comment line 2 line 3*/ </source> |<source lang="vbnet"> 'Single line comment </source> Multi-line comment not available <source lang="vbnet"> '''XML single line comment </source> XML multi-line comment not available |} ===Conditionals=== {| |[[C Sharp (programming language)|C#]] |[[Visual Basic .NET]] |- | <source lang=csharp> if (condition) { // condition is true } </source> | <source lang=vbnet> If condition Then ' condition is true End If </source> |- | <source lang=csharp> if (condition) { // condition is true } else { // condition is false } </source> | <source lang=vbnet> If condition Then ' condition is true Else ' condition is false End If </source> |- | <source lang=csharp> if (condition) { // condition is true } else if (othercondition) { // condition is false and othercondition is true } </source> | <source lang=vbnet> If condition Then ' condition is true ElseIf othercondition Then ' condition is false and othercondition is true End If </source> |- | <source lang=csharp> if (condition) { // condition is true } else if (othercondition) { // condition is false and othercondition is true } else { // condition and othercondition are false } </source> | <source lang=vbnet> If condition Then ' condition is true ElseIf othercondition Then ' condition is false and othercondition is true Else ' condition and othercondition false End If </source> |} ===Loops=== {| |[[C Sharp (programming language)|C#]] |[[Visual Basic .NET]] |- | <source lang=csharp> for (int i = 0; i <= number - 1; i++) { // loop from zero up to one less than number } </source> | <source lang=vbnet> For i = 0 To number - 1 ' loop from zero up to one less than number Next i </source> |- | <source lang=csharp> for (int i = number; i >= 0; i--) { // loops from number down to zero } </source> | <source lang=vbnet> For i = number To 0 Step -1 ' loops from number down to zero Next i </source> |- | <source lang=csharp> break; //breaks out of a loop </source> | <source lang=vbnet> Exit For 'breaks out of a for loop </source> <source lang=vbnet> Exit While 'breaks out of a while loop </source> <source lang=vbnet> Exit Do 'breaks out of a do loop </source> |} ===Comparers=== ====Primitive types==== {| |[[C Sharp (programming language)|C#]] |[[Visual Basic .NET]] |- | <source lang=csharp> if (a == b) { // equal } </source> | <source lang=vbnet> If a = b Then ' equal End If </source> |- | <source lang=csharp> if (a != b) { // not equal } </source> Or: <source lang=csharp> if (!(a == b)) { // not equal } </source> | <source lang=vbnet> If a <> b Then ' not equal End If </source> Or: <source lang=vbnet> If Not a = b Then ' not equal End If </source> | |- | <source lang=csharp> if (a 