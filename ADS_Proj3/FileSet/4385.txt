the same concept of ISE but applied to set inclusions. PSSE helps to test operations including predicates like <math>expr \subset \{expr_{1}, \dots, expr_{n}\}</math>. When PSSE is applied it generates <math>2^{n} - 1</math> test classes where a predicate of the form <math>expr = A_{i}</math> with <math>i \in [1, 2^{n} -1]</math> and <math>A_{i} \in \mathbb{P} \{expr_{1}, \dots, expr_{n}\} \setminus \{\{expr_{1}, \dots, expr_{n}\}\}</math>, is added to each class. <math>\{expr_{1}, \dots, expr_{n}\}</math> is excluded from <math>\mathbb{P} \{expr_{1}, \dots, expr_{n}\}</math> because <math>expr</math> is a proper subset of <math>\{expr_{1}, \dots, expr_{n}\}</math>. *Subset of Set Extension (SSE). It is identical to PSSE but it applies to predicates of the form <math>expr \subseteq \{expr_{1}, \dots, expr_{n}\}</math> in which case it generates <math>2^{n}</math> by considering also <math>\{expr_{1}, \dots, expr_{n}\}</math>. ===Testing tree=== The application of a testing tactic to the VIS generates some test classes. If some of these test classes are further partitioned by applying one or more testing tactics, a new set of test classes is obtained. This process can continue by applying testing tactics to the test classes generated so far. Evidently, the result of this process can be drawn as a [[Tree (data structure)|tree]] with the VIS as the root node, the test classes generated by the first testing tactic as its children, and so on. Furthermore, Stocks and Carrington in {{Harv|Stocks|Carrington|1996}} propose to use the Z notation to build the tree, as follows. <math>VIS == [IS | P]</math> <math>TCL_{T_{1}}^{1} == [VIS | P_{T_{1}}^{1}]</math> <math>\dots</math> <math>TCL_{T_{1}}^{n} == [VIS | P_{T_{1}}^{n}]</math> <math>TCL_{T_{2}}^{1} == [TCL_{T_{1}}^{i} | P_{T_{2}}^{1}]</math> <math>\dots</math> <math>TCL_{T_{2}}^{m} == [TCL_{T_{1}}^{i} | P_{T_{2}}^{m}]</math> <math>\dots</math> <math>TCL_{T_{3}}^{1} == [TCL_{T_{2}}^{j} | P_{T_{3}}^{1}]</math> <math>\dots</math> <math>TCL_{T_{3}}^{k} == [TCL_{T_{2}}^{j} | P_{T_{3}}^{k}]</math> <math>\dots</math> <math>\dots</math> <math>\dots</math> ===Pruning testing trees=== In general a test class' predicate is a conjunction of two or more predicates. It is likely, then, that some test classes are empty because their predicates are contradictions. These test classes must be pruned from the testing tree because they represent impossible combinations of input values, i.e. no [[#Abstract test case|abstract test case]] can be derived out of them. ===Abstract test case=== An abstract test case is an element belonging to a [[#Test class|test class]]. The TTF prescribes that abstract test cases should be derived only from the leaves of the [[#Testing tree|testing tree]]. Abstract test cases can also be written as Z schema boxes. Let <math>Op</math> be some operation, let <math>VIS_{Op}</math> be the [[#Valid input space|VIS]] of <math>Op</math>, let <math>x_{1}:T_{1} \dots x_{n}:T_{n}</math> be all the variables declared in <math>VIS_{Op}</math>, let <math>C_{Op}</math> be a (leaf) test class of the testing tree associated to <math>Op</math>, let <math>P_{1} \dots P_{m}</math> be the [[#Test class|characteristic predicates]] of each test class from <math>C_{Op}</math> up to <math>VIS_{Op}</math> (by following the [[Tree (data structure)|edges from child to parent]]), and let <math>v_{1}:T_{1} \dots v_{n}:T_{n}</math> be <math>n</math> constant values satisfying <math>P_{1} \land \dots \land P_{m}</math>. Then, an abstract test case of <math>C_{Op}</math> is the Z schema box defined by <math>[C_{Op} | x_{1} = v_{1} \land \dots \land x_{n} = v_{n}]</math>. ==See also== *[[Model-based testing]] *[[Fastest]] ==References== *{{Citation | last1=Stocks | last2=Carrington | first1=Phil | first2=David | title=A framework for specification-based testing | journal=IEEE Transactions on Software Engineering | volume=22 | number=11 | year=1996 | pages=777&ndash;793}}. *{{Citation | last1=Utting | last2=Legeard | first1=Mark | first2=Bruno | title=Practical Model-Based Testing: A Tools Approach | publisher=[[Morgan Kaufmann]] | year=2007 | isbn=0123725011 | edition=1st}}. *{{Citation | last1=Stocks | first1=Phil | title=Applying Formal Methods to Software Testing | publisher=Department of Computer Science, University of Queensland, PhD thesis | year=1993}}. <!-- {{Citation | last1=Ebbinghaus | first1=Heinz-Dieter | last2=Flum | first2=Jörg | last3=Thomas | first3=Wolfgang | title=Mathematical Logic | publisher=[[Springer-Verlag]] | location=Berlin, New York | edition=2nd | series=Undergraduate Texts in Mathematics | isbn=978-0-387-94258-2 | year=1994}} --> ==Notes== <references/> [[Category:Software testing]]</text> </page> <page> <id>37106</id> <title>Test and learn</title> <text>'''Test and Learn''' is a set of practices followed by retailers, banks and other consumer-focused companies to test ideas in a small number of locations or customers to predict impact. The process is often designed to answer three questions about any tested program before rollout: # What impact will the program have on key performance indicators if executed across the network or customer base? # Will the program have a larger impact on some stores/customers than others? # Which components of the idea are actually working? == Historical context == Test and Learn has been systematically applied as far back as 1988 by [[Capital One]]. Capital One has been aggressive about testing since the firm was founded, testing everything from product design to marketing to customer selection to collection policies<ref name="hbr">{{Cite news | last = Davenport | first = Thomas H. | title = How to Design Smart Business Experiments | newspaper = [[Harvard Business Review]] | date = February 2009 | postscript = <!--None--> }}</ref>. In a single year, the company performs tens of thousands of tests, allowing it to offer thousands of different types of credit cards to customers, based on the knowledge gained from their tests. Richard Fairbank, [[CEO]] of Capital One, called test and learn "a marketing revolution that can be applied to many businesses"<ref>{{cite web | last = Fishman | first = Charles | url = http://www.fastcompany.com/magazine/24/capone.html | title = This is a Marketing Revolution | publisher = [[Fast Company (magazine)|Fast Company]] | accessdate = September 22, 2009 }}</ref>. == Examples == * Retail banks running different commercials in different markets. * Fast food restaurants launching a new menu item or product for a limited time in select locations * Big-box retailers evaluating “store of the future” programs * Companies evaluating pricing strategies * Retailers testing merchandising layouts across their door base == Test and learn in practice == * [[Wawa Food Markets]], a Mid-Atlantic convenience store chain, uses Test and Learn across several aspects of its business:<ref name="storesmag">{{cite news | last = Fleenor | first = D. Gail | title = These Tests Are Positive | date = June 2009 | newspaper = STORES Magazine | url = http://www.stores.org/InformationTechnology/2009/06/Edit03.asp | accessdate = 18 September 2009 }}</ref> ** Measuring the effect of introducing a new product ** Determining the impact 