released on January 18, 2011.<ref name="Release Note">{{cite web | url = http://parrot.org/news/2011/Parrot-3.0.0 | title = Parrot 3.0.0 "Beef Stew" Released! | publisher = Parrot Foundation | date = 18 January 2011 | accessdate = 2011-01-18 }}</ref> ==History== The name ''Parrot'' came from an [[April Fool's]] joke which announced a hypothetical language, named ''Parrot'', that would unify [[Python (programming language)|Python]] and [[Perl]].<ref>http://www.oreilly.com/news/parrotstory_0401.html</ref><ref>http://www.perl.com/pub/a/2001/04/01/parrot.htm</ref> The name was later adopted by this project (initially a part of the Perl 6 development effort) which aims to support Perl 6, Python, and other programming languages. Several languages are being [[Porting|ported]] to run on the Parrot virtual machine.<ref>http://www.parrot.org/languages</ref> The [[Parrot Foundation]] was created in 2008 to hold the [[copyright]] and [[trademark]]s of the Parrot project, to help drive development of [[Programming language implementation|language implementations]] and the core codebase, to provide a base for growing the Parrot community, and to reach out to other language communities.<ref>http://www.parrotblog.org/2008/06/announcing-parrot-foundation.html</ref> ==Languages== The goal of the Parrot virtual machine is to host client languages and allow inter-operation between them. Several hurdles exist in accomplishing this goal, in particular the difficulty of mapping high-level concepts, data, and [[data structure]]s between languages. ===Static and dynamic languages=== The differing properties of [[Type system#Type checking|statically and dynamically typed]] languages have motivated the design of Parrot. Current popular virtual machines such as the [[Java virtual machine]] and the [[Common Language Runtime]] have been designed for statically typed languages, while the languages targeted by Parrot are dynamically typed. Virtual machines such as the Java virtual machine and the current Perl 5 virtual machine are also [[Stack machine|stack based]]. Parrot developers see Parrot's inclusion of registers as an advantage, as it therefore more closely resembles a hardware design, allowing the vast literature on [[compiler optimization]] to be used in generating bytecode for the Parrot virtual machine that could run at speeds closer to [[machine code]]. Other register-based virtual machines have inspired parts of Parrot's design, including the [[Lua_(programming_language)#Internals|Lua VM]] and Inferno's [[Dis virtual machine|Dis]]. ===Functional concepts=== Parrot has rich support for several features of [[functional programming]] including [[Closure (computer science)|closures]] and [[continuation]]s, both of which can be particularly difficult to implement correctly and portably, especially in conjunction with [[exception handling]] and [[thread (computer science)|threading]]. Implementing solutions to these problems at the virtual machine level prevents repeated efforts to solve these problems in the individual client languages. ===Compiler tools=== {{Main|Parser Grammar Engine}} <!-- note: once [[Parrot compiler toolchain]] exists, that should be the main link --> Parrot provides a suite of [[Parrot compiler toolchain|compiler-writing tools]]<ref>http://docs.parrot.org/parrot/latest/html/docs/book/ch04_compiler_tools.pod.html</ref> which includes the [[Parser Grammar Engine]] (PGE), a hybrid parser-generator that can express a [[recursive descent parser]] as well as a [[operator-precedence parser]], allowing free transition between the two in a single grammar. The PGE feeds into the [[Tree Grammar Engine]] (TGE) which further transforms the parse-tree generated by PGE for optimization and ultimately for code generation. === Existing client languages === Many languages already have compiler front-ends designed for Parrot; however, many of them are still only partially functional.<ref>https://trac.parrot.org/parrot/wiki/Languages</ref> The languages currently implementable, partially and fully, on Parrot are:<ref>[http://parrot.org/languages Parrot.Org: Languages]</ref> {{div col|colwidth=30em}} * [[Arc (programming language)|Arc]] * [[APL (programming language)|APL]] * [[bc (Unix)|bc]] * [[Befunge]] * [[Brainfuck]] * [[C99|C]] * [[Common Lisp]] * [[ECMAScript]] (aka JavaScript) * [[Forth (programming language)|Forth]] * Generic Imperative Language * [[GNU m4]] * HQ9 Plus * [[Jako (programming language)|Jako]] * [[Java (programming language)|Java]] * [[Java bytecode]] * [[Joy (programming language)|Joy]] * [[Lazy K]] * [[Lisp (programming language)|Lisp]] * [[LOLCODE]] * [[Lua (programming language)|Lua]] * [[MiniPerl]] (Perl 1.0) * [[NQP]] (Not Quite Perl) * [[GNU_Octave#Octave.2C_the_language|Octave]]<ref>http://github.com/Whiteknight/Matrixy</ref> * [[Ook!]] * [[Perl 6|Perl]] (via [[Rakudo]]) * [[PHP]] (via Pipp) * [[Python (programming language)|Python]] * [[QuickBASIC]] 4.5 * [[Ruby (programming language)|Ruby]] (via Cardinal) * [[Scheme (programming language)|Scheme]] * [[Shakespeare (programming language)|Shakespeare]] * [[Smalltalk]] (via Chitchat) * the "[http://en.wikibooks.org/wiki/Parrot_Virtual_Machine/Squaak_Tutorial squaak]" tutorial language * [[Tcl]] (via [http://code.google.com/p/partcl/ partcl]) * [[Unlambda]] * [[WMLScript]] * [[Common Intermediate Language|.NET bytecode]] {{div col end}} ==Internals== There are three forms of program code for Parrot: <ul> <li> ''[[Bytecode]]''<ref>http://www.parrotcode.org/docs/parrotbyte.html</ref> is binary and is natively interpreted by Parrot. Bytecode is usually stored in files with the [[filename extension]] ".pbc". </li> <li>''[[Parrot Assembly Language]]'' (PASM<ref>http://en.wikibooks.org/wiki/Parrot_Virtual_Machine/PASM_Reference</ref>) is the low level language that [[Compiler | compile]]s down to bytecode. PASM code is usually stored in files with the filename extension ".pasm". <li>''[[Parrot intermediate representation|Parrot Intermediate Representation]]'' (PIR<ref>http://docs.parrot.org/parrot/latest/html/docs/book/ch03_pir.pod.html</ref>) is a slightly higher level language than PASM and also compiles down to bytecode. It is the primary target of language implementations. PIR transparently manages Parrot's inter-routine calling conventions, provides improved syntax, register allocation, and more. PIR code is usually stored in files with the filename extension ".pir".</li> </ul> ==Examples== ===Registers=== Parrot is register-based like most hardware [[Central processing unit|CPUs]], unlike most virtual machines, which are stack-based. Parrot provides four types of registers: * I: native [[integer]] type * N: [[floating point|floating-point]] numbers * S: advanced [[String (computer science)|string]] registers with [[Unicode]] support * P: PMC, or ''Polymorphic Container'' &mdash; Parrot object type Parrot provides an arbitrary number of registers; this number is fixed at compile time per subroutine. ===Arithmetic operations=== In PASM set I1, 4 inc I1 # I1 is now 5 add I1, 2 # I1 is now 7 set N1, 42.0 dec N1 # N1 is now 41.0 sub N1, 2.0 # N1 is now 39.0 print I1 print ', ' print N1 print "\n" end In PIR .sub 'main' :main $I1 = 4 inc $I1 # $I1 is now 5 $I1 += 2 # $I1 is now 7 $N1 = 42.0 dec $N1 # $N1 is now 41.0 $N1 -= 2.0 # $N1 now 39.0 print $I1 print ', ' print $N1 print "\n" .end ==Development== Until late 2005, [[Dan Sugalski]] was the lead designer and chief architect of Parrot. [[Chip Salzenberg]], a longtime Perl, Linux kernel, and C++ hacker, took over until mid-2006, when he became the lead developer. [[Allison Randal]], the lead developer of [[Punie]] and chief architect of Parrot's compiler tools, was the chief architect until mid-October 2010 when she stepped down and chose Christoph Otto as the new chief architect.<ref>http://reparrot.blogspot.com/2010/10/parrot-has-new-architect-what-now.html</ref> Development 