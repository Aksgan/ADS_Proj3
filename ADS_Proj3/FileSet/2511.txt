0 .\!</math> This proves the Leibniz formula :<math>\frac{\pi}4\;=\;\sum_{k=0}^\infty\frac{(-1)^k}{2k+1}.</math> == Inefficiency == Leibniz's formula converges slowly. Calculating π to 10 ''correct'' decimal places using direct summation of the series requires about 5,000,000,000 terms because <math>\scriptstyle \frac 1{2k+1}<10^{-10}</math> for <math>\scriptstyle k>\frac{10^{10}-1}2</math>. However, the Leibniz formula can be used to calculate π to high precision (hundreds of digits or more) using various [[convergence acceleration]] techniques. For example, the [[Shanks transformation]], [[Euler transform]] or [[Van Wijngaarden transformation]], which are general methods for alternating series, can be applied effectively to the partial sums of the Leibniz series. Further, combining terms pairwise gives the non-alternating series :<math>\frac{\pi}{4} = \sum_{n=0}^{\infty} \frac{1}{4n+1}-\frac{1}{4n+3} = \sum_{n=0}^{\infty} \frac{2}{(4n+1)(4n+3)}</math> which can be evaluated to high precision from a small number of terms using [[Richardson extrapolation]] or the [[Euler-Maclaurin summation formula]]. This series can also be transformed into an integral by means of the [[Abel-Plana formula]] and evaluated using techniques for [[numerical integration]]. == Unusual Behavior == If the series is truncated at the right time, the [[Decimal representation|decimal expansion]] of the approximation will agree with that of π for many more digits, except for isolated digits or digit groups. For example, taking 5,000,000 terms yields :3.141592<u>4</u>5358979323846<u>4</u>643383279502<u>7</u>841971693993<u>873</u>058... where the underlined digits are wrong. The errors can in fact be predicted; they are generated by the [[Euler number]]s ''E<sub>n</sub>'' according to the [[asymptotic expansion|asymptotic]] formula :<math>\frac{\pi}{2} - 2 \sum_{k=1}^{N/2} \frac{(-1)^{k-1}}{2k-1} \sim \sum_{m=0}^{\infty} \frac{E_{2m}}{N^{2m+1}}\!</math> where ''N'' is an integer divisible by 4. If ''N'' is chosen to be a power of ten, each term in the right sum becomes a finite decimal fraction. The formula is a special case of the [[Boole summation formula]] for alternating series, providing yet another example of a convergence acceleration technique that can be applied to the Leibniz series. In 1992, [[Jonathan Borwein]] and [[Mark Limber]] used the first thousand Euler numbers to calculate π to 5,263 decimal places with Leibniz' formula. ==References== * Jonathan Borwein, David Bailey & Roland Girgensohn, ''Experimentation in Mathematics - Computational Paths to Discovery'', A K Peters 2003, ISBN 1-56881-136-5, pages 28&ndash;30. {{reflist}} ==External links== * [http://mattst88.com/programming/?page=leibniz Leibniz Formula in C, x86 FPU Assembly, x86-64 SSE3 Assembly, and DEC Alpha Assembly] [[Category:Calculus]] [[Category:Pi algorithms]] [[Category:Articles containing proofs]] [[da:Leibniz' række]] [[de:Leibniz-Reihe]] [[es:Serie de Leibniz]] [[fr:Formule de Leibniz]] [[it:Formula di Leibniz per pi]] [[ja:ライプニッツの公式]] [[ru:Ряд Лейбница]] [[zh:Π的莱布尼茨公式]]</text> </page> <page> <id>21459</id> <title>Lemmatisation</title> <text>In [[linguistics]], '''lemmatization''' is the process of grouping together the different inflected forms of a word so they can be analysed as a single item.<ref>''Collins English Dictionary'', entry for "lemmatize"</ref> In [[computational linguistics]], lemmatization is the algorithmic process of determining the [[lemma (linguistics)|lemma]] for a given word. Since the process may involve complex tasks such as understanding context and determining the [[part of speech]] of a word in a sentence (requiring, for example, knowledge of the [[grammar]] of a language) it can be a hard task to implement a lemmatizer for a new language. In many languages, words appear in several ''[[inflected]]'' forms. For example, in English, the verb 'to walk' may appear as 'walk', 'walked', 'walks', 'walking'. The base form, 'walk', that one might look up in a dictionary, is called the ''[[Lemma_%28linguistics%29|lemma]]'' for the word. The combination of the base form with the [[part of speech]] is often called the ''[[lexeme]]'' of the word. Lemmatization is closely related to [[stemming]]. The difference is that a stemmer operates on a single word ''without'' knowledge of the context, and therefore cannot discriminate between words which have different meanings depending on part of speech. However, stemmers are typically easier to implement and run faster, and the reduced accuracy may not matter for some applications. For instance: #The word "better" has "good" as its lemma. This link is missed by stemming, as it requires a dictionary look-up. #The word "walk" is the base form for word "walking", and hence this is matched in both stemming and lemmatization. #The word "meeting" can be either the base form of a noun or a form of a verb ("to meet") depending on the context, e.g., "in our last meeting" or "We are meeting again tomorrow". Unlike stemming, lemmatization does select the right lemma depending on the context. Analysers like Lucene Snowball<ref name="Lucene Snowball" >{{cite web |url=http://lucene.apache.org/java/docs/lucene-sandbox |title=Lucene Snowball |publisher=Apache project }}</ref> store the base stemmed format of the word without the knowledge of meaning, but taking into account the semantics of the word formation only. The stemmed word itself might not be valid (see lazy below). The following is an example of lemmatization and stemming. Given the following sentence: <nowiki>[The] [quick] [brown] [fox] [jumps] [over] [the] [lazy] [dog]</nowiki> <code>org.apache.lucene.analysis.snowball.SnowballAnalyzer</code> gives the following stems: <nowiki>[quick] [brown] [fox] [jump] [over] [lazy] [dog]</nowiki> the lemmas from the words in the sentence would be as follows: <nowiki>[the] [quick] [brown] [fox] [jump] [over] [the] [lazy] [dog]</nowiki> ==External links== * [http://ofset.sourceforge.net/freeduc/book/book_27.html ''Collatinus'', an open-source lemmatizer for latin language] * [http://lucene.apache.org/java/3_0_0/lucene-contrib/index.html Lucene Contrib (formerly: Sandbox)] * [http://lemmatizer.org/ Lemmatizer.org — an open-source lemmatizer of English and Russian languages] * [http://morphadorner.northwestern.edu/ ''MorphAdorner '', a Java open-source lemmatizer for English] == References == {{Wiktionary}} {{reflist}} [[Category:Computational linguistics]] [[Category:Tasks of Natural language processing]] [[de:Lemma (Lexikografie)#Lemmatisierung]] [[eu:Lematizazioa]] [[fr:Lemmatisation]] [[it:Lemmatizzazione]] [[ru:Лемматизация]] [[sl:Lematizacija]]</text> </page> <page> <id>21460</id> <title>Lemon (automobile)</title> <text>{{Unreferenced|date=February 2008}} A '''lemon''' is a defective [[Automobile|car]] that is found to have numerous or severe defects not readily apparent before its purchase. Any vehicle with these issues can be termed a 'lemon,' and, by extension, any product which has major flaws that render it unfit for its purpose can be described as a 'lemon'. ==Origin== The term 'lemon' to describe a highly flawed item predates its use in describing cars.<ref>[http://www.lemonjustice.com/blog/?p=469 The Origin of “Lemon Law” is Murky]</ref> ==Market== Economist [[George Akerlof]] examined the market of lemons in his notable paper: "[[The Market for Lemons]]: Quality Uncertainty and the Market Mechanism", published in Quarterly Journal of Economics in 1970, in which he identified the severe lemon problems that may afflict markets characterized by [[asymmetrical information]]. Ironically, a study of rejections of important economic papers noted that before Akerlof's paper was accepted "four years after he first sought 