one can safely assume that the greatest value in the first treap is less than the smallest value in the second treap. Insert a value ''x'', such that ''x'' is larger than this max-value in the first treap, and smaller than the min-value in the second treap, and assign it the minimum priority. After insertion it will be a leaf node, and can easily be deleted. The result is one treap merged from the two original treaps. This is effectively "undoing" a split, and costs the same. Aragon and Seidel also suggest assigning higher priorities to frequently accessed nodes, for instance by a process that, on each access, chooses a random number and replaces the priority of the node with that number if it is higher than the previous priority. This modification would cause the tree to lose its random shape; instead, frequently accessed nodes would be more likely to be near the root of the tree, causing searches for them to be faster. Blelloch and Reid-Miller<ref>{{citation | last1 = Blelloch | first1 = Guy E., | last2 = Reid-Miller | first2 = Margaret, | contribution = Fast set operations using treaps | doi = 10.1145/277651.277660 | isbn = 0-89791-989-0 | location = New York, NY, USA | pages = 16–26 | publisher = ACM | title = [[Symposium on Parallel Algorithms and Architectures|Proc. 10th ACM Symp. Parallel Algorithms and Architectures (SPAA 1998)]] | year = 1998}}.</ref> describe an application of treaps to a problem of maintaining [[set (computer science)|set]]s of items and performing [[set union]], [[set intersection]], and [[set difference]] operations, using a treap to represent each set. Naor and Nissim<ref>{{citation | last1 = Naor | first1 = M. | author1-link = Moni Naor | last2 = Nissim | first2 = K. | date = April 2000 | doi = 10.1109/49.839932 | issue = 4 | journal = IEEE Journal on Selected Areas in Communications | pages = 561–570 | title = Certificate revocation and certificate update | url = http://eprints.kfupm.edu.sa/29443/1/29443.pdf | volume = 18}}.</ref> describe another application, for maintaining [[Public key certificate|authorization certificates]] in [[public-key cryptography|public-key cryptosystems]]. ==Randomized binary search tree== The randomized binary search tree, introduced by Martínez and Roura subsequently to the work of Aragon and Seidel on treaps,<ref>{{Citation | title=Randomized binary search trees | journal=Journal of the ACM | volume=45 | issue=2 | year=1998 | first1=Conrado | last1=Martínez | first2=Salvador | last2=Roura | pages=288–323 | url=http://citeseer.ist.psu.edu/article/martinez97randomized.html | doi=10.1145/274787.274812}}.</ref> stores the same nodes with the same random distribution of tree shape, but maintains different information within the nodes of the tree in order to maintain its randomized structure. Rather than storing random priorities on each node, the randomized binary search tree stores at each node a small integer, the number of its descendants (counting itself as one); these numbers may be maintained during tree rotation operations at only a constant additional amount of time per rotation. When a key ''x'' is to be inserted into a tree that already has ''n'' nodes, the insertion algorithm chooses with probability 1/(''n'' + 1) to place ''x'' as the new root of the tree, and otherwise it calls the insertion procedure recursively to insert ''x'' within the left or right subtree (depending on whether its key is less than or greater than the root). The numbers of descendants are used by the algorithm to calculate the necessary probabilities for the random choices at each step. Placing ''x'' at the root of a subtree may be performed either as in the treap by inserting it at a leaf and then rotating it upwards, or by an alternative algorithm described by Martínez and Roura that splits the subtree into two pieces to be used as the left and right children of the new node. The deletion procedure for a randomized binary search tree uses the same information per node as the insertion procedure, and like the insertion procedure it makes a sequence of O(log ''n'') random decisions in order to join the two subtrees descending from the left and right children of the deleted node into a single tree. If the left or right subtree of the node to be deleted is empty, the join operation is trivial; otherwise, the left or right child of the deleted node is selected as the new subtree root with probability proportional to its number of descendants, and the join proceeds recursively. ==Comparison== The information stored per node in the randomized binary tree is simpler than in a treap (a small integer rather than a high-precision random number), but it makes a greater number of calls to the random number generator (O(log ''n'') calls per insertion or deletion rather than one call per insertion) and the insertion procedure is slightly more complicated due to the need to update the numbers of descendants per node. A minor technical difference is that, in a treap, there is a small probability of a collision (two keys getting the same priority) while in the randomized binary search tree the random choices require fractional probabilities that are not the [[dyadic rational]] numbers that can be generated on binary computers; however, in both cases the differences between the theoretical model of perfect random choices used to design the algorithm and the capabilities of actual random number generators are vanishingly small. Although the treap and the randomized binary search tree both have the same random distribution of tree shapes after each update, the history of modifications to the trees performed by these two data structures over a sequence of insertion and deletion operations may be different. For instance, in a treap, if the three numbers 1, 2, and 3 are inserted in the order 1, 3, 2, and then the number 2 is deleted, the remaining two nodes will have the same parent-child relationship that they did prior to the insertion of the middle number. In a randomized binary search tree, the tree after the deletion is equally likely to be either of the two possible trees on its two nodes, independently 