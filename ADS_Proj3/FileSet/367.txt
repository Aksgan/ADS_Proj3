a quantum computer ends with a [[Measurement in quantum mechanics|measurement]]. This leads to a [[Wavefunction collapse|collapse]] of quantum state to one of the [[Quantum state|basis states]]. It can be said that the quantum state is measured to be in the correct state with high probability. Quantum computers have gained widespread interest because some problems of practical interest are known to be in '''BQP''', but suspected to be outside '''P'''. Some prominent examples are: *[[Integer factorization]] (see [[Shor's algorithm]])<ref name="Shor">[http://www.arxiv.org/abs/quant-ph/9508027 arXiv:quant-ph/9508027v2 ''Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer'', Peter W. Shor]</ref> *[[Discrete logarithm]]<ref name="Shor"/> *Simulation of quantum systems (see [[universal quantum simulator]]) *Computing the [[Jones polynomial]] at certain roots of unity == Relationship to other complexity classes == This class is defined for a quantum computer and its natural corresponding class for an ordinary computer (or a [[Turing machine]] plus a source of randomness) is '''[[BPP]]'''. Just like '''P''' and '''BPP''', '''BQP''' is low for itself, which means '''BQP'''<sup>'''BQP'''</sup> = '''BQP'''. Informally, this is true because polynomial time algorithms are closed under composition. If a polynomial time algorithm calls as a subroutine polynomially many polynomial time algorithms, the resulting algorithm is still polynomial time. '''BQP''' contains '''[[P (complexity)|P]]''' and '''[[BPP]]''' and is contained in '''[[Almost Wide Probabilistic Polynomial-Time|AWPP]]''',<ref>{{Cite journal | last1=Fortnow | first1=Lance | last2=Rogers | first2=John | title=Complexity limitations on Quantum computation | url=http://people.cs.uchicago.edu/~fortnow/papers/quantum.pdf | publisher=[[Academic Press]] | location=Boston, MA | year=1999 | journal=J. Comput. Syst. Sci. | issn=0022-0000 | volume=59 | issue=2 | pages=240–252 | doi=10.1006/jcss.1999.1651 | postscript=<!--None-->}}</ref> '''[[PP (complexity)|PP]]''' and '''[[PSPACE]]'''.<ref name=BernVazi>Bernstein and Vazirani, Quantum complexity theory, [[SIAM Journal on Computing]], 26(5):1411-1473, 1997. [http://www.cs.berkeley.edu/~vazirani/bv.ps]</ref> In fact, '''BQP''' is [[low (complexity)|low]] for '''PP''', meaning that a '''PP''' machine achieves no benefit from being able to solve '''BQP''' problems instantly, an indication of the possible difference in power between these similar classes. :<math>\mbox{P} \subseteq \mbox{BPP} \subseteq \mbox{BQP}\subseteq \mbox{AWPP} \subseteq \mbox{PP} \subseteq \mbox{PSPACE}</math> As the problem of '''P''' ≟ '''PSPACE''' has not yet been solved, the proof of inequality between '''BQP''' and classes mentioned above is supposed to be difficult.<ref name=BernVazi/> The relation between '''BQP''' and '''[[NP (complexity)|NP]]''' is not known. Adding [[postselection]] to '''BQP''' results in the complexity class '''[[PostBQP]]''' which is equal to '''[[PP (complexity)|PP]]'''.<ref name="PostBQP=PP">{{cite journal|last=Aaronson|first=Scott|year=2005|title=Quantum computing, postselection, and probabilistic polynomial-time|journal=Proceedings of the Royal Society A|volume=461|issue=2063|pages=3473–3482|doi=10.1098/rspa.2005.1546}}. Preprint available at [http://arxiv.org/abs/quant-ph/0412187]</ref><ref>{{cite web|url=http://weblog.fortnow.com/2004/01/complexity-class-of-week-pp-by-guest.html|title=Complexity Class of the Week: PP|last=Aaronson|first=Scott|date=2004-01-11|work=Computational Complexity Weblog|accessdate=2008-05-02}}</ref> ==References== <references /> {{quantum_computing}} {{ComplexityClasses}} [[Category:Probabilistic complexity classes]] [[Category:Quantum complexity theory]] [[de:BQP]] [[es:BQP]] [[ko:BQP]] [[it:BQP (complessità)]] [[he:BQP]] [[ja:BQP]] [[ru:Класс BQP]]</text> </page> <page> <id>3175</id> <title>BSD/OS</title> <text>{{About|the proprietary Unix sold by BSDi|the open source Unix released by Bill Jolitz|386BSD}} {{Infobox OS | name = BSD/OS | logo = | screenshot = | caption = | developer = [[Berkeley Software Design]], Inc. | source_model = source-available proprietary | kernel_type = [[Monolithic Kernel|Monolithic]] | supported_platforms = [[x86 architecture|x86]] | ui = [[Command-line interface]] | family = [[Unix-like]] | released = BSD/386 1.0, March 1993 | latest_release_version = | latest_release_date = 2003 | latest_test_version = | latest_test_date = | marketing_target = [[Internet]] server applications | programmed_in = [[C (programming language)|C]] | prog_language = | language = [[English language|English]] | updatemodel = | package_manager = | working_state = Discontinued | license = Proprietary | website = }} '''BSD/OS''' (originally called '''BSD/386''' and sometimes known as '''BSDi''') was a proprietary version of the [[Berkeley Software Distribution|BSD]] [[operating system]] developed by [[Berkeley Software Design]], Inc. (BSDi). BSD/OS had a reputation for reliability in [[server (computing)|server]] roles; the renowned Unix programmer and author [[W. Richard Stevens]] used it for his own personal [[web server]] for this reason.<ref>[http://www.kohala.com/start/rstevensfaq.html Rich Stevens' FAQ]</ref> ==History== BSDi was formed in 1991 by members of the [[Computer Systems Research Group]] (CSRG) at [[University of California, Berkeley|UC Berkeley]] to develop and sell a proprietary version of BSD Unix for [[PC compatible]] systems with [[Intel 386]] (or later) processors. This made use of work previously done by [[Bill Jolitz]] to port BSD to the PC platform. BSD/386 1.0 was released in March 1993. The company sold licenses and support for it, taking advantage of terms in the [[BSD License]] which permitted use of the BSD software in proprietary systems, as long as credit was given to the University. The company in turn contributed code and resources to the development of non-proprietary BSD operating systems. In the meantime, Jolitz had left BSDi and independently released an [[open source]] BSD for PCs, called [[386BSD]]. BSD/386 licenses (including [[source code]]) were priced at $995, much less than [[AT&T]] [[UNIX System V]] source licenses, a fact highlighted in their advertisements.<ref name=McKusick>McKusick, M. K. (1999). Twenty Years of Berkeley Unix - From AT&T-Owned to Freely Redistributable. Retrieved July 27, 2006, from http://www.oreilly.com/catalog/opensources/book/kirkmck.html</ref> As part of the settlement of [[USL v. BSDi]], BSDI substituted code that had been written for the University's 4.4 BSD-Lite release for disputed code in their OS, effective with release 2.0. By the time of this release, the "386" designation had become dated, and BSD/386 was renamed "BSD/OS". Later releases of BSD/OS also supported [[Sun Microsystems|Sun]] [[SPARC]]-based systems. The marketing of BSD/OS became increasingly focused on [[Internet]] server applications. However, the increasingly tight market for [[Unix-like operating system|Unix-compatible software]] in the late 1990s and early 2000s hurt sales of BSD/OS. On one end of the market, it lacked the certification of [[the Open Group]] to bear the UNIX trademark, and the sales force and hardware support of the larger Unix vendors. Simultaneously, it lacked the negligible acquisition cost of the open source BSDs and [[GNU/Linux]]. BSD/OS was acquired by [[Wind River Systems]] in April 2001<ref>[http://www.windriver.com/news/press/pr.html?ID=436 Press release: ''Wind River to Acquire BSDi Software Assets, Extending Development Platforms to Include Robust UNIX-based Operating Systems for Embedded Devices'']</ref>. Wind River discontinued sales of BSD/OS at the end of 2003, with support terminated at the end of 2004. ==References== <references/> {{Unix-like}} {{DEFAULTSORT:Bsd/Os}} [[Category:BSD]] [[Category:Discontinued operating systems]] [[de:BSD/OS]] [[ja:BSD/OS]] [[ru:BSD/OS]]</text> </page> <page> <id>3178</id> <title>BSD checksum</title> <text>The '''BSD checksum algorithm''' is commonly used, legacy [[checksum]] algorithms. It has been implemented in [[Berkeley Software Distribution|BSD]] and is also available through 