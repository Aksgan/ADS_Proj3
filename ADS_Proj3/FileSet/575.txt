that a Controller is only used to determine the list of executed models, and that Models represent entirely abstract data sets and rules that govern the data. This paradigm allows separating the functions of a web designer, a programmer and a manager. A lot of the code can be reused. In addition a project has a single entry point which facilitates its upgrading and development. As represented in the diagram below the architecture of the template engine consists of 4 subsystems: a template compiler which converts the text of the page template into bytecode, a virtual machine which executes the bytecode, a caching system for templates, and a library of data processor functions. == External links == * [http://ctpp.havoc.ru/en/ CTPP official website] [[Category:C++ libraries]] [[Category:Perl modules]] [[Category:PHP]] [[Category:Scripting languages]] [[Category:Template engines]]</text> </page> <page> <id>5244</id> <title>CVSS</title> <text>'''Common Vulnerability Scoring System''' ('''CVSS''') is an [[Technical standard|industry standard]] for assessing the severity of [[computer security|computer system security]] [[vulnerability (computing)|vulnerabilities]]. It attempts to establish a measure of how much concern a vulnerability warrants, compared to other vulnerabilities, so efforts can be prioritized. The score is based on a series of measurements (called [[Software metric|metrics]]) based on expert assessment. ==Metrics== The CVSS assessment measures three areas of concern: #Base Metrics for qualities intrinsic to a vulnerability. #Temporal Metrics for characteristics that evolve over the lifetime of vulnerability. #Environmental Metrics for characteristics of a vulnerability that depend on a particular implementation or environment. ===Base Metrics=== #Is the vulnerability exploitable remotely (as opposed to only locally). #How complex must an [[attack (computer)|attack]] be to exploit the vulnerability? #Is authentication required to attack? #Does the vulnerability expose confidential data? #Can attacking the vulnerability damage the integrity of the system? #Does it impact availability of the system? ===Temporal Metrics=== #How complex (or how long will it take) to exploit the vulnerability. #How hard (or how long) will it take to remediate the vulnerability. #How certain is the vulnerability's existence. ===Environmental Metrics=== #Potential to cause [[collateral damage]]. #How many systems (or how much of a system) does the vulnerability impact. #Security Requirement(CIA) ==See also== * [[Common Weakness Enumeration]] ==External links== *[http://www.first.org/cvss the Forum of Incident Response Teams FIRST CVSS site] *[http://nvd.nist.gov/cvss.cfm National Vulnerability Database NVD CVSS site] *[http://www.security-database.com/cvss.php Security-Database online CVSS 2.0 calculator] *[http://www.first.org/cvss/eadopters.html A list of early adopters] *[http://nvd.nist.gov/ All software/hardware vulnerabilities are CVSS scored and can be viewed at the NVD site] *[http://www.security-database.com/dashboard.php Security-Database vulnerabilities dashboard scored with CVSS and other Open Standards CVE, CPE, CWE, CAPEC, OVAL] [[Category:Computer security]] [[Category:Computer network security]] [[fr:Common Vulnerability Scoring System]]</text> </page> <page> <id>5264</id> <title>C Sharp syntax</title> <text>{{Correct title|title=C# syntax|reason=hash}} : ''Main article: [[C Sharp (programming language)]]'' This article describes the [[syntax (programming languages)|syntax]] of the [[C Sharp (programming language)|C#]] [[programming language]]. The features described are compatible with [[.NET Framework]] and [[Mono (software)|Mono]]. ==Basics== ===Identifier=== An [[identifier#Identifiers in computer languages|identifier]] is the name of an element in the [[source code|code]]. There are certain standard [[naming conventions (programming)|naming conventions]] to follow when selecting names for elements. An identifier can: * start with a "_". * contain both [[capital letter|upper case and lower case]] Unicode letters. Case is significant. An identifier cannot: * start with a numeral. * start with a symbol, unless it is a keyword (check ''[[#Keywords|Keywords]]''). * have more than 511 [[character (computing)|chars]]. =====Keywords===== [[keyword (computer programming)|Keywords]] are predefined reserved words with special syntactic meaning. The language has two types of keyword &mdash; contextual and reserved. The reserved keywords such as ''false'' or ''byte'' may only be used as keywords. The contextual keywords such as ''where'' or ''from'' are only treated as keywords in certain situations.<ref>{{citation |url=http://books.google.co.uk/books?id=nn6wbI45XDAC&pg=PA32 |title=C# 3.0: The Complete Reference |author=Herbert Schildt}}</ref> If an identifier is needed which would be the same as a reserved keyword, it may be prefixed by the [[@]] character to distinguish it. This facilitates reuse of [[.NET Framework|.NET]] code written in other languages.<ref>{{citation |url=http://books.google.co.uk/books?id=euV7e2f-RzsC&pg=PA55 |title=C# for programmers |author=Harvey M. Deitel, Paul J. Deitel}}</ref> {| align="center" class="wikitable" ! colspan="4"| '''C# keywords, reserved words''' |- | width=25%|abstract | width=25%|as | width=25%|base |bool |- |break |by <sup>2</sup> |byte |case |- |catch |char |checked |class |- |const |continue |decimal |default |- |delegate |do |double |descending <sup>2</sup> |- |explicit |event |extern |else |- |enum |false |finally |fixed |- |float |for |foreach |from <sup>2</sup> |- |goto |group <sup>2</sup> |if |implicit |- |in |int |interface |internal |- |into <sup>2</sup> |is |lock |long |- |new |null |namespace |object |- |operator |out |override |orderby <sup>2</sup> |- |params |private |protected |public |- |readonly |ref |return |switch |- |struct |sbyte |sealed |short |- |sizeof |stackalloc |static |string |- |select <sup>2</sup> |this |throw |true |- |try |typeof |uint |ulong |- |unchecked |unsafe |ushort |using |- |var <sup>2</sup> |virtual |volatile |void |- |while |where <sup>2</sup> |yield <sup>1</sup> | |- |colspan="4"|<small><sup>1, 2</sup> These are not actually keywords, thus (unlike actual keywords) it is possible to define variables and types using these names, but they act like keywords in certain new language constructs introduced in C# 2.0<sup>(1)</sup> and 3.0<sup>(2)</sup>.</small> |} Using a keyword as an identifier: <source lang="csharp"> string @out; // @out is an ordinary identifier, distinct from the 'out' keyword, //which retains its special meaning </source> ===Literals=== {| class="wikitable" |- !colspan="2"|Integers |- ![[hexadecimal]] |<tt>0xF5, 0x[0..9, A..F, a..f]+</tt> |- ![[decimal]] |<tt>245, [0..9]+</tt> |- !colspan="2"|[[Floating-point]] values |- !float |<tt>23.5F, 23.5f; 1.72E3F, 1.72E3f, 1.72e3F, 1.72e3f</tt> |- !double |<tt>23.5, 23.5D, 23.5d; 1.72E3, 1.72E3D, ...</tt> |- !colspan="2"|Dates |- !date |<tt>not possible</tt> |- !colspan="2"|Characters |- !char |<tt>'a', 'Z', '\u0231'</tt> |- !colspan="2"|Strings |- !String |<tt>"Hello, world"</tt><br><tt>"C:\\Windows\\"</tt>, <tt>@"C:\Windows\"</tt> |- !colspan="2"|Characters escapes in strings |- ![[Unicode]] character |<tt>\u</tt> followed by the hexadecimal unicode code point |- ![[Tab]] |<tt>\t</tt> |- ![[Backspace]] |<tt>\b</tt> |- ![[Carriage return]] |<tt>\r</tt> |- ![[Form feed]] |<tt>\f</tt> |- ![[Backslash]] |<tt>\\</tt> |- ![[Single quote]] |<tt>\'</tt> |- ![[Double quote]] |<tt>\"</tt> |- ![[Line feed]] |<tt>\n</tt> |} ===Variables=== [[variable (programming)|Variables]] are identifiers associated with values. They are declared by writing the variable's type and name, and are optionally initialized in the same statement by assigning a value. '''Declare''' <source lang="csharp"> int MyInt; // Declaring an uninitialized variable called 'MyInt', of type 'int' </source> '''Initialize''' <source lang="csharp"> int MyInt; // 