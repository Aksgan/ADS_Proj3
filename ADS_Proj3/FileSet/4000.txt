Contextual analysis and modeling, and (2) Structural analysis and modeling. These activities are performed to produce a service-oriented analysis proposition. The below illustration identifies the contextual analysis and modeling operations (represented by analysis symbols)that can be employed to draft an analysis proposition diagram. These operations promote the core service-oriented analysis discipline best practices. [[Image:SOMF_Contextual_Analysis_Notation.jpg|center|320px|thumb|Service-oriented contextual analysis notation - SOMF 2.0<ref name="Bell2010p223"> Michael Bell (2010). ''SOA Modeling Patterns''. p. 223</ref>]] Here is a short description for these symbols: *''Generalized:'' Increases service abstraction level and broadens service offerings *''Specified:'' Decreases service abstraction level and limits service offerings *''Expanded:'' Expands service operations in a distributed environment *''Contracted:'' Trims service operations in a distributed environment The below illustration, on the other hand, depicts the service-oriented structural analysis and modeling notation. [[Image:SOMF_Structural_Analysis_Notation.jpg|center|500px|thumb|Service-oriented tructural analysis notation - SOMF 2.0<ref name="Bell2010p223"> Michael Bell (2010). ''SOA Modeling Patterns''. p. 308</ref>]] Here is a short description for these symbols: *''Aggregated:'' Depicts containment of services *''Unified:'' Joins services by creating a new service *''Compounded:'' Groups services that offer collaborative solution *''Decomposed:'' Detaches a child service from its containing parent *''Subtracted:'' Retires a service *''Transformed:'' Converts a service structure to another formation (i.e from Atomic to Composite, etc,) *''Intersected:'' Intersects two or more service clusters *''Overlapped:'' Identifies the overlapping region between two or more service clusters *''Excluded:'' Isolates the overlapping region of a two ore more intersected service clusters *''Clipped:'' Isolates a service from a distributed environment *''Coupled:'' Structurally couples two autonomous services in a distributed environment *''Decoupled:'' Structurally separates two autonomous services in a distributed environment *''Cloned:'' Duplicates an instance of a service by creating a new and identical service *''De-cloned:'' Separates cloned services *''Bound:'' Identifies a contract between two services *''Unbound:'' Identifies a contract cancellation between two services *''Operation Numbering:'' Illustrates the sequence of analysis and modeling operations *''Comment:'' A place to put comments next to each asset or operation === Service-Oriented Conceptualization === The service-oriented modeling framework (SOMF) advocates that practitioners devise conceptual services to bridge the communication gaps in an organization. These conceptual entities foster the creation of a common language, a vocabulary that can be used during projects to encourage asset reuse and consolidation. One of the most important aspects of the conceptual service paradigm is that it provides direction and defines the scope of a project or a business initiative. The conceptualization process then identifies six major “tools” that can facilitate the development of conceptual services.<ref>Michael Bell (2008). ''Service-Oriented Modeling'' p.88-89</ref> * Concept Attribution: this activity pertains to the collection of software products attributes that both describe service’s features and lead to the discovery of organizational taxonomy * Concept Classification: the categorization effort contributes to separation of concerns and the establishment of service identities. This is the process of identifying service dissimilarities * Concept Association: Unlike the classification activity, the association effort enables the discovery of service relationship. These can be business or technological affiliations * Concept Clustering: this discipline is about grouping related conceptual services that collaboratively provide a solution. Clustering is a conceptual operation that can encompass local, remote, and virtual services * Concept Generalization: to raise the abstraction level of a conceptual service, the generalization method increases the conceptual scope of a solution. This approach is typically used when a service is coarse-grained (too granular) * Concept Specification: the specification activity enables architects, modelers, and developers to reduce the abstraction level of a service and thus reduce its granularity scope to finer-grained. == Examples == Let us now view a number of service analysis modeling examples. <center><gallery caption="Click on small images for full-size version"> Image:SOMF_DA_Example1.jpg|1. Service Aggregation Example Image:SOMF_DA_Example2.jpg|2. Service Decomposition Example Image:SOMF_DA_Example3.jpg|3. Service Subtraction Example Image:SOMF_DA_Example4.jpg|4. Service Substitution Example </gallery></center> * Use Case 1 depicts a simple aggregation case, in which atomic service A-1 is aggregated in composite service C-1 because of SOA best practice reasons. * Use Case 2 describes service decomposition. Once again, this is because of an SOA best practice rule. * Use Case 3 illustrates a service retirement (elimination) employing the “subtracted” analysis operation. * Use Case 4 represents a common business substitution operation. Atomic service A-3 was retired and replaced with atomic service A-2. == References == {{reflist}} {{Refimprove|date=February 2009}} == Further reading == * Luba Cherbakov et al. (2005). "[http://ieeexplore.ieee.org/search/freesrchabstract.jsp?tp=&arnumber=5386696&queryText%3Dcherbakov%26openedRefinements%3D*%26searchField%3DSearch+All Impact of service orientation at the business level]". IBM Systems Journal Oct 2005 * Ali Arsanjani (2004). "[http://www.ibm.com/developerworks/library/ws-soa-design1/ Service-Oriented Modeling & Architecture]". IBM Online article, 09 Nov 2004. * Jenny Ang, Luba Cherbakov, Mamdouh Ibrahim (2005). "[http://www.ibm.com/developerworks/webservices/library/ws-antipatterns/ SOA antipatterns]". IBM Online article, Nov 2005. * Ali Arsanjani et al. (2008). "[http://ieeexplore.ieee.org/search/freesrchabstract.jsp?tp=&arnumber=5386496&queryText%3DSOMA%26openedRefinements%3D*%26searchField%3DSearch+All SOMA: A method for developing service-oriented solutions ]". IBM systems Journal Oct 2008 * Jim Amsden (2006). "[http://www.omg.org/news/meetings/tc/special-events-dc/soa-pdf/Amsden-SOA_Profile_RFP.pdf UML Profile and Metamodel for Services RFP]". OMG Paper * Michael Bell (2008). ''Service-Oriented Modeling: Service Analysis, Design, and Architecture''. Wiley. * Michael Bell (2010). ''SOA Modeling Patterns for Service Oriented Discovery and Analysis''. Wiley & Sons * Birol Berkem (2008). "[http://www.jot.fm/issues/issue_2008_11/column6.pdf From The Business Motivation Model (BMM) To Service Oriented Architecture (SOA)]" In: ''Journal of Object Technology'' Vol 7, no. 8 * [[M. Brian Blake]] (2007). "[http://www.cs.georgetown.edu/~blakeb/pubs/blake_IEEESoftware2007_proof.pdf Decomposing Composition: Service-Oriented Software Engineers]". In: ''IEEE Software''. Nov/Dec 2007. pp.68–77. * Dick A. Quartel , Maarten W. Steen , Stanislav Pokraev , Marten J. Sinderen, COSMO: A conceptual framework for service modelling and refinement, Information Systems Frontiers, v.9 n.2-3, p.225-244, July 2007 == External links == {{Commonscat|Service-oriented modeling}} * {{cite web | url = http://www.modelingconcepts.com/pdf/SOMF_ANALYSIS_MODELING.pdf | title = SOMF Examples | format = Softcopy | publisher = Methodologies Corporation }} * {{cite web | url = http://www.modelingconcepts.com/pages/download.htm | title = SOMF Examples & Language Notation | format = Softcopy | publisher = Methodologies Corporation }} [[Category:Service-oriented (business computing)]] [[Category:Enterprise modelling]]</text> </page> <page> <id>34025</id> <title>Service Data Objects</title> <text>{{Other uses|SDO (disambiguation)}} '''Service Data Objects''' is a technology that allows [[heterogeneous]] data to be accessed in a uniform way. The SDO specification was originally developed in 2004 as a joint collaboration between [[BEA Systems|BEA]] and [[IBM]] and approved by the [[Java Community Process]]. Version 2.0 of the specification was introduced 