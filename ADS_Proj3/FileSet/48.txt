File Controller, which was a modified Tape Controller, connected to the :** Bryant PH 2000 Disk File, which had 24 disks that were 39 inches in diameter, 125 read/write heads that were hydraulically actuated, and had a total capacity of 26 [[megabyte|MB]] :* [[IBM 1401]], which controlled data transfers from unit-record equipment: :** [[IBM 1402]] Card Reader/Punch :** [[IBM 1403]] Line Printer :** 2 [[IBM 729]]-V Tape Drives :* 2 [[IBM Selectric]] Typewriters, (I/O Typewriters) one of which was used for operational messages and the other for diagnostic messages and maintenance activities. <!-- The computers were part of the SAC command and control system. SDC developed the system software using [[JOVIAL]] (Jules Own Version of the International Algebraic Language), one of the first high level complied programming languages. --> ==References== {{Portal|United States Air Force}} {{Reflist}} ==External links== * [http://bitsavers.org/pdf/ibm/4020/ Bitsavers.org IBM 4020 documentation] {{DEFAULTSORT:An/Fsq-31v}} [[Category:Military computers]] [[Category:Military electronics of the United States]] [[Category:Equipment of the United States Air Force]] [[Category:IBM transistorized computers]] [[Category:Joint Electronics Type Designation System]]</text> </page> <page> <id>447</id> <title>ANIMAL (image processing)</title> <text>'''ANIMAL''' (first implementation: 1988 - revised: 2004) is an interactive environment for [[Image processing]] that is oriented toward the rapid prototyping, testing, and modification of algorithms. To create ANIMAL (AN IMage ALgebra), [[XLISP]] of David Betz was extended with some new types: sockets, arrays, images, masks, and drawables. The theoretical framework and the implementation of the working environment is described in the paper [http://tev.fbk.eu/people/modena/Papers/BruMod_AF_1989.pdf ANIMAL: AN IMage ALgebra]<ref>R. Brunelli and C. M. Modena, "ANIMAL: AN IMage ALgebra", High Frequency, 1989, LVIII:3:255-259</ref>. In the theoretical framework of ANIMAL a [[digital image]] is a boundless matrix with its ''history''. However, in the implementation it is bounded by a rectangular region in the discrete plane and the elements outside the region have a constant value. The size and position of the region in the plane (focus) is defined by the coordinates of the rectangle. In this way all the [[pixel]]s, including those on the border, have the same number of neighbors (useful in local operators, such as [[digital filter]]s). Furthermore, pixelwise [[commutative operation]]s remain commutative on image level, independently on focus (size and position of the rectangular regions). The ''history'' is a list which tracks the operations and parameters applied to the matrix. This mechanism is useful to document algorithms and generate new functions. ANIMAL has been ported to [[R (programming language)|R]], a freely available language and environment for statistical computing and graphics. [http://tev.fbk.eu/TM/AnImAl.tgz The new implementation] is free and is used in a recent book<ref>R. Brunelli, ''Template Matching Techniques in Computer Vision: Theory and Practice'', Wiley, ISBN 978-0-470-51706-2, 2009 ''([http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0470517069.html] TM book)''</ref> to illustrate the use of template matching techniques in computer vision (see the [http://tev.fbk.eu/TM/html/tmCodeCompanionli2.html#x3-2000 preface] of the [http://tev.fbk.eu/TM/html book code companion]). ==References== <references/> {{DEFAULTSORT:Animal (Image Processing)}} [[Category:Lisp programming language family]] [[Category:Computer vision software]] [[Category:Image processing]]</text> </page> <page> <id>450</id> <title>ANOVA-simultaneous component analysis</title> <text>{{multiple issues|context=November 2010|wikify=November 2010|onesource=November 2010}} '''ASCA''', '''ANOVA-SCA''', or '''analysis of variance â€“ simultaneous component analysis''' is a method that partitions variation and enables interpretation of these partitions by SCA, a method that is similar to [[Principal components analysis|PCA]]. This method is a multi or even megavariate extension of [[ANOVA]]. The variation partitioning is similar to Analysis of variance (ANOVA). Each partition matches all variation induced by an effect or factor, usually a treatment regime or experimental condition. The calculated effect partitions are called effect estimates. Because even the effect estimates are multivariate, interpretation of these effects estimates is not intuitive. By applying SCA on the effect estimates one gets a simple interpretable result. In case of more than one effect this method estimates the effects in such a way that the different effects are not correlated. See also references ([http://dx.doi.org/10.1093/bioinformatics/bti476], [http://dx.doi.org/10.1002/cem.952] and [http://dx.doi.org/10.1186/1471-2105-8-322]). == Details == Many research areas see increasingly large numbers of variables in only few samples. The low sample to variable ratio creates problems known as [[multicollinearity]] and singularity. Because of this, most traditional multivariate statistical methods cannot be applied. == ASCA algorithm == This section details how to calculate the ASCA model on a case of two main effects with one interaction effect. It is easy to extend the declared rationale to more main effects and more interaction effects. If the first effect is time and the second effect is dosage, only the interaction between time and dosage exist. We assume there are four time points and three dosage levels. Let X be a matrix that holds the data. X is mean centered, thus having zero mean columns. A1, A2, A3 and A4, as B1, B2 and B3 indicate the levels in time and dosage. A and B are required to be balanced if the effect estimates need to be orthogonal and the partitioning unique. Matrix E holds the information that is not assigned to any effect. The partitioning gives the following notation: : <math>X = A+B+AB+E \,</math> == Calculating main effect estimate A (or B) == Find all rows that correspond to effect A level 1 and averages these rows. The result is a vector. Repeat this for the other effect levels. Make a new matrix of the same size of X and place the calculated averages in the matching rows. That is, give all rows that match effect (i.e.) A level 1 the average of effect A level 1. After completing the level estimates for the effect, perform an SCA. The scores of this SCA are the sample deviations for the effect, the important variables of this effect are in the weights of the SCA loading vector. == Calculating interaction effect estimate AB == Estimating the interaction effect is similar to estimating main effects. The difference is that for interaction estimates the rows that match effect A level 1 are combined with the effect B level 1 and all combinations of effects and levels are cycled through. In our example setting, with four time point and three dosage levels there are 12 interaction sets {A1-B1, A1B2, A2B1, A2B2 and so on}. It is important to deflate (remove) the main effects 