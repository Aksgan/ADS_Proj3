Old Java Interfaces) model. ; [http://sourceforge.net/projects/auto-persist-j AutoPersistJ] : This project aims to assist developers in developing java EE persistence layer for existing database tables. It gets metadata of selected database tables and generates classes for them. it uses and extends the ideas of DbGen project to EJB 3.0 POJO. ; [http://sourceforge.net/projects/pojogen PojoGen]: It is a small tool to generate Java Code (a POJO) for an APPFUSE-based project from a DDL file, which is created from an ER diagram by Microsoft VISIO. It makes an APPFUSE-based project more easy to use. ; [http://sourceforge.net/projects/pojodbc Pojodbc]: An easy-to-use Java Object Relation mapping library without configurations file or annotations. Built on top of [[JDBC]], you still use your optimized [[native SQL]] and get POJOs. ; [http://cwiki.apache.org/FELIX/ipojo.html Apache Felix iPOJO] : A new type of dynamic [[Service-oriented architecture|service-oriented]] [[Component-based software engineering|component]] runtime that runs pure POJO applications on the top of [[OSGi]] platforms. Non-functional (''extra-functional'') services can be added and removed at runtime. ; [http://labs.jboss.com/jbossmc/ JBoss Microcontainer]: The [[JBoss]] [[Microcontainer]] is a refactoring of [[JBoss]]'s [[JMX]] [[Microkernel]] to support direct POJO deployment and standalone use outside the [[JBoss]] application server. ;[http://www.nakedobjects.org/home/index.shtml Naked Objects]: An open source framework that auto-creates an object-oriented user interface from POJOs using the [[naked objects]] pattern. ;[http://www.metawidget.org Metawidget]: A 'smart User Interface widget' that populates itself, at runtime, with UI components to match the properties of POJOs. ;[http://code.google.com/p/fbdaogenerator fbDaoGenerator]: Fbdaogenerator connects to a [[Firebird (database server)|Firebird]] Database, reads the [[metadata]] of the Database by querying the system-tables, and generates POJOs and [[Data Access Object]]s. ==POJO translation projects== ;[http://code.google.com/p/pojo-injector pojo-injector]: pojo-injector allows to populate POJOs from Java data models and back (from POJOs to data models, ie interfaces or concrete classes). The translation is based on annotating just only the POJOs classes (Java data models are untouched) == POJO testing projects == ;[http://code.google.com/p/openpojo OpenPojo]: a pluggable testing framework ==See also== * [[Data Transfer Object]] * [[Anemic Domain Model]] ==References== {{Reflist}} [[Category:Computing acronyms]] [[Category:Java programming language]] [[Category:Branding]] [[ca:Plain Old Java Object]] [[de:Plain Old Java Object]] [[es:Plain Old Java Object]] [[fr:Plain Old Java Object]] [[ja:Plain Old Java Object]] [[pl:Plain Old Java Object]] [[pt:Plain Old Java Objects]] [[ru:POJO]] [[sv:Plain Old Java Object]] [[uk:POJO]]</text> </page> <page> <id>29357</id> <title>Planar (computer graphics)</title> <text>{{Unreferenced|date=December 2009}} In [[computer graphics]], '''planar''' is the method of representing pixel colours with several ''[[bit plane|bitplanes]]'' of [[Random Access Memory|RAM]]. Each bit in a bitplane is related to one pixel on the screen. Unlike [[Packed pixel|Chunky]], [[Highcolour]] or [[Truecolor|Truecolour]] graphics, the whole data for an individual pixel isn't in one specific location in RAM, but spread across the bitplanes that make up the display. For example, on a [[Packed pixel|chunky]] display, each byte represents one pixel. Three pixels in a row would be stored as follows, where up to 256 different colours are available: Byte 0: 00000000 = Black pixel<br> Byte 1: 00000001 = Blue pixel<br> Byte 2: 00000010 = Green pixel Whereas a planar data store could use 2 bitplanes, providing for a 4 colour display: A row of 8 black pixels:<br> Plane 0, Byte 0: 00000000<br> Plane 1, Byte 0: 00000000 A row of 1 blue pixel, 2 black pixels, 1 green pixel, 4 black pixels:<br> Plane 0, Byte 0: 10000000<br> Plane 1, Byte 0: 00010000 Adding a third plane would make 2<sup>3</sup>=8 colours available. Where fewer than 256 colours are needed, planar graphics are economical in RAM compared with chunky graphics. Example: to display 8 colours using 3 bitplanes, so each pixel has 3 bits assigned to it instead of 8, reduces memory and bandwidth requirements by 62.5%. This saving was most significant in the 80s and early 90s when fast RAM was expensive and most computer graphics displayed fewer than 256 colours. A disadvantage of planar graphics is that more RAM address cycles are needed for scrolling and animations, although these operations can be made faster by dedicated hardware. {{DEFAULTSORT:Planar (Computer Graphics)}} [[Category:Computer graphics]] [[Category:Amiga]] [[fr:Plan de bits]] [[pt:Planar (gr√°fico)]]</text> </page> <page> <id>29377</id> <title>Planning</title> <text>{{distinguish|Plan (disambiguation)}} [[File:Planboard planning.jpg|thumb|right|In the weeks prior to an important milestone, computer consultants give up on automated scheduling and resort to an old fashioned planboard to agree on who does what when. Such impromtu gatherings promote creativity and exchange of information that works positively towards an on-time result. Automated scheduling works well for the bigger picture, but often the detailed tasks must be discussed live with the whole team.]] '''Planning''' in [[organizations]] and [[public policy]] is both the organizational process of creating and maintaining a [[plan]]; and the psychological process of [[thinking]] about the activities required to create a desired goal on some scale. As such, it is a fundamental property of [[intelligence|intelligent behavior]]. This thought process is essential to the creation and refinement of a [[plan]], or integration of it with other plans, that is, it combines [[forecasting]] of developments with the preparation of scenarios of how to react to them. An important, albeit often ignored aspect of planning, is the relationship it holds with [[forecasting]]. [[Forecasting]] can be described as predicting what the future will look like, whereas planning predicts what the future should look like.<ref>[http://www.forecastingprinciples.com/index.php?option=com_content&task=view&id=3&Itemid=3#field_2 How does forecasting relate to planning?] ForecastingPrinciples.com</ref> The term is also used for describing the formal procedures used in such an endeavor, such as the creation of documents, diagrams, or meetings to discuss the important issues to be addressed, the objectives to be met, and the strategy to be followed. Beyond this, planning has a different meaning depending on the political or economic context in which it is used. Two attitudes to planning need to be held in tension: on the one hand we need to be prepared for what may lie ahead, which may mean contingencies and flexible processes. On the other hand, our future is shaped by consequences of our own planning and actions. The counterpart to planning is [[spontaneous order]]. ==Overview== Planning is a process for accomplishing purposes. It is a blue print of business growth and a road map of development. It helps in deciding objectives both in quantitative and qualitative terms. It is setting 