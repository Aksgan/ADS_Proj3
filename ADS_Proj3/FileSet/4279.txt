0-444-86839-9. [[Category:Set theory]] [[Category:Cardinal numbers]] [[pl:Następnik liczby kardynalnej]]</text> </page> <page> <id>36089</id> <title>Succinct data structure</title> <text>{{Cleanup-jargon|date=March 2009}} In [[computer science]], a '''succinct data structure''' for a given data type is a representation of the underlying combinatorial object that uses an amount of space “close” to the information theoretic lower bound, together with efficient algorithms for navigation, search, insertion and deletion operations. The concept was introduced by Jacobson <ref name="jacobson89">{{Citation | first = Guy | last = Jacobson | title = Space-Efficient Static Trees and Graphs | isbn = 0-8186-1982-1 | doi = 10.1109/SFCS.1989.63533 | year = 1989 | pages = 549 }}</ref>, to encode [[bit vector]]s, (unlabeled) trees, and [[planar graph]]s. A natural example is the representation of a [[binary tree]]: an arbitrary binary tree on n nodes can be represented in <math>2n + o(n)</math> bits while supporting a variety of operations on any node, which includes finding its parent, its left and right child, and returning the size of its subtree, each in constant time. The number of different binary trees on <math>n</math> nodes is <math>{\tbinom{2n}{n}}</math><math>/(n+1)</math>. For large <math>n</math>, this is about <math>4^n</math>; thus we need at least about <math>\log_2(4^n)=2n</math> bits to encode it. A succinct binary tree therefore would occupy only <math>2</math> bits per node. A related notion is that of a [[compressed data structure]], in which the size of the data structure depends upon the particular data being represented. When the data are compressible, as is often the case in practice for natural language text, the compressed data structure can occupy substantially less space than the information-theoretic lower bound. ==References== <references/> [[Category:Data structures]]</text> </page> <page> <id>36091</id> <title>Sudan function</title> <text>In the [[theory of computation]], the '''Sudan function''' is an example of a [[function (mathematics)|function]] that is [[recursive function|recursive]], but not [[primitive recursive function|primitive recursive]]. This is also true of the better-known [[Ackermann function]]. The Sudan function was the first function having this property to be published. It was discovered in 1927 by [[Gabriel Sudan]], a [[Romania]]n [[mathematician]] who was a student of [[David Hilbert]]. It was published in.<ref>Bull. Math. Soc. Roumaine Sci. 30 (1927), 11 - 30; Jbuch 53, 171</ref> ==Definition== :<math>F _0 (x, y) = x+y,\,</math> :<math>F _{n+1} (x, 0) = x, \ n \ge 0\,</math> :<math>F _{n+1} (x, y+1) = F _n (F_{n+1} (x, y), F_{n+1} (x, y) + y + 1), \ n\ge 0.\,</math> ==Value Tables== {| class="wikitable" |+ Values of ''F''<sub>1</sub>(''x'', ''y'') |- ! ''y''\''x'' ! 0 ! 1 ! 2 ! 3 ! 4 ! 5 |- ! 0 | 0 || 1 || 2 || 3 || 4 || 5 |- ! 1 | 1 || 3 || 5 || 7 || 9 || 11 |- ! 2 | 4 || 8 || 12 || 16 || 20 || 24 |- ! 3 | 11 || 19 || 27 || 35 || 43 || 51 |- ! 4 | 26 || 42 || 58 || 74 || 90 || 106 |- ! 5 | 57 || 89 || 121 || 153 || 185 || 217 |- ! 6 | 120 || 184 || 248 || 312 || 376 || 440 |} In general, ''F''<sub>1</sub>(''x'', ''y'') is equal to ''F''<sub>1</sub>(0, ''y'') + 2<sup>''y''</sup> ''x''. {| class="wikitable" |+ Values of ''F''<sub>2</sub>(''x'', ''y'') |- ! ''y''\''x'' ! 0 ! 1 ! 2 ! 3 ! 4 ! 5 |- ! 0 | 0 || 1 || 2 || 3 || 4 || 5 |- ! 1 | 1 || 8 || 27 || 74 || 185 || 440 |- ! 2 | 19 || F<sub>1</sub>(8, 10) = 10228 || F<sub>1</sub>(27, 29) ≈ 1.55 {{e|10}} | F<sub>1</sub>(74, 76) ≈ 5.74 {{e|24}} | F<sub>1</sub>(185, 187) ≈ 3.67 {{e|58}} | F<sub>1</sub>(440, 442) ≈ 5.02 {{e|135}} |} ==References== *Cristian Calude, [[Solomon Marcus]], Ionel Tevy, ''The first example of a recursive function which is not primitive recursive'', Historia Mathematica 6 (1979), no. 4, 380&ndash;384 {{doi|10.1016/0315-0860(79)90024-7}} <references/> {{DEFAULTSORT:Sudan Function}} [[Category:Arithmetic]] [[Category:Large integers]] [[Category:Special functions]] [[Category:Theory of computation]] {{mathlogic-stub}} [[de:Sudanfunktion]] [[fr:Fonction de Sudan]] [[pl:Funkcja Sudana]]</text> </page> <page> <id>36093</id> <title>Sudo</title> <text>{{Redirect|SUDO|the non-profit organisation|Sudan Social Development Organization}} {{Lowercase|title=sudo}} {{Infobox software | name = sudo | developer = Todd C. Miller | screenshot = [[File:Sudo on Ubuntu.png|200px]] | caption = sudo in a terminal | latest_release_version = 1.7.4p6 | latest_release_date = {{release date|2011|01|19}} | latest_preview_version = | latest_preview_date = | operating_system = [[Unix-like]] | genre = Privilege authorization | license = [[ISC license|ISC]]-style<ref>[http://www.sudo.ws/sudo/license.html Sudo License]</ref> | website = [http://www.sudo.ws/ www.sudo.ws] }} The '''sudo''' command ("[[Su (Unix)|su]] do"<!-- Do NOT bold the individual letters here; see the MoS on abbreviations -->, {{pron-en|ˈsuːduː}},<ref>{{cite web|url=http://sudo.ws/sudo/troubleshooting.html|title=Troubleshooting tips and FAQ for Sudo|author=Miller, Todd C|accessdate=2009-11-20}}</ref> though {{IPA-en|ˈsuːdoʊ|}} is also common, as is {{IPA-en|ˌɛsˌjuːˈduː|}}) is a [[computer program|program]] for some [[Unix]] and [[Unix-like]] computer [[operating system]]s that allows users to run programs with the security privileges of another user (normally the [[superuser]], or root). It is an abbreviation for "[[su (Unix)|'''s'''ubstitute '''u'''ser]] '''do'''" (as in, ''do'' a command with another user's privileges). By default, sudo will prompt for a user password but it may be configured to require the root password, and will require it only once every 15 minutes per [[pseudo terminal]], <!-- that, btw, makes it so insecure --> or no password at all.<ref>{{cite web |url=http://www.gratisoft.us/sudo/man/sudo.html |title=Manpage for sudo |accessdate=2007-11-04}}</ref> Sudo is able to log each command run and in some cases has completely supplanted the superuser login for administrative tasks, most notably in [[Ubuntu (operating system)|Ubuntu]] Linux and Apple's [[Mac OS X]].<ref>[https://help.ubuntu.com/community/RootSudo RootSudo - Community Ubuntu Documentation]</ref><ref>[http://www.macdevcenter.com/pub/a/mac/2002/10/22/macforunix.html MacDevCenter.com - Top Ten Mac OS X Tips for Unix Geeks]</ref> The program was originally written by Bob Coggeshall and Cliff Spencer "around 1980" at the Department of [[Computer Science]] at [[University at Buffalo, The State University of New York|SUNY/Buffalo]]. The current version is under active development and is maintained by [[OpenBSD]] developer Todd C Miller and distributed under a [[BSD License|BSD-style]] license.<ref>{{cite web|url=http://www.gratisoft.us/sudo/history.html|title=A Brief History of Sudo|author=Miller, Todd C|accessdate=2007-03-05}}</ref> In November 2009, in response to fears that Microsoft had patented the <code>sudo</code> command,<ref>{{cite web|url=http://www.maximumpc.com/article/news/microsoft_has_patented_sudo_yes_command|title=Microsoft has Patented "sudo." Yes, the Command|author=Lilly, Paul|accessdate=2009-11-13}}</ref> Thomas 