program or understand browser Ajax. * [[JavaScript]] (on the client side). You can choose to use client side actions on your components for performing dhtml logic but most user interfaces do not require this. * Declarative Databindings. ZK has an optional syntax for binding user interface controls to your POJO Java Beans. ZK will automatically call your POJO setter/getter methods with zero programming in response to user input at the browser. * [[Expression Language]]. ZK supports JSTL style EL. ==ZUML== '''ZUML''' (ZK User Interface Markup Language) is a markup language for rich user interfaces definition. * ZUML is designed for non-programmers to design user interfaces efficiently with the ZUML markup * ZUML allows developer to meld different markup languages, such as [[Mozilla]] XUL language and XHTML, seamlessly into the same page. * ZUML allows developers to embed script in pure Java language (interpreted by [[BeanShell]]) and use [[JavaServer Pages|EL]] expressions to manipulate the components and access data. * ZUML is supported by [[ZK Framework|ZK]]. ==Client-side Technologies== ZK is a server-centric framework. Technically you don't need to know about the implementation at the client side. It is how ZK Mobile running on Java Mobile VM is done. Since ZK 5.0, the so-called Server+client Fusion<ref name="Dr. Dobb's">{{cite web | last = Clare | first = Timothy | title = Server+client Fusion: An Architectural Proposal | url = http://www.drdobbs.com/java/222700556;jsessionid=441AXOKJX3ECZQE1GHPSKH4ATMY32JVN?pgno=1 | date = 02-09-2010 | publisher = Dr. Dobb's | quote = A good framework architecture is flexible empowering developers and architects to implement their applications in a smart and elegant manner.}}</ref> architecture is introduced. Developers are allowed to access the client-side widgets directly if they want to. ZK Client Engine is based on [[jQuery]]<ref name="IBM developerWorks">{{cite web | last = Mahajan | first = Sachin | title = Enhance Ajax development with a fusion of jQuery, ZK, and Java code | url = http://www.ibm.com/developerworks/web/library/wa-aj-zkquery/ | date = 10-19-2010 | publisher = IBM developerWorks | quote = The marriage between server-side Java code and jQuery can help you tackle the challenges in enterprise Ajax application development.}}</ref> and provides a GWT wrapper. Technically you can use jQuery-compliant libraries and widgets. ==See also== {{Portal|Free software}} *Books **[http://www.amazon.com/dp/1590599012 ZK - Ajax without JavaScript] published by [[Apress]]. **[http://www.amazon.com/dp/1847192009 ZK Developer's Guide] published by [[Packt]]. **[http://www.lcm.com.br/index.php?Escolha=20&Livro=L00848 Ria com Framework ZK] (Portuguese) published by [http://www.lcm.com.br/ Editora Ciência Moderna Ltda] *Articles **[http://www.ibm.com/developerworks/web/library/wa-aj-open/ Rich Internet applications using ZK] at [[IBM developerWorks|IBM developerWorks]] **[http://www.openajax.org/whitepapers/Next-Generation%20Applications%20Using%20Ajax%20and%20OpenAjax.php Next-Generation Applications Using Ajax and OpenAjax] at [[Openajax|OpenAjax Alliance]] **[http://www.infoworld.com/t/application-development/zero-code-ajax-framework-sought-397 Zero-code AJAX framework sought] at [[InfoWorld]]. **[http://www.linux.com/feature/141601 Designing rich AJAX Web interfaces with ZK] at [[Linux.com]] **[http://www.smashingmagazine.com/2006/11/15/ajax-dhtml-and-javascript-libraries/ AJAX, DHTML and JavaScript Libraries] at [[Smashing magazine|Smashing Magazine]] **[http://www.theserverside.com/tt/articles/article.tss?l=ZKandAgile ZK and Agile] at [http://www.theserverside.com/ TheServerSide] **[http://www.ddj.com/architect/205800349 The ZK Framework] at [http://www.ddj.com/ Dr.Dobb's Portal] **[http://www.ibm.com/developerworks/web/library/wa-aj-zkcdi/ Explore the CDI programming model in ZK] at [[IBM developerWorks|IBM developerWorks]] **[http://www.ibm.com/developerworks/blogs/page/gbowerman?entry=zk_ajax_made_easy ZK - AJAX without the JavaScript] at [[IBM developerWorks|IBM developerWorks]] **[http://www.developer.com/design/article.php/3610476 Ajax with the ZK Framework] at [http://www.developer.com/ developer.com] **[http://www.infoq.com/news/ZK-Ajax-Java-Framework ZK Ajax Java Web Framework: Ajax with no JavaScript] at [http://www.infoq.com/ infoQ.com] **[http://java.dzone.com/articles/using-desktop-model-view Using Desktop MVC Patterns with ZK, Spring & JPA] at JavaLobby **[http://groovy.dzone.com/articles/implementing-load-demand-using Implementing Load-on-Demand using ZK and Grails] at JavaLobby ==References== {{Reflist}} ==External links== {{Wikibooks|ZK}} * [http://www.zkoss.org ZK Home] * [http://www.zkoss.org/zkdemo/ ZK Live Demo] * [http://blogs.pathf.com/agileajax/2006/06/an_interview_wi.html An Interview with ZK Creator Tom Yeh] * [http://www2.mokabyte.it/cms/article.run?articleId=FSH-9JS-VVS-5OU_7f000001_26000063_4f8b8af8 An Interview with Tom Yeh, ZK Creator] (Un framework che guardi al futuro, Mokabyte)(Italian) * [http://www.theserverside.com/tt/articles/article.tss?l=ZKandAgile Tutorial: ZK Rich Client Framework and Agile Development] * Tutorials for Informix applications with ZK [http://www-128.ibm.com/developerworks/blogs/page/gbowerman?entry=zk_ajax_made_easy I] [http://www-03.ibm.com/developerworks/blogs/page/gbowerman?entry=simple_ajax_to_do_list II] [http://www-03.ibm.com/developerworks/blogs/page/gbowerman?entry=uploading_and_downloading_images_to III] [http://www-03.ibm.com/developerworks/blogs/page/gbowerman?entry=a_zk_image_database_application IV] [http://www-03.ibm.com/developerworks/blogs/page/gbowerman?entry=tadpole_cam&ca=drs-bl V] [http://www-03.ibm.com/developerworks/blogs/page/gbowerman?entry=improve_your_brain_age_with VI] [http://www.ibm.com/developerworks/mydeveloperworks/blogs/gbowerman/entry/zk_5_0_and_flashchart18?lang=en_us VII] * Tutorials from IBM developerWorks [http://www.ibm.com/developerworks/web/library/wa-aj-jpa2web/ I] [http://www.ibm.com/developerworks/web/library/wa-aj-open/ II] [http://www.ibm.com/developerworks/web/library/wa-aj-zkcdi/ III][http://www.ibm.com/developerworks/web/library/wa-aj-zkquery/ IV] <!-- * Dead Links : [http://dev2dev.bea.com/blog/dhrubo/archive/2007/08/a_quick_sip_of.html Tutorial from BEA dev2dev I] [http://dev2dev.bea.com.cn/techdoc/20061127901.html II] [http://dev2dev.bea.com.cn/techdoc/2007/04/java-soa-BEA-Workshop-ZK-image0470425.html III] --> * [http://books.zkoss.org/wiki/Small_Talks Small Talks] {{Application frameworks}} {{DEFAULTSORT:Zk (Framework)}} [[Category:Java libraries]] [[Category:User interface markup languages]] [[Category:Web application frameworks]] [[Category:Ajax (programming)]] [[Category:Rich Internet application frameworks]] [[es:ZK Framework]] [[fr:ZK (informatique)]] [[ja:ZK (フレームワーク)]] [[ro:ZK]] [[ru:ZK Framework]] [[zh:ZK]]</text> </page> <page> <id>40983</id> <title>ZPL (complexity)</title> <text>In [[computational complexity theory|complexity theory]], '''ZPL''' (Zero-error Probabilistic [[Logarithmic space]]) is the set of problems solvable by a [[probabilistic Turing machine]] which always yields the correct answer and uses logarithmic space on average. Probabilistic algorithms that always give the correct answer are called [[Las Vegas algorithm]]s. Unlike its deterministic counterpart [[L (complexity)|L]], a '''ZPL''' machine can potentially use exponential time by exploiting randomness. If '''ZPL''' is restricted to polynomial time, we get the more interesting class [[ZPLP (complexity)|ZPLP]]. A surprising result is that '''ZPL''' is equal to both [[RL]] and [[NL (complexity)|NL]]; thus, if a problem can be solved in logarithmic space with nondeterminism or with one-sided error, it can be solved with no error and logarithmic space on average. See the articles on [[RL]] and [[NL (complexity)|NL]] for more information about ZPL. [[category:Probabilistic complexity classes]] {{comp-sci-theory-stub}}</text> </page> <page> <id>40985</id> <title>ZRTP</title> <text>'''ZRTP''' is a cryptographic [[key-agreement protocol]] to negotiate the [[Key (cryptography)|keys]] for [[encryption]] between two end points in a [[Voice over Internet Protocol]] (VoIP) phone telephony call based on the [[Real-time Transport Protocol]]. It uses [[Diffie-Hellman key exchange]] and the [[Secure Real-time Transport Protocol]] (SRTP) for encryption. ZRTP was developed by [[Phil Zimmermann]], with help from [[Zooko Wilcox-O'Hearn]] and Colin Plumb and was submitted to the [[Internet Engineering Task Force]] (IETF) by [[Phil Zimmermann]], [[Jon Callas]] and Alan Johnston on March 5, 2006.<ref name=zrtp>{{cite web |url=http://tools.ietf.org/html/draft-zimmermann-avt-zrtp |title=Internet-Draft. ZRTP: Media Path Key Agreement for Unicast Secure RTP |accessdate=2010-06-17 |last=Zimmermann |first=Phil |date=2010-06-17 }}</ref> ==Overview== ZRTP is described in the [[Internet Draft]] as a ''"key agreement protocol which performs Diffie-Hellman key exchange during call setup in-band in the Real-time Transport Protocol (RTP) media stream which has been established using some other signaling protocol such as [[Session Initiation Protocol]] (SIP). This generates a shared secret which is then used to generate keys and salt for a Secure RTP (SRTP) session."'' One of ZRTP's features is that it does not rely on SIP signaling for the key management, or on any servers at all. It supports [[opportunistic encryption]] by auto-sensing if the other VoIP client supports ZRTP. This protocol does 