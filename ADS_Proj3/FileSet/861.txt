Linguistics] * [http://CLA.imcsit.org Computational Linguistics – Applications workshop] * [http://web.archive.org/web/20080125103030/http://www.gelbukh.com/clbook/ Free online introductory book on Computational Linguistics] (Internet Archive copy) * [http://www.lt-world.org/ Language Technology World] * [http://www.cs.technion.ac.il/~gabr/resources/resources.html Resources for Text, Speech and Language Processing] {{DEFAULTSORT:Computational Linguistics}} [[Category:Computational linguistics|*]] [[Category:Applied linguistics]] [[Category:Linguistics]] [[Category:Formal sciences]] <!-- interwiki --> [[ar:لسانيات حاسوبية]] [[bn:গাণিতিক ভাষাবিজ্ঞান]] [[zh-min-nan:Kè-sǹg gí-giân-ha̍k]] [[be:Вылічальная лінгвістыка]] [[be-x-old:Вылічальная лінгвістыка]] [[br:Stlennyezhouriezh]] [[bg:Компютърна лингвистика]] [[ca:Lingüística computacional]] [[da:Datalingvistik]] [[de:Computerlinguistik]] [[et:Arvutilingvistika]] [[es:Lingüística computacional]] [[eo:Komputa lingvoscienco]] [[eu:Hizkuntzalaritza konputazionala]] [[fa:زبان‌شناسی محاسباتی]] [[fr:Linguistique informatique]] [[gv:Çhengoaylleeaght cho-earrooagh]] [[gl:Lingüística computacional]] [[ko:전산언어학]] [[hi:संगणकीय भाषाविज्ञान]] [[hr:Računalna lingvistika]] [[id:Linguistik komputasional]] [[is:Tölvumálvísindi]] [[it:Linguistica computazionale]] [[he:בלשנות חישובית]] [[lv:Datorlingvistika]] [[ms:Linguistik pengiraan]] [[nl:Computationele taalkunde]] [[ja:計算言語学]] [[nn:Datalingvistikk]] [[pl:Lingwistyka komputerowa]] [[pt:Linguística computacional]] [[ro:Lingvistică computaţională]] [[ru:Компьютерная лингвистика]] [[sr:Računarska lingvistika]] [[fi:Tietokonelingvistiikka]] [[sv:Språkteknologi]] [[th:ภาษาศาสตร์เชิงคำนวณ]] [[uk:Математична лінгвістика]] [[zh:计算语言学]]</text> </page> <page> <id>7427</id> <title>Computational magnetohydrodynamics</title> <text>'''Computational magnetohydrodynamics (CMHD)''' is a rapidly developing branch of [[magnetohydrodynamics]] that uses [[numerical method]]s and algorithms to solve and analyze problems that involve electrically conducting fluids. Most of the methods used in CMHD are borrowed from the well established techniques employed in [[Computational fluid dynamics]]. The complexity mainly arises due to the presence of a [[magnetic field]] and its coupling with the fluid. One of the important issues is to numerically maintain the <math> \nabla \cdot {\mathbf B} = 0</math> (conservation of magnetic flux) condition, from [[Maxwell's equations]], to avoid any unphysical effects. ==References== * Brio, M., Wu, C. C.(1988), "An upwind differencing scheme for the equations of ideal magnetohydrodynamics", ''Journal of Computational Physics'', '''75''', 400&ndash;422. * Henri-Marie Damevin and Klaus A. Hoffmann(2002), "Development of a Runge-Kutta Scheme with TVD for Magnetogasdynamics", ''Journal of Spacecraft and Rockets'', '''34''',No.4, 624&ndash;632. * Robert W. MacCormack(1999), "An upwind conservation form method for ideal magnetohydrodynamics equations", ''AIAA-99-3609''. * Robert W. MacCormack(2001), "A conservation form method for magneto-fluid dynamics", ''AIAA-2001-0195''. ==Further reading== * Toro, E. F. (1999), ''Riemann Solvers and Numerical Methods for Fluid Dynamics'', Springer-Verlag. {{fluiddynamics-stub}} [[Category:Numerical analysis]]</text> </page> <page> <id>7434</id> <title>Computational overhead</title> <text>{{Unreferenced|date=March 2009}} In [[computer science]], '''overhead''' is generally considered any combination of excess or indirect computation time, memory, bandwidth, or other resources that are required to attain a particular goal. It is a special case of [[engineering overhead]]. ==Examples== ===Computer Programming=== * Invoking a [[Function_(computer_science)|function]] incurs the overhead of branching and modifying the stack pointer regardless of what that function does. This is known as ''call overhead''. ===Communications=== * Sending a payload of data (reliably) over a communications network requires sending more than just the desired payload data, itself. It also involves sending various control and signalling data ([[Transmission Control Protocol|TCP]]) required to achieve the reliable transmission of the desired data in question. The control signalling is overhead. ** A simplified version is the need and time to dial a number to establish a phone call, before the call can take place. Dialing the number and establishing the call are overhead. ** Another simplified scenario is in the use of 2-way (but half-duplex) radios. Overhead would be the use of “over” and other signalling needed to avoid collisions, as extra traffic to that of the actual message(s) to be conveyed. <!-- if the following, extra, examples are superfluous, then perhaps move them to a more generalised article about overhead, with links to this article (and others) as specific example of type of overhead --> ===Conceptual=== ====Vehicles & travel==== * Travel using a vehicle involves the overhead of transporting the vehicle (plus payload) to the destination, rather than just the payload. Energy must be used to move the mass of the vehicle, in addition to the passengers and/or cargo. * Time to complete a journey always includes a fixed amount of time needed to make preparations in order to actually begin travelling. Imagine boarding a shared vehicle (a train, or aircraft), or dressing warmly to leave the building and get into a car. This fixed ‘setup’ time is overhead to the journey itself. ==Choice of algorithm== A programmer/software engineer may have a choice of several algorithms, each of which have known characteristics. When choosing among them, their respective overhead should also be considered. ==Tradeoffs== In [[software engineering]], overhead can influence the decision whether or not to include features in new products, or indeed whether to fix bugs. A feature that has a high overhead may not be included – or needs a big financial incentive to do so. Often, even though software providers are well aware of bugs in their products, the [[payoff]] of fixing them is not worth the reward, because of the overhead. ==Complexity== Algorithmic complexity is generally specified using [[Big O Notation]]. This makes no comment on how long something takes to run or how much memory it uses, but how its increase depends on the size of the input. Overhead is ''deliberately'' not part of this calculation, since it varies from one machine to another, whereas the fundamental running time of an algorithm does not. {{Citation needed|date=May 2010}} This should be contrasted with efficiency, which takes into account all kinds of resources – a combination (though not a trivial one) of complexity and overhead.{{Citation needed|date=May 2010}} ==See also== [[Algorithmic efficiency]] [[Category:Theoretical computer science]] [[de:Overhead (EDV)]] [[it:Overhead]] [[ja:オーバーヘッド]] [[nl:Overhead (informatica)]] [[pt:Overhead]] [[sv:Overhead]]</text> </page> <page> <id>7435</id> <title>Computational particle physics</title> <text>{{Unreferenced|date=May 2009}}{{Notability|Notability|date=May 2009}}'''Computational particle physics''' refers to the methods and computing tools developed in and used by [[particle physics]] research. Like [[computational chemistry]] or [[computational biology]], it is, for [[particle physics]] both a specific branch and an interdisciplinary field relying on computer science, theoretical and experimental particle physics, mathematics,... The main fields of computational particle physics are: * [[Lattice field theory]] numerical computations * [[Automatic calculation of particle interaction or decay]] * [[Event generator]]s Computing tools * [[Computer algebra]]: Many of the computer algebra language has been developed initially to help particle physics calculations: [[Reduce (computer algebra system)|Reduce]], [[Mathematica]], [[Schoonschip]], [[Form (computer algebra system)|Form]], ... * [[Data Grid]]: The largest planned use of the GRID systems will be for the analysis of the [[LHC]] produced data. Large software packages have been developed to support this application like the LHC Computing GRID [[LCG]]. == History == {{Empty section|date=July 2010}} == References == {{Empty section|date=July 