of the major language paradigms now in use were invented in this period: * '''[[Simula]]''', invented in the late 1960s by [[Kristen Nygaard|Nygaard]] and [[Ole-Johan Dahl|Dahl]] as a superset of Algol 60, was the first language designed to support [[object-oriented programming]]. * '''[[C (programming language)|C]]''', an early [[system programming|systems programming]] language, was developed by [[Dennis Ritchie]] and [[Ken Thompson]] at [[Bell Labs]] between 1969 and 1973. * '''[[Smalltalk]]''' (mid 1970s) provided a complete ground-up design of an object-oriented language. * '''[[Prolog]]''', designed in 1972 by [[Alain Colmerauer|Colmerauer]], [[Phillipe Roussel|Roussel]], and [[Robert Kowalski|Kowalski]], was the first [[logic programming]] language. * '''[[ML (programming language)|ML]]''' built a polymorphic type system (invented by [[Robin Milner]] in 1973) on top of Lisp, pioneering [[Type system|statically typed]] [[functional programming]] languages. Each of these languages spawned an entire family of descendants, and most modern languages count at least one of them in their ancestry. The 1960s and 1970s also saw considerable debate over the merits of "[[structured programming]]", which essentially meant programming without the use of [[Goto]]. This debate was closely related to language design: some languages did not include GOTO, which forced structured programming on the programmer. Although the debate raged hotly at the time, nearly all programmers now agree that, even in languages that provide GOTO, it is bad [[programming style]] to use it except in rare circumstances. As a result, later generations of language designers have found the structured programming debate tedious and even bewildering. Some important languages that were developed in this period include: * 1968 - [[Logo (programming language)|Logo]] * 1970 - [[Pascal (programming language)|Pascal]] * 1970 - [[Forth (programming language)|Forth]] * 1972 - [[C (programming language)|C]] * 1972 - [[Smalltalk]] * 1972 - [[Prolog]] * 1973 - [[ML (programming language)|ML]] * 1975 - [[Scheme (programming language)|Scheme]] * 1978 - [[SQL]] (initially only a query language, later extended with programming constructs) == The 1980s: consolidation, modules, performance == The 1980s were years of relative consolidation in [[imperative language]]s. Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decade. [[C++]] combined object-oriented and systems programming. The United States government standardized [[Ada (programming language)|Ada]], a systems programming language intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating so-called [[fifth-generation programming language]]s that incorporated logic programming constructs. The functional languages community moved to standardize ML and Lisp. Research in [[Miranda (programming language)|Miranda]], a functional language with [[lazy evaluation]], began to take hold in this decade. One important new trend in language design was an increased focus on programming for large-scale systems through the use of ''modules'', or large-scale organizational units of code. [[Modula]], Ada, and ML all developed notable module systems in the 1980s. Module systems were often wedded to [[generic programming]] constructs---generics being, in essence, parameterized modules (see also [[polymorphism in object-oriented programming]]). Although major new paradigms for imperative programming languages did not appear, many researchers expanded on the ideas of prior languages and adapted them to new contexts. For example, the languages of the [[Argus (computer system)|Argus]] and [[Emerald (computer system)|Emerald]] systems adapted object-oriented programming to [[distributed computing|distributed systems]]. The 1980s also brought advances in programming language implementation. The [[Reduced instruction set computer|RISC]] movement in [[computer architecture]] postulated that hardware should be designed for [[compiler]]s rather than for human assembly programmers. Aided by [[Central processing unit|processor]] speed improvements that enabled increasingly aggressive compilation techniques, the RISC movement sparked greater interest in compilation technology for high-level languages. Language technology continued along these lines well into the 1990s. <!-- However, the adoption of languages has always been driven by the adoption of new computer systems, and in the mid-1990s one of the most important new systems in computer history suddenly exploded in popularity. --> Some important languages that were developed in this period include: * 1980 - [[C++]] (as [[C with classes]], name changed in July 1983) * 1983 - [[Objective-C]] * 1983 - [[Ada (programming language)|Ada]] * 1984 - [[Common Lisp]] * 1985 - [[Eiffel (programming language)|Eiffel]] * 1986 - [[Erlang (programming language)|Erlang]] * 1987 - [[Perl]] * 1988 - [[Tcl]] * 1989 - [[FL (programming language)|FL]] (Backus) == The 1990s: the Internet age == The 1990s saw no fundamental novelty in [[imperative language]]s, but much recombination and maturation of old ideas. This era began the spread of [[functional language]]s. A big driving philosophy was programmer productivity. Many "rapid application development" (RAD) languages emerged, which usually came with an [[Integrated development environment|IDE]], [[garbage collection (computer science)|garbage collection]], and were descendants of older languages. All such languages were [[object-oriented programming|object-oriented]]. These included [[Object Pascal]], [[Visual Basic]], and [[Java (programming language)|Java]]. Java in particular received much attention. More radical and innovative than the RAD languages were the new [[scripting language]]s. These did not directly descend from other languages and featured new syntaxes and more liberal incorporation of features. Many consider these scripting languages to be more productive than even the RAD languages, but often because of choices that make small programs simpler but large programs more difficult to write and maintain.{{Citation needed|date=June 2009}} Nevertheless, scripting languages came to be the most prominent ones used in connection with the Web. Some important languages that were developed in this period include: * 1990 - [[Haskell (programming language)|Haskell]] * 1991 - [[Python (programming language)|Python]] * 1991 - [[Visual Basic]] * 1993 - [[Ruby (programming language)|Ruby]] * 1993 - [[Lua (programming language)|Lua]] * 1994 - [[CLOS]] (part of ANSI [[Common Lisp]]) * 1995 - [[Java (programming language)|Java]] * 1995 - [[Embarcadero Delphi|Delphi (Object Pascal)]] * 1995 - [[JavaScript]] * 1995 - [[PHP]] * 1997 - [[REBOL|Rebol]] * 1999 - [[D (programming language)|D]] == Current trends == Programming language evolution continues, in both industry and research. Some of the current trends include: * Mechanisms for adding security and reliability verification to the language: extended static checking, information flow control, static [[thread safety]]. * Alternative mechanisms for modularity: [[mixin]]s, [[Delegation (programming)|delegates]], [[aspect-oriented programming|aspects]]. * Component-oriented software development. * Constructs to support [[Concurrent computing|concurrent]] and [[Distributed computing|distributed]] programming. * 