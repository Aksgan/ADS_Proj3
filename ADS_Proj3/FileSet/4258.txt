separation of coordination and algorithmic programming * [http://www.cag.csail.mit.edu/streamit/ StreamIt] from [[MIT]] * [http://wavescope.csail.mit.edu/ WaveScript] Functional stream processing, also from MIT. * [[Functional reactive programming]] could be considered stream processing in a broad sense. Commercial implementations are either general purpose or tied to specific hardware by a vendor. Examples of general purpose languages include: * [[AccelerEyes]]' Jacket, a commercialization of a GPU engine for MATLAB * [http://www.emergent.net/Products/Gamebryo/Technical-Details/Floodgate/ Floodgate], a stream processor provided with the [[Gamebryo]] game engine for PlayStation3, Xbox360, Wii, and PC * [[HMPP Open Standard]], a "directive" vision of Many-Core programming * PeakStream,<ref>[http://arstechnica.com/news.ars/post/20060918-7763.html PeakStream unveils multicore and CPU/GPU programming solution<!-- Bot generated title -->]</ref> a spinout of the [[BrookGPU|Brook]] project (acquired by [[list of Google acquisitions|Google]] in June 2007) * [http://domino.research.ibm.com/comm/research_projects.nsf/pages/esps.spade.html IBM Spade - Stream Processing Application Declarative Engine (B. Gedik, et al. SPADE: the system S declarative stream processing engine. ACM SIGMOD 2008.)] * [[RapidMind]], a commercialization of Sh * TStreams,<ref>[http://www.hpl.hp.com/techreports/2004/HPL-2004-78R1.html TStreams: A Model of Parallel Computation]</ref><ref>[http://www.hpl.hp.com/techreports/2004/HPL-2004-193.html TStreams: How to Write a Parallel Program]</ref> Hewlett-Packard Cambridge Research Lab Vendor-specific languages include: * Brook+ (AMD hardware optimized implementation of [[BrookGPU|Brook]]) from [[AMD]]/[[ATI Technologies|ATI]] * [[CUDA]] (Compute Unified Device Architecture) from [[Nvidia]] * [[Intel Ct]] - C for Throughput Computing * StreamC from [[Stream Processors, Inc]], a commercialization of the Imagine work at Stanford == See also == * [[GPGPU]] * [[MIMD]] * [[Parallel computing]] * [[Molecular modeling on GPU]] * [[SIMD]] * [[Vector processor]] * [[Dataflow]] * [[Partitioned global address space]] * [[Streaming algorithm]] * [[Data stream mining]] * [[Dimension reduction]] * [[Digital signal processing]] * [[Real Time Streaming Protocol]] == References == {{Reflist}} == Notes == #{{note|scale}} IEEE Journal of Solid-State Circuits:[http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4443192 "A Programmable 512 GOPS Stream Processor for Signal, Image, and Video Processing"], Stanford University and Stream Processors, Inc. #{{note|scale}} Khailany, Dally, Rixner, Kapasi, Owens and Towles: [http://cva.stanford.edu/publications/2003/khailany_im_scalability.pdf "Exploring VLSI Scalability of Stream Processors"], Stanford and Rice University. #{{note|GPPasStream}} Gummaraju and Rosenblum, [http://www.cs.utexas.edu/users/skeckler/wild04/Paper14.pdf "Stream processing in General-Purpose Processors"], Stanford University. #{{note|ProgStreamProc}} Kapasi, Dally, Rixner, Khailany, Owens, Ahn and Mattson, [http://cva.stanford.edu/publications/2003/ieeecomputer_stream.pdf "Programmable Stream Processors"], Universities of Stanford, Rice, California (Davis) and Reservoir Labs. ==External links== * [http://ati.amd.com/products/streamprocessor/index.html Press Release] Launch information for AMD's dedicated R580 GPU-based Stream Processing unit for enterprise solutions. * [http://ppppcourse.ning.com/forum/attachment/download?id=3646079%3AUploadedFile%3A1425 Sieve of Eratosthenes stream-based program in X10 (jar file)] *[http://en.literateprograms.org/Sieve_of_Eratosthenes_(Scala) Sieve of Eratosthenes stream-based algorithm in Scala] *[http://mitpress.mit.edu/sicp/full-text/sicp/book/node71.html Infinite Streams in Lisp] * [http://groups.csail.mit.edu/cag/streamit/index.shtml StreamIt - programming language and compilation infrastructure by MIT CSAIL] * [http://domino.research.ibm.com/comm/research_projects.nsf/pages/esps.spade.html IBM Spade - Stream Processing Application Declarative Engine] * [http://www-01.ibm.com/software/data/infosphere/streams/ IBM InfoSphere Streams] {{Parallel Computing}} {{DEFAULTSORT:Stream Processing}} [[Category:Computer architecture]] [[Category:Programming paradigms]] [[Category:Computational models]] [[Category:GPGPU]] [[ar:تحليل متدفق]] [[de:Streamprozessor]] [[it:Stream processing]] [[ja:ストリーム・プロセッシング]] [[fi:Stream processing]] [[uk:Багатопотокове оброблення даних]]</text> </page> <page> <id>35896</id> <title>Stress analysis</title> <text>{{Refimprove|date=December 2009}} '''Stress analysis''' is an [[engineering]] (e.g., [[civil engineering]] and [[mechanical engineering]]) discipline that determines the [[stress (mechanics)|stress]] in materials and structures subjected to [[statics|static]] or [[dynamics (mechanics)|dynamic]] [[force]]s or loads. A stress analysis is required for the study and design of structures, e.g., tunnels, dams, mechanical parts, and structural frames among others, under prescribed or expected loads. Stress analysis may be applied as a [[design]] step to structures that do not yet exist. The aim of the analysis is usually to determine whether the element or collection of elements, usually referred to as a structure, can safely withstand the specified forces. This is achieved when the determined stress from the applied force(s) is less than the ultimate [[tensile strength]], ultimate [[compressive strength]] or [[fatigue (material)|fatigue]] strength the material is known to be able to withstand, though ordinarily a [[factor of safety]] is applied in design. Analysis may be performed through mathematical modelling or simulation, through experimental testing procedures, or a combination of techniques. Engineering quantities are usually measured in [[Mega-|mega]]pascals (MPa) or [[giga]]pascals (GPa). In [[imperial units]], stress is expressed in pounds-force per square inch ([[pound-force per square inch|psi]]) or kilopounds-force per square inch (ksi). ==Analysis methods== The analysis of stress within a body implies the determination at each point of the body of the magnitudes of the nine stress components. In other words, it is the determination of the internal distribution of stresses. A key part of analysis involves determining the type of loads acting on a structure, including [[tension (physics)|tension]], [[Physical compression|compression]], [[Shear stress|shear]], [[torsion (mechanics)|torsion]], [[bending]], or combinations of such loads. When forces are applied, or expected to be applied, repeatedly, nearly all materials will rupture or fail at a lower stress than they would otherwise. The analysis to determine stresses under these cyclic loading conditions is termed [[Fatigue (material)|fatigue]] analysis and is most often applied to aerodynamic structural systems. ===Modelling=== To determine the distribution of stress in a structure it is necessary to solve a [[boundary-value problem]] by specifying the boundary conditions, i.e. displacements and/or forces on the boundary. [[Constitutive equations]], such as e.g. [[Hooke's Law]] for [[Linear elasticity|linear elastic]] materials, are used to describe the stress:[[Deformation (mechanics)|strain]] relationship in these calculations. A boundary-value problem based on the [[theory of elasticity]] is applied to structures expected to [[Deformation (mechanics)|deform elastically]], i.e. [[Infinitesimal strain theory|infinitesimal strains]], under design loads. When the loads applied to the structure induce plastic deformations, the [[Plasticity (physics)|theory of plasticity]] is implemented. Approximate solutions for boundary-value problems can be obtained through the use numerical methods such as the [[finite element method]], the [[finite difference method]], and the [[boundary element method]], which are implemented in computer programs. Analytical or close-form solutions can be obtained for simple geometries, constitutive relations, and boundary conditions. All real objects occupy a three-dimensional space. The stress analysis can be simplified in cases where the physical dimensions and the loading conditions allows the structure to be assumed as [[List of structural elements|one-dimensional]] or two-dimensional. For a two-dimensional analysis a [[plane stress]] or a [[plane strain]] condition can be assumed. ===Experimental testing=== A stress analysis can be made experimentally by applying forces to a test element or structure and then determining the resulting stress using [[sensor]]s. In this case the process would more properly be known as testing (destructive or non-destructive). Special equipment, such as a [[wind 