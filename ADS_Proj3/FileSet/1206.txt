unveiled '''Direct3D 11''' at the Gamefest 08 event in Seattle, with the major scheduled features including [[GPGPU]] support ([[DirectCompute]]), [[tessellation]]<ref name="DX11Overview-EB">{{cite web|url=http://www.elitebastards.com/cms/index.php?option=com_content&task=view&id=611&Itemid=29|title=What's next for DirectX? A DirectX 11 overview — A DirectX 11 overview|date=September 1, 2008 |publisher=Elite Bastards|accessdate=2008-09-04}}</ref><ref name="DX11-bit-tech">{{cite web|url=http://www.bit-tech.net/bits/2008/09/17/directx-11-a-look-at-what-s-coming/1|title=DirectX 11: A look at what's coming|date=September 17, 2008|publisher=bit-tech.net}}</ref> support, and improved [[Thread (computer science)|multi-threading]] support to assist video game developers in developing games that better utilize [[multi-core]] processors.<ref name="Windows 7 and D3D 11 release date">[http://unmashable.com/pc-hardware/graphics-cards/what-new-features-will-directx-11-bring/ Windows 7 and D3D 11 release date]</ref> Direct3D 11 runs on Windows Vista and Windows 7. It will run on future Windows operating systems as well. Parts of the new API such as multi-threaded resource handling can be supported on Direct3D 9/10/10.1-class hardware. Hardware tessellation and Shader Model 5.0 require Direct3D 11 supporting hardware.<ref>[http://blogs.msdn.com/ptaylor/archive/2008/07/28/gamefest-2008-and-the-directx-11-announcement.aspx Gamefest 2008 and the DirectX 11 announcement]</ref> Microsoft has since released the Direct3D 11 Technical Preview.<ref>[http://www.microsoft.com/downloads/details.aspx?FamilyId=5493F76A-6D37-478D-BA17-28B1CCA4865A&displaylang=en DirectX Software Development Kit]</ref> Direct3D 11 is a strict superset of Direct3D 10.1 — all hardware and API features of version 10.1 are retained, and new features are added only when necessary for exposing new functionality. This help keep backwards compatibility to previous versions of DirectX. Microsoft released the Final Platform Update for Windows Vista on October 27, 2009, which was 5 days after the initial release of Windows 7 (launched with Direct3D 11 as a base standard). ==Compatibility== Various releases of Windows have included and supported various versions of DirectX, allowing newer versions of the operating system to continue running applications designed for earlier versions of DirectX until those versions can be gradually phased out in favor of newer APIs, drivers, and hardware. APIs such as Direct3D and DirectSound need to interact with hardware, and they do this through a [[device driver]]. [[Hardware]] manufacturers have to write these drivers for a particular DirectX version's device driver interface (or DDI), and test each individual piece of hardware to make them DirectX compatible. Some hardware devices have only DirectX compatible drivers (in other words, one must install DirectX in order to use that hardware). Early versions of DirectX included an up-to-date library of all of the DirectX compatible drivers currently available. This practice was stopped however, in favor of the web-based [[Windows Update]] driver-update system, which allowed users to download only the drivers relevant to their hardware, rather than the entire library. Prior to DirectX 10, DirectX runtime was designed to be ''backward compatible'' with older drivers, meaning that newer versions of the APIs were designed to interoperate with older drivers written against a previous version's DDI. The application programmer had to query the available hardware capabilities using a complex system of "cap bits" each tied to a particular hardware feature. For example, a game designed for and running on Direct3D 9 with a graphics adapter driver designed for Direct3D 6 would still work, albeit most likely with degraded functionality.{{Citation needed|date=September 2010}} However, the Direct3D 10 runtime in Windows Vista cannot run on older hardware drivers due to the significantly updated DDI, which requires a unified feature set and abandons the use of "cap bits". Direct3D 11 runtime introduces Direct3D 9, 10, and 10.1 "feature levels", compatibility modes which allow use of only the hardware features defined in the specified version of Direct3D. For Direct3D 9 hardware, there are three different feature levels, grouped by common capabilities of "low", "med" and "high-end" video cards; the runtime directly uses Direct3D 9 DDI provided in all WDDM drivers. ==.NET Framework== In 2002 Microsoft released a version of DirectX compatible with the Microsoft [[.NET Framework]], thus allowing programmers to take advantage of DirectX functionality from within .NET applications using compatible languages such as managed C++ or the use of the [[C Sharp (programming language)|C#]] programming language. This API was known as "[[Managed DirectX]]" (or MDX for short), and claimed to operate at 98% of performance of the underlying native DirectX APIs. In December 2005, February 2006, April 2006, and August 2006, Microsoft released successive updates to this library, culminating in a beta version called Managed DirectX 2.0. While Managed DirectX 2.0 consolidated functionality that had previously been scattered over multiple assemblies into a single assembly, thus simplifying dependencies on it for software developers, development on this version has subsequently been discontinued, and it is no longer supported. The Managed DirectX 2.0 library expired on October 5, 2006. During the [[Game Developers Conference|GDC]] 2006 Microsoft presented the [[Microsoft XNA|XNA Framework]], a new managed version of DirectX (similar but not identical to Managed DirectX) that is intended to assist development of games by making it easier to integrate DirectX, [[High Level Shader Language]] (HLSL) and other tools in one package. It also supports the execution of managed code on the Xbox 360. The XNA Game Studio Express RTM was made available on December 11, 2006, as a free download for Windows XP. Unlike the DirectX runtime, [[Managed DirectX]], [[Microsoft XNA|XNA Framework]] or the [[Xbox 360]] APIs (XInput, XACT etc.) have not shipped as part of Windows. Developers are expected to redistribute the runtime components along with their games or applications. No Microsoft product including the latest XNA releases provides DirectX 10 support for the .NET Framework. The other approach for DirectX in managed languages is to use third-party libraries like [[SlimDX]] for Direct3D. [http://code.google.com/p/sharpdx/ SharpDX], DirectInput (including Direct3D 10), [http://sourceforge.net/projects/directshownet Direct Show .NET] for DirectShow subset or [http://code.msdn.microsoft.com/WindowsAPICodePack Windows API CodePack for .NET Framework] which is an open source library from Microsoft. ==Alternatives== {{Expand section|date=September 2010}} <!--what api is better? more common? etc... User:mabdul--> There are alternatives to the DirectX family of [[API]]s, with [[OpenGL]] having the most features. Examples of other APIs include [[Simple DirectMedia Layer|SDL]], [[Allegro library|Allegro]], [[OpenMAX]], [[OpenML]], [[OpenAL]], [[OpenCL]], [[FMOD]], etc. Many of these libraries are cross-platform or have open codebases. There are also alternative implementations that aim to provide the same API, such as the one in [[Wine (software)|Wine]]. The developers of [[ReactOS]] are trying to reinvent DirectX with the same features and calling it [[ReactX]]. ==See also== {{Portal|Microsoft}} *[[OpenGL]] *[[Simple DirectMedia Layer]] *[[Comparison of OpenGL 