its own interface around that of an already existing class. * [[Bridge pattern|Bridge]] decouples an abstraction from its implementation so that the two can vary independently. * [[Composite pattern|Composite]] composes zero-or-more similar objects so that they can be manipulated as one object. * [[Decorator pattern|Decorator]] dynamically adds/overrides behaviour in an existing method of an object. * [[Facade pattern|Facade]] provides a simplified interface to a large body of code. * [[Flyweight pattern|Flyweight]] reduces the cost of creating and manipulating a large number of similar objects. * [[Proxy pattern|Proxy]] provides a placeholder for another object to control access, reduce cost, and reduce complexity. ==Behavioral patterns== Most of these design patterns are specifically concerned with communication between '''objects'''. * [[Chain-of-responsibility pattern|Chain of responsibility]] delegates commands to a chain of processing objects. * [[Command pattern|Command]] creates objects which encapsulate actions and parameters. * [[Interpreter pattern|Interpreter]] implements a specialized language. * [[Iterator pattern|Iterator]] accesses the elements of an object sequentially without exposing its underlying representation. * [[Mediator pattern|Mediator]] allows [[loose coupling]] between classes by being the only class that has detailed knowledge of their methods. * [[Memento pattern|Memento]] provides the ability to restore an object to its previous state (undo). * [[Observer pattern|Observer]] is a publish/subscribe pattern which allows a number of observer objects to see an event. * [[State pattern|State]] allows an object to alter its behavior when its internal state changes. * [[Strategy pattern|Strategy]] allows one of a family of algorithms to be selected on-the-fly at runtime. * [[Template method pattern|Template method]] defines the skeleton of an algorithm as an abstract class, allowing its subclasses to provide concrete behavior. * [[Visitor pattern|Visitor]] separates an algorithm from an object structure by moving the hierarchy of methods into one object. ==See also== *[[Design pattern (computer science)]] *[[Enterprise Integration Patterns]] *[[GRASP (object-oriented design)]] *[[Pedagogical patterns]] ==References== <references/> ==External links== *[http://mahemoff.com/paper/software/learningGoFPatterns/ GoF Design Patterns: Rapid Learning Tips] *[http://sourcemaking.com/design_patterns 101 Design Patterns & Tips for Developers] *[http://www.antropyconsulting.co.uk/code/adobe_flex/ ActionScript 3 Examples of all GoF Design Patterns] {{Design Patterns Patterns}} {{DEFAULTSORT:Design Patterns (Book)}} [[Category:Computer books]] [[Category:Software design patterns]] [[Category:1994 books]] [[Category:Addison-Wesley books]] [[bs:Design Patterns (knjiga)]] [[de:Viererbande (Softwareentwicklung)]] [[es:Design Patterns]] [[fa:الگوهای طراحی]] [[fr:Patron de conception]] [[ko:디자인 패턴 (책)]] [[it:Design Patterns]] [[sv:Design Patterns (bok)]] [[vi:Design Patterns]] [[zh:设计范例]]</text> </page> <page> <id>10046</id> <title>Design computing</title> <text>{{Unreferenced|date=December 2009}} {{Cleanup|date=March 2008}} '''Design Computing''' refers to an area of [[Design Studies]] that deals with furthering the understanding and the practice of design activities through the application and development of novel concepts and techniques in computing. In recent years a number of research and education areas have been grouped under the umbrella term "Design Computing", namely: *[[Artificial Intelligence]] in Design *[[Artificial Architecture]] *Expert and Knowledge-based Systems *[[Computational creativity]] *[[Computer-Aided Design]] *[[Digital morphogenesis]] *Visual and Spatial Modelling *Computational Analogy *Automated Design Systems *Design Support Systems *[[Computer Supported Cooperative Work]] (CSCW) *[[Building Information Modeling]] (BIM) *[[GenerativeComponents]] (Generative or Computational Design) The main research groups working in this area span from Faculties of Architecture, Engineering and Computer Science. For the last three decades the Key Centre of Design Computing and Cognition (KCDCC) at the [[University of Sydney]], Australia has been a pioneer in this area. In the US this research area is also known as "Design and Computation", namely at the Massachusetts Institute of Technology ([[MIT]]). Other relevant research groups include: *Critical Research in Digital Architecture ([http://www.crida.net/ CRIDA]), Faculty of Architecture, Building and Planning, University of Melbourne *School of Architecture, Carnegie Mellon *Department of Computer Science, University College London *Department of Informatics Engineering, Universidade de Coimbra *Department of Computer Science, Vrije University, Amsterdam *Creativity and Cognition Studios, University of Technology Sydney *Department of Computer Science, University of Colorado at Boulder *Department of Architecture, Tokyo Institute of Technology *Department of Architecture, MIT *Department of Computer Science, Helsinki University of Technology *College of Computing, Georgia Institute of Technology *Design Machine Group, [[University of Washington College of Built Environments]], Seattle *Design Computing Program, [[Georgia Institute of Technology College of Architecture]] *School of Interactive Arts + Technology, [[Simon Fraser University]] The biannual International Conference on Design Computing and Cognition (DCC) brings together high quality research on this area, as do annual conferences by the [[Association for Computer Aided Design In Architecture]] and others. {{DEFAULTSORT:Design Computing}} [[Category:Graphic design]] [[Category:Computer-aided_design]] [[pt:Design computing]]</text> </page> <page> <id>10052</id> <title>Design pattern</title> <text>A '''design pattern''' in [[architecture]] and [[design pattern (computer science)|computer science]] is a formal way of documenting a solution to a design problem in a particular field of expertise. The idea was introduced by the architect [[Christopher Alexander]] in the field of [[architecture]]<ref name="Alexander, A Pattern Language" >[[#Alexander, A Pattern Language|Alexander, A Pattern Language]]</ref> and has been adapted for various other disciplines, including [[computer science]].<ref name="Gang of Four" >[[#Gang of Four|Gamma ''et al.'']], 1994, Design Patterns (the "[[Design Patterns (book)|Gang of Four]]" book)</ref> An organized collection of design patterns that relate to a particular field is called a [[pattern language]]. {{quote|The elements of this language are entities called patterns. Each pattern describes a problem that occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice.|20px|20px|- Christopher Alexander<ref name="Alexander, A Pattern Language"/>}} The usefulness of speaking of patterns is to have a [[pattern language|common terminology]] for discussing the situations designers already see over and over. == Overview == {{noref|section|date=January 2011}} A pattern must explain why a particular situation causes problems, and why the proposed solution is considered a good one. [[Christopher Alexander]] describes common design problems as arising from "conflicting forces" -- such as the conflict between wanting a room to be sunny and wanting it not to overheat on summer afternoons. A pattern would not tell the designer how many windows to put in the room; instead, it would propose a set of values to guide the designer toward a decision that is best for their particular application. Alexander, for example, suggests that enough windows should be included to direct light all around the room. He considers this a good 