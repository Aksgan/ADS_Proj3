== To better deal with call sites that frequently see a limited number of different types, some language runtimes employ a technique called polymorphic inline caching <ref name="HCU">Hölzle, U., Chambers, C., AND Ungar, D. 1991. Optimizing dynamically-typed object-oriented languages with polymorphic inline caches. In Proceedings of the ECOOP ’91 Conference. Lecture Notes in Computer Science, vol. 512. Springer-Verlag, Berlin.</ref>. With polymorphic inline caching, once a call site that is in its "monomorphic" state sees its second type, rather than reverting to the "uninitialized" state it switches to a new state called "polymorphic". A "polymorphic" call site decides which of a limited set of known methods to invoke based on the type that it is currently presented with. In other words, with polymorphic inline caching, multiple method lookup results can be recorded at the same call site. Because every call site in a program can potentially see every type in the system, there usually is an upper bound to how many lookup results are recorded at each call site. Once that upper bound is reached, call sites become "megamorphic" and no more inline caching is performed. The canonical implementation <ref name="HCU"/> is a jump table which consists of a preamble that derives the type of the receiver and a series of constant compares and conditional jumps that jump to the code following the preamble in the relevant method for each receiver type. The jump table is typically allocated for a particular call-site when a monomorphic call-site encounters a different type. The jump-table will have a fixed size and be able to grow, adding cases as new types are encountered up to some small maximum number of cases such as 4, 6 or 8. Once it reaches its maximum size execution for a new receiver type will "fall-off" the end and enter the run-time, typically to perform a method lookup starting with the first-level method cache. The observation that together, monomorphic and polymorphic inline caches collect per-call-site receiver type information as a side-effect of optimizing program execution<ref name="HCU"/> led to the development of [[adaptive optimization]] in [[Self]], where the run-time optimizes "hot spots" in the program using the type information in inline caches to guide speculative inlining decisions. == Megamorphic inline caching == If a run-time uses both monomorphic and polymorphic inline cacheing then in the steady state the only unlinked sends occurring will be those from sends falling-off the ends of polymorphic inline caches. Since such sends are slow it can now be profitable to optimize these sites. A megamorphic inline cache can be implemented by creating code to perform a first-level method lookup for a particular call-site. In this scheme once a send falls-off the end of a polymorphic inline cache a megamorphic cache specific to the call site's selector is created (or shared if one already exists), and the send site relinked to call it. The code can be significantly more efficient than a normal first-level method lookup probe since the selector is now a constant, which decreases register pressure, the code for the lookup and dispatch is executed without calling into the run-time, and the dispatch can benefit from [[Branch predictor|branch prediction]]. Empirical measurements <ref name="eem strongtalk">[http://groups.google.kg/group/strongtalk-general/msg/d1688526916e3324 PICs [was v8 first impressions] on the Strongtalk mailing list]</ref> show that in large Smalltalk programs about 1/3 of all send sites in active methods remain unlinked, and of the remaining 2/3, 90% are monomorphic, 9% polymorphic and 1% (0.9%) are megamorphic. == References == {{Reflist}} {{DEFAULTSORT:Inline Caching}} [[Category:Compiler optimizations]] [[Category:Programming language implementation]]</text> </page> <page> <id>18431</id> <title>Inmos</title> <text>{{Infobox Corporation | name = Inmos Limited | logo = [[File:Inmos logo.gif|150px]] | type = [[Private company|Private]] | fate = Acquired by [[SGS-Thomson]] (1989) | foundation = [[Bristol]], [[United Kingdom]], ({{Start date|1978}}) | founder = Iann Barron, Richard Petritz, Paul Schroeder | industry = [[Semiconductor device|Semiconductors]] | products = [[transputer]] }} '''Inmos Limited''' (trademark '''INMOS''') was a [[United Kingdom|British]] [[semiconductor device|semiconductor]] company, founded by [[Iann Barron]], based in [[Bristol]] and incorporated in November 1978. == Products == [[Image:Tranputer 83.jpg|thumb|Various Inmos ICs]] Inmos's first products were [[static RAM]] devices, followed by [[dynamic RAM]]s and [[EEPROM]]s. Despite early production difficulties, Inmos eventually captured around 60% of the world SRAM market. However, Barron's long-term aim was to produce an innovative [[microprocessor]] architecture intended for [[parallel processing]], the ''[[transputer]]''. [[David May (computer scientist)|David May]] and [[Robert Milne (telecommunications consultant)|Robert Milne]] were recruited to design this processor, which eventually went into production in 1985 in the form of the T212 and T414 chips. The transputer achieved some success as the basis for several parallel [[supercomputer]]s from companies such as [[Meiko Scientific|Meiko]] (formed by ex-Inmos employees in 1985), [[Floating Point Systems]], [[Parsytec]] and [[Parsys]]. Being a relatively self-contained design, it was also used in some [[embedded systems]]. However, the unconventional nature of the transputer and its native [[occam programming language]] limited its appeal. During the late 1980s, the transputer (even in its later T800 form) also struggled to keep up with the ever-increasing performance of its competitors. Other devices produced by Inmos included the A100, A110 and A121 [[digital signal processor]]s, [[G364 framebuffer]], and a line of video [[RAMDAC]]s, including the G171, which was adopted by [[IBM]] for the original [[VGA]] [[graphics adapter]] used in the [[IBM PS/2]]. == Business history == The company was founded by [[Iann Barron]], a British computer consultant, [[Richard Petritz]] and [[Paul Schroeder]], both American semiconductor industry veterans. Initial funding of £50M was provided by the UK government via the [[National Enterprise Board]]. A [[USA|US]] subsidiary, Inmos Corporation, was also established in [[Colorado]]. [[Semiconductor fabrication]] facilities were built in the US at [[Colorado Springs]], [[Colorado]] and in the UK at [[Newport]], [[South Wales]]. Under the [[privatization]] policy of [[Margaret Thatcher]] the National Enterprise Board was merged into the [[British Technology Group]] and had to sell its shares in Inmos. Offers for Inmos from [[AT&T]] and a Dutch consortium had been turned down.<ref name=wayne/> In 1982, construction of the [[Inmos microprocessor factory|microprocessor factory]] in [[Newport]], [[South Wales]] was completed. By July 1984 [[Thorn EMI]] had made 