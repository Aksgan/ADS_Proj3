[[ja:オブジェクト指向]] [[no:Objektorientert programmering]] [[pl:Programowanie obiektowe]] [[pt:Orientação a objetos]] [[ro:Programare orientată pe obiecte]] [[ru:Объектно-ориентированное программирование]] [[sq:Programimi i orientuar në objekte]] [[scn:Prugrammazzioni urientata all'uggetta]] [[simple:Object-oriented programming]] [[sk:Objektové programovanie]] [[sr:Објектно-оријентисано програмирање]] [[sh:Objektno orijentisano programiranje]] [[fi:Olio-ohjelmointi]] [[sv:Objektorienterad programmering]] [[ta:பொருள் நோக்கு நிரலாக்கம்]] [[th:การเขียนโปรแกรมเชิงวัตถุ]] [[tr:Nesne Yönelimli Programlama]] [[uk:Об'єктно-орієнтоване програмування]] [[ur:برمجہ شئے التوجہ]] [[vi:Lập trình hướng đối tượng]] [[wuu:面向对象程式编制]] [[zh:面向对象程序设计]]</text> </page> <page> <id>27016</id> <title>Object Constraint Language</title> <text>The '''Object Constraint Language''' ('''OCL''') is a [[declarative language]] for describing rules that apply to [[Unified Modeling Language]] (UML) models developed at [[IBM]] and now part of the UML standard. Initially, OCL was only a formal specification language extension to UML.<ref>Object Management Group (OMG); ''Object Constraint Language Specification'', Chapter 7 of ''OMG Unified Modeling Language Specification'', Version 1.3, March 2000 (first edition)</ref> OCL may now be used with any [[Meta-Object Facility]] (MOF) [[Object Management Group]] (OMG) [[meta-model]], including UML.<ref>Object Management Group (OMG); ''Object Constraint Language OMG Available Specification Version 2.0'', May 2006</ref> The Object Constraint Language is a precise text language that provides constraint and object query expressions on any MOF model or meta-model that cannot otherwise be expressed by diagrammatic notation. OCL is a key component of the new OMG standard recommendation for transforming models, the Queries/Views/Transformations ([[QVT]]) specification. == Description == OCL is a descendant of [[Syntropy]], a second-generation object-oriented analysis and design method. The OCL 1.4 definition specified a constraint language. In OCL 2.0, the definition has been extended to include general object query language definitions. OCL statements are constructed in four parts: # a context that defines the limited situation in which the statement is valid # a property that represents some characteristics of the context (e.g., if the context is a class, a property might be an attribute) # an operation (e.g., arithmetic, set-oriented) that manipulates or qualifies a property, and # keywords (e.g., if, then, else, and, or, not, implies) that are used to specify conditional expressions. ==Relation== === OCL and UML === OCL supplements [[Unified Modeling Language|UML]] by providing expressions that have neither the ambiguities of natural language nor the inherent difficulty of using complex mathematics. OCL is also a navigation language for graph-based models. === OCL and MOF === OCL makes a [[Meta-Object Facility]] model more precise by associating assertions with its meta-elements. === OCL and QVT === Of particular importance to [[Model Driven Engineering]] (MDE) or [[model-driven architecture]] is the notion of [[Model transformation]]. The [[Object Management Group|OMG]] has defined a specific standard for model transformation called '''MOF/QVT''' or in short [[QVT]]. Several model transformation languages like [[GReAT]], [[VIATRA]], or [[Tefkat]] are presently available, with different levels of compliance with the QVT standard. Many of these languages are built on top of OCL, which is the main part of the [[QVT]]-compliance. == Alternatives == As a rule-based validation language, [[Schematron]] may be considered as an alternative to OCL. However Schematron works for Extensible Markup Language [[XML tree|(XML) tree]]s while OCL makes it possible to navigate [[Meta-Object Facility|MOF]]-based models and meta-models (i.e. XML Metadata Interchange ([[XMI]]) trees). In other words, OCL has a similar relation to [[Unified Modeling Language|UML]] or MOF as Schematron has to [[XML]]. (Note that Schematron uses [[XPath]] to navigate inside the XML trees.)<br />As a model specification language permitting designers to decorate a model or a meta-model with side-effect-free annotations, OCL could be replaced by languages like [[Alloy language|Alloy]]. == See also == * [[Computer model]] * [[Data mapping]] * [[Domain Specific Language]] (DSL) * [[Domain-specific modelling]] (DSM) * [[Eclipse (software)|Eclipse]] [http://www.eclipse.org/gmt/ GMT Project] * [[Gello Expression Language]] * [[Glossary of Unified Modeling Language terms]] * [[Intentional Programming]] (IP) * [[List of UML tools]] * [[Meta-model]] * [[Meta-modeling]] * [[Meta-modeling technique]] * [[Meta-Object Facility]] (MOF) * [[Metadata]] * [[Model-based testing]] (MBT) * [[Model-driven architecture]] (MDA) * [[Model Driven Engineering]] (MDE) * [[Model Transformation Language]] (MTL) * [[Modeling language]] * [[Modeling perspectives]] * [[Object-oriented analysis and design]] (OOAD) * [[QVT|MOF Queries/Views/Transformations]] (QVT) * [[Semantic translation]] * [[Transformation language]] (TL) * [[UML tool]] * [[Vocabulary-based transformation]] * [[XMI]] * [[XML transformation language]] (XTL) == References == <references/> == External links == * [http://www.omg.org/technology/documents/modeling_spec_catalog.htm#OCL OMG OCL specification page] * [http://www-st.inf.tu-dresden.de/ocl/ OCL Portal - The center for OCL related information] * [http://www.csci.csusb.edu/dick/samples/ocl.html OCL page of Computer Science Dept. of CSUSB] (brief OCL 2.0 syntax) * [http://octopus.sourceforge.net/ Octopus: OCL Tool for Precise Uml Specifications] (OCL checker) * [http://dresden-ocl.sourceforge.net/ Dresden OCL Toolkit] (OCL Toolkit, various OCL related publications) * [http://www.brucker.ch/projects/hol-ocl/ HOL-OCL] (An interactive theorem proof environment for OCL, various OCL related publications) * [http://www.parlezuml.com/tutorials/umlforjava/java_ocl.pdf OCL for Java tutorial on ParlezUML] * [http://www.eclipse.org/articles/Article-EMF-Codegen-with-OCL/article.html Article on using EMF's OCL in Java code] * [http://www.cetus-links.org/oo_uml.html UML link page on cetus-links.org] {{FOLDOC}} [[Category:Unified Modeling Language]] [[Category:Formal specification languages]] [[de:Object Constraint Language]] [[es:Lenguaje de especificación OCL2.0]] [[fr:Object Constraint Language]] [[it:Object Constraint Language]] [[lt:Object Constraint Language]] [[ja:Object Constraint Language]] [[pl:Object Constraint Language]] [[pt:OCL]] {{uml-stub}}</text> </page> <page> <id>27020</id> <title>Object Exchange Model</title> <text>The '''Object Exchange Model'''{{ref|PGW95}} (OEM) is a model for exchanging [[Semi-structured model|semi-structured data]] between [[OODB|object-oriented databases]]. It serves as the basic [[Data model]] in numerous projects of the Stanford University Database Group, including Tsimmis, Lore, and C3 {{ref|Goldman}}. Slight variations of OEM have evolved across different Stanford projects. In Lore, labels are actually on parent-child "links" rather than objects. For example, if an OEM object has multiple parents, different parent objects may use different labels to identify that object. An atomic value encoding a person's name might be included in one complex object using the label "Author" and in another complex object using the label "Editor." In C3, additional attributes are required for each object to annotate the changes to the object that have occurred over time {{ref|Goldman}}. ==OEM representations== [http://www.dcs.bbk.ac.uk/~ptw/teaching/ssd/slide9.html Textual OEM interchange format used in Lore] - The goals of this interchange format were to have textual encodings of OEM to be easy to read, easy to edit, and easy to generate or parse by a program. ==See also== * [[XML]] * [[Resource_Description_Framework|RDF]] == References == * {{note|PGW95}} {{cite journal | title=Object exchange across heterogeneous information sources | author=Papakonstantinou, Y. and Garcia-Molina, H. and Widom, J. | journal=Proceedings of 