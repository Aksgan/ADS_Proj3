possible to align duplicate attacks with these intervals; a [[NOP slide]] may be used with shellcode injection, and the string '/bin/sh' can be replaced with '////////bin/sh' for an arbitrary number of slashes when attempting to return to ''system()''. The number of bits removed is exactly <math>log_2 \left (n \right )</math> for <math>n</math> intervals attacked. Such decreases are limited due to the amount of data in the stack or heap. The stack, for example, is typically limited to 8 [[Megabyte|MB]]<ref name=Prefix2>{{BDprefix|p=b}}</ref> and grows to much less; this allows for at most 19 bits, although a more conservative estimate would be around 8–10 bits corresponding to 4–16 [[Kilobyte|KB]]<ref name=Prefix2>{{BDprefix|p=b}}</ref> of stack stuffing. The heap on the other hand is limited by the behavior of the memory allocator; in the case of [[glibc]], allocations above 128 KB are created using [[mmap]](), limiting attackers to 5 bits of reduction. This is also a limiting factor when brute forcing; although the number of attacks to perform can be reduced, the size of the attacks is increased enough that the behavior could in some circumstances become analogous to [[intrusion detection systems]]. == History == The [[PaX]] project first coined the term "ASLR". It published the first design and implementation of ASLR in July, 2001. This remains the most complete implementation, providing also kernel stack randomization from October 2002 onward. It also continues to provide the most entropy for each randomized layout compared to other implementations.<ref>Comparison of PaX to ExecShield and W^X</ref> == Implementations == Several mainstream, general-purpose operating systems implement ASLR. === OpenBSD === [[OpenBSD]] became the first mainstream operating systems to support ASLR (and to activate it by default).<ref>{{cite web |url=http://www.openbsd.org/papers/ven05-deraadt/index.html |title=Exploit Mitigation Techniques (updated to include random malloc and mmap) at OpenCON 2005 |author=Theo De Raadt |year=2005 |accessdate=26 August 2009}}</ref> === Linux === [[Linux]] has enabled a weak<ref>http://www.tomshardware.com/reviews/pwn2own-mac-hack,2254-4.html</ref> form of ASLR by default since kernel version 2.6.12 (released June 2005). The [[PaX]] and [[ExecShield]] patchsets to the Linux kernel provide more complete implementations. Various Linux distributions including ''[[Adamantix]]'', ''[[Alpine Linux]]'', ''[[Hardened Gentoo]]'', and ''[[Hardened Linux From Scratch]]'' come with PaX's implementation of ASLR by default. The [[Exec Shield]] patch for Linux supplies 19 bits of stack entropy on a period of 16 bytes; and 8 bits of mmap() base randomization on a period of 1 page of 4096 bytes. This places the stack base in an area 8 MB wide containing 524 288 possible positions; and the mmap() base in an area 1 MB wide containing 256 possible positions. [[Position-independent_code#Position-independent_executables|Position-independent executable (PIE)]] feature implements random base address for the main executable binary since 2003. It provides the same address randomness to the main executable as being used for the shared libraries. The PIE feature is in use only for the network facing daemons – the PIE feature cannot be used together with the [[prelink]] feature for the same executable. The [[prelink]] tool implements randomization at prelink time rather than runtime, because by design prelink aims to handle relocating libraries before the dynamic linker has to, which allows the relocation to occur once for many runs of the program. As a result, real address space randomization would defeat the purpose of prelinking. === Microsoft Windows === Microsoft's [[Windows Vista]] (released January 2007), [[Windows Server 2008]], [[Windows 7]], and [[Windows Server 2008 R2]] have ASLR enabled by default, although only for those executables and [[dynamic link library|dynamic link libraries]] specifically linked to be ASLR-enabled.<ref>http://msdn.microsoft.com/en-us/library/bb430720.aspx</ref> This did not include [[Internet Explorer 7]] on Windows Vista prior to Service Pack 1; ASLR and [[Data Execution Prevention|DEP]] are both disabled for application compatibility purposes.<ref>{{cite web |url=http://blogs.msdn.com/sdl/archive/2008/12/18/ms08-078-and-the-sdl.aspx |title=MS08-078 and the SDL |date=December 18, 2008 |accessdate=2009-03-21 |work=The Security Development Lifecycle |publisher=Microsoft }}</ref> Newer versions, including [[Internet Explorer 8]] (released March 2009), enable these protections. A registry setting is available to forcibly enable or disable ASLR for all executables and libraries, found at "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\MoveImages".<ref>Windows Internals: Including Windows Server 2008 and Windows Vista, Fifth Edition (PRO-Developer) ISBN 978-0-735-62530-3</ref> The locations of the [[Dynamic memory allocation|heap]], [[Call stack|stack]], Process Environment Block, and [[Win32 Thread Information Block|Thread Environment Block]] are also randomized. A security whitepaper from Symantec noted that ASLR in 32-bit Windows Vista may not be as robust as expected, and Microsoft has acknowledged a weakness in its implementation.<ref>{{cite web |url=http://www.symantec.com/avcenter/reference/Address_Space_Layout_Randomization.pdf |format=PDF |title=An Analysis of Address Space Layout Randomization on Windows Vista |author=Ollie Whitehouse |month=February |year=2007}}</ref> Host-based [[Intrusion prevention system]]s such as ''WehnTrust''<ref>[http://www.codeplex.com/wehntrust WehnTrust]</ref> and ''Ozone''<ref>[http://www.securityarchitects.com/products.html Security Architects' Ozone]</ref> also offer ASLR for [[Windows XP]] and [[Windows Server 2003]] operating systems; however complete details of their implementation are not available.<ref>[http://seclab.cs.sunysb.edu/seclab/pubs/acsac06.pdf Address-Space Randomization for Windows Systems]</ref> === Mac OS X === Apple introduced randomization of some library offsets in [[Mac OS X v10.5]] (released October 2007).<ref>[http://www.apple.com/macosx/security/#sixtyfour Apple - Mac OS X - Security - Keeps safe from viruses and malware]</ref> Their implementation does not provide complete protection against attacks which ASLR is designed to defeat.<ref>[http://securosis.com/2007/10/29/quick-leopard-update/ Quick Leopard Update | securosis.com]</ref><ref>[http://www.matasano.com/log/981/a-roundup-of-leopard-security-features/ Matasano Chargen » A Roundup Of Leopard Security Features]</ref><ref>[http://www.matasano.com/log/986/what-weve-since-learned-about-leopard-security-features/ Matasano Chargen » What We’ve Since Learned About Leopard Security Features]</ref><ref>[http://dvlabs.tippingpoint.com/blog/2007/11/07/leopard-aslr TippingPoint | DVLabs | New Leopard Security Features - Part I: ASLR]</ref> ==See also== * [[Buffer overflow]] * [[Stack buffer overflow]] * [[Stack-smashing protection]] * [[NX bit]] * [[Information entropy]] * [[heap spraying|Heap Spray]] ==References== {{reflist}} ==External links== *[http://pax.grsecurity.net/docs/aslr.txt PaX documentation on ASLR] *[http://grsecurity.net/PaX-presentation_files/frame.htm Comparison of PaX to ExecShield and W^X] *[http://blogs.msdn.com/michael_howard/archive/2006/05/26/608315.aspx ASLR for Windows Vista beta 2] *[http://www.wehnus.com ASLR for Windows 2000/XP/2003 (WehnTrust)] *[http://www.phrack.org/issues.html?issue=59&id=9#article Bypassing PaX ASLR protection] *[http://portal.acm.org/citation.cfm?id=1030124&dl=ACM&coll=&CFID=15151515&CFTOKEN=6184618 On the effectiveness of address space layout randomization] *[http://www.eweek.com/article2/0,1895,1969505,00.asp Microsoft Finds (Random) Way to Secure Vista] *[http://www.eweek.com/article2/0,1895,2071746,00.asp Windows Vista Randomization Gets OEM Thumbs Up] *[http://www.winitor.net/en/pestudio.html Test Applications (or libraries) for their ASLR and DEP support.] {{DEFAULTSORT:Address Space Layout Randomization}} [[Category:Operating system security]] [[Category:Memory management algorithms]] [[de:Address Space Layout Randomization]] [[fr:Address space layout randomization]] [[hy:Հասցեի տարածքի դասավորության պատահականացում]] [[it:ASLR]] [[ja:アドレス空間配置のランダム化]] [[ru:Address Space Layout Randomization]]</text> </page> <page> <id>1023</id> <title>Adiabatic quantum computation</title> <text>'''Adiabatic quantum computation''' relies on the [[adiabatic theorem]] to do calculations.<ref name="Farhi2000"> {{cite arXiv |author= [[Edward Farhi]], [[Jeffrey Goldstone]], [[Sam Gutmann]], [[Michael Sipser]] |eprint=quant-ph/0001106 