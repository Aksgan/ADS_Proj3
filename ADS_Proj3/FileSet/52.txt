is still powered up and functioning.) The card will also continue to work for a short while after the UPS has switched off due to a low battery condition.{{Fact|date=July 2008}} === SmartSlot card models === {|class="wikitable" !Model!!Characteristics |- |[http://www.apc.com/resource/include/techspec_index.cfm?base_sku=AP9617 AP9617]||Base model, adding 10/100 [[Ethernet]] connectivity over [[Category 5 cable|Cat5]]. |- |[http://www.apc.com/resource/include/techspec_index.cfm?base_sku=AP9619 AP9619]||Same as AP9617 but with environmental monitoring and additional input/output contacts and relay controls. |} == References == <references /> [[Category:Electric power systems components]] [[Category:Uninterruptible power supply]]</text> </page> <page> <id>481</id> <title>APLX</title> <text>'''APLX''' is a modern, second generation, [[cross-platform]] [[programming language dialect|dialect]] of the [[APL programming language]]. APLX is targeted at applications such as financial planning, market research, statistics, management information, and various kinds of scientific and engineering work. APLX is based on [[IBM]]'s [[APL (programming language)#APL2|APL2]], but includes a number of extensions. APLX is created by MicroAPL. Version 3 of APLX was released in April and May of 2005. It is available on [[Microsoft Windows]], [[Linux]], and [[Mac OS]]. Though APLX keeps APL's extended character set, APLX is a bit more verbose, due to the prevalence of system functions with long names and the use of structured-control keywords. The use of explicit loops is a major deviation from earlier versions of APL, as well as other APL derivatives. ==External links== *[http://www.microapl.co.uk/apl/ MicroAPL website] [[Category:APL programming language family]] [[Category:Array programming languages]] {{compu-lang-stub}}</text> </page> <page> <id>482</id> <title>APL (codepage)</title> <text>The '''APL''' [[code page]] is an [[EBCDIC]] based code page used specifically to write programs written in the [[APL (programming language)|APL]] programming language. ==Character set== APL has always been criticized for its choice of a unique, non-standard character set. The observation that some who learn it usually become ardent adherents shows that there is some weight behind [[Kenneth E. Iverson|Iverson]]'s idea that the notation used does make a difference. In the beginning, there were few terminal devices which could reproduce the APL character setâ€”the most popular ones employing the [[IBM]] [[Selectric]] print mechanism along with a special APL type element. Over time, with the universal use of high-quality graphic display, printing devices and [[Unicode]] support, the APL character font problem has largely been eliminated; however, the problem of entering APL characters requires the use of [[input method editor]]s or special keyboard mappings, which may frustrate beginners accustomed to other languages. From a user's standpoint, the additional characters can give APL a special elegance and concision not possible in other languages, using symbols visually mnemonic of the functions they represent. On the other hand, it can lead to a ridiculous degree of complexity and unreadability, like when the symbols are strung together into a single mass without any comments. It can be unreasonably difficult and time consuming to enter then later edit those APL statements. All APL symbols are present in [[Unicode]], in the [[Miscellaneous Technical (Unicode)|Miscellaneous Technical]] range,<ref>{{cite web |url=http://unicode.org/charts/PDF/U2300.pdf |format=PDF|title=The Unicode Standard 5.1 Code Charts: Techinical Symbols U+2300-U+23FF |accessdate=October 12, 2008 |work=Unicode Standard 5.1 |publisher=[[Unicode Consortium]] |date= }}</ref> although some APL products may not yet feature unicode, and some APL symbols may be unused or unavailable in a given vendor's implementation. ==Keyboard layout== Note the mnemonics associating an APL character with a letter: ''question mark'' on ''Q'', ''power'' on ''P'', ''rho'' on ''R'', ''base value'' on ''B'', ''eNcode'' on ''N'', ''modulus'' on ''M'' and so on. This makes it easier for an English-language speaker to type APL on a non-APL keyboard providing one has visual feedback on one's screen. Also, decals have been produced for attachment to standard keyboards, either on the front of the keys or on the top of them. :[[Image:APL-keybd2.svg|600px]] A more up to date keyboard diagram, applicable for APL2 and other modern implementations, is available: [http://www.users.on.net/~farnik/upload/APL2union.gif Union layout for windows]. Additional APL characters were available by [[Overstrike|overstriking]] one character over another. For example, the ''log'' symbol was formed by overstriking shift-''P'' with shift-''O''. This complicated correcting mistakes and editing program lines. This may have ultimately been the reason for early APL programs to have a certain dense style - they were difficult to edit. Many overstrikes, although appealing, are not actually used. New overstrikes were introduced by vendors as they produced versions of APL tailored to specific hardware, system features, file system, and so on. Further, printing terminals and early APL cathode-ray terminals were capable of displaying arbitrary overstrikes, but as personal computers rapidly replaced terminals as a data-entry device, APL character support was now provided as an ''APL Character Generator ROM'' or a soft character set rendered by the display device. With the advent of Windows, APL characters were defined as just another complete font, thus the distinction between overstruck characters and standard characters having been eliminated. Later IBM terminals, notably the [[IBM 3270]] display stations, had an alternate keyboard arrangement which is the basis for some of the modern APL keyboard layouts in use today. Better terminals, namely display devices instead of printers, encouraged the development of better full screen editors, which had a measurable improvement in productivity and program readability. ==See also== *[[APL syntax and symbols]] ==References== <references/> ==External links== *[http://www.ibm.com/software/globalization/cp/cp00293.jsp IBM code page 293] aka the APL code page on [[Mainframe computer|mainframe]]s *[http://www-03.ibm.com/systems/resources/systems_i_software_globalization_pdf_cp00907z.pdf IBM code page 907] aka the APL ASCII code page [[Category:APL programming language family]] [[Category:Character sets]] {{character encoding}}</text> </page> <page> <id>494</id> <title>ARACNE</title> <text>{{Notability|date=December 2008}} {{Refimprove|date=December 2008}} '''ARACNE''' (Algorithm for the Reconstruction of Accurate Cellular Networks) is a method for reconstructing biological networks from [[microarray]] data developed at [[Columbia University]]. The method uses [[information theory|information theoretic]] methods to reduce false positives which are predicted through indirect interactions<ref name="Margolin2006">{{cite journal |author= Margolin, A., Nemenman, I., Basso, K., Wiggins, C., Stolovitzky, G., Favera, R. and Califano, A. |title= ARACNE: an Algorithm for the Reconstruction of Gene Regulatory Networks in a Mammalian Cellular Context |journal=BMC bioinformatics |volume=7 |issue=Suppl 1 |pages=S7 |year=2006}}</ref><ref name="aracneweb">{{cite web |url= http://wiki.c2b2.columbia.edu/califanolab/index.php/Software/ARACNE|title=Software/ARACNE - Califano Lab|accessdate=18 August 2010}}</ref>. == References == {{reflist}} {{comp-sci-stub}} [[Category:Microarrays]]</text> </page> <page> <id>500</id> <title>ARIA (cipher)</title> <text>{{This|the block cipher|Aria (disambiguation)}} {{Infobox block cipher | name = ARIA | designers = | publish date = 2003 | derived from = [[Advanced 