at once simplified in one direction and complicated in another by the assumption that functions only occur through their values and by the abandonment of the axiom of reducibility" cf "Introduction" to 2nd edition, Russell 1927:xxxix</ref>, but in his last paragraphs he states that from "our present primitive propositions" he cannot derive "Dedekindian relations and well-ordered relations" and observes that if there is a new axiom to replace the axiom of reducibility "it remains to be discovered"<ref>These quotes from "Introduction" to 2nd edition, Russell 1927:xliv-xlv.</ref>. === 1927 - present === {{Expand section|date=September 2009}} <!-->Quine reports that Ramsey 1931 urged the "dropping of the ramification and the axiom of reducibility"; Quine opines that "Russell's failure [was] due to this failure to distinguish between propositional functions as notations and propositional functions as attributes and relations.[Quine's commentary before Russell 1908 in van Heijenoort 1967:151-152]."</!--> ==Practical impact== ===Computing=== The most obvious application of type theory is in constructing type checking algorithms in the semantic analysis phase of [[compiler]]s for programming languages. ===Linguistics=== Type theory is also widely in use in theories of [[semantics]] of [[natural language]], especially [[Montague grammar]] and its descendants. The most common construction takes the basic types <math>e</math> and <math>t</math> for individuals and [[truth-value]]s, respectively, and defines the set of types recursively as follows: * if <math>a</math> and <math>b</math> are types, then so is <math>\langle a,b\rangle</math>. * Nothing except the basic types, and what can be constructed from them by means of the previous clause are types. A complex type <math>\langle a,b\rangle</math> is the type of [[Function (mathematics)|functions]] from entities of type <math>a</math> to entities of type <math>b</math>. Thus one has types like <math>\langle e,t\rangle</math> which are interpreted as elements of the set of functions from entities to truth-values, i.e. [[characteristic function]]s of sets of entities. An expression of type <math>\langle\langle e,t\rangle,t\rangle</math> is a function from sets of entities to truth-values, i.e. a (characteristic function of a) set of sets. This latter type is standardly taken to be the type of natural language quantifiers, like '' everybody'' or '' nobody'' (Montague 1973, Barwise and Cooper 1981). ===Social sciences=== [[Gregory Bateson]] introduced a theory of logical types into the social sciences; his notions of [[double bind]] and [[Neurology|logical levels]] are based on Russell's theory of types. {{Expand section|date=May 2008}} ==Connections to constructive logic== {{Main|Curry&ndash;Howard correspondence}} {{Expand section|date=May 2008}} ==Relation to other topics== {{Empty section|date=May 2008}} ==Type system== {{Main|Type system}} Definitions of ''type system'' vary, but the following one due to [[Benjamin C. Pierce]] roughly corresponds to the current consensus in the programming language theory community: {{quotation|[A type system is a] tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute.<ref>''[[Types and Programming Languages]]'', [[Benjamin C. Pierce]], The MIT Press, Cambridge, MA. (2002), ISBN 0-262-16209-1.</ref>}} In other words, a type system divides program [[value (programming)|value]]s into sets called ''types'' — this is called a ''type assignment'' — and makes certain program behaviors illegal on the basis of the types that are thus assigned. For example, a type system may classify the value "hello" as a [[string (computer science)|string]] and the value 5 as a [[number]], and prohibit the programmer from adding "hello" to 5 based on that type assignment. In this type system, the program {{quotation|<code>"hello" + 5</code>}} would be illegal. Hence, any program permitted by the type system would be provably free from the erroneous behavior of adding strings and numbers. The design and implementation of type systems is a topic nearly as broad as the topic of programming languages itself. In fact, type theory proponents commonly proclaim that the design of type systems is the very essence of programming language design: "Design the type system correctly, and the language will design itself." ==See also== * [[Category theory]] * [[Data type]] for concrete types of data in programming * [[Domain theory]] * [[Type system]] for a more practical discussion of type systems for programming languages * [[Type (model theory)]] ==References== {{refbegin}} *Mendelson, Elliot, 1997. ''Introduction to Mathematical Logic'', 4th ed. Chapman & Hall. *W. Farmer, ''The seven virtues of simple type theory'', Journal of Applied Logic, Vol. 6, No. 3. (September 2008), pp. 267–286. {{refend}} {{reflist|colwidth=30em}} ==Further reading== * Constable, Robert L., 2002, "[http://www.nuprl.org/documents/constable/naive.pdf Naïve Computational Type Theory,]" in H. Schwichtenberg and R. Steinbruggen (eds.), ''Proof and System-Reliability'': 213&ndash;259. Intended as an type theory counterpart of [[Paul Halmos]]'s (1960) ''[[Naive Set Theory (book)|Naïve Set Theory]]'' * Andrews, Peter B., 2002. ''[http://www.springeronline.com/sgw/cda/frontpage/0,11855,4-0-22-33641956-0,00.html?referer=www.springeronline.com/isbn/1-4020-0763-9 An Introduction to Mathematical Logic and Type Theory: To Truth Through Proof]'', 2nd ed. Kluwer Academic Publishers. *{{cite book | first = Bart | last = Jacobs | title = Categorical Logic and Type Theory | year = 1999 | publisher = North Holland, Elsevier | isbn = 0-444-50170-3 | series = Studies in Logic and the Foundations of Mathematics 141 | url = http://www.cs.ru.nl/B.Jacobs/CLT/bookinfo.html }} Covers type theory in depth, including polymorphic and dependent type extensions. Gives [[categorical semantics]]. * Cardelli, Luca, 1997, "[http://citeseer.ist.psu.edu/cardelli97type.html Type Systems,]" in Allen B. Tucker, ed., ''The Computer Science and Engineering Handbook''. CRC Press: 2208&ndash;2236. * Thompson, Simon, 1991. ''[http://www.cs.kent.ac.uk/people/staff/sjt/TTFP/ Type Theory and Functional Programming]''. Addison-Wesley. ISBN 0-201-41667-0. * [[J. Roger Hindley]], ''Basic Simple Type Theory'' , Cambridge University Press, 2008, ISBN 0521054222 (also 1995, 1997).<!-- no idea why these get different ISBNs, they don't appear to be different editions--> A good introduction to simple type theory for computer scientists; the system described is not exactly Church's STT though. [http://www.iwu.edu/~htiede/papers/pdf/jolli-review.pdf Book review] * [[Stanford Encyclopedia of Philosophy]]: [http://plato.stanford.edu/entries/type-theory/ Type Theory]" &ndash; by [[Thierry Coquand]]. * Fairouz D. Kamareddine, Twan Laan, Rob P. Nederpelt, ''A modern perspective on type theory: from its origins until today'', Springer, 2004, ISBN 1402023340 * José Ferreirós, José Ferreirós Domínguez, ''Labyrinth of thought: a history of set theory and its role in modern mathematics'', Edition 2, Springer, 2007, ISBN 3764383496, chapter X "Logic and Type Theory in the Interwar Period" === Sources for History section === * Bertrand Russell (1903) ''The Principles of Mathematics: Vol. 1'', Cambridge at the 