Pascal has declaration blocks. See [[Comparison of programming languages (basic instructions)#Functions]]. <br/>{{note|variable types|b}}Types are just regular objects, so you can just assign them. <br/>{{note|Perl's my keyword|c}} In Perl, the "my" keyword scopes the variable into the block. <br/>{{note|ML ref|d}} Technically, this does not declare ''name'' to be a mutable variable—in ML, all names can only be bound once; rather, it declares ''name'' to point to a "reference" data structure, which is a simple mutable cell. The data structure can then be read and written to using the <tt>!</tt> and <tt>:=</tt> operators, respectively. == [[Control flow]] == === [[Conditional (programming)|Conditional]] statements === {| class="wikitable" |- ! ! if ! else if ! [[switch statement|select case]] ! [[Conditional (programming)#If expressions|conditional expression]] |- | rowspan=2 |[[ALGOL 68]] & "brief form" | '''if''' condition '''then ''' statements «'''else''' statements» '''fi''' | '''if''' condition '''then''' statements '''elif''' condition '''then''' statements '''fi''' | '''case''' switch '''in''' statements, statements«,... '''out''' statements» '''esac''' | rowspan=2 | ( condition | valueIfTrue | valueIfFalse ) |- ||( condition | statements «| statements» ) ||( condition | statements |: condition | statements ) ||( variable | statements,... «| statements» ) |- | C (C99) | rowspan=8|'''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''» | rowspan=7|'''if ('''condition''') {'''instructions'''}<br/>else if ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''» | rowspan=6|'''switch ('''variable''') {<ul>case''' case1''':''' instructions «'''break;'''»<br/>...<br/>«'''default:''' instructions»</ul>'''}''' | rowspan=7| condition '''[[?:|?]]''' valueIfTrue ''':''' valueIfFalse |- | Objective-C |- | C++ (STL) |- | Java |- | JavaScript |- | PHP |- | C# | '''switch ('''variable''') {<ul>case''' case1''':''' instructions'''; '''«jump statement''';'''»<br/>...<br/>«'''default:''' instructions''';''' «jump statement''';'''»» </ul> '''}''' |- | Windows PowerShell | '''if ('''condition''') { '''instructions''' }<br/>elseif ('''condition''') { '''instructions''' }'''<br/>...<br/>«'''else { '''instructions''' }'''» | '''switch ('''variable''') { '''case1''' { '''instructions «'''break;'''» '''}''' ... «'''default { '''instructions''' }'''»'''}''' | |- | Go | '''if '''condition''' {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''» | '''if '''condition''' {'''instructions'''}<br/>else if '''condition''' {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»<br/> or <br/> '''switch {<ul>case''' condition''':''' instructions <br/>...<br/>«'''default:''' instructions»</ul>'''}''' | '''switch '''variable''' {<ul>case''' case1''':''' instructions <br/>...<br/>«'''default:''' instructions»</ul>'''}''' | |- | Perl | '''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless ('''notcondition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''» | '''if ('''condition''') {'''instructions'''}<br/>elsif ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless ('''notcondition''') {'''instructions'''}<br/>elsif ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''» | '''use feature "switch";'''<br/>...<br/>'''given ('''variable''') {<ul>when ('''case1''') { '''instructions''' }'''<br/>...<br/>«'''default { '''instructions''' }'''»</ul>'''}''' | condition '''?''' valueIfTrue ''':''' valueIfFalse |- | Perl 6 | '''if''' condition '''{'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless''' notcondition '''{'''instructions'''}''' | '''if''' condition''' {'''instructions'''}<br/>elsif''' condition '''{'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}''' | '''given''' variable '''{<ul>when''' case1 '''{ '''instructions''' }'''<br/>...<br/>«'''default { '''instructions''' }'''»</ul>'''}''' | condition '''??''' valueIfTrue '''!!''' valueIfFalse |- | Ruby | '''if''' condition <ul>instructions</ul> «'''else''' <ul>instructions»</ul> '''end''' | '''if''' condition <ul>instructions</ul> '''elsif''' condition <ul>instructions</ul> ... <br/>«'''else''' <ul>instructions»</ul> '''end''' | '''case''' variable <br/> '''when''' case1 <br/> <ul>instructions</ul> ... <br/> «'''else'''<ul>instructions»</ul>'''end''' | condition '''?''' valueIfTrue ''':''' valueIfFalse |- | Common Lisp | '''(when '''condition<br/> <ul>instructions''')'''</ul> or<br/> '''(unless '''condition<br/> <ul>instructions''')'''</ul> or<br/> '''(if '''condition'''<br/><ul>(progn '''instructions''')</ul><ul>'''«'''(progn '''instructions''')'''»''')'''</ul> | '''(cond ('''condition1 instructions''')<br/><ul>('''condition2 instructions''')</ul><ul>'''...'''</ul><ul>'''«'''(t '''instructions''')'''»''')'''</ul> | '''(case ('''variable''')<ul>('''case1 instructions''')</ul><ul>('''case2 instructions''')</ul><ul>'''...'''</ul><ul>'''«'''(otherwise '''instructions''')'''»''')'''</ul> | rowspan=2| '''(if '''condition valueIfTrue valueIfFalse''')''' |- | Scheme | '''(when '''conditioninstructions''')''' or <br/> '''(if '''condition''' (begin '''instructions''') '''«'''(begin '''instructions''')'''»''')''' | '''(cond ('''condition1 instructions''') ('''condition2 instructions''') '''...''' '''«'''(else '''instructions''')'''»''')''' | '''(case ('''variable''') (('''case1''')''' instructions''') (('''case2''')''' instructions''') '''...''' '''«'''(else '''instructions''')'''»''')''' |- | Pascal | '''if''' condition '''then begin''' <ul>instructions</ul> '''end''' <br/> «'''else begin'''<ul>instructions</ul>'''end'''»{{ref|pascal semicolon|[c]}} | '''if''' condition '''then begin''' <ul>instructions</ul> '''end <br/> else if''' condition '''then begin'''<ul>instructions</ul> '''end'''<br/>...<br/>«'''else begin'''<ul>instructions</ul> '''end'''»{{ref|pascal semicolon|[c]}} | '''case '''variable''' of''' <ul>case1''':''' instructions <br/> ... <br/> «'''else:''' instructions»</ul>'''end'''{{ref|pascal semicolon|[c]}} | |- | Visual Basic | rowspan=2| '''If''' condition '''Then''' <ul>instructions</ul> «'''Else''' <ul>instructions»</ul>'''End If''' | rowspan=2| '''If''' condition '''Then''' <ul>instructions</ul> '''ElseIf''' condition '''Then''' <ul>instructions</ul> ... <br/> «'''Else''' <ul>instructions»</ul>'''End If''' | rowspan=2| '''Select Case''' variable <br/> '''Case''' case1 <ul>instructions</ul> ... <br/> «'''Case Else''' <ul>instructions»</ul> '''End Select''' | '''[[IIf]]('''condition''', '''valueIfTrue''', '''valueIfFalse''')''' |- | Visual Basic .NET | '''If('''condition''', '''valueIfTrue''', '''valueIfFalse''')''' |- | Python {{ref|python indent|[a]}} | '''if''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions» | '''if''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/> '''elif''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/> ... <br/> «'''else:''' <br/> {{keypress|Tab}} instructions» | {{n/a}} | valueIfTrue '''if''' condition '''else''' valueIfFalse <br/>(Python 2.5+) |- | S-Lang | '''if ('''condition''') { '''instructions''' } '''«'''else { '''instructions''' }'''» | '''if ('''condition''') { '''instructions''' } else if ('''condition''') {''' instructions '''}''' ... «'''else { '''instructions '''}'''» | '''switch ('''variable''') { case '''case1''': '''instructions''' } { case '''case2''': '''instructions''' }''' ... | |- | Fortran | '''IF ('''condition''') THEN <ul> '''instructions''' </ul> ELSE <ul> '''instructions''' </ul> ENDIF''' | '''IF ('''condition''') THEN <ul> '''instructions''' </ul> ELSEIF ('''condition''') THEN <ul> '''instructions''' </ul> ... <br/> ELSE <ul> '''instructions''' </ul> ENDIF''' | '''SELECT CASE('''variable''')<ul> CASE ('''case1''') <ul> '''instructions''' </ul> ... <br/> CASE DEFAULT <ul> '''instructions''' </ul> </ul> END SELECT | |- | Forth | condition''' IF '''instructions «''' ELSE '''instructions»''' THEN''' | condition''' IF '''instructions ''' ELSE '''condition''' IF '''instructions''' THEN THEN''' | value''' CASE'''<br/>case''' OF '''instructions''' ENDOF'''<br/>case''' OF '''instructions''' ENDOF'''<br/> default instructions<br/>'''ENDCASE''' | condition''' IF '''valueIfTrue''' ELSE '''valueIfFalse''' THEN''' |- | OCaml | '''if''' condition '''then begin''' instructions '''end''' «'''else begin''' instructions '''end'''» | '''if''' condition '''then begin''' instructions '''end else if''' condition '''then begin''' instructions '''end''' ... «'''else begin''' instructions '''end'''» | rowspan=2| '''match''' value '''with <ul>'''pattern1''' -> '''expression'''<br/><nowiki>|</nowiki> '''pattern2''' -> '''expression<br/> ... <br/>«'''<nowiki>|</nowiki> _ -> '''expression»{{ref|pattern matching|[b]}}</ul> | rowspan=4| '''if''' condition '''then''' valueIfTrue '''else''' valueIfFalse |- | F# | '''if''' condition '''then''' <br/>{{keypress|Tab}} instructions <br/> «'''else''' <br/>{{keypress|Tab}} instructions» | '''if''' condition '''then''' <br/>{{keypress|Tab}} instructions <br/> '''elif''' condition '''then''' <br/>{{keypress|Tab}} instructions <br/> ... <br/> «'''else''' <br/>{{keypress|Tab}} instructions» |- | Standard ML | '''if''' condition '''then''' «'''('''»instructions «''')'''»<br/>'''else''' «'''('''» instructions «''')'''» | '''if''' condition '''then''' «'''('''»instructions «''')'''»<br/>'''else if''' condition '''then''' «'''('''» instructions «''')'''»<br/>...<br/>'''else''' «'''('''» instructions «''')'''» | '''case''' value '''of<ul>'''pattern1''' => '''expression'''<br/> <nowiki>|</nowiki> '''pattern2''' => '''expression<br/> ...<br/> «'''<nowiki>|</nowiki> _ => '''expression»{{ref|pattern matching|[b]}}</ul> |- | Haskell (GHC) | '''if''' condition '''then''' expression '''else''' expression or <br/> '''when''' condition '''(do''' instructions''')''' or <br/> '''unless''' notcondition '''(do''' instructions''')''' | result '''<nowiki>|</nowiki>''' condition '''=''' expression <ul>'''<nowiki>|</nowiki>''' condition '''=''' expression <br/>'''<nowiki>|</nowiki> otherwise =''' expression</ul> | '''case''' value '''of {<ul>'''pattern1''' -> '''expression''';<br/>'''pattern2''' -> '''expression''';'''<br/> ... <br/>«'''_ -> '''expression»</ul>'''}'''{{ref|pattern matching|[b]}} |- ! ! if ! else if ! [[switch statement|select case]] ! [[Conditional (programming)#If expressions|conditional expression]] |} {{note|python indent|a}} A single instruction can be written on the 