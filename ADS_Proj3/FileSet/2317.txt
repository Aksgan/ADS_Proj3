astore_3 || align="center" | 4e || || objectref &rarr; || stores a reference into local variable 3 |- | athrow || align="center" | bf || || objectref &rarr; [empty], objectref || throws an error or exception (notice that the rest of the stack is cleared, leaving only a reference to the Throwable) |- ! colspan="5" | B |- | baload || align="center" | 33 || || arrayref, index &rarr; value || loads a byte or Boolean value from an array |- | bastore || align="center" | 54 || || arrayref, index, value &rarr; || stores a byte or Boolean value into an array |- | bipush || align="center" | 10 || byte || &rarr; value || pushes a ''byte'' onto the stack as an integer ''value'' |- ! colspan="5" | C |- | caload || align="center" | 34 || || arrayref, index &rarr; value || loads a char from an array |- | castore || align="center" | 55 || || arrayref, index, value &rarr; || stores a char into an array |- | checkcast || align="center" | c0 || indexbyte1, indexbyte2 || objectref &rarr; objectref || checks whether an ''objectref'' is of a certain type, the class reference of which is in the constant pool at ''index'' (''indexbyte1 << 8 + indexbyte2'') |- ! colspan="5" | D |- | d2f || align="center" | 90 || || value &rarr; result || converts a double to a float |- | d2i || align="center" | 8e || || value &rarr; result || converts a double to an int |- | d2l || align="center" | 8f || || value &rarr; result || converts a double to a long |- | dadd || align="center" | 63 || || value1, value2 &rarr; result || adds two doubles |- | daload || align="center" | 31 || || arrayref, index &rarr; value || loads a double from an array |- | dastore || align="center" | 52 || || arrayref, index, value &rarr; || stores a double into an array |- | dcmpg || align="center" | 98 || || value1, value2 &rarr; result || compares two doubles |- | dcmpl || align="center" | 97 || || value1, value2 &rarr; result || compares two doubles |- | dconst_0 || align="center" | 0e || || &rarr; 0.0 || pushes the constant ''0.0'' onto the stack |- | dconst_1 || align="center" | 0f || || &rarr; 1.0 || pushes the constant ''1.0'' onto the stack |- | ddiv || align="center" | 6f || || value1, value2 &rarr; result || divides two doubles |- | dload || align="center" | 18 || index || &rarr; value || loads a double ''value'' from a local variable ''#index'' |- | dload_0 || align="center" | 26 || || &rarr; value || loads a double from local variable 0 |- | dload_1 || align="center" | 27 || || &rarr; value || loads a double from local variable 1 |- | dload_2 || align="center" | 28 || || &rarr; value || loads a double from local variable 2 |- | dload_3 || align="center" | 29 || || &rarr; value || loads a double from local variable 3 |- | dmul || align="center" | 6b || || value1, value2 &rarr; result || multiplies two doubles |- | dneg || align="center" | 77 || || value &rarr; result || negates a double |- | drem || align="center" | 73 || || value1, value2 &rarr; result || gets the remainder from a division between two doubles |- | dreturn || align="center" | af || || value &rarr; [empty] || returns a double from a method |- | dstore || align="center" | 39 || index || value &rarr; || stores a double ''value'' into a local variable ''#index'' |- | dstore_0 || align="center" | 47 || || value &rarr; || stores a double into local variable 0 |- | dstore_1 || align="center" | 48 || || value &rarr; || stores a double into local variable 1 |- | dstore_2 || align="center" | 49 || || value &rarr; || stores a double into local variable 2 |- | dstore_3 || align="center" | 4a || || value &rarr; || stores a double into local variable 3 |- | dsub || align="center" | 67 || || value1, value2 &rarr; result || subtracts a double from another |- | dup || align="center" | 59 || || value &rarr; value, value || duplicates the value on top of the stack |- | dup_x1 || align="center" | 5a || || value2, value1 &rarr; value1, value2, value1 || inserts a copy of the top value into the stack two values from the top |- | dup_x2 || align="center" | 5b || || value3, value2, value1 &rarr; value1, value3, value2, value1 || inserts a copy of the top value into the stack two (if value2 is double or long it takes up the entry of value3, too) or three values (if value2 is neither double nor long) from the top |- | dup2 || align="center" | 5c || || {value2, value1} &rarr; {value2, value1}, {value2, value1} || duplicate top two stack words (two values, if value1 is not double nor long; a single value, if value1 is double or long) |- | dup2_x1 || align="center" | 5d || || value3, {value2, value1} &rarr; {value2, value1}, value3, {value2, value1} || duplicate two words and insert beneath third word (see explanation above) |- | dup2_x2 || align="center" | 5e || || {value4, value3}, {value2, value1} &rarr; {value2, value1}, {value4, value3}, {value2, value1} || duplicate two words and insert beneath fourth word |- ! colspan="5" | F |- | f2d || align="center" | 8d || || value &rarr; result || converts a float to a double |- | f2i || align="center" | 8b || || value &rarr; result || converts a float to an int |- | f2l || align="center" | 8c || || value &rarr; result || converts a float to a long |- | fadd || align="center" | 62 || || value1, value2 &rarr; result || adds two floats |- | faload 