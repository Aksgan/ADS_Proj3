also provided commands for the creation and use of [[Array data structure|arrays]] held in the RAM disk, allowing programs running in the 30 KB or so of free memory on the Spectrum to manipulate arrays of approaching 80 KB - a very significant extra amount of space by 1980s standards and more than almost any other 8-bit BASIC, which were generally limited to 64 KB of program and data combined. == New functionality == Beta BASIC also drove the Spectrum's 256x192 [[pixel]] display directly, eliminating the restrictions of the ROM's 32-column text display. Beta BASIC offered scalable screen fonts, with a special soft font which was only 4 pixels wide but still highly legible. This meant that Beta BASIC could display 64 columns of text across the screen, quite competitive with newer 8-bit machines' 80-column screens. If the user was prepared to tolerate characters being displayed without gaps between them, an 85 column display was possible. This was not very readable but did allow easy porting of BASIC applications designed for an 80-column screen. Text size could be controlled programmatically so that part of a program's display might use 64-column text, part 32-column text and enlarged or reduced intermediate sizes. Special versions were produced for users of [[Interface 1]] and the [[ZX Microdrive]], and subsequently for those with the [[DISCiPLE]] and [[PlusD]] disk interfaces as well. A version for the [[Amstrad]] Spectrum +3 was also under consideration for a while, but Dr. Wright discarded the project. == Limitations == Nonetheless, Beta BASIC suffered from some limitations. As with other 8-bit microprocessors, the Spectrum could only address 64 KB of contiguous memory due to the addressing restrictions of the Spectrum's [[Zilog Z80]] [[CPU]]. Of this, 16 KB was taken by the Sinclair BASIC ROM, leaving 48 KB for RAM. The screen took some of this, as did the areas used for holding the interpreter's own internal data structures. Beta BASIC took around 11-12 KB of the remainder, in some cases leaving only 20 KB or so for user programs. The replacement of Sinclair's editor meant that it was not possible to use the 128K Spectrum ROM's full-screen BASIC editor. No [[compiler]] was available for Beta BASIC code and existing Sinclair BASIC compilers such as [[HiSoft]] BASIC could not handle the extended keywords and facilities of Beta BASIC. It was possible to develop under Beta BASIC and later compile with HiSoft BASIC, but only by restricting oneself to the limited subset of Sinclair BASIC supported by both implementations - a very frustrating experience for a Beta BASIC coder. Because Spectrum BASIC only supported [[floating-point]] variables and arithmetic (there was no support for [[Integer (computer science)|integer]] work), neither did Beta BASIC. This was unfortunate, as this provided significant speed gains and memory savings in rival BASICs. Another remaining Sinclair BASIC limitation was that only single-letter variable names could be used for strings, arrays and other types. The only other 8-bit BASIC with inbuilt support for structured programming was [[BBC BASIC]]. Beta BASIC named procedures did not need to be called with the PROC keyword like in BBC BASIC and thus became new language keywords, allowing the language to be extended in itself. However, BBC BASIC was considerably quicker - the fastest BASIC interpreter of the time. Beta BASIC was not especially fast, though it included faster replacements for particularly slow ROM routines, such as the circle and arc drawing code. Another BBC BASIC feature it lacked was support for the inclusion of inline assembly language in BASIC programs. == Subsequent development == During the development of their sophisticated new successor to the Spectrum, the [[SAM Coupé]], Alan Miles and Bruce Gordon of [[MGT]] approached BetaSoft and contracted Dr Wright to provide the BASIC for the new machine. He provided a complete BASIC interpreter which drew extensively upon Beta BASIC but was differently structured, as this was a language in its own right and had no Sinclair ROM to call upon or work around. [[SAM BASIC]] was largely compatible with Beta BASIC and operated in a very similar manner, except for areas where the SAM hardware was significantly different, such as the SAM's screen and extended memory. BetaSoft later released an extension to SAM BASIC, named MasterBASIC [http://www.worldofsam.org/node/202]. {{BASIC}} [[Category:BASIC extensions]] [[Category:ZX Spectrum software]] [[Category:BASIC interpreters]] [[cs:Beta BASIC]] [[it:Beta BASIC]]</text> </page> <page> <id>3672</id> <title>Beta normal form</title> <text>{{Unreferenced|date=December 2009}} In the [[lambda calculus]], a term is in '''beta normal form''' if no ''[[lambda calculus#β-reduction|beta reduction]]'' is possible. A term is in '''beta-eta normal form''' if neither a beta reduction nor an ''[[lambda calculus#η-conversion|eta reduction]]'' is possible. A term is in '''head normal form''' if there is no ''beta-redex in head position''. ==Beta reduction== In the lambda calculus, a '''beta redex''' is a term of the form :<math> ((\mathbf{\lambda} x . A(x)) t) </math> where <math>A(x)</math> is a term (possibly) involving variable <math>x</math>. A ''beta reduction'' is an application of the following rewrite rule to a beta redex :<math> ((\mathbf{\lambda} x . A(x)) t) \rightarrow A(t)</math> where <math>A(t)</math> is the result of substituting the term <math>t</math> for the variable <math>x</math> in the term <math>A(x)</math>. A beta reduction is in head position if it is of the following form: * <math> \lambda x_0 \ldots \lambda x_{i-1} . (\lambda x_i . A(x_i)) M_1 M_2 \ldots M_n \rightarrow \lambda x_0 \ldots \lambda x_{i-1} . A(M_1) M_2 \ldots M_n </math>, where <math> i \geq 0, n \geq 1 </math>. Any reduction not in this form is an internal beta reduction. ===Reduction strategies=== In general, there can be several different beta reductions possible for a given term. '''Normal-order reduction''' is the [[evaluation strategy]] in which one continually applies the rule for ''beta reduction in head position'' until no more such reductions are possible. At that point, the resulting term is in ''head normal form''. In contrast, in '''applicative order reduction''', one applies the internal reductions first, and then only applies the head reduction when no more internal reductions are possible. Normal-order reduction is complete, in the sense that if a term 