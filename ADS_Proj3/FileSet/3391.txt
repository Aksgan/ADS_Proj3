deprecation of QuickDraw, PICT was dropped in favour of [[Portable Document Format]] (PDF) as the native metafile format, though PICT support is retained by many applications as it is so widely supported on the Mac. == Links == * [http://developer.apple.com/documentation/mac/QuickDraw/QuickDraw-458.html Information on developer.apple.com] * [http://www.fileformat.info/format/macpict/egff.htm Description on fileformat.info] {{Graphics file formats}} {{Mac OS}} [[Category:Graphics file formats]] [[Category:Mac OS]] [[de:PICT]] [[fr:PICT]] [[id:PICT]] [[it:Pict]] [[ja:QuickDraw Picture]] [[sv:PICT]] [[uk:PICT]] {{graphics-software-stub}}</text> </page> <page> <id>28088</id> <title>PICtor PIC image format</title> <text>'''PICtor''' is an [[graphics file formats|image file format]] developed by [[John Bridges]], the principal author of [[PCPaint]], the first Paintbrush program for the PC. It was also the native file format for [[Pictor Paint]] and [[GRASP (multimedia authoring software)]] (also by Bridges) and became the first widely accepted [[MS-DOS|DOS]] imaging standard. ==Typical file format== The PICtor format is a device-independent [[raster graphics|raster image format]]; the file header stores information about the display hardware (screen resolution, [[color depth]] and palette information, bit planes and so on) separately from the actual image information, allowing the image to be properly transferred and displayed on computer systems with different hardware. PIC files commonly stored palette-indexed images ranging from 2 or 4 colors to 16 and 256 colors, although the format has been extended to record true-color (24-bit) images as well. Although it is device-independent, the PIC format also contains additional information about the device that it was created on, which sometimes leads PCPaint Pictor PIC files to be described as a "device-dependent" format. The encoding of a PIC file is also optimized for decoding quickly onto the native device that it was created-on. PICtor image data is compressed using an advanced form of [[Example Pictor Encoder|encoding]], and a parent-child blockbased algorithm which collapses series of consecutive bytes with identical colors into an encoded child block within a parent block while also allowing non-consecutive bytes to be included as raw data within the same parent block. As the file is processed during [[Example Pictor Decoder|decoding]], the child blocks in each parent block are unpacked either into an off-screen buffer if not displaying in native mode, or directly into the display adapter if in native mode (which results in quicker unpacking). ==See also== * [[GLPRO]] ==Further reading== *{{cite book | title = Encyclopedia of Graphics File Formats, 2nd Edition | author = Murray, James D. , Van Ryper, William | isbn = 1-56592-161-5 | url = http://www.fileformat.info/resource/book/1565921615/index.htm }} ==External links== *[http://www.fileformat.info/format/pictor/ Pictor PC Paint File Format Summary] *[http://www.fileformat.info/format/grasp/ GRASP File Format Summary] *[http://netghost.narod.ru/gff/vendspec/pictor/pictor.txt PCPAINT/Pictor Page Format Description]. Format by John Bridges. Document by Microtex Industries, Inc. Revision Date: 2/9/88 *[http://www.martinreddy.net/gfx/2d/GL.txt GL &mdash; Another animation format]. Dr. Martin Reddy (Technical Lead, R & D, Pixar Animation Studios). The Graphics File Formats Page * [http://www.programmersheaven.com/download/2157/Zipfilelist.aspx The formats of GRASP animation files], by George Phillips {{Graphics file formats}} [[Category:Graphics file formats]]</text> </page> <page> <id>28099</id> <title>PKCS11</title> <text>{{nofootnotes|date=July 2010}} {{Correct title|title=PKCS#11|reason=hash}} In [[cryptography]], '''PKCS#11'''<ref>{{cite web | url = http://www.rsa.com/rsalabs/node.asp?id=2133 | title = PKCS #11: Cryptographic Token Interface Standard }}</ref> is one of the family of standards called [[PKCS|Public-Key Cryptography Standards (PKCS)]], published by [[RSA Laboratories]], that defines a platform-independent [[Application programming interface|API]] to cryptographic tokens, such as [[Hardware Security Module]]s (HSM) and [[smart cards]]. (The PKCS#11 standard names the API "Cryptoki" which is an amalgamation of "cryptographic token interface" and is pronounced as "crypto-key", but "PKCS#11" is often used to refer to the API as well as the standard that defines it.) Since there isn't a real standard for cryptographic tokens, this API has been developed to be an abstraction layer for the generic cryptographic token. The PKCS#11 API defines most commonly used cryptographic object types ([[RSA]] keys, [[X.509]] Certificates, [[Data Encryption Standard|DES]]/[[Triple DES]] keys, etc.) and all the functions needed to use, create/generate, modify and delete those objects. PKCS#11 is largely adopted to access smart cards and [[Hardware Security Module|HSMs]]. Most commercial [[Certificate authority|Certification Authority]] software uses PKCS#11 to access the CA signing key or to enroll user certificates. Cross-platform software that needs to use smart cards uses PKCS#11, such as [[Mozilla Firefox]] and [[OpenSSL]] (using an extension). Software written for [[Microsoft Windows]] may use the platform specific [[Cryptographic Application Programming Interface|MS-CAPI]] API instead. ==History== * 01/1994: project launched * 04/1995: v1.0 published * 12/1997: v2.01 published * 12/1999: v2.10 published * 06/2004: v2.20 published * 12/2005: amendments 1 & 2 ([[one-time password]] tokens, CT-KIP <ref>{{cite web | url = http://www.rsa.com/rsalabs/node.asp?id=2817 | title = CT-KIP: Cryptographic Token Key Initialization Protocol }}</ref>) * 01/2007: amendment 3 (additional mechanisms) ==Applications using PKCS#11== * [[FreeOTFE]] - Disk encryption system (PKCS#11 can either be used to encrypt critical data block, or as keyfile storage) * [[Mozilla Firefox]], a web browser * [[Mozilla Thunderbird]], an email client * [[OpenDNSSEC]], a [[DNSSEC]] signer * [[OpenSSL]] - [[Transport Layer Security|TLS/SSL]] library (with engine_pkcs11) * [[GnuTLS]] - [[Transport Layer Security|TLS/SSL]] library * [[OpenVPN]] - [[VPN]] system * [[StrongSwan]] - [[VPN]] system * [[Truecrypt]] - Disk encryption system (PKCS#11 only used as trivial keyfile storage) * [http://trousers.sourceforge.net/pkcs11.html TrouSerS] - An open-source TCG Software Stack * [[OpenSC]] - [[smartcard]] library * [[OpenSSH]] - a [[Secure Shell]] implementation (since [http://marc.info/?l=openbsd-announce&m=126801526410398&w=2 OpenSSH version 5.4]) * [[OpenDS]] - an open source directory server. * [[GNOME Keyring]] - a password and cryptographic key manager. == PKCS#11 wrappers == Since PKCS#11 is a complex [[C (programming language)|C]] API many wrappers exist that let the developer use the API from various languages. * [http://www.ncryptoki.com NCryptoki] - .NET (C# and VB.NET) and Visual Basic 6 wrapper for PKCS#11 API * [http://www.bit4id.org/trac/pykcs11 PyKCS11] - A wrapper for [[Python (programming language)|Python]] * [http://cheeseshop.python.org/pypi/pkcs11 Another wrapper] for Python * [[Java (programming language)|Java]] 5.0 includes a wrapper for PKCS#11 API * [http://www.opensc-project.org/opensc/wiki/pkcs11-helper pkcs11-helper] - A simple [[open source]] C interface to handle PKCS#11 tokens. * [http://www.SDean12.org/ SDeanComponents] - Delphi wrapper for PKCS#11 API * [http://github.com/joelhockey/jacknji11 jacknji11] - Java wrapper using [https://jna.dev.java.net/ Java Native Access (JNA)] * [http://rubyforge.org/projects/pkcs11 ruby-pkcs11] - Ruby binding for PKCS#11 API * [http://sourceforge.net/projects/pkcs11net pkcs11.net] - .Net wrapper for PKCS#11 API == External Links == * [http://www.cryptsoft.com/pkcs11doc/ Cryptsoft page on PKCS #11] * [http://blog.hsohaib.com/2010/11/smart-card-tutorial-part-1.html Using 