can cause some confusion when specifying the data rate of the D-PHY: a PHY implementation running with a 450 MHz clock frequency is often rated as a 900 Mbit/s PHY, while only 800 Mbit/s is then available for the UniPro stack. The D-PHY also supports a Low-Power Data Transmission (LPDT) mode and various other low-power modes for use when no data needs to be sent. ===M-PHY=== Versions 1.4 and beyond of UniPro support both the D-PHY as well as M-PHY technology. The M-PHY technology is still in draft status, but supports high-speed data rates starting at about 1000 Mbit/s (the M-PHY was named after the Roman number for 1000). In addition to higher speeds, the M-PHY will use fewer signal wires because the clock signal is embedded with the data through the use of industry-standard [[8B/10B encoding|8b10b encoding]]. Again, a PHY capable of transmitting user data at 1000 Mbit/s is typically specified as being in 1250 Mbit/s mode due to the 8b10b encoding. {| border="1" cellpadding="3" style="margin: 1em auto 1em auto" |+ ''Physical layer technologies supported by UniPro'' |- style="background:#D8D8D8; color:black" ! PHY technology || Version / Released || Symbol encoding || Mbit/s (payload) || Signal wires || Supported in ||Spec pages |- style="background:#FF1804; color:white" | align="center" | D-PHY | align="center" | 1.00.00 / 14-May-2009 | align="center" | 8b/9b | align="center" | up to circa 900 | align="center" | 4 per direction | align="center" | UniPro 0.80 and up | align="center" | 125 |- style="background:#FF1804; color:white" | align="center" | M-PHY | align="center" | t.b.d. / t.b.d. | align="center" | 8b/10b | align="center" | 1000 and higher | align="center" | 2 per direction | align="center" | UniPro 1.40 and up | align="center" | ? |} The D- and M-PHY are expected to co-exist for several years because the D-PHY is a less complex technology while the M-PHY provides higher bandwidths despite using fewer signal wires. ===Low speed modes and power savings=== It is worth noting that UniPro supports the power efficient low speed communication modes provided by both the D-PHY (10 Mbps) and M-PHY (3 t >100 Mbps). In these modes, power consumption roughly scales with the amount of data that is sent. In contrast, in high-speed modes the energy dissipation by the PHY circuitry is roughly constant because the clocking and bit stream keep running (even between packets). Furthermore both PHY technologies provide additional power saving modes because they were optimized for use in handheld battery-powered devices. ==PHY Adapter Layer (L1.5)== Architecturally, the PHY Adapter layer serves to hide the differences between the different PHY options (D- and M-PHY). This abstraction thus mainly gives architectural flexibility. Abstracted PHY details include the various power states and employed symbol encoding schemes. ===L1.5 symbols=== {| border="1" cellpadding="3" style="margin: 1em auto 1em auto" |+ ''Example sequence of a UniPro's 17-bit L1.5 symbols'' |- style="background:#D8D8D8; color:black" | align="center background:#FF1804;" | ctl || b15 || b14 || b13 || b12 || b11 || b10 || b09 || b08 || b07 || b06 || b05 || b04 || b03 || b02 || b01 || b00 |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 1 | colspan="8" | 1st byte of L1.5 control symbol | colspan="8" | 2nd byte of L1.5 control symbol |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="8" | 1st byte of L1.5 data symbol | colspan="8" | 2nd byte of L1.5 data symbol |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="8" | 1st byte of L1.5 data symbol | colspan="8" | 2nd byte of L1.5 data symbol |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="8" | 1st byte of L1.5 data symbol | colspan="8" | 2nd byte of L1.5 data symbol |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="8" | 1st byte of L1.5 data symbol | colspan="8" | 2nd byte of L1.5 data symbol |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 1 | colspan="8" | 1st byte of L1.5 control symbol | colspan="8" | 2nd byte of L1.5 control symbol |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="8" | 1st byte of L1.5 data symbol | colspan="8" | 2nd byte of L1.5 data symbol |} L1.5 thus has its own (conceptual) symbol encoding consisting of 17-bit symbols. These 17-bit symbols never show up on the wires, because they are first converted by L1.5 to a pair of PHY symbols. The extra 17th control bit indicates special control symbols which are used by the protocol (L1.5 and L2) itself. In the figures, the control bits are shown in "L1.5 red" as a reminder that they are defined in- and used by protocol Layer 1.5. ===L1.5 multi-lane support=== The main feature that L1.5 offers users is to allow the bandwidth of a UniPro link to be increased by using 2, 3 or 4 lanes when a single lane does not provide enough bandwidth. To the user, such a multi-lane link simply looks like a faster physical layer because the symbols are sent across 2, 3 or 4 lanes. Applications that require higher bandwidth in one direction but require less bandwidth in the opposite direction, can have different numbers of lanes per direction. ====L1.5 lane discovery==== Starting in UniPro v1.4, L1.5 automatically discovers the number of usable M-PHY lanes for each direction of the link. This involves a simple discovery protocol within L1.5 that is executed on initialization. The protocol transmits test data on each available outbound lane, and receives information back from the peer entity about which data on which lane actually made it to the other end of the link. The mechanism also supports transparent remapping of the lanes to give circuit board designers flexibility in how the lanes are physically wired. ===L1.5 link power management=== Starting in UniPro v1.4, L1.5 has a built in protocol called PACP that allows L1.5 to communicate with its peer L1.5 entity at the other end of an M-PHY-based link. Its main usage is to provide a simple and reliable way for 