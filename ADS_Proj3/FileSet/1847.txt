symmetric key, can then verify that the order originated from the stated customer and has not been tampered with. ==Design principles== The design of the HMAC specification was motivated by the existence of attacks on more trivial mechanisms for combining a key with a hash function. For example, one might assume the same security that HMAC provides could be achieved with MAC = '''H'''(''key'' ∥ ''message''). However this method suffers from a serious flaw: with most hash functions, it is easy to append data to the message without knowing the key and obtain another valid MAC. The alternative, appending the key using MAC = '''H'''(''message'' ∥ ''key''), suffers from the problem that an attacker who can find a collision in the (unkeyed) hash function has a collision in the MAC. Using MAC = '''H'''(''key'' ∥ ''message'' ∥ ''key'') is better, however various security papers have suggested vulnerabilities with this approach, even when two different keys are used.<ref name=BCK96>{{Cite web |title=Keying Hash Functions for Message Authentication |first1=Mihir |last1=Bellare |author1-link=Mihir Bellare |first2=Ran |last2=Canetti |first3=Hugo |last3=Krawczyk |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.134.8430 |year=1996 |postscript=.}}</ref><ref>{{Cite web |title=MDx-MAC and Building Fast MACs from Hash Functions |year=1995 |first1=Bart |last1=Preneel |author1-link=Bart Preneel |first2=Paul C. |last2=van Oorschot |author2-link=Paul van Oorschot |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.3855 |accessdate=2009-08-28 |postscript=.}}</ref><ref>{{Cite web |title=On the Security of Two MAC Algorithms |year=1995 |first1=Bart |last1=Preneel |author1-link=Bart Preneel |first2=Paul C. |last2=van Oorschot |author2-link=Paul van Oorschot |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.8908 |accessdate=2009-08-28 |postscript=.}}</ref> No known extensions attacks have been found against the current HMAC specification which is defined as '''H'''(''key1'' ∥ '''H'''(''key2'' ∥ ''message'')) because the outer application of the hash function masks the intermediate result of the internal hash. The values of ''ipad'' and ''opad'' are not critical to the security of the algorithm, but were defined in such a way to have a large [[Hamming distance]] from each other and so the inner and outer keys will have fewer bits in common. == Security == The cryptographic strength of the HMAC depends upon the size of the secret key that is used. The most common attack against HMACs is brute force to uncover the secret key. HMACs are substantially less affected by collisions than their underlying hashing algorithms alone.<ref>{{cite web | url=http://www.schneier.com/blog/archives/2005/02/sha1_broken.html | title=SHA-1 Broken | quote=''although it doesn't affect applications such as HMAC where collisions aren't important'' | author=Bruce Schneier | date=August 2005 | accessdate=2009-01-09}} </ref> <ref>{{cite web | url=http://www.ietf.org/rfc/rfc2104.txt | title=RFC 2104 | quote=''The strongest attack known against HMAC is based on the frequency of collisions for the hash function H ("birthday attack") [PV,BCK2], and is totally impractical for minimally reasonable hash functions.'' | author=IETF | date=February 1997 | accessdate=2009-12-03}} </ref> <ref>{{cite conference | first=Mihir | last=Bellare | title=New Proofs for NMAC and HMAC: Security without Collision-Resistance | booktitle=Advances in Cryptology – Crypto 2006 Proceedings | url=http://cseweb.ucsd.edu/~mihir/papers/hmac-new.html | quote=''This paper proves that HMAC is a [[Pseudo-random function|PRF]] under the sole assumption that the compression function is a PRF. This recovers a proof based guarantee since no known attacks compromise the pseudorandomness of the compression function, and it also helps explain the resistance-to-attack that HMAC has shown even when implemented with hash functions whose (weak) collision resistance is compromised.'' | editor-last=Dwork | editor-first=Cynthia | series=Lecture Notes in Computer Science 4117 | year=2006 | publisher=Springer-Verlag | date=June 2006 | accessdate=2010-05-25}} </ref>. In 2006, [[Jongsung Kim]], [[Alex Biryukov]], [[Bart Preneel]], and [[Seokhie Hong]] showed how to distinguish HMAC with reduced versions of MD5 and SHA-1 or full versions of [[HAVAL]], [[MD4]], and [[SHA-0]] from a [[random function]] or HMAC with a random function. Differential distinguishers allow an attacker to devise a forgery attack on HMAC. Furthermore, differential and rectangle distinguishers can lead to [[preimage attack|second-preimage attacks]]. HMAC with the full version of MD4 can be [[forgery (Cryptography)|forged]] with this knowledge. These attacks do not contradict the security proof of HMAC, but provide insight into HMAC based on existing cryptographic hash functions. <ref> {{cite journal | last = Jongsung | first = Kim | coauthors = Biryukov, Alex; Preneel, Bart; Hong, Seokhie | year = 2006 | title = On the Security of HMAC and NMAC Based on HAVAL, MD4, MD5, SHA-0 and SHA-1 | url=http://eprint.iacr.org/2006/187.pdf | postscript = .}}</ref> == External links == * [http://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf FIPS PUB 198, ''The Keyed-Hash Message Authentication Code''] * [http://us2.php.net/manual/en/function.hash-hmac.php PHP HMAC implementation] * [http://docs.python.org/lib/module-hmac.html Python HMAC implementation] * [http://cpan.uwinnipeg.ca/htdocs/Digest-HMAC/Digest/HMAC.pm.html Perl HMAC implementation] * [http://ruby-hmac.rubyforge.org/ Ruby HMAC implementation] * [http://www.ouah.org/ogay/hmac/ C HMAC implementation] * [http://download.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html#HmacEx Java implementation] * [http://jssha.sourceforge.net/ JavaScript HMAC implementation] * [http://slbsoftware.com/sha256/sha256.js Lightweight JavaScript implementation (SHA-256 & HMAC SHA-256)] * [http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmac.aspx .NET's System.Security.Cryptography.HMAC] ==References== {{morefootnotes|date=July 2009}} {{reflist}} ;Notes {{refbegin}} * Mihir Bellare, Ran Canetti and Hugo Krawczyk, Keying Hash Functions for Message Authentication, [[CRYPTO]] 1996, pp1&ndash;15 [http://www-cse.ucsd.edu/users/mihir/papers/hmac.html#kmd5-paper (PS or PDF)]. * Mihir Bellare, Ran Canetti and Hugo Krawczyk, Message authentication using hash functions: The HMAC construction, ''CryptoBytes'' 2(1), Spring 1996 [http://www-cse.ucsd.edu/users/mihir/papers/hmac.html#hmac-cryptobytes (PS or PDF)]. {{refend}} {{Crypto navbox | hash}} [[Category:Message authentication codes]] [[Category:Hashing]] [[cs:HMAC]] [[de:Keyed-Hash Message Authentication Code]] [[fa:کد تأیید هویت پیام مبتنی بر درهم‌سازی]] [[fr:Keyed-Hash Message Authentication Code]] [[it:HMAC]] [[ja:HMAC]] [[pl:HMAC]] [[ru:HMAC]] [[sk:HMAC]]</text> </page> <page> <id>16037</id> <title>HMPP Open Standard</title> <text>HMPP for Hybrid Multicore Parallel Programming. Based on a set of directives, '''HMPP Open Standard''' is a programming model designed to handle [[hardware accelerator]]s without the complexity associated with [[GPGPU|GPU programming]]. This approach based on directives has been implemented because they enable a loose relationship between an application code and the use of a hardware accelerator. <br /> <br /> This article deals with '''HMPP directives''' which constitute '''HMPP Open Standard''', but does not address the execution of the directives linked to the directives implementation. == Introduction == The HMPP directive-based programming model offers a syntax to efficiently offload computations on hardware accelerators and to optimize data movement to/from the hardware memory. <br /> The model is based on works initialized by [http://www.irisa.fr/caps/ CAPS (Compiler and Architecture for Embedded and Superscalar Processors)], a common project from INRIA, CNRS, the University of Rennes 1 and the INSA of Rennes. == HMPP Open Standard concept == HMPP Open Standard is based on the concept of codelets, functions that can be remotely executed on [[Hardware|HWAs]]. 