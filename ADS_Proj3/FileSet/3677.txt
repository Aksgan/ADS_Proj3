knowledge system that was hand-written by experts of the chosen domain. Some of the early [[Artificial intelligence|AI]] systems included question-answering abilities. Two of the most famous early systems are SHRDLU and ELIZA. [[SHRDLU]] simulated the operation of a robot in a toy world (the "blocks world"), and it offered the possibility to ask the robot questions about the state of the world. Again, the strength of this system was the choice of a very specific domain and a very simple world with rules of physics that were easy to encode in a computer program. [[ELIZA]], in contrast, simulated a conversation with a psychologist. ELIZA was able to converse on any topic by resorting to very simple rules that detected important words in the person's input. It had a very rudimentary way to answer questions, and on its own it led to a series of [[chatterbot]]s such as the ones that participate in the annual [[Loebner prize]]. The 1970s and 1980s saw the development of comprehensive theories in [[computational linguistics]], which led to the development of ambitious projects in text comprehension and question answering. One example of such a system was the Unix Consultant (UC), a system that answered questions pertaining to the [[Unix]] operating system. The system had a comprehensive hand-crafted knowledge base of its domain, and it aimed at phrasing the answer to accommodate various types of users. Another project was LILOG, a text-understanding system that operated on the domain of tourism information in a German city. The systems developed in the UC and LILOG projects never went past the stage of simple demonstrations, but they helped the development of theories on computational linguistics and reasoning. In the late 1990s the annual [[Text Retrieval Conference]] (TREC) included a question-answering track which has been running until the present. Systems participating in this competition were expected to answer questions on any topic by searching a corpus of text that varied from year to year. This competition fostered research and development in open-domain text-based question answering. The best system of the 2004 competition achieved 77% correct fact-based questions. In 2007 the annual TREC included a blog data corpus for question answering. The blog data corpus contained both "clean" English as well as [[noisy text]] that includes badly formed English and spam. The introduction of [[noisy text]] moved the question answering to a more realistic setting. Real-life data is inherently noisy as people are less careful when writing in spontaneous media like blogs. In earlier years the TREC data corpus consisted of only newswire data that was very clean. An increasing number of systems include the [[World Wide Web]] as one more corpus of text. Currently there is an increasing interest in the integration of question answering with web search. [[Ask.com]] is an early example of a such a system, which was followed in subsequent years by other [[natural language search engine]]s. [[Google]] and [[Microsoft]] have also started to integrate question-answering facilities in their [[search engine]]s. However, these tools mostly work by using shallow methods, as described [[#Shallow|above]] — thus returning a list of documents, usually with an excerpt containing the probable answer highlighted, plus some context. More recently, tools to actually reason and compute the answer were developed, such as [[True Knowledge]] and [[Wolfram Alpha]]. Furthermore, highly-specialized natural language question-answering engines, such as EAGLi (http://eagl.unige.ch/EAGLi/) for health and life scientists, have been made available. ==The Future of Question Answering == QA systems have been extended in recent years to explore critical new scientific and practical dimensions <ref>Maybury, M. T. editor. 2004. [http://www.mitpressjournals.org/doi/pdf/10.1162/089120105774321055 New Directions in Question Answering.] AAAI/MIT Press.</ref> For example, systems have been developed to automatically answer temporal and geospatial questions, definitional questions, biographical questions, multilingual questions, and questions from multimedia (e.g., audio, imagery, video). Additional aspects such as interactivity (often required for clarification of questions or answers), answer reuse, and knowledge representation and reasoning to support question answering have been explored. Future research may explore what kinds of questions can be asked and answered about social media, including [[sentiment analysis]]. ==See also== * [[List of question-and-answer websites]] * [[Open domain question answering]] * [[Watson (artificial intelligence software)]] ==References== <references/> {{Computable knowledge}} {{DEFAULTSORT:Question Answering}} [[Category:Artificial intelligence applications]] [[Category:Natural language processing]] [[Category:Computational linguistics]] [[Category:Information retrieval]] [[es:Búsqueda de respuestas]] [[eu:Galderei erantzutea]] [[ko:질문 응답]] [[hr:Question answering]] [[it:Question answering]] [[ja:質問応答システム]] [[pl:Question Answering]] [[ro:Sisteme de tip întrebare - răspuns]] [[ru:Вопросно-ответная система]] [[sr:Упитнички системи]] [[uk:Питально-відповідальна система]] [[zh:問答系統]]</text> </page> <page> <id>30890</id> <title>Queue machine</title> <text>A '''queue machine''' or '''queue automaton''' is a [[finite state machine]] with the ability to store and retrieve data from an infinite-memory [[queue (data structure)|queue]]. It is a model of computation equivalent to a [[Turing machine]], and therefore it can process any [[formal language]]. == Theory == We define a queue machine by the six-tuple :<math>M = (Q, \Sigma, \Gamma, \$, s, \delta)</math> where * <math>\,Q</math> is a finite set of ''states''; * <math>\,\Sigma</math> is the finite set of the ''input alphabet''; * <math>\,\Gamma</math> is the finite ''queue alphabet''; * <math>\,\$ \in \Gamma - \Sigma</math> is the ''initial queue symbol''; * <math>\,s \in Q</math> is the ''start state''; * <math>\,\delta : Q \times \Gamma \rightarrow Q \times \Gamma^*</math> is the ''transition function''. We define the current status of the machine by a ''configuration'', an ordered pair of its state and queue contents <math>\,(q,\gamma)\in Q\times\Gamma^*</math> (note <math>\,\Gamma^*</math> defines the [[Kleene closure]] or set of all supersets of <math>\,\Gamma</math>). Therefore the starting configuration on an input string <math>\,x</math> is defined as <math>\,(s,x\$)</math>, and we can define our transition as the function that, given an initial state and queue, takes the function to a new state and queue. Note the "first-in-first-out" property of the queue in the relation :<math>\,(p,A\alpha) \rightarrow_M^1 (q,\alpha\gamma)</math> where <math>\,\rightarrow_M^1</math> defines the next configuration relation, or simply the transition function from one configuration to the next. The machine accepts a string <math>\,x\in\Sigma^*</math> if after a (possibly infinite) number of transitions the starting configuration evolves to exhaust the string (reaching a null string <math>\,\epsilon</math>), or <math>\,(s,x\$)\rightarrow_M^*(q,\epsilon).</math><ref>{{cite book |last=Kozen |first=Dexter C. |editor=David Gries, Fred B. Schneider |title=Automata 