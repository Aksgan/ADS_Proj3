that among ''k''-chromatic graphs the complete graphs are the ones with smallest [[crossing number (graph theory)|crossing number]]. When Birkhoff and Lewis introduced the chromatic polynomial in their attack on the four-color theorem, they conjectured that for planar graphs ''G'', the polymomial <math>P(G,t)</math> has no zeros in the region <math>[4,\infty)</math>. Although it is known that such a chromatic polynomial has no zeros in the region <math>[5,\infty)</math> and that <math>P(G,4) \neq 0</math>, their conjecture is still unresolved. It also remains an unsolved problem to characterize graphs which have the same chromatic polynomial and to determine which polynomials are chromatic. ==Algorithms== <table class="infobox" cellspacing="5" style="width: 22em; text-align: left; font-size: 88%; line-height: 1.5em; "> <tr><td colspan="2" style="text-align:center; font-size: 125%; font-weight: bold; background: #DD9">Graph coloring</td></tr> <tr><td colspan="2" style="text-align:center; "> [[Image:3-coloringEx.svg]] <br /> <tr><td colspan="2" style="text-align:center; font-size: 125%; background: #DD9">Decision</td></tr> <tr><td>Name<td>Graph coloring, vertex coloring, ''k''-coloring</tr> <tr><td>Input<td>Graph ''G'' with ''n'' vertices. Integer ''k''</tr> <tr><td>Output<td>Does ''G'' admit a proper vertex coloring with ''k'' colors?</tr> <tr><td>Running time<td>O(2<sup>&thinsp;''n''</sup>''n'')<ref name="bhk"/></tr> <tr><td>Complexity<td>[[NP-complete]]</tr> <tr><td>Reduction from<td>[[3SAT|3-Satisfiability]]</tr> <tr><td>Garey–Johnson<td>GT4</tr> <tr><td colspan="2" style="text-align:center; font-size: 125%; background: #DD9">Optimisation</td></tr> <tr><td>Name<td>Chromatic number</tr> <tr><td>Input<td>Graph ''G'' with ''n'' vertices.</tr> <tr><td>Output<td>χ(''G'')</tr> <tr><td>Complexity<td>[[NP-hard]]</tr> <tr><td>Approximability<td> O(''n''&thinsp;(log ''n'')<sup>&minus;3</sup>(log log ''n'')<sup>2</sup>)</tr> <tr><td>Inapproximability<td> O(''n''<sup>1&minus;ε</sup>) unless [[P = NP]] <tr><td colspan="2" style="text-align:center; font-size: 125%; background: #DD9">Counting problem</td></tr> <tr><td>Name<td>Chromatic polymomial</tr> <tr><td>Input<td>Graph ''G'' with ''n'' vertices. Integer ''k''</tr> <tr><td>Output<td>The number ''P'' (''G'',''k'') of proper ''k''-colorings of ''G''</tr> <tr><td>Running time<td>O(2<sup>&thinsp;''n''</sup>''n'')</tr> <tr><td>Complexity<td>[[Sharp-P-complete|#P-complete]]</tr> <tr><td>Approximability<td>[[FPRAS]] for restricted cases <tr><td>Inapproximability<td>No [[Polynomial-time approximation scheme|PTAS]] unless P = NP </table> ===Polynomial time=== Determining if a graph can be colored with 2 colors is equivalent to determining whether or not the graph is [[Bipartite graph|bipartite]], and thus computable in [[linear time]] using [[breadth-first search]]. More generally, the chromatic number and a corresponding coloring of [[perfect graph]]s can be computed in [[polynomial time]] using [[semidefinite programming]]. Closed formulas for chromatic polynomial are known for many classes of graphs, such as forest, chordal graphs, cycles, wheels, and ladders, so these can be evaluated in polynomial time. ===Exact algorithms=== [[Brute-force search]] for a ''k''-coloring considers every of the <math>k^n</math> assignments of ''k'' colors to ''n'' vertices and checks for each if it is legal. To compute the chromatic number and the chromatic polynomial, this procedure is used for every <math>k=1,\ldots,n-1</math>, impractical for all but the smallest input graphs. Using [[dynamic programming]] and a bound on the number of [[maximal independent set]]s, ''k''-colorability can be decided in time and space <math>O(2.445^n)</math>.<ref>{{harvtxt|Lawler|1976}}</ref> Using the principle of [[inclusion–exclusion]] and [[Samuel Yates|Yates]]’s algorithm for the fast zeta transform, ''k''-colorability can be decided in time <math>O(2^nn)</math><ref name="bhk">{{harvtxt|Björklund|Husfeldt|Koivisto|2006}}</ref> for any ''k''. Faster algorithms are known for 3- and 4-colorability, which can be decided in time <math>O(1.3289^n)</math> <ref>{{harvtxt|Beigel|Eppstein|2005}}</ref> and <math>O(1.7504^n)</math>,<ref>{{harvtxt|Byskov|2004}}</ref> respectively. ===Contraction=== The [[contraction (graph theory)|contraction]] <math>G/uv</math> of graph ''G'' is the graph obtained by identifying the vertices ''u'' and ''v'', removing any edges between them, and replacing them with a single vertex ''w'' where any edges that were incident on ''u'' or ''v'' are redirected to ''w''. This operation plays a major role in the analysis of graph coloring. The chromatic number satisfies the [[recurrence relation]]: :<math>\chi(G) = \text{min} \{ \chi(G+uv), \chi(G/uv)\}</math> due to {{harvtxt|Zykov|1949}}, where ''u'' and ''v'' are nonadjacent vertices, <math>G+uv</math> is the graph with the edge <math>uv</math> added. Several algorithms are based on evaluating this recurrence, the resulting computation tree is sometimes called a Zykov tree. The running time is based on the heuristic for choosing the vertices ''u'' and ''v''. The chromatic polynomial satisfies following recurrence relation :<math>P(G-uv, k)= P(G/uv, k)+ P(G, k)</math> where ''u'' and ''v'' are adjacent vertices and <math>G-uv</math> is the graph with the edge <math>uv</math> removed. <math>P(G - uv, k)</math> represents the number of possible proper colorings of the graph, when the vertices may have same or different colors. The number of proper colorings therefore come from the sum of two graphs. If the vertices ''u'' and ''v'' have different colors, then we can as well consider a graph, where ''u'' and ''v'' are adjacent. If ''u'' and ''v'' have the same colors, we may as well consider a graph, where ''u'' and ''v'' are contracted. [[Tutte]]’s curiosity about which other graph properties satisfied this recurrence led him to discover a bivariate generalization of the chromatic polynomial, the [[Tutte polynomial]]. The expressions give rise to a recursive procedure, called the ''deletion–contraction algorithm'', which forms the basis of many algorithms for graph coloring. The running time satisfies the same recurrence relation as the [[Fibonacci numbers]], so in the worst case, the algorithm runs in time within a polynomial factor of <math>((1+\sqrt{5})/2)^{n+m}=O(1.6180^{n+m})</math>.<ref>{{harvtxt|Wilf|1986}}</ref> The analysis can be improved to within a polynomial factor of the number <math>t(G)</math> of [[spanning tree (mathematics)|spanning trees]] of the input graph.<ref>{{harvtxt|Sekine|Imai|Tani|1995}}</ref> In practice, [[branch and bound]] strategies and [[isomorphism|graph isomorphism]] rejection are employed to avoid some recursive calls, the running time depends on the heuristic used to pick the vertex pair. ===Greedy coloring=== {{main|Greedy coloring}} [[Image:Greedy colourings.svg|thumb|right|Two greedy colorings of the same graph using different vertex orders. The right example generalises to 2-colorable graphs with ''n'' vertices, where the greedy algorithm expends <math>n/2</math> colors.]] The [[greedy algorithm]] considers the vertices in a specific order <math>v_1</math>,…,<math> v_n</math> and assigns to <math>v_i</math> the smallest available color not used by <math>v_i</math>’s neighbours among <math>v_1</math>,…,<math> v_{i-1}</math>, adding a fresh color if needed. The quality of the resulting coloring depends on the chosen ordering. There exists an ordering that leads to a greedy coloring with the optimal number of <math>\chi(G)</math> colors. On the other hand, greedy colorings can be arbitrarily bad; for example, the [[crown graph]] on ''n'' vertices can be 2-colored, but has an ordering that leads to a greedy coloring with <math>n/2</math> colors. If the vertices are ordered according to their [[degree (graph theory)|degree]]s, the resulting greedy coloring uses at most <math>\text{max}_i \text{ min} \{d(x_i ) + 1, i\}</math> colors, at most one more than the graph’s maximum degree. This heuristic is sometimes called the Welsh–Powell algorithm.<ref>{{harvtxt|Welsh|Powell|1967}}</ref> Another heuristic establishes the ordering dynamically while the algorithm proceeds, choosing next the vertex adjacent to the largest number of different colors.<ref>{{harvtxt|Brèlaz|1979}}</ref> Many other graph coloring heuristics are similarly based on greedy coloring for 