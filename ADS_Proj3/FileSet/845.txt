** [[rCOS]] method of component-based model driven design [http://rcos.iist.unu.edu] from [http://www.iist.unu.edu UNU-IIST] ** [[Visual Basic Extension]]s, [[Component Object Model|OCX/ActiveX/COM]] and [[Distributed Component Object Model|DCOM]] from [[Microsoft]] ** [[XPCOM]] from [[Mozilla Foundation]] ** [[Visual Component Library|VCL]] and [[Component Library for Cross Platform|CLX]] from [[Borland]] and similar free [[Lazarus (software)|LCL]] library. ** [[Enterprise JavaBeans]] from [[Sun Microsystems]] (now [[Oracle_Corporation|Oracle]]) ** [[Universal Network Objects|UNO]] from the [[OpenOffice.org]] office suite ** [[Eiffel (programming language)|Eiffel programming language]] ** [[Oberon programming language|Oberon]], [[Component Pascal]], and [[BlackBox Component Builder]] ** Bundles as defined by the [[Osgi|OSGi]] Service Platform ** The <code>System.ComponentModel</code> namespace in [[Microsoft .NET]] ** [[Flow-based programming]] ** [[MidCOM]] [http://www.midgard-project.org/documentation/midcom/] component framework for [[Midgard (software)|Midgard]] and [[PHP]] ** [[Common Component Architecture]] (CCA) - Common Component Architecture Forum [http://www.cca-forum.org/wiki], Scientific/HPC Component Software *** TASCS [http://tascs-scidac.org/] - SciDAC [http://www.scidac.gov/] Center for Technology for Advanced Scientific Component Software * Component-based [[software framework]]s for specific domains ** Earth System Modeling Framework ([[ESMF]]) * [[Compound document]] technologies ** Active Documents in [[Oberon (operating system)|Oberon System]] and [[BlackBox Component Builder]] ** [[Bonobo (component model)]], a part of [[GNOME]] ** [[KPart]], the [[KDE]] Compound document technology ** [[Object linking and embedding]] (OLE) ** [[OpenDoc]] ** [[Fresco (computing)|Fresco]] * [[Business object (computer science)|Business object]] technologies ** [[Newi]] * [[Distributed computing]] software components ** [[9P]] distributed protocol developed for [[Plan 9 from Bell Labs|Plan 9]], and used by [[Inferno (operating system)|Inferno]] and other systems. ** [[CORBA]] and the [[CORBA Component Model]] from the [[Object Management Group]] ** [[D-BUS]] from the [[freedesktop.org]] organization ** [[Distributed Component Object Model|DCOM]] and later versions of [[Component object model|COM]] (and COM+) from [[Microsoft]] ** [[DCOP]] from [[KDE]] ** DSOM and [[System Object Model|SOM]] from [[International Business Machines|IBM]] (now scrapped) ** [[Internet Communications Engine|ICE]] from [[ZeroC]] ** [[Java EE]] from [[Sun Microsystems|Sun]] ** [[.NET Remoting]] from [[Microsoft]] ** [[Web Service]]s *** [[Representational State Transfer|REST]] ** [[Universal Network Objects]] (UNO) from [[OpenOffice.org]] ** [[Zope]] from [http://www.zope.com Zope Corporation] * Interface description languages ** [[XML-RPC]], the predecessor of SOAP ** [[Simple Object Access Protocol|SOAP]] [[Interface description language|IDL]] from [[W3C]] ** [[WDDX]] ** Part of both [[Component object model|COM]] and [[CORBA]] ** [[Open Service Interface Definitions]] ** [[Platform-Independent Component Modeling Language]] ** SIDL [https://computation.llnl.gov/casc/components/components.html] - Scientific Interface Definition Language *** Part of the [[Babel Middleware|Babel]] [https://computation.llnl.gov/casc/components/babel.html] Scientific Programming Language Interoperability System *** (SIDL and Babel are core technologies of the CCA [http://www.cca-forum.org/wiki] and the SciDAC [http://www.scidac.gov/] TASCS [http://tascs-scidac.org/] Center - see above.) * [[Generic programming]] emphasizes separation of algorithms from data representation * [http://www.pocomatic.com/docs/whitepapers/ioc Inversion of Control (IoC) and Plain Old C++/Java Object (POCO/POJO) component frameworks] ==See also== * [[Business logic]] * [[Modular programming]] * [[Third party software component]] * [[Web Service]] ==References== {{Reflist}} {{Refimprove|date=December 2008}} ==Further reading== * Brad J. Cox, Andrew J. Novobilski (1991). ''Object-Oriented Programming: An Evolutionary Approach''. 2nd ed. Addison-Wesley, Reading ISBN 0-201-54834-8 * Bertrand Meyer (1997). ''Object-Oriented Software Construction''. 2nd ed. Prentice Hall. * George T. Heineman, William T. Councill (2001). ''Component-Based Software Engineering: Putting the Pieces Together''. Addison-Wesley Professional, Reading 2001 ISBN 0-201-70485-4 * [[Richard Veryard]] (2001). ''Component-based business : plug and play''. London : Springer. ISBN 1852333618 * Clemens Szyperski (2002). ''Component Software: Beyond Object-Oriented Programming''. 2nd ed. Addison-Wesley Professional, Boston ISBN 0-201-74572-0 * David Polberger (2009). ''Component technology in an embedded system''. Master's thesis in computer science, [http://www.polberger.se/components/ available online]. ISSN 1651-6389 ==External links== {{External links|date=September 2009}} * [http://www.cs.dartmouth.edu/~doug/components.txt ''Mass Produced Software Components'' by M. Douglas McIlroy] * [http://homepages.cs.ncl.ac.uk/brian.randell/NATO/ NATO Science Committee Software Engineering Conference in Garmisch] – reports (PDF) * [http://virtualschool.edu/cox/pub/PSIR ''Planning the Software Industrial Revolution''] The history of manufacturing vs software compared. * [http://distributed-software.blogspot.com/2006/06/independence-of-component-oriented.html ''The independence of notion of component-orientation'']. * [http://virtualschool.edu/mybank ''Cox's feasibility demonstration''] of a usage-based mechanism for incentivizing component producers. * comprehensive list of [http://xplc.sourceforge.net/doc/others.php Component Systems] * Article "[http://www.dre.vanderbilt.edu/~schmidt/reuse-lessons.html Why Software Reuse has Failed and How to Make It Work for You]" by [[Douglas C. Schmidt]] * [http://www.cbsdf.com/ps_blog/Component-characteristics.htm New proposals to explore the Component properties: (i) Reuse] and [http://www.cbsdf.com/ps_blog/SE-MissingLink.htm (ii) Replaceable] * http://www.smb.uklinux.net/reusability/ * [http://www.dyscas.org Dynamically Self Configuring Automotive System] * [http://www.cbsdf.com/misc_docs/Rules-CBE.htm New proposal for exploring a kind of CBSE comparable to the CBE] * [http://existentialprogramming.blogspot.com/search/label/components "There is no such thing as a Component" essay] {{DEFAULTSORT:Component-Based Software Engineering}} [[Category:Object-oriented programming]] [[Category:Software architecture]] [[Category:Software components]] [[de:Komponentenbasierte Entwicklung]] [[es:Programación orientada a componentes]] [[fa:مهندسی نرم افزار بر اساس مولفه]] [[fr:Programmation orientée composant]] [[gl:Compoñente de software]] [[ja:ソフトウェアコンポーネント]] [[pl:Komponent (informatyka)]] [[pt:Engenharia de software baseada em componentes]] [[ru:Компонентно-ориентированное программирование]] [[uk:Компонентно-орієнтоване програмування]] [[zh:基于组件的软件工程]]</text> </page> <page> <id>7322</id> <title>Component (UML)</title> <text>[[File:Component.PNG|thumb|320px|A UML Component with provided and required interfaces]] A '''component''' in the [[Unified Modeling Language]] "represents a [[modular]] part of a [[system]], that encapsulates its content and whose manifestation is replaceable within its [[built environment|environment]]. A component defines its [[behavior]] in terms of ''provided'' and ''required'' [[Interface (computer science)|interfaces]]".<ref name= "OMG UML V2.1.2"> OMG (2008). ''[http://www.omg.org/spec/UML/2.1.2/Superstructure/PDF OMG Unified Modeling Language (OMG UML), Superstructure, V2.1.2]'' p.146.</ref> A component may be replaced by another if and only if their provided and required interfaces are identical. This idea is the underpinning for the [[plug-and-play]] capability of [[component-based]] systems and promotes [[software reuse]]<ref name= "OMG UML V2.1.2"/>. As can be seen from the above definition, UML places no restriction on the granularity of a component. Thus, a component may be as small as a ''figures-to-words converter'', or as large as an entire ''[[document management system]]''. Larger pieces of a [[system]]'s functionality may be assembled by reusing components as parts in an encompassing component or assembly of components, and wiring together their required and provided interfaces."<ref name= "OMG UML V2.1.2"/> Such assemblies are illustrated by means of [[component diagram]]s. ==References== {{reflist}} {{Refimprove|date=February 2009}} ==External links== * [http://www.uml-diagrams.org/component-diagrams.html#component Component in UML 2] {{UML}} {{DEFAULTSORT:Component (Uml)}} [[Category:Unified Modeling Language]] {{uml-stub}} [[de:Komponente_(UML)]]</text> </page> <page> <id>7325</id> <title>Component Object Model</title> <text>'''Component Object Model''' ('''COM''') is a [[Application Binary Interface|binary-interface]] standard for [[software componentry]] introduced by [[Microsoft]] in 1993. It is used to enable [[interprocess communication]] and dynamic [[object (computer science)|object]] creation in a large range of [[programming languages]]. The term ''COM'' is often used in the Microsoft software development industry as an [[umbrella term]] that encompasses the [[Object Linking 