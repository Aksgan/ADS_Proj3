arithmetic operation exceeds 127 and the fraction is not zero. =====Exponent underflow exception===== An exponent underflow exception<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|page=80}} is recognized when the characteristic in a floating-point arithmetic operation is negative and the fraction is not zero. =====Significance exception===== A significance exception<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|page=80}} is recognized when the fraction in a floating-point add or subtract operation is zero. =====Floating-point divide exception===== A floating-point divide exception<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|page=80.1}} is recognized when the fraction in the divisor of a floating-point divide operation is zero. ====Supervisor Call interrupt==== A Supervisor Call interrupt<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|pages=80.1-81}} occurs as the result of a Supervisor Call instruction; the system stores bits 8-15 of the SVC instruction as the Interrupt Code. ====External interrupt==== An External<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|page=81}}<ref group=NB>Even though a timer expiration is an internal event, it causes an External interrupt</ref> interrupt occurs as the result of certain asynchronous events. Bits 16-24 of the External Old PSW are set to 0 and one ore more of bits 24-31 is set to 1 {| class="wikitable collapsible" |+Interrupt codes for External interrupts |- ! valign=top style="text-align:right;width:8em"|PSW bit ! Type of external interrupt |- | align=right| 24 |Timer |- | align=right| 25 |Interrupt key |- | align=right valign=top| 26 ||External signal 2<br>Malfunction alert<ref group=NB name=M65MP/> on 360/65<ref name=A22-6884/> in Multisystem mode |- | align=right valign=top| 27 |External signal 3<br>System Call<ref group=NB name=M65MP/> on 360/65<ref name=A22-6884/> in Multisystem mode |- | align=right| 28 |External signal 4 |- | align=right| 29 |External signal 5 |- | align=right| 30 |External signal 6 |- | align=right| 31 |External signal 7 |} ====Machine Check interrupt==== A Machine Check interrupt<sup class=reference>[[#PoOps|PoOps]]</sup>{{rp|pages=82-83}} occurs to report unusual conditions associated with the channel or CPU that cannot be reported by another class of interrupt. The most important class of conditions causing a Machine Check is a hardware error such as a parity error found in registers or storage, but some models may use it to report less serious conditions. Both the interrupt code and the data stored in the scanout area at '80'x (128 decimal) are model dependent. ===I/O=== This article describes I/O from the CPU perspective. It does not discuss the channel cable or connectors, but there is a summary [[IBM System/360#Channels|elsewhere]] and details can be found in the IBM literature<ref name=A22-6843/>. I/O was carried out by a conceptually separate processor called a channel. Channels had their own instruction set, and accessed memory independently of the program running on the CPU. On the smaller models (through 360/50) a single microcode engine ran both the CPU program and the channel program. On the larger models the channels were in separate cabinets and had their own interfaces to memory. There are three types of channels on the S/360: *A byte multiplexor channel is capable of executing multiple '''CCW''''s concurrently; it is normally used to attach slow device such as card readers and telecommunications lines. A byte multiplexor channel could have a number of selector subchannels, which behaved like low-speed selector channels. *A selector channel is only capable of executing one channel command at a time. It is normally used to attach fast devices that are not capable of exploiting a block multiplexor channel, such as magnetic tape drives. *A block multiplexor channel is capable of concurrently running multiple channel programs, but only one at a time can be active. The control unit can request suspension at the end of a channel command and can later request resumption. This is intended for devices in which there is a mechanical delay after completion of data transfer, e.g., for seeks on moving-head DASD. The block multiplexor channel was a late addition to the System/360 architecture; early machines had only byte multiplexor channels and selector channels. Conceptually peripheral equipment is attached to a S/360 through ''control units'', which in turn are attached through channels. However, the architecture does not require that control units be physically distinct, and in practice they are sometimes integrated with the devices that they control. Similarly, the architecture does not require the channels to be physically distinct from the processor, and the smaller S/360 models (through 360/50) have integrated channels that steal cycles from the processor. Peripheral devices are addressed with 16-bit<ref group=NB>Because of the limits on the channel number, S/360 and early S/370 software only used 12 bits to store device addresses.</ref> addresses.<ref name=A22-6821-7/>{{rp|page=89}}, referred to as ''cua'' or ''cuu''; this article will use the term ''cuu''. The high 8 bits identify a channel, numbered from 0 to 6<ref group=NB name=ChanNum/>, while the low 8 bits identify a device on that channel. A device may have multiple ''cuu'' addresses. There are three storage fields reserved for I/O; a double word I/O old PSW, a doubleword I/O new PSW and a fullword ''Channel Address Word'' ('''CAW'''). Performing an I/O normally requires the following: *initializing the '''CAW''' with the storage key and the address of the first CCW *Issuing a ''Start I/O'' ('''SIO''') instruction that specifies the ''cuu'' for the operation *Waiting<ref group=NB>But continuing with unrelated work.</ref> for an I/O interrupt *Handling any unusual conditions indicated in the ''Channel Status Word'' ('''CSW'''). A channel program consists of a sequence of ''Channel Control Words'' ('''CCW''''s) chained together (see below.) Normally the channel fetches '''CCW''''s from consecutive doublewords, but a control unit can direct the channel to skip a CCW and a ''Transfer In Channel'' ('''TIC''') '''CCW''' can direct the channel to start fetching '''CCW''''s from a new location. There are several defined ways for a channel command to complete. Some of these allow the channel to continue fetching CCW's, while others terminate the channel program. In general, if the CCW does not have the chain-command bit set and is not a TIC, then the channel will terminate the I/O operation and cause an I/O interrupt when the command completes. Certain status bits from the control unit suppress chaining. The most common ways for a command to complete are for the count to be exhausted when chain-data is not set and for the control unit to signal that no more data transfers should be made. If Suppress-Length-Indication (SLI) is 