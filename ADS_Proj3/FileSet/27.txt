1996. Since then, over 30 A2100 based satellites have been launched and have totalled over 200 years of on-orbit service.<ref>[http://www.globalsecurity.org/space/library/news/2008/space-080212-lockheed-martin01.htm globalsecurity.org "Lockheed Martin-Built A2100 Satellite Fleet Achieves 200 Years In Orbit"]</ref> Lockheed Martin's highly reliable A2100 telecommunications satellite series has received several industry awards for reliability in its history, including Frost and Sullivan's Satellite Reliability Award for excellence in the production of flexible and reliable communications satellites used in geosynchronous Earth orbit.<ref>[http://www.spacedaily.com/reports/Lockheed_Martin_Built_EchoStar_X_Satellite_Launched_Successfully.html www.spacedaily.com "Lockheed Martin Built EchoStar X Satellite Launched Successfully"]</ref><ref>[http://www.lockheedmartin.com/news/press_releases/2004/LockheedMartinSatelliteReliabilityH.html "Frost & Sullivan Award]</ref> The A2100 series is modular and can be configured in different sizes: *A2100A = 1 to 4 [[kW]] *A2100AX = 4 to x kW *A2100AXS: enhanced A2100AX *A2100AXX : stretched version for mobile communications *Additionally there is an A2100M version, which fulfills military requirements. A2100 Customer List:<ref>[http://www.lockheedmartin.com/ssc/CommercialSpace/Capabilities.html "Lockheed Martin Satellites"]</ref> *[[SES Americom]] *[[SES Astra]] *[[SES New Skies]] *[[Dish Network]] *[[ACeS]] *[[Telesat]] *[[Cablevision]] *[[JSAT Corporation]] ==References== {{reflist}} {{Lockheed Martin}} [[Category:Communications satellite models]] [[Category:Unmanned vehicles]] [[Category:Satellite platforms]] [[de:A2100]] [[es:A2100]]</text> </page> <page> <id>232</id> <title>A86 (software)</title> <text>{{Redirect|A386|the A road in England|A386 road (Great Britain)}} {{Other uses|D86 (disambiguation)}} {{Infobox_Software | name = A86 | screenshot = | caption = | developer = [[Eric Isaacson]] | latest_release_version = 4.05 | latest_release_date = | operating_system = [[DOS]], [[Microsoft Windows|Windows]] | platform = [[x86]] | genre = [[Assembly language#Assembler|Assembler]] | license = [[Proprietary software|Proprietary]] | website = http://eji.com/a86/ }} '''A86''' is a compact commercial [[Assembly language#Assembler|assembler]] developed for the [[Intel]] [[x86]] family of [[microprocessor]]s by [[Eric Isaacson]]. The assembler can directly produce a [[Microsoft Windows|Windows]]/[[DOS]] compatible [[.COM]] or [[Object file|.OBJ]] files from a simple text source file. It uses a slightly simpler [[Syntax of programming languages|syntax]] for source code than that used by other assemblers, and it is [[Optimization (computer science)|optimize]]d for maximum speed at both assembly and [[Run time (computing)|run times]]. It comes with a [[debugger]], '''D86'''.<ref name="A86">{{cite web|url=http://eji.com/a86/|title=A86/A386 assembler and D86/D386 debugger|date=2008|accessdate=2008-07-02|author=Eric Isaacson}}</ref><ref name="WhichAsm">{{cite web|url=http://webster.cs.ucr.edu/AsmTools/WhichAsm.html|title=Which Assembler is the Best?|accessdate=2008-05-18|author=Randall Hyde}}</ref> A86/D86 target [[16-bit]] x86 platforms. The companion products '''A386''' and '''D386''' are designed for [[32-bit]] platforms.<ref name="A86"/><ref name="WhichAsm"/> The A86 assembler was the first programming tool to automatically embed a "signature" into the code which it generated. Through its choice of instructions (many of which are functionally equivalent), it was possible to distinguish between registered and unregistered versions of the assembler, although access to the source code was required.<ref name="El-Khalil">{{cite book | last1 = El-Khalil | first1 = Rakan | last2 = Keromyti | first2 = Angelos D. | year = 2004 | chapter = Hydan: Hiding Information in Program Binaries | editors = Lopez, Javier; Qing, Sihan; Okamoto, Eiji | title = Information and communications security: 6th International Conference, ICICS 2004, Malaga, Spain, October 27-29, 2004 : Proceedings | series = Lecture notes in computer science | volume = 3269 | publisher = [[Springer Science+Business Media|Springer]] | location = | isbn = 3540235639 | page = 190 }}</ref> ==References== {{reflist}} ==External links== * [http://eji.com/a86/ Official A86 site] {{Template:X86_assembly_topics}} [[Category:Assemblers]] [[Category:Debuggers]] [[Category:DOS software]] [[Category:Windows software]] [[es:A86 y A386 assemblers]]</text> </page> <page> <id>244</id> <title>AA tree</title> <text>An '''AA tree''' in [[computer science]] is a form of [[Self-balancing binary search tree|balanced tree]] used for storing and retrieving ordered data efficiently. AA trees are named for [[Arne Andersson (computer science)|Arne Andersson]], their inventor. AA trees are a variation of the [[red-black tree]], which in turn is an enhancement to the [[binary search tree]]. Unlike red-black trees, red nodes on an AA tree can only be added as a right subchild. In other words, no red node can be a left sub-child. This results in the simulation of a [[2-3 tree]] instead of a [[2-3-4 tree]], which greatly simplifies the maintenance operations. The maintenance algorithms for a red-black tree need to consider seven different shapes to properly balance the tree: [[Image:Red Black Shape Cases.svg]] An AA tree on the other hand only needs to consider two shapes due to the strict requirement that only right links can be red: [[Image:AA Tree Shape Cases.svg]] == Balancing Rotations == Typically, AA trees are implemented with levels instead of colors, unlike red-black trees. Each node has a level field, and the following invariants must remain true for the tree to be valid: # The level of a leaf node is one. # The level of a left child is strictly less than that of its parent. # The level of a right child is less than or equal to that of its parent. # The level of a right grandchild is strictly less than that of its grandparent. # Every node of level greater than one must have two children. Only two operations are needed for maintaining balance in an AA tree. These operations are called skew and split. Skew is a right rotation when an insertion or deletion creates a left horizontal{{Clarify|What's a ''horizontal link''?|date=July 2010}} link, which can be thought of as a left red link in the red-black tree context. Split is a conditional left rotation when an insertion or deletion creates two horizontal right links, which once again corresponds to two consecutive red links in red-black trees. '''function''' skew '''is''' '''input:''' T, a node representing an AA tree that needs to be rebalanced. '''output:''' Another node representing the rebalanced AA tree. '''if''' nil(T) '''then''' '''return''' Nil '''else if''' level(left(T)) == level(T) '''then''' ''Swap the pointers of horizontal left links.'' L = left(T) left(T) := right(L) right(L) := T '''return''' L '''else''' '''return''' T '''end if''' '''end function''' Skew: [[Image:AA Tree Skew2.svg]] '''function''' split '''is''' '''input:''' T, a node representing an AA tree that needs to be rebalanced. '''output:''' Another node representing the rebalanced AA tree. '''if''' nil(T) '''then''' '''return''' Nil '''else if''' level(T) == level(right(right(T))) '''then''' ''We have two horizontal right links. Take the middle node, elevate it, and return it.'' R = right(T) right(T) := left(R) left(R) := T level(R) := level(R) + 1 '''return''' R '''else''' '''return''' T '''end if''' '''end function''' Split: [[Image:AA Tree Split2.svg]] == Insertion == Insertion begins with the normal binary tree search and insertion procedure. Then, as the 