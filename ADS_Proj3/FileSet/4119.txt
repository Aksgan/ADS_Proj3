attributed to [[Grace Hopper]], who publicized the cause of a malfunction in an early electromechanical computer.<ref>{{cite|title=[[FCAT]]{{dn}} NRT Test |publisher=Harcourt |date=18 March 2008 }}</ref> A typical version of the story is given by this quote:<ref>{{cite web |url=http://ei.cs.vt.edu/~history/Hopper.Danis.html |title=Danis, Sharron Ann: "Rear Admiral Grace Murray Hopper" |author=|date=16 February 1997 |work=|publisher=ei.cs.vt.edu |accessdate=31 January 2010}}</ref> {{cquote|In 1946, when Hopper was released from active duty, she joined the Harvard Faculty at the Computation Laboratory where she continued her work on the [[Harvard Mark II|Mark II]] and [[Harvard Mark III|Mark III]]. Operators traced an error in the Mark II to a [[moth]] trapped in a relay, coining the term ''bug''. This bug was carefully removed and taped to the log book. Stemming from the first bug, today we call errors or glitch's {{Sic}} in a program a ''bug''.}} Hopper was not actually the one who found the insect, as she readily acknowledged. The date in the log book was 9 September 1947,<ref>"[http://catb.org/jargon/html/B/bug.html Bug]", ''The Jargon File'', ver. 4.4.7. Retrieved 3 June 2010.</ref><ref name="si-bug">"[http://americanhistory.si.edu/collections/object.cfm?key=35&objkey=30 Log Book With Computer Bug]", National Museum of American History, Smithsonian Institution.</ref> although sometimes erroneously reported as 1945.<ref>"[http://www.history.navy.mil/photos/images/h96000/h96566kc.htm The First "Computer Bug]", Naval Historical Center. But note the [[Harvard Mark II]] computer was not complete until the summer of 1947.</ref> The operators who did find it, including William "Bill" Burke, later of the Naval Weapons Laboratory, Dahlgren, Virginia,<ref>IEEE Annals of the History of Computing, Vol 22 Issue 1, 2000</ref> were familiar with the engineering term and, amused, kept the insect with the notation "First actual case of bug being found." Hopper loved to recount the story.<ref>[http://www.jamesshuggins.com/h/tek1/first_computer_bug.htm First Computer Bug]</ref> This log book is on display in the Smithsonian [[National Museum of American History]], complete with moth attached.<ref name="si-bug"/> While it is certain that the Harvard Mark II operators did not coin the term "bug", it has been suggested that they did coin the related term, "[[debug]]". Even this is unlikely, since the [[Oxford English Dictionary]] entry for "debug" contains a use of "debugging" in the context of air-plane engines in 1945. ''See:'' [[debugging]]. == Prevention == Bugs are a consequence of the nature of [[human factor]]s in the programming task. They arise from oversights or mutual misunderstandings made by a software team during specification, design, coding, data entry and documentation. For example: In creating a relatively simple program to sort a list of words into alphabetical order, one's design might fail to consider what should happen when a word contains a [[hyphen]]. Perhaps, when converting the abstract design into the chosen programming language, one might inadvertently create an [[off-by-one error]] and fail to sort the last word in the list. Finally, when typing the resulting program into the computer, one might accidentally type a '<' where a '>' was intended, perhaps resulting in the words being sorted into reverse alphabetical order. More complex bugs can arise from unintended interactions between different parts of a computer program. This frequently occurs because computer programs can be complex—millions of lines long in some cases—often having been programmed by many people over a great length of time, so that programmers are unable to mentally track every possible way in which parts can interact. Another category of bug called a ''[[race condition]]'' comes about either when a process is running in more than one [[Thread (computer science)|thread]] or two or more processes run simultaneously, and the exact order of execution of the critical sequences of code have not been properly synchronized. The software industry has put much effort into finding methods for preventing programmers from inadvertently introducing bugs while writing software.<ref>{{cite book | last = Huizinga | first = Dorota | coauthors = Kolawa, Adam | title = Automated Defect Prevention: Best Practices in Software Management | url = http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470042125.html | year = 2007 | publisher=Wiley-IEEE Computer Society Press | location =| pages =426 | isbn = 0470042125 }}</ref><ref>{{cite book | last = McDonald| first = Marc | coauthors = Musson, Robert; Smith, Ross | title = The Practical Guide to Defect Prevention | url = http://www.microsoft.com/MSPress/books/9198.aspx | year = 2007 | publisher=Microsoft Press | location =| pages =480| isbn = 0735622531 }}</ref> These include: ; Programming style: While [[typos]] in the program code are often caught by the compiler, a bug usually appears when the programmer makes a logic error. Various innovations in [[programming style]] and [[defensive programming]] are designed to make these bugs less likely, or easier to spot. In some programming languages, so-called typos, especially of symbols or logical/mathematical operators, actually represent logic errors, since the mistyped constructs are accepted by the compiler with a meaning other than that which the programmer intended. ; Programming techniques: Bugs often create inconsistencies in the internal data of a running program. Programs can be written to [[Assertion (programming)|check]] the consistency of their own internal data while running. If an inconsistency is encountered, the program can immediately halt, so that the bug can be located and fixed. Alternatively, the program can simply inform the user, attempt to correct the inconsistency, and continue running. ; Development methodologies: There are several schemes for managing programmer activity, so that fewer bugs are produced. Many of these fall under the discipline of [[software engineering]] (which addresses software design issues as well). For example, formal [[program specification]]s are used to state the exact behavior of programs, so that design bugs can be eliminated. Unfortunately, formal specifications are impractical or impossible for anything but the shortest programs, because of problems of [[combinatorial explosion]] and [[Indeterminacy in computation|indeterminacy]]. <!-- deliberately left to dab page, all the topics on that page are relevant --> ; Programming language support: [[Programming language]]s often include features which help programmers prevent bugs, such as static [[type system]]s, restricted [[Namespace (computer science)|name spaces]] and [[Module (computer science)|modular programming]], among others. For example, when a programmer writes (pseudocode) <code>LET REAL_VALUE PI = "THREE AND A BIT"</code>, although this may be syntactically correct, the code fails a [[Type checking|type check]]. Depending on the language and implementation, this may be caught by the [[compiler]] or 