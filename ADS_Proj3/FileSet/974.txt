Communication Technology (NICT) and private individuals. On April 18, 2006 the project released a [[beta version]] of the [http://opencroquet.org/croquet_technologies/downloads.html Croquet [[SDK]] 1.0] in the [[open source]]. Since then, the Croquet technology infrastructure has been successfully used by private industry to build and to deploy commercial-grade closed source collaborative applications. Open source production-grade software implementations for delivering secure, interactive, persistent, virtual workspaces for education and training have at the same time been developed and deployed at the [[University of Minnesota]], the [[University of Wisconsin–Madison]], The [[University of British Columbia]], and [[Duke University]]. Today, continued development of the original Croquet technology is taking place through the [[Open Cobalt]] project. [[Image:Multi-user text editing in 3D.jpg|thumb|300px|Multi-user, multi-lingual text editing in 3D]] [[Image:Croquet Spreadsheet.jpeg|thumb|300px|Croquet Spreadsheet]] ==Unique aspects== *It is platform and device independent *Users/developers may freely share, modify and view the source code of the entire system (due to Croquet's liberal license) *The technology is not hosted on a single organization’s server (and hence not governed by any such organization) *It provides a complete professional programmer’s language (Smalltalk/Squeak), [[Integrated development environment|IDE]], and [[class library]] in every distributed, running participant’s copy (the programming development environment itself is simultaneously shareable and extensible) *Croquet based worlds can also be updated while the system is live and running. ==See also== *[[Open Wonderland]] A 100% Java open source 3D toolkit for creating collaborative virtual worlds ==References== {{Reflist}} {{Refbegin}} *[http://www.croquetconsortium.org/images/2/2b/2003_Croquet_Collab_Arch.pdf Introductory paper] describing Croquet by David Smith and Alan Kay *[http://www.db.soc.i.kyoto-u.ac.jp/c5-06/ C5 Conference] and related papers *[http://www.reed.com/dpr/ David P. Reed's papers] {{Refend}} ==External links== *[http://www.opencroquet.org/ Croquet Consortium Website] *[http://connect.educause.edu/blog/gbayne/cnipodcastaninterviewwith/45869 Interview] with Julian Lombardi at The Coalition for Networked Information's 2007 Fall Task Force Meeting. *[http://stanford-online.stanford.edu/courses/cs547/030425-cs547-100.asx Video] by David Smith & Alan Kay done for a talk at Stanford (2003) *[http://www.lisarein.com/alankay/tour.html Video] done for the O'Reilly etech by David Smith & Alan Kay (broken up into nice bite-size chunks, also includes Alan's full Squeak demo) {{3D virtual worlds}} [[Category:Groupware]] [[Category:Information technology management]] [[Category:Virtual reality communities]] [[Category:3D Scenegraph APIs]] [[Category:Software using the MIT license]] [[el:Croquet]] [[sk:Projekt Croquet]]</text> </page> <page> <id>8521</id> <title>Cross-cutting concern</title> <text>In [[computer science]], '''cross-cutting concerns''' are aspects of a [[computer program|program]] which affect other [[Concern (computer science)|concerns]]. These concerns often cannot be cleanly [[Modularity (programming)|decomposed]] from the rest of the system in both the design and implementation, and can result in either ''scattering'' ([[source code|code]] duplication), ''tangling'' (significant dependencies between systems), or both. For instance, if writing an [[application software|application]] for handling medical records, the bookkeeping and indexing of such records is a [[core concern]], while [[Data logging|logging]] a history of changes to the record database or user database, or an authentication system, would be cross-cutting concerns since they touch more parts of the program. ==Background== Cross-cutting concerns are parts of a program which rely on or must affect many other parts of the system. They form the basis for the development of [[aspect (computer science)|aspects]].<ref name="Patent 4">U.S. Patent 6467086, p.4</ref> Such cross-cutting concerns do not fit cleanly into [[object-oriented programming]] or [[procedural programming]].<ref name="Seminal 1">Kiczales, p.1</ref> Cross-cutting concerns can be directly responsible for ''tangling'', or system interdependencies, within a [[computer program|program]]. Because procedural and [[functional language]]s' constructs consist entirely of procedure calling, there is no semantic through which two goals (the capability to be implemented and the related cross-cutting concern) can be addressed simultaneously.<ref name="Seminal 6">Kiczales, p.6</ref> As a result, the code addressing the cross-cutting concern must be ''scattered'', or duplicated, across the various related locations, resulting in a loss of [[modularity (programming)|modularity]]. <ref name="Seminal 1" /> [[Aspect-oriented programming]] aims to [[encapsulation (computer science)|encapsulate]] cross-cutting concerns into [[aspect (computer science)|aspects]] to retain modularity. This allows for the clean isolation and reuse of code addressing the cross-cutting concern.<ref name="Seminal 2">Kiczales, p.2</ref> By basing designs on cross-cutting concerns, [[software engineering]] benefits are affected, including modularity and simplified maintenance.<ref name="Li 1">Li, p.1</ref> == See also == *[[Separation of concerns]] *[[Aspect-oriented programming]] *[[Aspect-oriented software development]] *[[Code refactoring]] (restructuring software) *[[Database normalization]] (minimize needlessly replicated data) *[[Multiple inheritance]] *[[Orthogonalization]] (mathematical normalization) ==References== {{reflist}} ==Bibliography== *{{cite journal|last1=Kiczales|first1=Gregor|last2=Lamping|first2=John|last3=Mendhekar|first3=Anurag|last4=Maeda|first5=Chris|last6=Lopes|first6=Cristina|last7=Longtier|first7=Jean-Marc|last8=Irwin|first5=John|year=1997|title=Aspect-Oriented Programming|journal=Proceedings of the 11th European Conference on Object-Oriented Programming (ECOOP 1997)|city=Jyväskylä, Finland|pages=220&ndash;242}} *{{US patent reference|number=6467086|y=2002|m=10|d=15| inventor = Kiczales et. al|title = [[Aspect-oriented programming]]}} *{{cite journal|title=Verifying Cross-Cutting Features as Open Systems|last1=Li|first1=Harry|first2=Shriram|last2=Krishnamurthi|first3=Kathi|last3=Fisler|journal=ACM SIGSOFT Software Engineering Notes|volume=27|issue=6|year=2002|pages=89&ndash;98|doi=10.1145/605466.605481}} *{{cite journal|last1=Parnas|first1=David L.|year=1972|title=On the Criteria To Be Used in Decomposing Systems into Modules|journal=[[Communications of the ACM]]|month=December|year=1972|volume=15|issue=12|pages=1053&ndash;1058|url=http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.8963&rep=rep1&type=pdf|doi=10.1145/361598.361623|format=PDF}} *{{cite journal|last1=Tarr|first1=Peri|last2=Ossher|first2=Harold|last3=Harrison|first3=William|first4=Stanley M., Jr.|last4=Sutton|year=1999|title=N Degrees of Separation: Multi- Dimensional Separation of Concerns|journal=Proceedings of the 21st International Conference on Software Engineering|city=Los Angeles, California, USA|publisher=[[IEEE Computer Society Press]]|pages=107&ndash;119|doi=10.1109/ICSE.1999.841000|url=http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.89.1641&rep=rep1&type=pdf|format=PDF}} ==Further reading== *Laddad, R. (2003): AspectJ in Action, Practical Aspect-Oriented Programming, Manning Publications Co. ==External links== *[http://www.aosd.net/wiki/index.php?title=Glossary AOSD.net's] glossary of [[aspect-oriented programming|aspect oriented]] terms. *[[AspectJ]] [http://eclipse.org/aspectj/], an Aspect-Oriented extension to the [[Java (programming language)|Java programming language]] *Bergmans, L., M. Aksit (2001): Composing Multiple Concerns Using Composition Filters, http://trese.cs.utwente.nl/ (24 July 2004) *Berg, K. van den, Conejero, J. and Chitchyan, R. (2005). AOSD Ontology 1.0 ‐ Public Ontology of Aspect‐Orientation. AOSD Europe Network of Excellence, retrieved May 2005, from http://www.aosd-europe.net/deliverables/d9.pdf *Here is an example of handling a cross-cutting concern: http://blogs.captechconsulting.com/blog/balaji-muthuvarathan/persistence-pattern-using-threadlocal-and-ejb-interceptors [[Category:Aspect-oriented software development]] [[Category:Aspect-oriented programming]] {{aosd}} {{comp-sci-stub}} [[de:Cross-Cutting Concern]] [[ta:குறுக்க வெட்டும் அக்கறைகள்]] [[zh:横切关注点]]</text> </page> <page> <id>8534</id> <title>Cross-site scripting</title> <text>'''Cross-site scripting''' ('''XSS''') is a type of [[computer insecurity|computer security]] [[vulnerability (computer science)|vulnerability]] typically found in [[web application]]s that enables malicious attackers to [[code injection|inject]] [[client-side script]] into [[web page]]s viewed by other users. An exploited cross-site scripting vulnerability can be used by attackers to bypass [[access control]]s such as the [[same origin policy]]. Cross-site scripting carried out on websites were roughly 80% of all security vulnerabilities documented by Symantec as of 2007.<ref name=Symantec-2007-2nd-exec>During the second half of 2007, 11,253 site-specific cross-site vulnerabilities were documented by XSSed, compared to 2,134 "traditional" vulnerabilities documented by Symantec, in {{cite web|title=Symantec Internet Security Threat Report: Trends for July-December 2007 (Executive Summary)|publisher=Symantec Corp.|volume=XIII|pages=1–3|month=April | year=2008|url=http://eval.symantec.com/mktginfo/enterprise/white_papers/b-whitepaper_exec_summary_internet_security_threat_report_xiii_04-2008.en-us.pdf|format=PDF|accessdate=May 11, 2008}}</ref> Their impact may range from a petty nuisance to a significant security risk, depending on the sensitivity of the data handled by the vulnerable site, and the nature of any security mitigations implemented by the site's owner. ==Background== XSS is a cracking technique 