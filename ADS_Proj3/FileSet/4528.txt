Natural Language Processing |publisher = Association for Computational Linguistics |pages = 31–39 |quote = We present Tightly Packed Tries (TPTs), a compact implementation of read-only, compressed trie structures with fast on-demand paging and short load times. We demonstrate the benefits of TPTs for storing n-gram back-off language models and phrase tables for [[statistical machine translation]]. Encoded as TPTs, these databases require less space than flat text file representations of the same data compressed with the gzip utility. At the same time, they can be mapped into memory quickly and be searched directly in time linear in the length of the key, without the need to decompress the entire file. The overhead for local decompression during search is marginal. }}</ref> This approach eliminates the need for node pointers which reduces the memory requirements substantially and makes memory mapping possible which allows the virtual memory manager to load the data into memory very efficiently. Another compression approach is to "pack" the trie.<ref name=Liang1983>{{cite thesis|degree=Doctor of Philosophy|title=Word Hy-phen-a-tion By Com-put-er|url=http://www.tug.org/docs/liang/liang-thesis.pdf|author=Franklin Mark Liang|year=1983|publisher=Stanford University|accessdate=2010-03-28|archiveurl=http://www.webcitation.org/5pqOfzlIA|archivedate=2010-05-19}}<!-- At time of writing, this template doesn't support archive URLs. I've included one anyway, in case of future link rot (see [[WP:ROT]])--></ref> Liang describes a space-efficient implementation of a sparse packed trie applied to [[hyphenation]], in which the descendants of each node may be interleaved in memory. == See also == {{div col|3}} * [[Radix tree]] * [[Directed acyclic word graph]] (aka DAWG) * [[Ternary search tries]] * [[Acyclic deterministic finite automata]] * [[Hash trie]] * [[Deterministic finite automata]] * [[Judy array]] * [[Search algorithm]] * [[Extendible hashing]] * [[Hash array mapped trie]] * [[Prefix Hash Tree]] * [[Burstsort]] * [[Luleå algorithm]] * [[Huffman coding]] {{div col end}} == External links == * [http://www.nist.gov/dads/HTML/trie.html NIST's Dictionary of Algorithms and Data Structures: Trie] * [http://blog.ivank.net/trie-in-as3.html Trie implementation and visualisation in flash] * [http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/ Tries] by Lloyd Allison * [http://www.topcoder.com/tc?module=Static&d1=tutorials&d2=usingTries Using Tries] Topcoder tutorial * [http://linux.thai.net/~thep/datrie/datrie.html An Implementation of Double-Array Trie] * [http://tom.biodome.org/briandais.html de la Briandais Tree] * [http://groups.google.com/group/comp.lang.lisp/browse_thread/thread/01e485291d150938/9aacb626fa26c516 Discussing a trie implementation in Lisp] * [http://serverkit.org/apiref-wip/node59.html ServerKit "parse trees" implement a form of Trie in C] * [http://scanty-evidence-1.heroku.com/past/2010/5/10/ruby_trie/ A Trie implemented in Ruby] * [http://www.nedprod.com/programs/portable/nedtries/ A reference implementation of bitwise tries in C and C++] * [http://www.superliminal.com/sources/TrieMap.java.html A reference implementation in Java] * [http://www.technicalypto.com/2010/04/trie-in-java.html A quick tutorial on TRIE in Java and C++] * [http://code.google.com/p/judyarray A compact C implementation of Judy Tries] == References == <references/> * {{Cite journal | first1=R. | last1=de la Briandais | title=File Searching Using Variable Length Keys | journal=Proceedings of the Western Joint Computer Conference | year=1959 | pages=295–298}} {{CS-Trees}} [[Category:Trees (structure)]] [[ca:Trie]] [[cs:Trie]] [[de:Trie]] [[es:Trie]] [[fa:درخت پیشوندی]] [[fr:Trie (informatique)]] [[gl:Trie]] [[ja:トライ木]] [[pl:Drzewo trie]] [[pt:Trie]] [[ru:Префиксное дерево]] [[uk:Префіксне дерево]] [[zh:Trie]]</text> </page> <page> <id>38277</id> <title>Triple modular redundancy</title> <text>{{Other uses of|TMR|TMR (disambiguation)}} In [[computing]], '''triple modular redundancy''' (TMR) is a [[fault tolerant]] form of [[N-modular redundancy]], in which three systems perform a process and that result is processed by a voting system to produce a single output. If any one of the three systems fails, the other two systems can correct and mask the fault. If the voter fails then the complete system will fail. However, in a good TMR system the voter is much more [[Reliability engineering|reliable]] than the other TMR components. Alternatively, if there is another stage of TMR logic following the current one (for example, in systems such as the [[Saturn Launch Vehicle Digital Computer]]), then three voters are used &ndash; one for each copy of the next stage of logic. The TMR concept can be applied to many forms of [[Redundancy (engineering)|redundancy]], such as software redundancy in the form of [[N-version programming]]. Some [[ECC memory]] uses triple modular redundancy hardware (rather than the more common [[Hamming code]]), because triple modular redundancy hardware is faster than Hamming error correction hardware.<ref>{{cite web |title=Using StrongArm SA-1110 in the On-Board Computer of Nanosatellite |publisher=Tsinghua Space Center, Tsinghua University, Beijing |accessdate=2009-02-16 |url=http://www.apmcsta.org/File/doc/Conferences/6th%20meeting/Chen%20Zhenyu.doc}} <!-- I wish I had a better reference --></ref> Space satellite systems often use TMR,<ref>{{cite web |url=http://mae.pennnet.com/Articles/Article_Display.cfm?ARTICLE_ID=111934 |title=Actel engineers use triple-module redundancy in new rad-hard FPGA |publisher=Military & Aerospace Electronics |accessdate=2009-02-16 }}</ref> <ref>[http://klabs.org/richcontent/Papers/Synopses/nsrec94.htm SEU Hardening of Field Programmable Gate Arrays (FPGAs) For Space Applications and Device Characterization<!-- Bot generated title -->]</ref><ref>[http://www.techfocusmedia.net/fpgajournal/feature_articles/20040803_space.htm FPGAs in Space<!-- Bot generated title -->]</ref> although satellite RAM usually uses Hamming error correction.<ref>[http://radhome.gsfc.nasa.gov/radhome/papers/aspen.htm Commercial Microelectronics Technologies for Applications in the Satellite Radiation Environment<!-- Bot generated title -->]</ref> To utilize triple modular redundancy, a ship must have at least three [[Marine chronometer|chronometers]]. At one time, the cost of three sufficiently accurate chronometers was more than the cost of a smaller merchant vessel.<ref>{{cite web |url=http://www.irbs.com/lists/navigation/0107/0066.html |title=Re: Longitude as a Romance |publisher=Irbs.com, Navigation mailing list |date=2001-07-12 |accessdate=2009-02-16}}</ref> Some vessels carried more than three chronometers &ndash; for example, the [[HMS Beagle]] carried 22 chronometers.<ref> {{cite web |author=R. Fitzroy |title=Volume II: Proceedings of the Second Expedition |page=18 |url=http://darwin-online.org.uk/content/frameset?viewtype=side&itemID=F10.2&pageseq=41}}</ref> Some communication systems use N-modular redundancy as a simple form of [[forward error correction]]. For example, 5-modular redundancy communication systems (such as [[FlexRay]]) use the majority of 5 samples &ndash; if any 2 of the 5 results are erroneous, the other 3 results can correct and mask the fault. == Triple modular redundancy in popular culture == * The three pre-cogs in [[The Minority Report|Minority Report]] lead to a conviction, even when one is in the minority. * To rule out that a single win was "a fluke", some competitions use a [[two out of three falls match]]. This isn't true TMR, however, because the three falls are not independent of each other - each competitor knows who has most falls at any point in the competition, which influences their future actions. * In [[Arthur C. Clarke]]'s science fiction novel ''[[Rendezvous with Rama]]'', the Ramans make heavy use of triple redundancy. == See also == * [[Fault tolerant system]] * [[Dual modular redundant]] * [[Repetition code]] * [[Lockstep (computing)]] == External links == * [http://www.embedded.com.au/pages/TMR.html Article about TMR] with reference to TMR usage in avionics and industry ==References== {{Reflist}} [[Category:Error detection and correction]] [[Category:Fault-tolerant computer systems]] {{compsci-stub}} [[it:Triple Modular Redundancy]] [[pt:Redundância 