in its boot sequence. As stated above, conventional MBR code loads and runs the operating-system-dependent [[volume boot record]] (or [[bootloader]]) code that is located at the beginning of the disk's "active" partition. The MBR can simply assume that the one active partition on the current drive is supposed to boot, or alternately, it can be programmed as a [[multi boot]] MBR. A multi boot MBR may interact with the user to determine which partition on which drive should boot, and may transfer control to the MBR of a different drive. The BIOS will load the first valid MBR that it finds into [[hexadecimal]] [[physical address]] 0x7c00, and will jump to that address. The primary validation for most BIOSes is the 0xAA55 signature on the end, although the BIOS author may choose other checks as well, such as addresses in the partition table referring to sectors beyond the reported capacity of the disk. Part of the end of the 512 byte sector is pre-allocated for the partition table and other information, so the MBR program must be tiny enough to fit within 440 bytes of memory. The MBR program may communicate with the user, examine the partition table, or perform some housekeeping tasks such as enabling the [[A20 line]], or changing to [[unreal mode]] from real mode. Eventually, the MBR will need to perform its main task, and load the program that will perform the next stage of the boot process, usually by making use of [[INT 13]] BIOS calls. Typical [[boot sector]] code also expects to be loaded at physical address 0x7c00, even though all the memory from physical address 0x501 (address 0x500 is the last one used by the BIOS){{Citation needed|date=December 2007}} to somewhere short of 0x9ffff is typically available in real mode (a total of up to 640 KB minus the first 1281 bytes of memory); very old machines may have less than 640 KB (A0000h or 655,360 bytes) of memory, and newer machines may allocate significant amounts of memory for BIOS uses. The INT 12 [[BIOS interrupt call]] may help in determining how much memory can be allocated safely (it simply reads the base memory size in KB from segment:offset location 0040h:0013h). In theory, only 64255 bytes is guaranteed (beginning at 0x501 and ending at 0x0ffff); in practice it is safe to assume at least 382.74 KB (ending at 0x5ffff) are available on modern hardware. Since 0x7c00 is the location where the MBR is already running, one of the first tasks of an MBR is usually to relocate itself somewhere else in memory &mdash;most often at 0x600 (for Microsoft code). A conventional volume boot record is only one sector long; but it does no harm, and is trivial to allow, the MBR to load significantly more than just one sector. Some bootloaders are longer than one sector, so loading more than one sector can speed up the boot process. == Editing/replacing MBR contents == Though it is possible to manipulate the [[byte]]s in the MBR sector directly using various [[disk editor]]s, there are tools to write fixed sets of functioning code to the MBR. Since MS-DOS 5.0, the DOS-mode program [[fdisk]] has included the (undocumented, but widely used) switch <code>/mbr</code>, which will rewrite the MBR code. Under [[Windows 2000]] or later, the [[Recovery Console]] can be used to write new MBR code to a hard disk using its <code>fixmbr</code> command. Under [[Windows Vista]] and [[Windows 7]], the [[Recovery Environment]] can be used to write new MBR code to a hard disk by clicking on [[Command Prompt]] and typing <code>bootrec /FixMbr</code>. Some third-party utilities may also be used for directly editing the contents of partition tables (without requiring any knowledge of hexadecimal or disk/sector editors).<ref>For example, ''Power Quest's Partition Table Editor'' (PTEDIT32.EXE), which runs under Windows operating systems, is still available here: [ftp://ftp.symantec.com/public/english_us_canada/tools/pq/utilities/PTEDIT32.zip Symantec's FTP site].</ref> In [[Linux]], ms-sys may be used to install a standard MBR. The [[GRUB]] and [[LILO]] projects have tools for writing code to the MBR sector, namely <code>grub-install</code> and <code>lilo -mbr</code>. The GRUB Legacy <code>grub</code> interactive console also has commands to write to the MBR, as it has the <code>setup</code> and <code>embed</code> commands, however <code>grub-install</code> in GRUB2 can so far only be run on an already booted *IX system. <code>dd</code> is also a commonly used POSIX command to copy or overwrite any sector, MBR included. Various programs are able to create a "[[backup]]" of both the primary partition table and the logical partitions in the extended partition. ===Linux sfdisk=== [[Linux]] sfdisk (on a [[SystemRescueCD]]) is able to save a backup of the primary and extended partition table. It creates a file that can be read in a text editor, or this file can be used by sfdisk to restore the primary/extended partition table. An example command to back up the partition table is <code>sfdisk -d /dev/hda > hda.out</code> and to restore is <code>sfdisk /dev/hda < hda.out</code> .<ref>{{cite web|url=http://linux.die.net/man/8/sfdisk |title=sfdisk(8) - Linux man page}}</ref> == See also == * [[BIOS Boot partition]] * [[BIOS interrupt call]] * [[Boot loader]] * [[Disk cloning]] * [[EFI System partition]] * [[GNU Parted]] * [[GUID Partition Table]] A more modern partitioning scheme, replacing the purpose of the MBR * [[Recovery disc]] * [[Rigid Disk Block]] The partitioning standard for [[Amiga]] and compatible computers. * [[Volume boot record]] == References == {{Reflist}} == Further reading == * {{Cite web|url=http://www.yale.edu/pclt/BOOT/PARTITIO.HTM|title=Partitions and Volumes|work=PC Lube & Tune|author=H. Gilbert}} * {{Cite web|url=http://www.rayknights.org/pc_boot/pc_boot.htm|title=Ray's Place|work=MBR and Windows Boot Sectors (includes code disassembly and explanations of boot process)|author=Ray Knights}} * {{Cite web|url=http://www.ata-atapi.com/hiwmbr.html|title=Master Boot Record|work=How It Works|author=Hale Landis}} * {{Cite web|url=http://thestarman.pcministry.com/asm/mbr/index.html|title=MBRs (Master Boot Records)|work=Boot Records Revealed!|author=Daniel B. Sedory}} [http://mirror.href.com/thestarman/asm/mbr/index.html (Mirror site)] [http://thestarman.narod.ru/asm/mbr/index.html (Another mirror site)] * {{Cite web|url=http://www.cpqlinux.com/mbr.html|title=Understanding and Working with the MBR|work=www.cpqlinux.com}} * {{Cite web|url=http://thestarman.pcministry.com/asm/mbr/GRUB.htm|title=The GRUB MBR|work=A Disk Editor View and Comments on the Code|author=the starman}} == External links == {{External links|date=October 2009}} * [http://wiki.osdev.org/MBR_(x86) Article on Master Boot Record] * [http://mirror.href.com/thestarman/asm/mbr/STDMBR.htm Standard MBR code dissasembly] * [http://www.mbrwizard.com/ MBRWizard! The MBR Management Utility] - freeware for Linux and Windows * [http://www.cgsecurity.org/wiki/TestDisk TestDisk - powerful free MBR 