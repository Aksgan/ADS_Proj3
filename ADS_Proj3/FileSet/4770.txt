which implements the [[Textile (markup language)|Textile]] markup language. * the ''Sandbox'', a library for managing several Ruby environments in a single process. * ''Syck'', a [[YAML]] library for [[C Programming Language|C]], Ruby, and several other languages. Syck has been a part of standard Ruby libraries<ref>[http://stdlib.rubyonrails.org/libdoc/syck/rdoc/index.htmlRuby Standard Library documentation for Syck]{{Dead link|date=October 2009}}</ref> since Ruby version 1.8.0. * ''[[Shoes (GUI toolkit)|Shoes]]'', a UI toolkit "for Making Web-like Desktop Apps"<ref>InfoQ: [http://www.infoq.com/news/2007/09/ruby-shoes Ruby Shoes for lightweight GUIs, graphics and animation]</ref><ref>O'Reilly Network: [http://www.oreillynet.com/pub/a/ruby/2008/01/14/shoes-meets-merb-interfacing-a-gtk2-front-end-and-a-rails-web-service.html Shoes Meets Merb: Driving a GUI App through Web Services in Ruby]</ref> * ''unHoly'' A Ruby-bytecode-to-Python-bytecode converter, for running Ruby applications on the Google application engine. * ''potion'', a tiny, fast programming language with a JIT compiler, closure support and an object model built around mixins. * ''bloopsaphone'', a crossplatform chiptune-like synth, based on [[PortAudio]] with a Ruby frontend. ===Art=== He has illustrated [[Ruby (programming language)|The Ruby Programming Language]], authored by [[David Flanagan]] and [[Yukihiro Matsumoto]].<ref>{{cite book | publisher=O'Reilly Media | author=David Flanagan, Yukihiro Matsumoto | url=http://oreilly.com/catalog/9780596516178/ | title=The Ruby Programming Language | isbn=978-0596516178}}</ref> He also dedicates his illustration every year to [[RubyKaigi]], the biggest Ruby conference in Japan, similar to ''RubyConf''. In March 2009, he was a speaker at the [[Art and Code]] conference at [[Carnegie Mellon University]]. <ref>{{cite web|url=http://vimeo.com/5047563 |title=Art && Code Symposium: Hackety Hack, why the lucky stiff |publisher=Vimeo.com |date=March 2009 |accessdate=2010-07-17}}</ref> ==References== {{Reflist|2}} ==External links== * [http://www.vimeo.com/5047563 A video of _why's public lecture at the Art and Code Conference], March 2009 * [http://podcast.rubyonrails.com/programs/1/episodes/the_camping_episode Episode of the Ruby on Rails Podcast about Camping] * [http://code.whytheluckystiff.net/ A list of _why's open-source projects] (which points to a new [http://github.com/why location for source code]) * [http://www.rubyinside.com/shoes-roundup-ruby-gui-app-development-goodness-597.html Shoes Roundup: Ruby GUI App Development Goodness, lists a few resources for Ruby/Shoes development] * [http://mislav.uniqpath.com/poignant-guide/soundtrack/ Soundtrack for the book, ''Why's (poignant) Guide to Ruby''] * [http://redhanded.hobix.com/ RedHanded], a defunct blog dedicated to Ruby culture * [http://jp.rubyist.net/RubyKaigi2008/?Goodies RubyKaigi2008 Goodies], _why's illustration used in RubyKaigi2008 (Japanese page) * [http://jp.rubyist.net/RubyKaigi2007/Goodies.html RubyKaigi2007 Goodies], _why's illustration(s) used in RubyKaigi2007 (Japanese page) * [http://www.zedshaw.com/blog/2009-08-19.html The Impermanence, Karma, and Bad Behavior of Why The Lucky Stiff], Zed Shaw's analysis of _why's departure from the online community * [http://viewsourcecode.org/why _why's estate] * [http://whyday.org/ WhyDay 19 August 2010] {{Persondata <!-- Metadata: see [[Wikipedia:Persondata]]. --> | NAME = Stiff, Why The Lucky | ALTERNATIVE NAMES = | SHORT DESCRIPTION = | DATE OF BIRTH = | PLACE OF BIRTH = | DATE OF DEATH = | PLACE OF DEATH = }} {{DEFAULTSORT:Stiff, Why The Lucky}} [[Category:American bloggers]] [[Category:Free software programmers]] [[Category:Computer programmers]] [[Category:Living people]] [[Category:Ruby programming language]] [[Category:Year of birth missing (living people)]] [[Category:American technology writers]] [[Category:American Internet personalities]] [[fr:Why the lucky stiff]] [[it:Why the lucky stiff]]</text> </page> <page> <id>40094</id> <title>Wi-Fi Protected Setup</title> <text>{{tone|date=January 2011}} {{unreferenced|date=December 2010}} '''Wi-Fi Protected Setup''' ('''WPS''') is a standard for easy and secure establishment of a wireless home network, created by the [[Wi-Fi Alliance]] and officially launched on January 8, 2007. The goal of the WPS protocol is to simplify the process of configuring security on [[wireless networks]], thus it was first named 'Wi-Fi Simple Config'. The [[Protocol (computing)|protocol]] is meant to allow home users who know little of wireless security and may be intimidated by the available security options to configure [[Wi-Fi Protected Access]], which is supported by all Wi-Fi certified devices. The [[Standardization|standard]] achieves its goal by putting much emphasis into [[usability]] and [[security]], and the concept is implemented through four usage models that enable a user to establish a [[home network]]. Thus adding a new device to the Network provides the user with up to the following four choices: # PIN Method, in which a PIN (Personal Identification Number) has to be read from either a sticker on the new [[Station (networking)|wireless client device (STA)]] or a display, if there is one, and entered at the "representant" of the Network, either the [[wireless access point|wireless access point (AP)]] or a Registrar of the Network, cf below the Protocol Architecture.<br>This is the mandatory baseline model; every Wi-Fi Protected Setup certified product must support it. # PBC Method, in which the user simply has to push a button, either an actual or virtual one, on both the [[Wireless access point|AP]] (or a Registrar of the Network) and the new wireless client device (STA).<br>Support of this model is mandatory for APs and optional for STAs. # NFC Method, in which the user simply has to bring the new STA close to the AP or Registrar of the Network to allow a [[Near Field Communication]] between the devices. NFC Forum compliant [[RFID]] tags can also be used.<br>Support of this model is optional. # USB Method, in which the user uses a [[Universal Serial Bus|USB]] [[USB flash drive|stick]] to transfer data between the new STA and the AP or Registrar of the Network.<br>Support of this model is optional. The last two models are usually referred as [[Out-of-band]] methods as there is a transfer of information by another channel than the Wi-Fi channel itself. Note that only the first two modes (PIN/PBC) are currently covered by the Wi-Fi Protected Setup Certification. The USB method has been deprecated and is not part of the certification testing. This page addresses the common scenario involving an Infrastructure Network. IBSS will be supported with extensions that are being developed for WPS. ==Protocol Architecture== The WPS protocol defines three types of devices in a network: *Registrar: A device with the authority to issue and revoke credentials to a network. A Registrar may be integrated into an [[Wireless access point|AP]], or it may be separate from the [[Wireless access point|AP]]. *Enrollee: A device seeking to join a [[wireless LAN]] network. *AP: An [[Wireless access point|AP]] functioning as a proxy between a Registrar and an Enrollee. The WPS standard defines three basic scenarios that involve these components: # AP with internal registrar capabilities configures an Enrollee STA. In this case, the session will run on the wireless medium as a series of [[Extensible Authentication Protocol|EAP]] request/response messages, ending with the [[Wireless access point|AP]] disassociating from the STA and waiting 