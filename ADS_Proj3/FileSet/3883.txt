uses no motors for locomotion, instead employing passive-dynamic technology. Passive-dynamic systems cite low power consumption, high durability, and low cost. The design is based on the skeletal structure of the [[human body]], consisting of two legs with hip, knee, and ankle joints, each representing 1 [[degrees of freedom (engineering)|degree of freedom]] (DOF). Movement is accomplished with the aid of [[gravity]] (walking down a slope) or by minimal actuation to enable the machine to walk on level ground. SIGMO was developed using proven methods of gravity-driven passive dynamic bipeds. Small actuators were added to the legs to provide walking capability on level ground. This method of locomotion is very energy efficient because it uses no motors for walking. The omission of motors also cites a drastic weight reduction, further enhancing the locomotive efficiency. This also frees up room inside the torso for the circuitry that controls SIGMO's movements, unlike other robots that require a "backpack" like attachment. SIGMO has an upper torso which mimics the movements of actual humans. The arms are motorized with small [[servo motors]] which enable SIGMO to manipulate objects within its grasp. The main chassis is fabricated of [[aluminum]] sheet metal, which has a high strength and light weight. The [[knee]] sockets are fabricated out of steel and [[aluminum]]. While the [[steel]] weighs more than the [[aluminum]], this helps to transfer the weight load from the torso (contains heavy [[Servomechanism|servo]] components) to the legs and feet which rest on the ground. An updated model of SIGMO, currently in the research and development stage, will incorporate more precise control over limb movement and directional stability. To add more functionality SIGMO will have more motors, but use each more efficiently than previous designs. Knowledge of actuation techniques gained from previous experiments will be applied to reduce complexity and maintain an efficient method of locomotion. A framework is in development to allow multiple configurations of the robot to lower production costs over time and increase flexibility of design during testing. The robust internal [[skeleton]] will be modifiable to serve as a platform for future designs. Intelligent maneuvering will also be tested with the new prototype to develop efficient [[algorithm]]s and control models for both simple and complex environments. ==External links == * [http://www.danshope.com/robotics/projects/sigmo/introduction.php SIGMO Robotic Developments] * [http://ruina.tam.cornell.edu/research/ Cornell Research Lab] {{DEFAULTSORT:Sigmo}} [[Category:Humanoid robots]]</text> </page> <page> <id>32830</id> <title>SIGTTIN</title> <text>{{Unreferenced|date=December 2009}} {{Infobox Computing signal |description = [[Teletypewriter|Tty]] input for background process |action = Suspends the process }} On [[POSIX]]-compliant platforms, '''SIGTTIN''' is the [[Signal (computing)|signal]] sent to a [[process (computing)|process]] when it attempts to read from the [[teletypewriter|tty]] while in the background. The [[C preprocessor|symbolic constant]] for SIGTTIN is defined in the [[header file]] <code>signal.h</code>. Symbolic signal names are used because signal numbers can vary across platforms. ==Etymology== ''SIG'' is a common [[Prefix (linguistics)|prefix]] for signal names. ''TT'' is for ''tty'', an abbreviation for ''[[teletypewriter]]'', an archaic type of [[computer terminal]]. ''IN'' refers to [[Input/output|input]]. ==Usage== SIGTTIN may be sent to a background process that attempts to read from its [[controlling terminal]]. In practical terms this controlling terminal is usually an interactive terminal session at which the user initiated the background job. The default action of SIGTTIN is to stop the process. Background processes thus suspended can be placed into the foreground to accept input by the [[Unix shell|shell]] using the [[fg (Unix)|''fg'' command]] or by sending them the [[SIGCONT]] signal. The SIGTTIN signal provides an alternative to this reliance on human interaction. On receiving the SIGTTIN, for instance, an appropriately coded program may opt to perform a default action rather than waiting for a human user to foreground it and respond. Typically this signal applies to processes under [[job control (Unix)|job control]]; [[daemon (computer software)|daemons]] do not have controlling terminals and should never receive this signal. ==See also== * [[SIGTTOU]] - a corresponding signal received if a background process tries to write to its controlling terminal. {{Computing signals}} {{DEFAULTSORT:Sigttin}} [[ru:SIGTTIN]]</text> </page> <page> <id>32833</id> <title>SIGUNUSED</title> <text>{{Unreferenced|date=December 2009}} {{Infobox Computing signal |name = SIGUNUSED (non-POSIX) |description = Unused signal |action = Abnormal termination of the process }} On some [[Unix-like]] platforms, '''SIGUNUSED''' is a [[Signal (computing)|signal]] that has no purpose at present but is intended for future use. The [[C preprocessor|symbolic constant]] for SIGUNUSED is defined in the [[header file]] <code>signal.h</code>. Symbolic signal names are used because signal numbers can vary across platforms. ==Etymology== ''SIG'' is a common [[Prefix (linguistics)|prefix]] for signal names. ''UNUSED'' is the word ''unused''. ==Usage== In [[Linux]] 2.6 on the [[x86]], [[PowerPC]] and [[SuperH]] [[computer architecture|architectures]], signal 31 is designated for future use as [[SIGSYS]]; since SIGSYS is currently unimplemented, the signal number is temporarily assigned to SIGUNUSED instead. {{Computing signals}} {{DEFAULTSORT:Sigunused}} [[ru:SIGUNUSED]]</text> </page> <page> <id>32846</id> <title>SIMPLE algorithm</title> <text>In [[computational fluid dynamics]] (CFD), '''SIMPLE algorithm''' is a widely used [[numerical algorithm|numerical procedure]] to solve the [[Navier-Stokes equation]]s. ''SIMPLE'' is an acronym for Semi-Implicit Method for Pressure Linked Equations. The SIMPLE algorithm was developed by Prof. [[Brian Spalding]] and his student [[Suhas Patankar|S V Patankar]] at [[Imperial College London|Imperial College]], London in the early 1970s. Since then it has been extensively used by many researchers to solve different kinds of fluid flow and heat transfer problems.<ref>[https://engineering.purdue.edu/ME608/webpage/project-reports/SIMPLE-DrivenCavity.pdf SIMPLE solver for driven cavity flow problem]</ref><ref>[http://www.opensourcecfd.com/conference2008/2007/media/proceedings/OFIC-07_ManganiLuca.pdf?phpMyAdmin=f7f6d5b5be922e9db00b8b978b532798 Heat transfer applications in turbomachinery]</ref> Many popular books on computational fluid dynamics discuss the SIMPLE algorithm in detail.<ref>{{cite book |last=Patankar |first=S. V. | authorlink = Suhas Patankar |title=Numerical Heat Transfer and Fluid Flow |publisher=[[Taylor & Francis]] |year=1980 |isbn=978-0891165224}}</ref><ref>{{cite book |last=Ferziger |first=J. H. | authorlink = J. H. Ferziger |coauthors = Peric, M. |title=Computational Methods for Fluid Dynamics|publisher=[[ Springer-Verlag]] |year=2001 |isbn= 978-3540420743}}</ref> This algorithm forms the basis of Commercial CFD packages.<ref>[http://www.fluent.com/about/cfdhistory.htm History of CFD]</ref> A modified variant is the '''SIMPLER Algorithm''' (SIMPLE Revised), that was [[1979]] introduced by [[Suhas Patankar|Patankar]]. ==References== {{reflist}} [[Category:Computational fluid dynamics]] [[Category:Computational physics]] [[de:SIMPLE (Mathematik)]] [[zh:SIMPLE算法]]</text> </page> <page> <id>32868</id> <title>SL (complexity)</title> <text>In [[computational complexity theory]], '''SL''' ('''Symmetric Logspace''' or '''Sym-L''') is the [[complexity class]] of problems [[log-space reducible]] to '''USTCON''' (''undirected s-t connectivity''), which is the problem of determining whether there exists a 