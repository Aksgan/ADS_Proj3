the run-times below are applicable for all the 5 notations. {|class="wikitable sortable" !Name !! Best !! Average !! Worst<br /> !! Memory !! Stable !! Method<br /> !! width="350"|Other notes <!-- Sorting Guide: 00 - constant, 05 - lg(n), 10 - n^c (0 < c < 1), 15 - n, 20 - n*lg(n) or lg(n!), 25 - n^2, 30 - n^c (c < 1), 40 - c^n (c > 1) 45 - n! 50 - miscellaneous --> |- align="center" |[[Insertion sort]] |style="background:#ddffdd"|{{Sort|15|<math> \mathcal{} n </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ddffdd"| Yes | Insertion |align=left| Average case is also <math>\mathcal{O}\left( {n + d} \right)</math>, where ''d'' is the number of [[Permutation_groups#Transpositions.2C_simple_transpositions.2C_inversions_and_sorting|inversions]] |- align="center" |[[Shell sort]] |style="background:#ddffdd"|{{Sort|15|<math>\mathcal{} n</math>}} |style="background:#ffffdd"|{{Sort|23|<math>\mathcal{} n {\log}^2 n</math><br /><br /><math>\mathcal{} or</math><br /><br /><math>\mathcal{} n^{3/2}</math>}} |style="background:#ffffdd"|{{Sort|23|depends on gap sequence. Best known: <math>O(n\log^2 n)</math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} 1</math>}} |style="background:#ffdddd"| No | Insertion |align=left| |- align="center" |[[Binary tree sort]] |style="background:#ddffdd"|{{Sort|15|<math>\mathcal{} n</math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ffdddd"|{{Sort|15|<math>\mathcal{} n </math>}} |style="background:#ddffdd"| Yes | Insertion |align="left"| When using a [[self-balancing binary search tree]] |- align="center" |[[Cycle sort]] |{{Sort|50|&mdash;}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ffdddd"| No | Insertion |align=left| In-place with theoretically optimal number of writes |- align="center" |[[Library sort]] |{{Sort|50|&mdash;}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|15|<math>\mathcal{} n </math>}} |style="background:#ddffdd"| Yes | Insertion |align=left| |- align="center" |[[Patience sorting]] |{{Sort|50|&mdash;}} |{{Sort|50|&mdash;}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} |style="background:#ffdddd"|{{Sort|15|<math>\mathcal{} n</math>}} |style="background:#ffdddd"| No | Insertion & Selection | align="left" | Finds all the [[longest increasing subsequence]]s within O(''n'' log ''n'') |- align="center" |[[Timsort]] |style="background:#ddffdd"|{{Sort|15|<math>\mathcal{} {n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math> \mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math> \mathcal{} {n \log n} </math>}} |style="background:#ffdddd"|{{Sort|15|<math> \mathcal{} n </math>}} |style="background:#ddffdd"| Yes | Insertion & Merging | align="left" | <math>\mathcal{} {n} </math> comparisons when the data is already sorted or reverse sorted. |- align="center" |[[Selection sort]] |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ffdddd"| No | Selection |align=left| Its stability depends on the implementation. Used to sort this table in Safari or other Webkit web browser [http://svn.webkit.org/repository/webkit/trunk/JavaScriptCore/runtime/ArrayPrototype.cpp]. |- align="center" |[[Heapsort]] |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ffdddd"| No | Selection | align="left" | |- align="center" |[[Smoothsort]] |style="background:#ddffdd"|{{Sort|15|<math>\mathcal{} {n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ffdddd"| No | Selection | align="left" |An [[adaptive sort]] - <math>\mathcal{} {n} </math> comparisons when the data is already sorted, and 0 swaps. |- align="center" |[[Strand sort]] |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} |style="background:#ffdddd"|{{Sort|25|<math>\mathcal{} n^2</math>}} |style="background:#ffdddd"|{{Sort|15|<math>\mathcal{} n</math>}} |style="background:#ddffdd"| Yes | Selection | align="left" | |- align="center" |[[Tournament sort]] |{{Sort|50|&mdash;}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} | | | Selection | align="left" | |- align="center" |[[Bubble sort]] |style="background:#ddffdd"|{{Sort|15|<math>\mathcal{} n</math>}} |style="background:#ffdddd"|{{Sort|25|<math>\mathcal{} n^2</math>}} |style="background:#ffdddd"|{{Sort|25|<math>\mathcal{} n^2</math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1}</math>}} |style="background:#ddffdd"| Yes <!-- Dispute earlier No. Equal values are never swapped, so they never get out of order --> | Exchanging |align=left| Tiny code size |- align="center" |[[Cocktail sort]] |style="background:#ddffdd"|{{Sort|15|<math>\mathcal{} n</math>}} |style="background:#ffdddd"|{{Sort|25|<math>\mathcal{} n^2</math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ddffdd"| Yes | Exchanging |align=left| |- align="center" |[[Comb sort]] |{{Sort|50|&mdash;}} |{{Sort|50|&mdash;}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ffdddd"| No | Exchanging |align="left"|Small code size |- align="center" |[[Gnome sort]] |style="background:#ddffdd"|{{Sort|25|<math> \mathcal{} n </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ddffdd"| Yes | Exchanging |align=left| Tiny code size |- align="center" |[[Merge sort]] |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} {n \log n} </math>}} |style="background:#ffdddd"|{{Sort|50|Depends}} |style="background:#ddffdd"| Yes | Merging | align="left" | Used to sort this table in Firefox [http://mxr.mozilla.org/seamonkey/source/js/src/jsarray.c]. |- align="center" |nowrap|[[In-place]] [[merge sort]] |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ffdddd"|{{Sort|25|<math> \mathcal{} n^2 </math>}} |style="background:#ddffdd"|{{Sort|00|<math>\mathcal{} {1} </math>}} |style="background:#ffffdd"| Depends | Merging | align="left" | Example implementation here: [http://citeseer.ist.psu.edu/472110.html]; can be implemented as a stable sort based on stable in-place merging: [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.54.8381] |- align="center" |[[Quicksort]] |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} |style="background:#ffdddd"|{{Sort|25|<math>\mathcal{} n^2</math>}} |style="background:#ffffdd"|{{Sort|05|<math>\mathcal{} \log n</math>}} |style="background:#ffffdd"| Depends | Partitioning | align="left" | Can be implemented as a stable sort depending on how the pivot is handled.{{citation needed|date=December 2010}}<!-- implies in place stable quicksort exists. Stable O(n) space exists; in place O(log(n)) space exists; combination? --> [[Naïve algorithm|Naïve]] variants use <math>\mathcal{O} \left( n \right)</math> space |- align="center" |[[Introsort]] |{{Sort|50|&mdash;}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} |style="background:#ddffdd"|{{Sort|20|<math>\mathcal{} n \log n</math>}} |style="background:#ffffdd"|{{Sort|05|<math>\mathcal{} \log n</math>}} |style="background:#ffdddd"| No | Partitioning & Selection |align="left"| Used in [[Silicon Graphics|SGI]] [[Standard Template Library|STL]] implementations |- align="center" |[[Bogosort]] |style="background:#ddffdd"|{{Sort|15|<math> \mathcal{} n </math>}} |style="background:#ffdddd"|{{Sort|45|<math> \mathcal{} n! </math>}} |style="background:#ffdddd"|{{Sort|45|<math> \mathcal{} {n! \to Infinity} </math>}} |style="background:#ddffdd"|{{Sort|00|<math> \mathcal{} {1} </math>}} |style="background:#ffdddd"| No | Luck | align="left" | Randomly permute the array and check if sorted. |} The following table describes sorting algorithms that are not [[comparison sort]]s. As such, they are not limited by a <math>\Omega\left( {n \log n} \right)</math> lower bound. Complexities below are in terms of ''n'', the number of items to be sorted, ''k'', the size of each key, and ''d'', the digit size used by the implementation. Many of them are based on the assumption that the key size is large enough that all entries have unique key values, and hence that ''n'' << 2<sup>''k''</sup>, where << means "much less than." {|class="wikitable sortable" !Name !! Best !! Average !! Worst<br /> !! Memory<br /> !! Stable !! ''n'' << 2<sup>''k''</sup> !! Notes<br /> |- align="center" |[[Pigeonhole sort]] |{{Sort|03|&mdash;}} |style="background:#ddffdd"|<math>\;n + 2^k</math> |style="background:#ddffdd"|<math>\;n + 2^k</math> |<math>\;2^k</math> |style="background:#ddffdd"| Yes | Yes | |- align="center" |[[Bucket sort]] |{{Sort|03|&mdash;}} |style="background:#ddffdd"|<math>\;n+k</math> |style="background:#ffdddd"|<math>\;n^2 \cdot k</math> |<math>\;n \cdot k</math> |style="background:#ddffdd"| Yes | No | Assumes uniform distribution of elements from the domain in the array. |- align="center" |[[Counting sort]] |{{Sort|03|&mdash;}} |style="background:#ddffdd"|<math>\;n+r</math> |style="background:#ddffdd"|<math>\;n+r</math> |<math>\;n+r</math> |style="background:#ddffdd"| Yes | Yes |r is the range of numbers to be sorted. If r = <math>\mathcal{O}\left( {n} \right)</math> then Avg RT = <math>\mathcal{O}\left( {n} \right)</math> |- align="center" |[[Radix sort#Least significant digit radix sorts|LSD Radix Sort]] |{{Sort|03|&mdash;}} |style="background:#ddffdd"|<math>\;n \cdot \frac{k}{d}</math> |style="background:#ddffdd"|<math>\;n \cdot \frac{k}{d}</math> |<math>\mathcal{} n </math> |style="background:#ddffdd"| Yes | No | |- align="center" |[[Radix sort#Most significant digit radix sorts|MSD Radix Sort]] 