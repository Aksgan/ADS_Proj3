capabilities. This means that any simulation may contain components that are analog, event driven (digital or sampled-data), or a combination of both. An entire mixed [[signal analysis]] can be driven from one integrated schematic. All the digital models in CircuitLogix provide accurate specification of propagation time and rise/fall time delays. The event driven [[algorithm]] used by CircuitLogix is general purpose and supports non-digital types of data. For example, elements can use real or [[integer]] values to simulate DSP functions or sampled data filters. Because the event driven algorithm is faster than the standard SPICE matrix, simulation time is greatly reduced for circuits that use event driven models in place of analog models. Mixed-mode simulation is handled on three levels by CircuitLogix: (a) with primitive digital elements that use timing models and a built-in 12-state digital logic simulator, (b) with subcircuit models that use the actual transistor [[topology]] of the [[integrated circuit]], and finally, (c) with In-line [[Boolean logic]] expressions. These two modeling techniques use SPICE to solve a problem while the third method, digital primitives, use mixed-mode capability. == Component library == The component library includes: ; [[Semiconductors]]: Semiconductor Resistors & [[Capacitors]], [[Diodes]], Schottky & [[Zener Diode]]s, [[Bridge rectifier]]s, [[Varactor]] ; [[Displays]], indicators, [[switches]]: [[LEDs]], 7-Segment LEDs, Hex display, Hex key, Logic display, [[normally closed|NC]] [[push-button]], [[normally open|NO]] push button, SPDT PB, Piezo buzzer, Pulser, Latch coil, Polar latch, Rocket, SCOPE, Stepper, Stoplight, Window ; Digital primitives: Gates, [[DeMorgan]] symboled gates, buffers, inverters, flip-flops ; Digital ICs: 1K RAM, 32x8 PROM, complete selection of 40xx, 41xx, 45xx, 47xx, 74xxx IC's ; Linear ICs: [[Op Amp]]s, [[Comparator]]s, Timers, Buffers, CDAs, [[Modulator]]s, [[Analog-to-digital converter|A/D converter]]s & [[Digital-to-analog converter|D/A converter]]s, [[PLL]], [[Voltage-controlled oscillator|VCO]] ; [[Transistors]], [[FET]]: [[BJT]], [[IGBT]], [[UJT]], PUT, [[MESFET]], [[MOSFET]], [[Darlington transistor]] ; [[Relays]]: [[Control relay]], SPST, DPDT, Individual contacts and coils (enable creation of any relay) ; Supplies, Sources: [[Battery (electricity)|Battery]], Voltage Terminal, [[Signal generator]], I Source, V Source, I->I Source, V->I Source, I->Switch,V->Switch, I->V Source, V->V Source ; Math devices: A wide variety of devices for manipulating quantities ; Miscellaneous Devices: Crystals, [[Fuse (electrical)|Fuses]], [[Transformer]]s, [[DC Motor]], F-V & V-F converters ; [[Transmission lines]]: Lossless, Lossy, and Uniform Distributed RC ; [[Vacuum Tubes]]: 12AU7, 12AX7, 5879, 6L6GC, 6SN7, 7199P, 7199T ; Instruments: [[Oscilloscope]], Digital [[Multimeter]], [[Bode plotter]], [[Curve tracer]], Data Sequencer, Signal generator, [[Logic analyzer]], [[Logic probe]], Logic Pulser ; Simulation Controls: Initial Condition and Nodeset devices ; Miscellaneous: [[Optoisolator]]s, [[Photodiodes]], [[Voltage regulator]]s, References, SCRs, Triacs ==See also== * [[Comparison of EDA Software]] ==References== <references /> ==External links== * [http://www.CircuitLogix.com CircuitLogix website - www.CircuitLogix.com] * [http://www.ETcourse.com Electronics Technician distance education program website - www.ETcourse.com] [[Category:Electronic design automation software]] [[Category:Simulation programming languages]] [[Category:Electronic circuit simulators]] [[bn:সার্কিটলজিক্স]]</text> </page> <page> <id>6277</id> <title>Circuit ID</title> <text>{{Multiple issues|orphan=September 2006|context=July 2009|wikify=July 2009|unreferenced=July 2009}} A '''circuit ID''' is a company specific identifier assigned to a data or voice network between two locations. This circuit is then leased to a customer by that id. If and when a subscriber has an issue with a circuit, the subscriber contacts the telecommunications provider to provide this circuit id for action on the designated circuit. == Telecom Circuit ID Formats == The [[Local Exchange Carrier|LEC]] circuit ID's are based on Telcordia's Common Language Coding. At one time, the abbreviations were meaningful (i.e., HC for hi - capacity) but the complexity of the business no longer allows for it. XX/YYYY/000000/111/CC/SEG prefix/service code - service code modifier/serial #/suffix/company identifier/segment name * Prefix, set by administration areas for each company. They may or may not be based on [[Local access and transport area|LATA]] * Service code, the type of service this circuit is providing * Service code modifier, modifies the service code, often used for different billing options. * Serial number, 6 digit numeric identifier * Suffix, if a service has multiple legs or drops this will further identify the location. * Company identifier, identifies the controlling LEC. * Segment, the drop NAME for a multi - point circuit. Example: *73/HCGS/123456/000/NE is a T1 Circuit by New England Telephone *44/AQDU/987654/000/G4 is a HDSL Circuit by G4 Telecom == Service Codes == ===Qwest=== http://www.qwest.com/wholesale/systems/WebHelp/reference/circuit_id_formats_guide.htm Serial number format: AA/BBBB/CCCCCCC/DDD/EE/F *A Prefix: 1–2 alphanumeric characters. Optional. *B Service Code/Modifier: 2–4 Characters. Required. *C Serial Number: 1–4 digits. Required *D Suffix: 3 character suffix to the serial number. May be required. (Rarely used) *E CO (Company) Code: 2–4 alphabetic characters (NW, MS, PN) Required. *F Segment: 1–3 alphanumeric characters. Optional for point to point interfaces. Telephone Number Format: AA/BBBB/CCC/DDD/EEEE/FF/G *A Prefix: Alphanumeric characters. Required if it exists. *B Service Code & Modifier: 2–4 alphabetic characters. Required for non-DSL numbered circuits. *C NPA: 3 digits. This is a required field. *D NXX: 3 digits. This is a required field. *E Line: 4 digits. This is a required field *? Extension: 1–5 alphanumeric characters. This is an optional field. *F For states: AZ, CO, ID, MT, NM, UT, WY, alphas not accepted; convert D1 to 0001, D2 to 0002, etc. *G Segment: 1–3 alphanumeric characters. This is an optional field. rarely used {{DEFAULTSORT:Circuit Id}} [[Category:Network addressing]]</text> </page> <page> <id>6278</id> <title>Circuit breaker design pattern</title> <text>'''Circuit breaker''' is a [[Design pattern (computer science)|design pattern]] in modern [[software development]]. Circuit breaker is used to detect failures and encapsulates logic of preventing a failure to reoccur constantly (during maintenance, temporary external system failure or unexpected system difficulties). ==Common Uses== Your application connects to a [[database]] 100 times per second and the database fails. You do not want to have the same error reoccur constantly. You also want to handle the error quickly and gracefully without waiting for [[TCP connection]] timeout. Generally Circuit Breaker can be used to check the availability of an external service. An external can be a database server or a web service used by the application. [[Circuit breaker]] detects failures and prevents the application from trying to perform the action that is doomed to fail (until its safe to retry). ==Implementation== The Circuit Breaker Design Pattern should be implemented asynchronously. The reason is to offload the logic to detect failures from 