that often means "Hide cursor". So CX=2607h is an invisible cursor. Some video cards have 16 scan lines, 00h-0Fh. Some video cards don't use bit 5 of CH. With these, make Start>End (e.g. CX=0706h) | |- | Set cursor position | AH = 02h BH = Page, DH = Row, DL = Column |- | Get cursor position and size | AH = 03h BH = Page | AX = 0, CH = Start scan line, CL = End scan line, DH = Row, DL = Column |- | Read [[light pen]] position (Does not work on [[VGA]] systems) | AH = 04h | AH = Status (0=not triggered, 1=triggered), BX = Pixel X, CH = Pixel Y, CX = Pixel line number for modes 0Fh-10h, DH = Character Y, DL = Character X |- | Select active display page | AH = 05h, AL = Page Number | |- | Scroll up window | AH = 06h AL = lines to scroll (0 = clear), BH = Blank lines attribute | |- | Scroll down window | AH = 07h Other : like above | |- | Read character and attribute at cursor position | AH = 08h, BH = Page Number | AH = Color, AL = Character |- | Write character and attribute at cursor position | AH = 09h, AL = Character, BH = Page Number, BL = Color, CX = Number of times to print character | |- | Write character only at cursor position | AH = 0Ah, AL = Character, BH = Page Number, BL = Color, CX = Number of times to print character | |- | Set background/border color | AH = 0Bh BH = 00h | |- | Set palette | AH = 0Bh BH = 01h | |- | Write graphics pixel | AH = 0Ch AL = Color, BH = Page, CX = x, DX = y | |- | Read graphics pixel | AH = 0Dh BH = Page, CX = x, DX = y | AL = Color |- | Teletype output | AH = 0Eh, AL = Character, BL = Color (only in graphic mode) | |- | Get current video mode | AH = 0Fh | AL = Video Mode |- | Write string (EGA+, meaning [[PC AT]] minimum) | AH = 13h AL = Write mode, BH = Page, BL = [[BIOS Color Attributes|Color]], CX = String length, DH = Row, DL = Column, ES:BP = Offset of string | |- |} ==References== *[http://www.ctyme.com/intr/int-10.htm Int 10h from Ralf Brown Interrupt List, online version] ==See also== *[[BIOS interrupt call]] *[[INT 13]] *[[mode 13h]] {{DEFAULTSORT:Int 10}} [[Category:BIOS]] [[Category:Interrupts]] [[es:Int 10h]] [[ko:INT 10]]</text> </page> <page> <id>17615</id> <title>IPMP</title> <text>{{about||the aroma compound known as IPMP found in wine|methoxypyrazines|the redundant IO technology|Multipath I/O|the Intellectual Property Management and Protection|MPEG-4}} '''IPMP''', or '''IP network multipathing''', is a facility provided by [[Solaris (operating system)|Solaris]] to provide fault-tolerance and load spreading for [[network interface card]]s (NICs). With IPMP, two or more NICs are dedicated for each network to which the host connects. Each interface is assigned a static "test" [[IP address]], which is used to assess the operational state of the interface. Each virtual IP address is assigned to an interface, though there may be more interfaces than virtual IP addresses, some of the interfaces being purely for standby purposes. When the failure of an interface is detected its virtual IP addresses are swapped to an operational interface in the group. The IPMP load spreading feature increases the machine's bandwidth by spreading the outbound load between all the cards in the same IPMP group. ''in.mpathd'' is the daemon in the Solaris OS responsible for IPMP functionality. == See also == *[[Multihoming]] *[[Common Address Redundancy Protocol]] == External links == * [http://www.enterprisenetworkingplanet.com/netsysm/print.php/3582566 Enterprise Networking Article, February 2, 2006] * [http://sunsolve.sun.com/search/document.do?assetkey=1-9-70062-1 Sun Solaris IPMP configuration guide (requires registration)] * [http://docs.sun.com/app/docs/doc/816-4554/ipmptm-1 IPMP section from Sun Solaris 10 System Administration Guide] {{Solaris}} [[Category:Networking standards]] [[Category:Sun Microsystems software]] {{compu-network-stub}} [[de:IPMP]]</text> </page> <page> <id>17617</id> <title>IPOPT</title> <text>'''IPOPT''', short for "'''I'''nterior '''P'''oint '''OPT'''imizer, pronounced I-P-Opt", is a [[software]] [[Library (computing)|library]] for large scale [[nonlinear optimization]] of continuous systems. It is written in [[Fortran]] and [[C (programming language)|C]] and is released under the [[Common Public License|CPL]]. IPOPT implements a [[primal-dual method|primal-dual]] [[interior point method]], and uses line searches based on [[Filter methods (optimization)|Filter methods]] (Fletcher and Leyffer). IPOPT can be called from various modeling environments and [[C (programming language)|C]]. IPOPT is part of the [[COIN-OR]] project. IPOPT is designed to exploit 1st and 2nd derivative ([[Hessian matrix|Hessians]]) information if provided (usually via [[automatic differentiation]] routines in modeling environments such as [[AMPL]]). If no Hessians are provided, IPOPT will approximate them using a [[quasi-Newton method]]s, specifically a [[BFGS method|BFGS update]]. It was originally developed by [http://www.research.ibm.com/people/a/andreasw/ Andreas Wächter], a former [[Ph.D.]] student in department of [[chemical engineering]] at [[Carnegie Mellon University]], under the supervision of [http://numero.cheme.cmu.edu/ Lorenz T. Biegler]. Arvind Raghunathan later created an extension to IPOPT for [[Mathematical programming with equilibrium constraints]] (MPEC) [http://epubs.siam.org/sam-bin/getfile/SIOPT/articles/42908.pdf]. This version of IPOPT is generally known as IPOPT-C (with the 'C' standing for 'complementarity'). While in theory any [[Mixed integer programming|mixed-integer program]] can be recast as an MPEC, it may or may not be solvable with IPOPT-C. Solution of MINLPs (Mixed-Integer Nonlinear Programs) using IPOPT is still being explored [http://egon.cheme.cmu.edu/IBM/page.htm] [https://projects.coin-or.org/Bonmin]. [http://www.che.tamu.edu/people/faculty/info?fid=73 Carl Laird] and Andreas Wächter are the developers of IPOPT 3.0, which is a re-implementation of IPOPT in [[C++]]. == External links == * [http://projects.coin-or.org/Ipopt IPOPT home page] * IPOPT is supported in [[AMPL]], [[APMonitor]], [[General Algebraic Modeling System|GAMS]], [[MATLAB]] and [[OpenOpt]] [[Category:Numerical software]] [[Category:Mathematical optimization software]] {{Compu-library-stub}}</text> </page> <page> <id>17618</id> <title>IPO Model</title> <text>[[Image:IPO-S Model.gif|right|frame|Input-Processing/Storage-Output Chart]] The '''Input-Process-Output Model''' also known as the ''IPO+S Model'' is a [[functional model]] and [[conceptual schema]] of a general [[system]]. An IPO chart identifies a program’s inputs, its outputs, and the processing steps required to transform the inputs into the outputs. == Overview == The IPO model has many interdisciplinary applications, and is used to convey systems [[fundamentals]] in 