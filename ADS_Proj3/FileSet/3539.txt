may also be located in special streams known as ''object streams''. This technique reduces the size of files that have large numbers of small indirect objects and is especially useful for ''Tagged PDF''. There are two layouts to the PDF files—non-linear (not "optimized") and linear ("optimized"). Non-linear PDF files consume less disk space than their linear counterparts, though they are slower to access because portions of the data required to assemble pages of the document are scattered throughout the PDF file. Linear PDF files (also called "optimized" or "web optimized" PDF files) are constructed in a manner that enables them to be read in a Web browser plugin without waiting for the entire file to download, since they are written to disk in a linear (as in page order) fashion.<ref name="pdf-ref">{{cite web |url=http://www.adobe.com/devnet/pdf/pdf_reference.html |title=Adobe Developer Connection: PDF Reference and Adobe Extensions to the PDF Specification |publisher=Adobe Systems Incorporated |accessdate=2010-12-13}}</ref> PDF files may be optimized using [[Adobe Acrobat]] software or [[QPDF]]. === Imaging model === The basic design of how [[graphics]] are represented in PDF is very similar to that of PostScript, except for the use of [[transparency (graphic)|transparency]], which was added in PDF 1.4. PDF graphics use a [[device independent]] [[Cartesian coordinate system]] to describe the surface of a page. A PDF page description can use a [[matrix (mathematics)|matrix]] to [[scale (ratio)|scale]], [[rotate]], or [[Shear mapping|skew]] graphical elements. A key concept in PDF is that of the ''graphics state'', which is a collection of graphical parameters that may be changed, saved, and restored by a ''page description''. PDF has (as of version 1.6) 24 graphics state properties, of which some of the most important are: * The ''current transformation matrix'' (CTM), which determines the coordinate system * The ''[[clipping path]]'' * The ''[[color space]]'' * The ''[[alpha compositing|alpha constant]]'', which is a key component of transparency ==== Vector graphics ==== Vector graphics in PDF, as in PostScript, are constructed with ''paths''. Paths are usually composed of lines and cubic [[Bézier curve]]s, but can also be constructed from the outlines of text. Unlike PostScript, PDF does not allow a single path to mix text outlines with lines and curves. Paths can be stroked, filled, or used for [[clipping path|clipping]]. Strokes and fills can use any color set in the graphics state, including ''patterns''. PDF supports several types of patterns. The simplest is the ''tiling pattern'' in which a piece of artwork is specified to be drawn repeatedly. This may be a ''colored tiling pattern'', with the colors specified in the pattern object, or an ''uncolored tiling pattern'', which defers color specification to the time the pattern is drawn. Beginning with PDF 1.3 there is also a ''shading pattern'', which draws continuously varying colors. There are seven types of shading pattern of which the simplest are the ''axial shade'' (Type 2) and ''radial shade'' (Type 3). <!-- Pictures desperately needed here! --> ==== Raster images ==== Raster images in PDF (called ''Image XObjects'') are represented by dictionaries with an associated stream. The dictionary describes properties of the image, and the stream contains the image data. (Less commonly, a raster image may be embedded directly in a page description as an ''inline image''.) Images are typically ''filtered'' for compression purposes. Image filters supported in PDF include the general purpose filters * '''ASCII85Decode''' a deprecated filter used to put the stream into 7-bit [[ASCII]] * '''ASCIIHexDecode''' similar to ASCII85Decode but less compact * '''FlateDecode''' a commonly used filter based on the [[DEFLATE]] or Zip algorithm * '''LZWDecode''' a deprecated filter based on [[LZW]] Compression * '''RunLengthDecode''' a simple compression method for streams with repetitive data using the [[Run-length encoding]] algorithm and the image-specific filters * '''DCTDecode''' a [[lossy]] filter based on the [[JPEG]] standard * '''CCITTFaxDecode''' a [[lossless]] filter based on the [[CCITT]] [[fax]] compression standard * '''JBIG2Decode''' a lossy or lossless filter based on the [[JBIG2]] standard, introduced in PDF 1.4 * '''JPXDecode''' a lossy or lossless filter based on the [[JPEG 2000]] standard, introduced in PDF 1.5 Normally all image content in a PDF is embedded in the file. But PDF allows image data to be stored in external files by the use of ''external streams'' or ''Alternate Images''. Standardized subsets of PDF, including [[PDF/A]] and [[PDF/X]], prohibit these techniques. ==== Text ==== Text in PDF is represented by ''text elements'' in page content streams. A text element specifies that ''characters'' should be drawn at certain positions. The characters are specified using the ''encoding'' of a selected ''font resource''. ===== Fonts ===== A font object in PDF is a description of a digital [[typeface]]. It may either describe the characteristics of a typeface, or it may include an embedded ''font file''. The latter case is called an ''embedded font'' while the former is called an ''unembedded font''. The font files that may be embedded are based on widely used standard digital font formats: '''[[PostScript fonts|Type 1]]''' (and its compressed variant '''CFF'''), '''[[TrueType]]''', and (beginning with PDF 1.6) '''[[OpenType]]'''. Additionally PDF supports the '''Type 3''' variant in which the components of the font are described by PDF graphic operators. <!--- Type 3 bit is awkward and should be cleaned up ---> ===== Encodings ===== Within text strings, characters are shown using ''character codes'' (integers) that map to glyphs in the current font using an ''encoding''. There are a number of predefined encodings, including ''WinAnsi'', ''MacRoman'', and a large number of encodings for East Asian languages, and a font can have its own built-in encoding. (Although the WinAnsi and MacRoman encodings are derived from the historical properties of the [[Microsoft Windows|Windows]] and [[Macintosh]] operating systems, fonts using these encodings work equally well on any platform.) PDF can specify a predefined encoding to use, the font's built-in encoding or provide a lookup table of differences to a predefined or built-in encoding (not recommended with TrueType fonts).<ref>{{cite web|url=http://www.adobe.com/devnet/acrobat/pdfs/pdf_reference_1-7.pdf |title=PDF Referencem Sixth Edition, version 1.7, table 5.11}}</ref> The encoding mechanisms in PDF were designed for Type 1 fonts, and the rules for applying them to TrueType fonts 