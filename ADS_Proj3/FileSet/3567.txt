The requirement that the initial terms of a primefree sequence be coprime is necessary for the question to be non-trivial. If we allow the initial terms to share a prime factor ''p'' (e.g., set ''a''<sub>1</sub> = ''xp'' and ''a''<sub>2</sub> = ''yp'' for some ''x'' and ''y'' both greater than 1), due to the [[distributivity|distributive property]] of [[multiplication]] it is obvious that ''a''<sub>3</sub> = (''x'' + ''y'')''p'' and more generally all subsequent value in the sequence will be multiples of ''p''. In this case, all the numbers in the sequence will be composite, but for a trivial reason. The order of the initial terms is also important. In [[Paul Hoffman (science writer)|Paul Hoffman]]'s biography of [[Paul Erdős]], ''[[The man who loved only numbers]]'', the Wilf sequence is cited but with the initial terms switched. The resulting sequence appears primefree for the first hundred terms or so, but term 138 is the 45-digit prime 439351292910452432574786963588089477522344721. {{OEIS2C|id=A108156}} gives other positions of prime numbers in the Wilf-Hoffman sequence. ==Other sequences== Several other primefree sequences are known: :''a''<sub>1</sub> = 331635635998274737472200656430763, ''a''<sub>2</sub> = 1510028911088401971189590305498785 (sequence [[OEIS:A083104|A083104]] in [[On-Line Encyclopedia of Integer Sequences|OEIS]]; Graham 1964), :''a''<sub>1</sub> = 62638280004239857, ''a''<sub>2</sub> = 49463435743205655 (sequence [[OEIS:A083105|A083105]] in [[On-Line Encyclopedia of Integer Sequences|OEIS]]; Knuth 1990), and :''a''<sub>1</sub> = 407389224418, ''a''<sub>2</sub> = 76343678551 (sequence [[OEIS:A082411|A082411]] in [[On-Line Encyclopedia of Integer Sequences|OEIS]]; Nicol 1999). The sequence of this type with the smallest known initial terms has :''a''<sub>1</sub> = 106276436867, ''a''<sub>2</sub> = 35256392432 (Vsemirnov 2004). == References == *{{cite journal | doi = 10.2307/2689243 | author = Graham, Ronald L. | authorlink = Ronald L. Graham | title = A Fibonacci-like sequence of composite numbers | journal = Mathematics Magazine | volume = 37 | year = 1964 | issue = 5 | url = http://www.math.ucsd.edu/~sbutler/ron/64_06_fibonacci.pdf | pages = 322–324 | jstor = 2689243}} *{{cite journal | doi = 10.2307/2691504 | author = Knuth, Donald E. | authorlink = Donald Knuth | title = A Fibonacci-like sequence of composite numbers | url = http://jstor.org/stable/2691504 | journal = Mathematics Magazine | volume = 63 | issue = 1 | pages = 21–25 | year = 1990 | id = {{MathSciNet | id = 1042933}}}} *{{cite journal | author = Nicol, John W. | title = A Fibonacci-like sequence of composite numbers | journal = Electronic Journal of Combinatorics | volume = 6 | issue = 1 | year = 1999 | pages = 44 | url = http://www.combinatorics.org/Volume_6/Abstracts/v6i1r44.html | id = {{MathSciNet | id = 1728014}}}} *{{cite journal | author = Vsemirnov, M. | title = A new Fibonacci-like sequence of composite numbers | journal = Journal of Integer Sequences | volume = 7 | year = 2004 | issue = 3 | pages = 04.3.7 | id = {{MathSciNet | id = 2110778}} | url = http://www.emis.ams.org/journals/JIS/VOL7/Vsemirnov/vsem5.pdf}} == External links == *[http://www.primepuzzles.net/problems/prob_031.htm Problem 31. Fibonacci- all composites sequence]. The prime puzzles and problems connection. *{{planetmath reference|id=7917|title=Primefree sequence}} *{{mathworld | title = Primefree Sequence | urlname = PrimefreeSequence}} [[Category:Integer sequences]] [[Category:Number theory]] [[Category:Recurrence relations]]</text> </page> <page> <id>29929</id> <title>Primitive data type</title> <text>{{Unreferenced|date=May 2009}} {{Expert-subject|Computer science|date=May 2009}} In [[computer science]], '''primitive data type''' can refer to either of the following concepts:{{Fact|date=May 2009}} * a ''basic type'' is a [[data type]] provided by a [[programming language]] as a basic building block. Most languages allow more complicated ''[[composite type]]s'' to be recursively constructed starting from basic types. * a ''built-in type'' is a data type for which the programming language provides built-in support. In most programming languages, all basic data types are built-in. In addition, many languages also provide a set of composite data types. Opinions vary as to whether a built-in type that is not basic should be considered "primitive".{{Fact|date=May 2009}} Depending on the language and its implementation, primitive data types may or may not have a one-to-one correspondence with objects in the computer's memory. However, one usually expects operations on basic primitive data types to be the fastest language constructs there are.{{Fact|date=May 2009}} Integer addition, for example, can be performed as a single machine instruction, and some [[central processing unit|processors]] offer specific instructions to process sequences of characters with a single instruction. In particular, the [[C (programming language)|C]] standard mentions that "a <nowiki>'plain'</nowiki> int object has the natural size suggested by the architecture of the execution environment". This means that <code>int</code> is likely to be 32 bits long on a 32-bit architecture. Basic primitive types are almost always [[value type]]s. Most languages do not allow the behavior or capabilities of primitive (either built-in or basic) data types to be modified by programs. Exceptions include [[Smalltalk]], which permits all data types to be extended within a program, adding to the operations that can be performed on them or even redefining the built-in operations. ==Overview== The actual range of primitive data types that is available is dependent upon the specific programming language that is being used. For example, in [[C (programming language)|C]], [[string (computer science)|strings]] are a composite but built-in data type, whereas in modern dialects of [[BASIC]] and in [[JavaScript]], they are assimilated to a primitive data type that is both basic and built-in. Classic basic primitive types may include: * [[character (computing)|Character]] (<code>character</code>, <code>char</code>); * [[integer (computer science)|Integer]] (<code>integer</code>, <code>int</code>, <code>short</code>, <code>long</code>, <code>byte</code>) with a variety of [[precision (computer science)|precisions]]; * [[Floating-point number]] (<code>float</code>, <code>double</code>, <code>real</code>, <code>double precision</code>); * [[fixed-point arithmetic|Fixed-point number]] (<code>fixed</code>) with a variety of [[precision (computer science)|precisions]] and a programmer-selected [[order of magnitude|scale]]. * [[Boolean datatype|Boolean]] having the values '''true''' and '''false'''. * [[reference (computer science)|Reference]] (also called a ''[[pointer (computing)|pointer]]'' or ''handle''), a small value referring to another object's address in memory, possibly a much larger one. More sophisticated types which can be built-in include: * [[Tuple]]s in [[ML (programming language)|ML]], [[Python (programming language)|Python]] * [[Linked list]]s in [[Lisp (programming language)|Lisp]] * [[Complex number]]s in [[Fortran]], [[C (programming language)#C99|C (C99)]], [[Lisp (programming language)|Lisp]], [[Python (programming language)|Python]], [[Perl 6]] * [[Rational number]]s in [[Lisp (programming language)|Lisp]], [[Perl 6]] * [[Hash table]]s in various guises, in [[Lisp (programming language)|Lisp]], [[Perl]], [[Python (programming language)|Python]], [[Lua (programming 