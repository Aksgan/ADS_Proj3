of the solution is straightforward. ===Use of try-and-check method=== [[File:tentaizu 4x4 example for inconsistency.png|thumb|left|alt=tentaizu_4x4_example_for_inconsistency|Figure 6: An example for try-and-check method]] At some cases, the player can set a variable cell as '''1''' and check if any inconsistency occurs. The example in Figure 6 shows an inconsistency check. The cell marked with an hidden object '''Δ''' is under the test. Its marking leads to the set all the variables (grayed cells) to be '''0'''. This follows the inconsistency. The clue cell marked red with value '''1''' does not have any remaining neighbor that can include a hidden object. Therefore, the cell under the test must not include a hidden object. In algebraic form we have two equations: :'''''a''''' '''+''' '''''b''''' '''+''' '''''c''''' '''+''' '''''d''''' '''= 1''' :'''''a''''' '''+''' '''''b''''' '''+''' '''''c''''' '''+''' '''''d''''' '''+''' '''''e''''' '''+''' '''''f''''' '''+''' '''''g''''' '''= 1''' Here '''''a''''', '''''b''''', '''''c''''', and '''''d''''' correspond to the top four grayed cells in Figure 6. The cell with '''''Δ''''' is represented by the variable '''''f''''', and the other two grayed cells are marked as '''''e''''' and '''''g'''''. If we set '''''f''''' '''= 1''', then '''''a''''' '''= 0''', '''''b''''' '''= 0''', '''''c''''' '''= 0''', '''''d''''' '''= 0''', '''''e''''' '''= 0''', '''''g''''' '''= 0'''. The first equation above will have the left hand side equal to '''0''' while the right hand side has '''1'''. A contradiction. Try-and-check may need to be applied consequently in more than one step on some puzzles in order to reach a conclusion. This is equivalent to [[Binary search algorithm|binary search algorithm]]<ref>Drozdek 2000</ref> to eliminate possible paths which lead to inconsistency. {{-}} ==Complexity== Because of binary variables, the equation set for the solution does not possess linearity property. In other words, the rank of the equation matrix may not always address the right complexity. The complexity of the this class of puzzles can be adjusted in several ways. One of the simplest method is to set a ratio of the number of the clue cells to the total number of the cells on the board. However, this may result a largely varying complexity range for a fixed ratio. Another method is to reduce clue cells based on some problem solving strategies step by step. The complex strategies may be enabled for high complexity levels such as subtracting an equation with another one, or the higher depth of try-and-check steps. When the board size increases, the range of the problem cases increases. The ratio of the number of hidden objects to the total number of cells affects the complexity of the puzzle too. ==See also== *[[Minesweeper (Windows)|Microsoft's Minesweeper]] *[[Minesweeper_(computer_game)|Minesweeper Computer Game]] == Notes == {{Reflist|2}} ==References== *Paul Halmos, ''Naive set theory''. Princeton, NJ: D. Van Nostrand Company, 1960. Reprinted by Springer-Verlag, New York, 1974. ISBN 0-387-90092-6 (Springer-Verlag edition). *Alexander Schrijver, ''Theory of Linear and Integer Programming''. John Wiley & Sons, 1986. Reprinted in 1999. ISBN 0-471-98232-6. *Adam Drozdek, ''Data Structures and Algorithms in C++'', Brooks/Cole, second edition, 2000. ISBN 0-534-37597-9. [[Category:Puzzles]] [[Category:Algebra]] [[Category:Variables]] [[Category:Equations]]</text> </page> <page> <id>4224</id> <title>Bochs</title> <text>{{Infobox software | logo = [[Image:Bochs.png|85px]] | screenshot = <!-- Deleted image removed: [[Image:Bochs for Windows displaying HAL91 (Linux).png|200px]] --> | caption = Bochs for [[Windows 2000|Windows]] displaying [[HAL91]] ([[Linux]]) | developer = Community based; owned by [[Mandriva]] | latest release version = 2.4.5 | latest release date = {{release date and age|2010|04|25}} | operating system = [[Cross-platform]] | programming language = [[C++]] | language = [[English (language)|English]] | status = Active | genre = [[Emulator]] | license = [[GNU Lesser General Public License]] | website = http://bochs.sourceforge.net/ }} '''Bochs''' (pronounced "box") is a portable [[x86]] and [[x86-64]] [[IBM PC compatible]] [[emulator]] and [[debugger]] mostly written in [[C++]] and distributed as [[free software]] under [[GNU Lesser General Public License]]. It supports emulation of the processor(s) (including [[protected mode]]), memory, disks, display, [[Ethernet]], [[BIOS]] and common hardware peripherals of [[IBM PC compatible|PCs]]. Many ''guest'' [[operating system]]s can be run using the emulator including [[DOS]], several versions of [[Microsoft Windows]], [[BSD]]s, [[Linux]], [[Xenix]] and [[Rhapsody (operating system)|Rhapsody]] (precursor of Mac OS X). Bochs can run on many ''host'' operating systems, like [[Microsoft Windows|Windows]], [[Windows Mobile]], [[Linux]], [[Mac OS X]] and [[iOS (Apple)|iOS]]. Bochs is mostly used for operating system development (when an emulated operating system [[Crash (computing)|crashes]], it does not crash the host operating system, so the emulated OS can be [[debugging|debugged]]) and to run other guest operating systems inside already running host operating systems. It can also be used to run older software – such as PC games – which will not run on non-compatible, or too fast computers. == History == Bochs started as a program with a commercial license, at the price of 25 [[United States dollar|USD]], for use as-is. If a user needed to link it to other software, that user would have to negotiate a special license. That changed on 22 March 2000, when Mandrakesoft (now [[Mandriva]]) bought Bochs from lead-developer Kevin Lawton and released it for [[Linux]] under the [[GNU Lesser General Public License]]<ref>{{cite web|title=MandrakeSoft buys Bochs for Linux and commits it to Open Source|url=http://lwn.net/2000/0323/a/mand-bochs.html}}</ref>. == Use == Bochs can emulate the hardware needed by the guest operating system, including hard drives, CD drives, and floppy drives. Disk and ISO images can be "inserted" while the system is being run. However, the system performance is very slow because it is only emulated. It doesn't provide any CPU [[Hardware-assisted virtualization|virtualization]] features. However, it is useful for capturing screen shots in researching old [[DOS]] software. Bochs is widely used for hobbyist OS developing, as it saves the need for constant system restarts (to test code). Bochs is also convenient for OS developers because it has error reporting and dump files that other emulators may lack. == Emulated hardware == {| class="wikitable" |- ! Class !! Device |- | [[Video card]] || Cirrus Logic CL-GD5430 [[Industry Standard Architecture|ISA]] |- | || Cirrus Logic CL-GD5446 [[Conventional PCI|PCI]] |- | [[Sound card]] || Sound Blaster 16 card (ISA, no plug&play) |- | [[Ethernet]] [[network card]] || [[NE2000]] [[Ethernet]] <ref name="bochs_sourceforge_net-features">{{cite web|title=Features|url=http://bochs.sourceforge.net/doc/docbook/user/features.html}} 