lang=python> def foo(x, y): '''Frobnicate the bar and baz together with one another''' return frob(frob(x), frob(y)) </source> ====Ruby==== Comments in [[Ruby (programming language)|Ruby]]. Single line commenting: (line starts with hash "#") <source lang="Ruby"> This is not a comment #this is commented This is not a comment </source> Multi-line commenting: (comments goes between keywords "begin" and "end") <source lang="Ruby"> This is not a comment =begin whatever goes in here will be ignored :) =end This is not a comment </source> ====SQL==== Comments in SQL are in single-line-only form, when using two dashes: <source lang="SQL"> -- This is a single line comment -- followed by a second line SELECT COUNT(*) FROM Authors WHERE Authors.name = 'Smith'; -- Note: we only want 'smith' -- this comment appears after SQL code </source> The syntax for [[Transact-SQL]] also supports alternative formats for specifying comments.<ref name="MSSQL">{{cite book | title = Microsoft SQL Server 7 | first = Ronald R. | last = Talmage | publisher = Prima Publishing | year = 1999 | isbn = 0761513892 }}</ref> One format supported by this syntax is identical to the "block comment" style used in the syntax for C++ and Java. <source lang="SQL"> /* This is a comment line 1 This is a comment line 2 */ SELECT COUNT(*) FROM Authors </source> ==See also== *[[Comment]] *[[Docstring]], a specific type of comment that is parsed and retained throughout the runtime of the program. *[[HTML comment tag]] *[[Literate programming]], alternative documentation [[programming paradigm|paradigm]] *[[Comparison of programming languages (syntax)#Comments|Syntax of comments]] in various programming languages ==Notes and references== {{reflist|2}} ==External links== * [http://dkrukovsky.blogspot.com/2005/07/how-to-write-comments.html How to Write Comments] by Denis Krukovsky * [http://www.ptlogica.com/TwinText/resource/liveuser.pdf Source Code Documentation as a Live User Manual] by PTLogica * [http://java.sun.com/j2se/javadoc/writingdoccomments/ How to Write Comments for the Javadoc Tool] * [http://www.stack.nl/~dimitri/doxygen/index.html Doxygen], a documentation system for C, C++, Java, Objective-C, Python, IDL and to some extent PHP, C#, and D {{DEFAULTSORT:Comment (Computer Programming)}} [[Category:Source code]] [[Category:Articles with example code]] [[Category:Articles with example C code]] [[Category:Articles with example Java code]] [[Category:Articles with example Perl code]] [[Category:Metadata]] [[Category:Reference]] [[ar:تعليق (برمجة)]] [[de:Kommentar (Programmierung)]] [[et:Kommentaar (programmeerimine)]] [[el:Σχόλιο (προγραμματισμός)]] [[es:Comentario (informática)]] [[fr:Commentaire (informatique)]] [[it:Commento]] [[nl:Commentaar (programmeren)]] [[ja:コメント (コンピュータ)]] [[pl:Komentarz (informatyka)]] [[ru:Комментарии (программирование)]] [[sv:Kodkommentar]] [[ta:குறிப்புரை (நிரலாக்கம்)]] [[zh:注释 (计算机语言)]]</text> </page> <page> <id>6981</id> <title>Commitment ordering</title> <text>In [[concurrency control]] of [[database]]s, [[transaction processing]] (transaction management), and related applications, '''Commitment ordering''' (or '''Commit ordering'''; '''CO'''; [[#Raz1990|Raz 1990]], [[#Raz1992|1992]], [[#Raz1994|1994]]) is a class of interoperable ''[[Serializability]]'' techniques, both centralized and [[Distributed computing|distributed]]. It allows [[Serializability#Optimistic versus pessimistic techniques|optimistic]] (non-blocking) implementations. CO is also the name of the resulting transaction [[Schedule (computer science)|schedule]] (history) property. In a CO compliant schedule the chronological order of commitment events of transactions is compatible with the [[Serializability#Testing conflict serializability|precedence]] order of the respective transactions. CO is a broad special case of ''[[serializability#View and conflict serializability|Conflict serializability]]'', and effective means ([[Reliability engineering|reliable]], high-performance, [[Distributed computing|distributed]], and [[Scalability|scalable]]) to achieve ''[[Global serializability]]'' (''Modular serializability'') across any collection of database systems that possibly use different [[concurrency control]] mechanisms (CO also makes each system serializability compliant, if not already). Achieving this has been characterized as ''[[open problem]]'' until the public disclosure of CO in 1991 by the property's discoverer and the technique's inventor, [[Yoav Raz]] from [[Digital Equipment Corporation]] (DEC; see ''[[Global serializability]]'' and ''[[The History of Commitment Ordering]]''). Each not-CO-compliant database system is augmented with a CO component (the Commitment Order Coordinator - COCO) which orders the commitment events for CO compliance, with neither data-access nor any other transaction operation interference. As such CO provides a low overhead, general solution for global serializability (and distributed serializability), instrumental for [[Global concurrency control]] (and [[Distributed concurrency control]]) of multi database systems and other [[transactional object]]s, possibly highly distributed (e.g., within [[Cloud computing]], [[Grid computing]], and networks of [[smartphone]]s). An [[Atomic commitment]] protocol (any) is a fundamental part of the solution, utilized to break global cycles in the conflict (precedence, serializability) graph. CO is the most general property (a [[necessary condition]]) that guarantees global serializability, if the database systems involved do not share concurrency control information beyond atomic commitment protocol (unmodified) messages (the database systems are ''autonomous''). Thus CO (with its variants) is the only general technique that does not require the typically costly distribution of local concurrency control information (e.g., local precedence relations, locks, timestamps, or tickets). It generalizes the popular ''[[Two-phase locking|Strong strict two-phase locking]]'' (SS2PL) property, which in conjunction with the ''[[Two-phase commit protocol]]'' (2PC) is the [[de facto standard]] to achieve global serializability across (SS2PL based) database systems. As a result CO compliant database systems (with any, different concurrency control types) can transparently join such SS2PL based solutions for global serializability. In addition, locking based ''global deadlocks'' are resolved automatically in a CO based multi database environment (including the special case of a completely SS2PL based environment; a previously unnoticed fact for SS2PL). Furthermore, '''Strict commitment ordering''' (SCO; [[#Raz1991c|Raz 1991c]]), the intersection of ''[[Schedule (computer science)#Strict|Strictness]]'' and CO, provides better performance (shorter average transaction completion time and resulting better transaction [[throughput]]) than SS2PL whenever read-write [[Serializability#View and conflict serializability|conflicts]] are present (identical blocking behavior for write-read and write-write conflicts; comparable locking overhead). The advantage of SCO is especially significant during lock contention. Strictness allows both SS2PL and SCO to use the same effective ''database recovery'' mechanisms. Two major generalizing variants of CO exist, '''Extended CO''' (ECO; [[#Raz1993a|Raz 1993a]]) and '''Multi-version CO''' (MVCO; [[#Raz1993b|Raz 1993b]]). They as well provide global serializability without local concurrency control information distribution, can be combined with any relevant concurrency control, and allow [[Serializability#Optimistic versus pessimistic techniques|optimistic]] (non-blocking) implementations. Both use additional information for relaxing CO constraints and achieving better concurrency and performance. CO and its variants inter-operate transparently, guaranteeing global serializability and automatic global deadlock resolution also together in a mixed, heterogeneous environment with different variants. '''Comments''': #This article utilizes concepts and terminology introduced in the article ''[[Serializability]]''. #Several books that have appeared since 2010, with "Commitment ordering" in their titles, are collections of related Wikipedia articles. ==Overview== ''Commitment ordering'' (CO; [[#Raz1990|Raz 1990]], [[#Raz1992|1992]], [[#Raz1994|1994]]) has been referred to also as ''commit ordering'', 