to a number of other geometric problems. <ref name=tous83>{{cite_paper | author = Toussaint, Godfried T. | title = Solving geometric problems with the rotating calipers | publisher=Proc. MELECON '83, Athens |url=http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.155.5671 |date = 1983 }} </ref> The name comes from the analogy of rotating a spring-loaded [[vernier caliper]] around the outside of a convex polygon. Every time one blade of the caliper lies flat against an edge of the polygon, it forms an [[antipodal point|antipodal pair]] with the point or edge touching the opposite blade. It turns out that the complete "rotation" of the caliper around the polygon detects all antipodal pairs and may be carried out in [[Linear_time|O(n)]] time. <ref>M.I. Shamos. Computational geometry. PhD thesis, Yale University, 1978.</ref> == Applicable problems == * Diameter (maximum width) of a convex polygon<ref>Binay K. Bhattacharya and Godfried T. Toussaint, "Fast algorithms for computing the diameter of a finite planar set," ''The Visual Computer'', Vol. 3, No. 6, May 1988, pp.379–388.</ref> <ref>Binay K. Bhattacharya and Godfried T. Toussaint, "A counter example to a diameter algorithm for convex polygons," ''IEEE Trans. Pattern Analysis and Machine Intelligence'', Vol. PAMI-4, No. 3, May 1982, pp. 306–309.</ref> * Width ([[#Minimum width of a convex polygon|minimum width]]) of a convex polygon<ref>Michael E. Houle and Godfried T. Toussaint, “Computing the width of a set,” ''IEEE Transactions Pattern Analysis & Machine Intelligence'', Vol. 10, no. 5, September 1988, pp. 761–765.</ref> * Maximum distance between two convex polygons<ref>Godfried T. Toussaint and Jim A. McAlear, "A simple O(''n'' log ''n'') algorithm for finding the maximum distance between two finite planar sets," ''Pattern Recognition Letters'', Vol. 1, 1982, pp. 21–24.</ref> <ref>Binay K. Bhattacharya and Godfried T. Toussaint, "Efficient algorithms for computing the maximum distance between two finite planar sets," ''Journal of Algorithms'', vol. 14, 1983, pp. 121–136.</ref> * [[Minimum distance]] between two convex polygons<ref>Godfried T. Toussaint and Binay K. Bhattacharya, "Optimal algorithms for computing the minimum distance between two finite planar sets," ''Pattern Recognition Letters'', vol. 2, December, 1983, pp. 79–82.</ref> * Minimum area [[oriented bounding box]] * Minimum perimeter [[oriented bounding box]] * Onion [[polygon triangulation|triangulations]] * Spiral [[polygon triangulation|triangulations]] * [[Quadrangulation]]s * Union of two convex polygons * Common tangents to two convex polygons * Intersection of two convex polygons<ref>Godfried T. Toussaint, "A simple linear algorithm for intersecting convex polygons, ''The Visual Computer'', Vol. 1, 1985, pp. 118–123.</ref> * [[Critical support line]]s of two convex polygons * Vector sums of two convex polygons<ref>Tomas Lozano-Perez, "Spatial planning: A conﬁguration space approach," ''IEEE Transactions on Computers'', Vol. 32, No. 2, 1983, pp. 108–120.</ref> * Shortest transversals<ref>Binay K. Bhattacharya and Godfried T. Toussaint, "Computing shortest transversals," ''Computing'', vol. 46, 1991, pp. 93–119.</ref> <ref>Binay K. Bhattacharya, Jurek Czyzowicz, Peter Egyed, Ivan Stojmenovic, Godfried T. Toussaint, and Jorje Urrutia, "Computing shortest transversals of sets," ''International Journal of Computational Geometry and Applications'', Vol. 2, No. 4, December 1992, pp. 417–436.</ref> * Thinnest-strip transversals<ref>Jean-Marc Robert and Godfried T. Toussaint, "Linear approximation of simple objects," ''Computational Geometry: Theory and Applications'', Vol. 4, 1994, pp. 27–52.</ref> == Minimum width of a convex polygon == ARRAY points := {P1, P2, ... , PN}; points.delete(middle vertices of any collinear sequence of three points); REAL p_a := index of vertex with minimum y-coordinate; REAL p_b := index of vertex with maximum y-coordinate; REAL rotated_angle := 0; REAL min_width := INFINITY; VECTOR caliper_a(1,0); // Caliper A points along the positive x-axis VECTOR caliper_b(-1,0); // Caliper B points along the negative x-axis WHILE rotated_angle < PI // Determine the angle between each caliper and the next adjacent edge in the polygon VECTOR edge_a(points[p_a + 1].x - points[p_a].x, points[p_a + 1].y - points[p_a].y); VECTOR edge_b(points[p_b + 1].x - points[p_b].x, points[p_b + 1].y - points[p_b].y); REAL angle_a := angle(edge_a, caliper_a); REAL angle_b := angle(edge_b, caliper_b); REAL width := 0; // Rotate the calipers by the smaller of these angles caliper_a.rotate(min(angle_a, angle_b)); caliper_b.rotate(min(angle_a, angle_b)); IF angle_a < angle_b p_a++; // This index should wrap around to the beginning of the array once it hits the end width = caliper_a.distance(points[p_b]); ELSE p_b++; // This index should wrap around to the beginning of the array once it hits the end width = caliper_b.distance(points[p_a]); END IF rotated_angle = rotated_angle + min(angle_a, angle_b); IF (width < min_width) min_width = width; END IF END WHILE RETURN min_width; ==References== <references/> == See also == * [[Convex polygon]] * [[Convex hull]] * [[Smallest enclosing box]] [[category:geometric algorithms]] [[category:convex geometry]]</text> </page> <page> <id>32501</id> <title>Routing control plane</title> <text>{{Context|date=October 2009}} In '''[[routing]]''', the '''control plane''' is the part of the [[router]] architecture that is concerned with drawing the network map, or the information in a (possibly augmented) [[routing table]] that defines what to do with incoming packets. Control plane functions, such as participating in [[routing protocols]], run in the architectural control element.<ref>[ftp://ftp.rfc-editor.org/in-notes/rfc3746.txt Forwarding and Control Element Separation (ForCES) Framework], RFC 3746, Network Working Group, April 2004</ref> In most cases, the routing table contains a list of destination addresses and the outgoing interface(s) associated with them. Control plane logic also can define certain packets to be discarded, as well as preferential treatment of certain packets for which a high quality of service is defined by such mechanisms as [[differentiated services]]. Depending on the specific router implementation, there may be a separate [[forwarding information base]] that is populated (i.e., loaded) by the Control Plane, but used by the [[forwarding plane]] to look up packets, at very high speed, and decide how to handle them. ==Building the unicast routing table== A major function of the control plane is deciding which routes go into the main [[routing table]]. "Main" refers to the table that holds the [[unicast]] routes that are active. [[multicast]] routing may require an additional routing table for multicast routes. Several routing protocols e.g. [[Open Shortest Path First|OSPF]] and [[Border Gateway Protocol|BGP]] maintain internal data bases of candidate routes which are promoted when a route fails or when a routing policy is changed. Several different information sources may provide information about a route to a given destination, but the router must select the "best" route to install into the routing 