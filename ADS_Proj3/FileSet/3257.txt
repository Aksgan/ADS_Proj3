programming]] (although this had been in common use in the 1960s or earlier). [[Modula-2]] (1978) included both, and their succeeding design, [[Oberon (programming language)|Oberon]], included a distinctive approach to object orientation, classes, and such. The approach is unlike Smalltalk, and very unlike C++. Object-oriented features have been added to many existing languages during that time, including [[Ada (programming language)|Ada]], [[BASIC]], [[Fortran]], [[Pascal (programming language)|Pascal]], and others. Adding these features to languages that were not initially designed for them often led to problems with compatibility and maintainability of code<!-- or could it simply have been the introduction of OOP itself? -->. More recently, a number of languages have emerged that are primarily object-oriented yet compatible with procedural methodology, such as [[Python (programming language)|Python]] and [[Ruby programming language|Ruby]]. Probably the most commercially important recent object-oriented languages are [[Visual Basic.NET]] (VB.NET) and [[C Sharp (programming language)|C#]], both designed for Microsoft's [[.NET Framework|.NET]] platform, and [[Java (programming language)|Java]], developed by [[Sun Microsystems]]. Both frameworks show the benefit of using OOP by creating an abstraction from implementation in their own way. VB.NET and C# support cross-language inheritance, allowing classes defined in one language to subclass classes defined in the other language. Java runs in a [[virtual machine]], making it possible to run on all different operating systems. VB.NET and C# make use of the Strategy pattern to accomplish cross-language inheritance, whereas Java makes use of the Adapter pattern {{Citation needed|reason=It is not obvious why nor where they use these patterns.|date=August 2010}}. Just as [[procedural programming]] led to refinements of techniques such as [[structured programming]], modern object-oriented software design methods include refinements{{Citation needed|reason=january 2010|date=January 2010}} such as the use of [[design pattern (computer science)|design patterns]], [[design by contract]], and [[modeling language]]s (such as [[Unified Modeling Language|UML]]). ==Fundamental concepts and features== {{anchor|features}} {{See also|List of object-oriented programming terms}} A survey by Deborah J. Armstrong of nearly 40 years of computing literature identified a number of "quarks", or fundamental concepts, found in the strong majority of definitions of OOP.<ref name="ArmstrongQuarks">Armstrong, ''The Quarks of Object-Oriented Development''. In descending order of popularity, the "quarks" are: Inheritance, Object, Class, Encapsulation, Method, Message Passing, Polymorphism, Abstraction</ref> Not all of these concepts are to be found in all object-oriented programming languages, and so object-oriented programming that uses classes is sometimes called [[class-based programming]]. In particular, [[prototype-based programming]] does not typically use ''classes''. As a result, a significantly different yet analogous terminology is used to define the concepts of ''object'' and ''instance''. Benjamin Cuire Pierce and some other researchers view as futile any attempt to distill OOP to a minimal set of features. He nonetheless identifies fundamental features that support the OOP programming style in most object-oriented languages:<ref>{{Cite book|last=Pierce|first=Benjamin|title=[[Types and Programming Languages]]|publisher=MIT Press|year=2002|isbn=0-262-16209-1}}, section 18.1 "What is Object-Oriented Programming?"</ref> * [[Dynamic dispatch]] &ndash; when a method is invoked on an object, the object itself determines what code gets executed by looking up the method at run time in a table associated with the object. This feature distinguishes an object from an [[abstract data type]] (or module), which has a fixed (static) implementation of the operations for all instances. It is a programming methodology that gives modular component development while at the same time being very efficient. * [[Encapsulation (object-oriented programming)|Encapsulation]] (or [[multi-methods]], in which case the state is kept separate) * [[Subtype polymorphism]] * Object [[inheritance (object-oriented programming)|inheritance]] (or [[Delegation_(programming)#As_a_language_feature|delegation]]) * [[Open recursion]] &ndash; a special variable (syntactically it may be a keyword), usually called <code>this</code> or <code>self</code>, that allows a method body to invoke another method body of the same object. This variable is ''late-bound''; it allows a method defined in one class to invoke another method that is defined later, in some subclass thereof. Similarly, in his 2003 book, ''Concepts in programming languages'', John C. Mitchell identifies four main features: dynamic dispatch, [[abstraction (computer science)|abstraction]], subtype polymorphism, and inheritance.<ref>[[John C. Mitchell]], ''Concepts in programming languages'', Cambridge University Press, 2003, ISBN 0521780985, p.278</ref> Michael Lee Scott in ''Programming Language Pragmatics'' considers only encapsulation, inheritance and dynamic dispatch.<ref>Michael Lee Scott, ''Programming language pragmatics'', Edition 2, Morgan Kaufmann, 2006, ISBN 0126339511, p. 470 vikas</ref> ===Class=== {{Main|Class (computer science)}} A class is a template for an object, a user-defined datatype that contains variables,properties of an object. A class defines abstract characteristics of a thing (object), including its characteristics (its '''attributes''', '''[[Field (computer science)|fields]]''' or '''[[Property (programming)|properties]]''') and the '''things it can do''' (behaviors, '''[[method (computer science)|methods]]''', '''operations''' or '''features'''). One might say that a class is a ''blueprint'' or ''factory'' that describes the nature of something. For example, the class <code>Dog</code> would consist of traits shared by all dogs, such as breed and fur color (characteristics), and the ability to bark and sit (behaviors). Classes provide [[modularity (programming)|modularity]] and [[structure]] in an object-oriented computer program. A class should typically be recognizable to a non-programmer familiar with the problem domain, meaning that the characteristics of the class should make sense in context. Also, the code for a class should be relatively self-contained (generally using '''[[Information Hiding|encapsulation]]'''). Collectively, the properties and methods defined by a class are called '''members'''. ===Instance=== {{Main|Instance (computer science)}} One can have an instance of a class; the instance is the actual object created at run-time. In programmer vernacular, the <code>Lassie</code> object is an '''instance''' of the <code>Dog</code> class. The set of values of the attributes of a particular object is called its [[state (computer science)|state]]. The object consists of state and the behavior that's defined in the object's classes. ===Method=== {{Main|Method (computer science)}} Method is a set of procedural statements for achieving the desired result. It performs different kinds of operations on different data types. In a programming language, methods (sometimes referred to as "functions") are verbs. <code>Lassie</code>, being a <code>Dog</code>, has the ability to bark. So <code>bark()</code> is one of <code>Lassie</code>'s methods. She may have other methods as well, for example <code>sit()</code> or <code>eat()</code> or <code>walk()</code> or <code>save(Timmy)</code>. Within the program, using a method usually affects only one particular object; all <code>Dog</code>s can bark, but you need only one particular dog to 