will not detect his modification is at most 1/|D|. But this definition is not strong enough &mdash; if the possible messages are 0 and 1, D={0,1} and H consists of the identity operation and ''not'', H is universal. But if the digest is then encrypted by modular addition, the attacker can change the message and the digest at the same time and the receiver wouldn't know the difference. ==Strongly universal hashing== A class of hash functions H that is good to use will make it difficult for an attacker to guess the correct digest ''d'' of a fake message ''f'' after intercepting one message ''a'' with digest ''c''. In other words :<math>\Pr_{h \in H}[h(f)=d|h(a)=c]\,</math> needs to be very small, preferably 1/|''D''|. <!-- Say the combination of the hash function and the encryption function is chosen from a class M. We must require that for any two distinct messages ''a'' and ''b'' and two (possibly equal) digests ''c'' and ''d'', the number of members of M that map ''a'' to ''c'' and ''b'' to ''d'' must of the order |M|/|D|. --> It is easy to construct a class of hash functions when ''D'' is [[Finite field|field]]. For example if |''D''| is [[Prime number|prime]], all the operations are taken [[modular arithmetic|modulo]] |''D''|. The message ''a'' is then encoded as an ''n''-dimensional vector over ''D'' (''a''<sub>1</sub>, ''a''<sub>2</sub>, ..., ''a''<sub>''n''</sub>). ''H'' then has |''D''|<sup>''n''+1</sup> members, each corresponding to an (''n'' + 1)-dimensional vector over ''D'' (''h''<sub>0</sub>, ''h''<sub>1</sub>, ..., ''h''<sub>''n''</sub>). If we let : <math>h(a)=h_0+\sum_{i=1}^n h_ia_i\,</math> we can use the rules of probabilities and combinatorics to prove that :<math>\Pr_{h \in H}[h(f)=d|h(a)=c]={1 \over |D|}</math> If we properly encrypt all the digests (e.g. with a [[one-time pad]]), an attacker cannot learn anything from them and the same hash function can be used for all communication between the two parties. This may not be true for [[Block cipher mode of operation|ECB]] encryption because it may be quite likely that two messages produce the same hash value. Then some kind of [[initialization vector]] should be used, which is often called the [[cryptographic nonce|nonce]]. It has become common practice to set ''h''<sub>0</sub> = ''f''(nonce), where ''f'' is also secret. Notice that having massive amounts of computer power does not help the attacker at all. If the recipient limits the amount of forgeries it accepts (by sleeping whenever it detects one), |''D''| can be 2<sup>32</sup> or smaller. ==Example== The following [[C (programming language)|C]] function generates a 24 bit UMAC. It assumes that 'secret' is a multiple of 24 bits, 'msg' is not longer than 'secret' and 'result' already contains the 24 secret bits e.g. f(nonce). nonce does not need to be contained in 'msg'. <code lang="c"> #define uchar unsigned char void UHash24 (uchar *msg, uchar *secret, int len, uchar *result) { uchar r1 = 0, r2 = 0, r3 = 0, s1, s2, s3, byteCnt = 0, bitCnt, byte; while (len-- > 0) { if (byteCnt-- == 0) { s1 = *secret++; s2 = *secret++; s3 = *secret++; byteCnt = 2; } byte = *msg++; for (bitCnt = 0; bitCnt < 8; bitCnt++) { if (byte & 1) { /* msg not divisible by x */ r1 ^= s1; /* so add s * 1 */ r2 ^= s2; r3 ^= s3; } byte >>= 1; /* divide message by x */ if (s3 & 0x80) { /* and multiply secret with x, subtracting the polynomial when necessary to keep its order under 24 */ s3 <<= 1; if (s2 & 0x80) s3 |= 1; s2 <<= 1; if (s1 & 0x80) s2 |= 1; s1 <<= 1; s1 ^= 0x1B; /* x^24 + x^4 + x^3 + x + 1 */ } else { s3 <<= 1; if (s2 & 0x80) s3 |= 1; s2 <<= 1; if (s1 & 0x80) s2 |= 1; s1 <<= 1; } } /* for each bit in the message */ } /* for each byte in the message */ *result++ ^= r1; *result++ ^= r2; *result++ ^= r3; } </code> ==References== * [http://fastcrypto.org/umac/ UMAC] has been approved by the [[IETF]] as an informational RFC. It's fast and based on [[Advanced Encryption Standard|AES]]. ==See also== * [[Poly1305-AES]] is another fast MAC based on strongly universal hashing and [[Advanced Encryption Standard|AES]]. {{Crypto navbox | hash}} [[Category:Message authentication codes]] [[ca:UMAC]] [[es:UMAC]] [[ru:UMAC]]</text> </page> <page> <id>38595</id> <title>UML tool</title> <text>A '''UML tool''' or '''UML modeling tool''' is a [[application software|software application]] that supports some or all of the notation and semantics associated with the '''[[Unified Modeling Language]]''' ('''UML'''), which is the industry standard [[general purpose modeling]] language for [[software engineering]]. ''UML tool'' is used broadly here to include application programs which are not exclusively focused on UML, but which support some functions of the Unified Modeling Language, either as an ''add-on'', as a ''component'' or as a ''part'' of their overall functionality. ==Kinds of Functionality== UML tools support the following kinds of functionality: ===Diagramming=== ''Diagramming'' in this context means ''creating'' and ''editing'' UML [[diagram]]s; that is diagrams that follow the graphical notation of the Unified Modeling Language. The use of UML diagrams as a means to draw diagrams of – mostly – [[Object-oriented programming|object-oriented]] software is generally agreed upon by software developers. When developers draw diagrams of object-oriented software, they usually follow the UML notation. On the other hand, it is often debated whether those diagrams are needed at all, during what stages of the software development process they should be used, and how (if at all) they should be kept up to date. The primacy of software code often leads to the diagrams being deprecated. ===Round-trip engineering=== [[Round-trip engineering]] refers to the ability of a UML tool to perform code generation from models, and model generation from code (a.k.a., reverse engineering), while keeping both the model and the code semantically consistent with each other. Code generation and reverse engineering are explained in more detail below. ====Code generation====<!-- This section is linked from [[Unified Modeling Language]] --> ''[[Code generation]]'' in this context means, that the user creates UML 