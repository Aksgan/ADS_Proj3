primary SAML use case is called ''Web Browser Single Sign-On (SSO)''. A user wielding a ''user agent'' (usually a web browser) requests a web resource protected by a SAML ''service provider''. The service provider, wishing to know the identity of the requesting user, issues an authentication request to a SAML ''identity provider'' through the user agent. The resulting protocol flow is depicted in the following diagram. [[Image:Saml-use-case.svg|frame|center|SAML Web Browser SSO]] '''1. Request the target resource at the SP''' (SAML 2.0 only) The principal (via an HTTP user agent) requests a target resource at the service provider: <nowiki>https://sp.example.com/myresource</nowiki> The service provider performs a security check on behalf of the target resource. If a valid security context at the service provider already exists, skip steps 2&ndash;7. '''2. Respond with an XHTML form''' (SAML 2.0 only) The service provider responds with a document containing an XHTML form: <source lang="html4strict"> <form method="post" action="https://idp.example.org/SAML2/SSO/POST" ...> <input type="hidden" name="SAMLRequest" value="request" /> ... <input type="submit" value="Submit" /> </form> </source> The value of the <code>SAMLRequest</code> parameter is the [[Base64]] encoding of a <code><samlp:AuthnRequest></code> element. '''3. Request the SSO Service at the IdP''' (SAML 2.0 only) The user agent issues a POST request to the SSO service at the identity provider where the value of the <code>SAMLRequest</code> parameter is taken from the XHTML form at step 2. The SSO service processes the <code>AuthnRequest</code> and performs a security check. If the user does not have a valid security context, the identity provider identifies the user (details omitted). '''4. Respond with an XHTML form''' The SSO service validates the request and responds with a document containing an XHTML form: <source lang="html4strict"> <form method="post" action="https://sp.example.com/SAML2/SSO/POST" ...> <input type="hidden" name="SAMLResponse" value="response" /> ... <input type="submit" value="Submit" /> </form> </source> The value of the <code>SAMLResponse</code> parameter is the base64 encoding of a <code><samlp:Response></code> element. '''5. Request the Assertion Consumer Service at the SP''' The user agent issues a POST request to the assertion consumer service at the service provider. The value of the <code>SAMLResponse</code> parameter is taken from the XHTML form at step 4. '''6. Redirect to the target resource''' The assertion consumer service processes the response, creates a security context at the service provider and redirects the user agent to the target resource. '''7. Request the target resource at the SP again''' The user agent requests the target resource at the service provider (again): <nowiki>https://sp.example.com/myresource</nowiki> '''8. Respond with requested resource''' Since a security context exists, the service provider returns the resource to the user agent. Note: In SAML 1.1, the flow begins with a request to the identity provider's inter-site transfer service at step 3. ==The use of SOAP== In the example flow above, all depicted exchanges are ''front-channel exchanges'', that is, an HTTP user agent (browser) communicates with a SAML entity at each step. In particular, there are no ''back-channel exchanges'' or direct communications between the service provider and the identity provider. Front-channel exchanges lead to simple protocol flows where all messages are passed ''by value'' using a simple HTTP binding (GET or POST). Indeed, the flow outlined in the previous section is sometimes called the ''Lightweight Web Browser SSO Profile''. Alternatively, for increased security or privacy, messages may be passed ''by reference''. For example, an identity provider may supply a reference to a SAML assertion (called an ''artifact'') instead of transmitting the assertion directly through the user agent. Subsequently, the service provider requests the actual assertion via a back channel. Such a back-channel exchange is specified as a [[SOAP]] message exchange (SAML over SOAP over HTTP). In general, any SAML exchange over a secure back channel is conducted as a SOAP message exchange. On the back channel, SAML specifies the use of SOAP 1.1. The use of SOAP as a binding mechanism is optional, however. Any given SAML deployment will choose whatever bindings are appropriate. ==SAML security== The SAML specifications recommend, and in some cases mandate, a variety of security mechanisms: * SSL 3.0 or TLS 1.0 for transport-level security * XML Signature and XML Encryption for message-level security Requirements are often phrased in terms of (mutual) authentication, integrity, and confidentiality, leaving the choice of security mechanism to implementers and deployers. ==Profiles of SAML== Aside from the SAML Web Browser SSO Profile, some important third-party profiles of SAML include: * [[OASIS]] [http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wss Web Services Security (WSS) Technical Committee] ** [http://www.oasis-open.org/committees/download.php/16768/wss-v1.1-spec-os-SAMLTokenProfile.pdf OASIS WS-Security SAML Token Profile] * [[Liberty Alliance]] ** [http://www.projectliberty.org/resource_center/specifications/liberty_alliance_id_ff_1_2_specifications Liberty Identity Federation Framework (ID-FF)] ** [http://www.projectliberty.org/resource_center/specifications/liberty_alliance_id_wsf_2_0_specifications Liberty Identity Web Services Framework (ID-WSF)] * [[OASIS]] [http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml eXtensible Access Control Markup Language (XACML) Technical Committee] ** [http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml#XACML20 SAML 2.0 Profile of XACML v2.0] ==See also== * [[SAML 1.1]] * [[SAML 2.0]] * [[Authentication]] * [[Single sign on|Single sign-on]] * [[Authorization]] * [[Federated identity]] * [[Shibboleth (Internet2)|Shibboleth]] * [[Athens access and identity management]] * [[OpenID]] * [[Information Card]]s * [[WS-Federation]] * [[OASIS (organization)|OASIS]] * [[Light-Weight Identity]] ==References== * <strong id="SAMLDiff">[SAMLDiff]</strong> P. Mishra et al., ''Differences between OASIS Security Assertion Markup Language (SAML) V1.1 and V1.0.'' OASIS Draft, May 2003. Document ID sstc-saml-diff-1.1-draft-01 http://www.oasis-open.org/committees/download.php/3412/sstc-saml-diff-1.1-draft-01.pdf ==External links== * [http://saml.xml.org/ Online Community for SAML OASIS Standard ] * [http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=security OASIS Security Services Technical Committee] * [http://xml.coverpages.org/saml.html Cover Pages: Security Assertion Markup Language (SAML)] * [http://www.pingidentity.com/information-library/what-is-saml.cfm Tutorial Video: Ten Things You Need To Know About SAML] * [http://identitymeme.org/doc/draft-hodges-learning-saml-00.html How to Study and Learn SAML] * [http://www.oracle.com/technetwork/articles/entarch/saml-084342.html Demystifying SAML] * [http://ssocircle.com First public SAML 2.0 identity provider] * [http://developers.sun.com/identity/reference/techart/federated.html Federated Identity: Single Sign-On Among Enterprises (SUN)] * [http://books.google.com/books?id=tBkEAAAAMBAJ&pg=PT42&lpg=PT42&dq=early+adopters+SAML&source=bl&ots=hcZRVwzzQr&sig=0p6hCL9Q4T7U1iKVkcq1wWkk6eo&hl=en&ei=-G5-TLLvFoyInAeSpdjvAQ&sa=X&oi=book_result&ct=result&resnum=7&ved=0CDoQ6AEwBg#v=onepage&q=early%20adopters%20SAML&f=false Federated ID gains momentum ] {{OASIS Standards}} [[Category:Computer security software]] [[Category:XML-based standards]] [[Category:Authentication methods]] [[cs:Security Assertion Markup Language]] [[de:Security Assertion Markup Language]] [[et:Security Assertion Markup Language]] [[fr:Security assertion markup language]] [[it:Security Assertion Markup Language]] [[ja:Security Assertion Markup Language]] [[pl:Security Assertion Markup Language]] [[ru:SAML]] [[fi:SAML]]</text> </page> <page> <id>33638</id> <title>Security Identifier</title> <text>In the context of the [[Microsoft]] [[Windows NT]] line of [[operating system]]s, a '''Security Identifier''' (commonly abbreviated '''SID''') is a unique name (an [[alphanumeric]] character string) which is assigned by a Windows [[Domain controller]] during the log on process that is used to identify a subject, such as a user or 