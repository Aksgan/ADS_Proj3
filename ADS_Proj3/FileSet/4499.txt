Inc., 1998. ISBN 0-471-24358-2.</ref> This information is stored in a traffic contract. If the connection request is accepted, the application is permitted to use the network to transport traffic. This function protects the network resources from malicious connections and enforces the compliance of every connection to its negotiated traffic contract. The network can also discard non-conformant traffic in the network (using [[Priority Control]]). Traffic policing in ATM networks is known as [[Usage Parameter Control]] (UPC) and [[Network Parameter Control]] (NPC).<ref>Hiroshi Saito, Teletraffic Technologies in ATM Networks, Artech House, 1993. ISBN 0-89006-622-1.</ref> == See also == * [[Broadband Networks]] * [[Network Parameter Control]] (NPC) * [[Teletraffic engineering in broadband networks]] * [[Usage Parameter Control]] (UPC) ==References== {{reflist}} {{DEFAULTSORT:Traffic Policing}} [[Category:Teletraffic]] [[Category:Communication engineering]] [[Category:Network performance]]</text> </page> <page> <id>38053</id> <title>Trance JIT</title> <text>{{Merge to |Quark (kernel) |date=May 2010}} {{Unreferenced|auto=yes|date=December 2009}} '''Trance JIT''' is a [[MorphOS]] [[Just-in-time compilation|JIT]] [[compiler]], or code translator, for running [[68k]] applications within the MorphOS environment. It has been part of the MorphOS operating system since MorphOS 1.4.<ref>{{cite web | url=http://www.ann.lu/comments2.cgi?view=1060418084&category=files | title=MorphOS 1.4 available | date=9 August 2003 | accessdate=2010-07-28}}</ref> MorphOS itself has a fully integrated 68k emulator for running many Amiga applications. (Amiga programs were almost exclusively compiled for the 68k processor, while MorphOS itself is [[PowerPC]]). Trance supplements this functionality by adding JIT compilation, increasing the speed of the emulation even further. It does not interfere with the full integration of 68k and PowerPC tasks MorphOS provides.<ref>{{Citation | last = | first = | title = MorphOS? What's that, then? | newspaper = AmigActive | pages = 14–17 | date = July 2000 }}</ref> Trance exists in the form of an executable, run during boot, and a shared library. Although it is not technically part of the kernel, and MorphOS can be run without it, Trance is considered a fundamental part of MorphOS and one of its most powerful features. Compatibility of Trance is considered to be very high and there are few to no 68k instruction sequences or applications which cause it any problems. It is also considered to be very fast, with users noticing few differences between 68k programs and native PowerPC code. <ref>{{cite web | url=http://www.amiga.org/forums/archive/index.php/t-3501.html | title=How fast is MorphOS? | date=8 February 2003 | accessdate=2010-07-28}}</ref><ref>{{cite web | url=http://www.ann.lu/comments2.cgi?show=1036326848&category=forum&23 | title=MorphOS 68k speed | date=3 November 2002 | accessdate=2010-07-28}}</ref><ref>{{cite web | url=http://obligement.free.fr/articles/amigaos41_vs_morphos23.php | title= Comparatif : performances entre AmigaOS 4.1 et MorphOS 2.3 sur Pegasos II (French) | date=September, 2009 | accessdate=2010-07-28}}</ref> Trance was developed by [[Ralph Schmidt]] and Teemu Suikki, with minor support from other MorphOS team members, Mark Olsen, Sigbjørn Skjæret and Harry Sintonen. {{Reflist}} {{MorphOS}} {{DEFAULTSORT:Trance Jit}} [[Category:Compilers]] [[Category:MorphOS]] {{Compu-prog-stub}}</text> </page> <page> <id>38055</id> <title>TransADF</title> <text>{{Orphan|date=October 2008}} '''TransADF''' is a program written for the [[Amiga]] computer that transfers the contents of a [[floppy disk]] or a similar [[block device]] to a file. This program is notable for being one of the first (if not the first) to compress the disk image using the popular [[deflate]] algorithm, as utilized by [[PKZip]] and [[gzip]], amongst others. ==External links== *[http://aminet.net/package/disk/misc/TransADF TransADF on Aminet] [[Category:Amiga software]] {{software-stub}}</text> </page> <page> <id>38057</id> <title>Transact-SQL</title> <text>{{Context|date=October 2009}} '''Transact-SQL''' ('''T-SQL''') is [[Microsoft]]'s and [[Sybase]]'s proprietary extension to [[SQL]]. Transact-SQL is central to using SQL Server. All applications that communicate with an instance of SQL Server do so by sending Transact-SQL statements to the server, regardless of the user interface of the application. Transact-SQL augments SQL with certain additional features: * [[Procedural programming|Control-of-flow language]] * [[Local variable]]s * Various support functions for string processing, date processing, mathematics, etc. * Changes to [[Delete (SQL)|DELETE]] and [[update (SQL)|UPDATE]] statements These additional features make Transact-SQL [[Turing complete]]. ==Flow control== Keywords for flow control in Transact-SQL include <code>BEGIN</code> and <code>END</code>, <code>BREAK</code>, <code>CONTINUE</code>, <code>GOTO</code>, <code>IF</code> and <code>ELSE</code>, <code>RETURN</code>, <code>WAITFOR</code>, and <code>WHILE</code>. <code>IF</code> and <code>ELSE</code> allow conditional execution. This batch statement will print "It is the weekend" if the current date is a weekend day, or "It is a weekday" if the current date is a weekday. <source lang="tsql"> IF DATEPART(dw, GETDATE()) = 7 OR DATEPART(dw, GETDATE()) = 1 PRINT 'It is the weekend.' ELSE PRINT 'It is weekday.' </source> <code>BEGIN</code> and <code>END</code> mark a block of statements. If more than one statement is to be controlled by the conditional in the example above, we can use BEGIN and END like this: <source lang="tsql"> IF DATEPART(dw, GETDATE()) = 7 OR DATEPART(dw, GETDATE()) = 1 BEGIN PRINT 'It is the weekend.' PRINT 'Get some rest!' END ELSE BEGIN PRINT 'It is a weekday.' PRINT 'Get to work!' END </source> <code>WAITFOR</code> will wait for a given amount of time, or until a particular time of day. The statement can be used for delays or to block execution until the set time. <code>RETURN</code> is used to immediately return from a [[stored procedure]] or function. <code>BREAK</code> ends the enclosing <code>WHILE</code> loop, while <code>CONTINUE</code> causes the next iteration of the loop to execute. An example of a <code>WHILE</code> loop is given below. <source lang="tsql"> DECLARE @i nvarchar(50) SET @i = 0 WHILE @i < 5 BEGIN PRINT 'Hello world.' SET @i = @i + 1 END </source> ==Changes to DELETE and UPDATE statements== In Transact-SQL, both the DELETE and UPDATE statements allow a FROM clause to be added, which allows joins to be included. This example deletes all <CODE>users</CODE> who have been flagged with the 'Idle' flag. <source lang="tsql"> DELETE users FROM users as u JOIN user_flags as f ON u.id=f.id WHERE f.name = 'Idle' UPDATE user_flags SET name = 'Caroline King' WHERE id=00001 </source> ==BULK INSERT== BULK INSERT is a Transact-SQL statement that implements a bulk data-loading process, inserting multiple rows into a table, reading data from an external sequential file. Use of BULK INSERT results in better performance than processes that issue individual INSERT statements for each row to be added. Additional details are available on [http://msdn2.microsoft.com/en-us/library/ms188365.aspx Microsoft's MSDN page]. ==See also== *[[Adaptive Server Enterprise|Adaptive Server Enterprise (Sybase)]] *[[PL/SQL|PL/SQL (Oracle)]] *[[SQL|SQL (ANSI)]] *[[Microsoft SQL Server|SQL Server (Microsoft)]] ==External links== *[http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.sqlug/html/sqlug/title.htm Sybase Transact-SQL User's Guide] *[http://msdn2.microsoft.com/en-us/library/aa260642(SQL.80).aspx Transact-SQL Reference for SQL Server 2000 