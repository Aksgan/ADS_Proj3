JP Bissonnette, T Craig |contribution= |title= Modern Technology of Radiation Oncology |origyear= 1999 |location= Madison, WI |chapter= X-ray Imaging for Verification and Localization in Radiation Therapy in Modern Technology of Radiation Oncology (suppl. 1) |isbn= 0-944838-38-3 |year= 1999 |publisher= Medical Physics Pub. |unused_data= publish Medical Physics Publishing, }} *Selby, Boris Peter; Walter, Stefan Ottmar; Sakas, Georgios; Wickler, David; Groch, Wolfgang-Dieter; Stilla, Uwe - Full Automatic X-Ray based Patient Positioning and Setup Verification in Practice: Accomplishments and Limitations. Proceedings of the 49th Conference of the Particle Therapy Co-Operative Group (PTCOG). Gunma, Japan, 2010 *{{cite book |last= Sharpe |first= MB |coauthors= T Craig, DJ Moseley |contribution= |title= Frontiers in Radiation Therapy Oncology |origyear= 2007 |location= Madison, WI |chapter= Image Guidance: Treatment Target Localization Systems in IMRT-IGRT-SBRT â€“ Advances in the Treatment Planning and Delivery of Radiotherapy. |volume= 40|isbn= 978-3805581998 |year= 2007 |publisher= Karger |unused_data= publish Medical Physics Publishing,}} *http://cancer.stanfordhospital.com/forPatients/services/radiationTherapy/intensityModulatedRadiother/default *http://www.medicalimagingmag.com/issues/articles/2006-10_01.asp *http://www.myradiotherapy.com *http://www.radiologyinfo.org/index.cfm?bhcp=1 RT Answers [http://www.rtanswers.org] [[Category:oncology]] [[Category:Cancer treatments]] [[Category:Medical physics]] [[Category:Medical imaging]]</text> </page> <page> <id>17926</id> <title>Image Packaging System</title> <text>The '''Image Packaging System''', also known as IPS or pkg(5), is a cross-platform [[package management system]] created by the OpenSolaris community in coordination with [[Sun Microsystems]]. It is used by [[OpenSolaris]] and a growing number of layered applications, including [[GlassFish]], across a variety of OS platforms. Features include: * Use of [[ZFS]], allowing multiple boot environments and easy package operation rollbacks * Transactional actions * Support for multiple platform architectures within a single package * Legacy support for SVR4 packages * Extensive search grammar * Remote search capability * Changes-only based package updates * Network package repository * File and network-based package publication * Package operation history * Multi-platform ports for layered applications: ** Broad platform support: [[Microsoft Windows]], [[Linux]], [[Mac OS X]], [[OpenSolaris]], [[Solaris (operating system)|Solaris]] and [[IBM AIX]] ** Cross-platform update notification and package management [[Graphical user interfaces]]. == External links == * [http://opensolaris.org/os/project/pkg/ OpenSolaris Project: Image Packaging System] * [http://wikis.sun.com/display/IpsBestPractices/ Multi-platform Use of pkg(5) for Layered Applications] * [http://wiki.updatecenter.java.net/ Update Center Project: Delivers Ports of pkg(5) for Layered Use] {{Unix-stub}} [[Category:OpenSolaris]] [[Category:Package management systems]] [[Category:Sun Microsystems software]] [[es:Image Packaging System]] [[it:Image Packaging System]] [[ru:Image Packaging System]]</text> </page> <page> <id>17928</id> <title>Image analogy</title> <text>{{Wikify|date=April 2010}} {{Orphan|date=October 2006}} An "image analogy" is a method of creating an [[image filter]] automatically from training data. In an image analogy process, the transformation between two images A and A' is "learned". Later, given a different image B, it's "analogy" image B' can be generated based on the learned transformation. The image analogy method has been used to simulate many types of image filters: * Toy filters, such as blurring or "embossing." * [[Texture (computer graphics)|Texture]] synthesis from an example texture. * Super-resolution, inferring a high-resolution image from a low-resolutinon source. * Texture transfer, in which images are "texturized" with some arbitrary source texture. * Artistic filters, in which various drawing and painting styles, including oil, pastel, and pen-and-ink rendering, are synthesized based on scanned real-world examples. * Texture-by-numbers, in which realistic scenes, composed of a variety of textures, are created using a simple "painting" interface. * Image colorization, where color is automatically added to grayscale images. ==External links== * [http://mrl.nyu.edu/projects/image-analogies/ Image Analogies at the New York University Media Research Lab] [[Category:Image processing]]</text> </page> <page> <id>17934</id> <title>Image differencing</title> <text>'''Image differencing''' is an [[image processing]] technique used to determine changes between images. The difference between two images is calculated by finding the difference between each pixel in each image, and generating an image based on the result. For this technique to work, the two images must first be aligned so that corresponding points coincide, and their [[photometry (optics)|photometric]] values must be made compatible, either by careful calibration, or by post-processing (using [[color mapping]]). The complexity of the pre-processing needed before differencing varies with the type of image. Image differencing techniques are commonly used in [[astronomy]] to locate objects that fluctuate in brightness or move against the star field. The [[Hutchinson metric]] can be used to "measure of the discrepancy between two [[image]]s for use in [[fractal]] [[image processing]]".<ref> [http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=1355938 Efficient computation of the Hutchinson metric between digitized images] abstract</ref><ref> [http://isis.pub.ro/iafa2003/files/3-5.pdf HUTCHINSON METRIC IN FRACTAL DNA ANALYSIS -- A NEURAL NETWORK APPROACH]</ref> == See also == * [[Blink comparator]] * [[Difference matte]] * [[Image stabilization]] ==Sources and notes== {{Reflist}} == External links == * Sussex Computer Vision webpage: [http://homepages.inf.ed.ac.uk/rbf/CVonline/LOCAL_COPIES/YOUNG/vision6.html Use of motion information in computer vision] {{tech-stub}} [[Category:Image processing]]</text> </page> <page> <id>17947</id> <title>Image processing</title> <text>{{Unreferenced|date=October 2008}} [[Image:Imagen binaria.jpg|thumb|right|300px|Monochrome black/white image]] In [[electrical engineering]] and [[computer science]], '''image processing''' is any form of [[signal processing]] for which the input is an image, such as a [[photograph]] or [[video frame]]; the [[output]] of image processing may be either an image or, a set of characteristics or [[parameter]]s related to the image. Most image-processing techniques involve treating the image as a [[two-dimensional]] [[signal (electrical engineering)|signal]] and applying standard signal-processing techniques to it. Image processing usually refers to [[digital image processing]], but [[Optical engineering|optical]] and [[analog image processing]] also are possible. This article is about general techniques that apply to all of them. The ''acquisition'' of images (producing the input image in the first place) is referred to as [[imaging]]. ==Typical operations== [[Image:Alleia Hamerops composite.jpg|thumb|right|300px|The red, green, and blue color channels of a photograph by [[Sergei Mikhailovich Prokudin-Gorskii]]; the fourth image is a composite]] * [[Affine_transformations|Euclidean geometry transformations]] such as [[Scaling_(geometry)|enlargement]], reduction, and [[Rotation (mathematics)|rotation]] * Color corrections such as [[brightness]] and [[Contrast (vision)|contrast]] adjustments, [[color mapping]], [[Color balance|color balancing]], [[quantization (signal processing)|quantization]], or [[color translation]] to a different [[color space]] * [[Digital compositing]] or optical [[compositing]] (combination of two or more images), which is used in film-making to make a "[[matte (filmmaking)|matte]]" * Interpolation, [[demosaicing]], and recovery of a full image from a [[raw image format]] using a [[Bayer filter]] pattern * [[Image registration]], the alignment of two or more images * [[Image differencing]] and [[morphing]] * [[Image recognition]], for example, may extract the text from the image using [[optical character recognition]] or checkbox and bubble values using [[optical mark recognition]] * [[Segmentation 