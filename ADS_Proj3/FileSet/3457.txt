another, the payload design must implement only the simplest types which all protocols will accept without error, or use Payload Abstraction. A description of example implementations of Payload Abstraction, from the [[elemenope]] User Guide: <blockquote> Doppelganger extension - Doppelganger is an extension to the elemenope Framework which requires an XML schema definition for the payload. This schema is used to dynamically generate Java classes which may be used to marshall data to XML and back. The payload is the generated XML. In this manner, all protocols (at least all protocols implemented at this time) may pass the marshalled XML without error. The Services and their configured Operation implementations only ever see the objects of the classes generated by Doppelganger. Doppelganger uses the Castor Project Open Source data binding framework. </blockquote> <blockquote> RosettaType - RosettaType is a project which defines a generic data structure and several protocol and language specific RosettaEngines. These RosettaEngines translate an instantiated object of any given data type to the RosettaType structure and back to the original object, i.e. from POJO2 to RosettaType and back to POJO. RosettaType provides the most efficient mechanism for payload abstraction, as the RosettaEngine implementation in use for a particular protocol will only translate or “roll out” datatypes which are not supported in that protocol. All other datatypes within the generic payload will be left as-is for simple passage. The RosettaType implementation is not complete. Multiple protocols have been implemented, and are currently being reviewed. When integrated into the elemenope Framework, each ser- vice protocol implementation will gain a class extended from the base implementation to handle the RosettaType functionality. This extension of the base implementation class will allow a user to utilize the simpler form of the service protocol implemen- tation, and only utilize the RosettaType form if needed. RosettaType is maintained by createTank. The RosettaType project is Free and Open Source [FOSS]. </blockquote> <blockquote> When completely implemented, the RosettaType will likely be the preferred method for payload abstraction, as it offers the most natural form, not requiring any design fore-thought. </blockquote> ==Source== elemenope User Guide ==See also== [[elemenope]] ==External links== *[http://elemenope.org/ elemenope home page] *[http://elemenope.org/doc/userguide/userguide-1.1.pdf elemenope User Guide] [[Category:Software architecture]]</text> </page> <page> <id>28705</id> <title>Peace gaming</title> <text>'''Peace gaming''' is a [[neologism]] coined by [[Utsumi Takeshi]] to describe non-military global [[simulation]]s, or simulations that involve both [[military]] and [[civilian]] variables. Peace gaming is based on the idea that global simulations which are modeled entirely on military actions ([[Wargaming|war gaming]]) can never be more than [[zero-sum]] games. In other words, in order for one side to achieve its objective, all others must lose. Proponents of peace gaming simulations argue that when "civilian" factors which exist in the real world, such as the [[economy]], [[manufacturing]], and [[trade]] are brought into play, the simulation becomes not only more realistic but also ceases to be a zero-sum game. Through collaborative action on the part of the competitors as opposed to purely confrontational, all sides can gain benefit and thus all can [[theoretical]]ly claim victory. ==See also== * [[Utsumi Takeshi]] * [[Game theory]] ==External links== *[http://www.friends-partners.org/GLOSAS/Global_University/Global%20University%20System/UNESCO_Chair_Book/Manuscripts/Part_IV_Global_Collaboration/Utsumi,%20Tak/GCEPG_D10_Web/GCEPG_D10.htm "Globally Collaborative Environmental Peace Gaming"], Utsumi's paper (2003 edition) describing the concept *[http://members.tripod.com/~Tetworld/peacegaming.html "Peace Gaming on the Scale of Pentagon War Gaming"] [[Category:Operations research]]</text> </page> <page> <id>28711</id> <title>PeakStream</title> <text>'''PeakStream''' was a [[parallel processing]] software company located in San Mateo, California company founded by Matthew Papakipos and Asher Waldfogel in April 2005 and backed by [[Sequoia Capital]] and [[Kleiner Perkins]]. PeakStream released a high-performance parallel processing library targeting ATI graphics processors in September 2006.<ref>{{cite web|url=http://arstechnica.com/news.ars/post/20060918-7763.html|title=PeakStream unveils multicore and CPU/GPU programming solution}}</ref> It was acquired by [[Google]] on June 5, 2007.<ref>{{cite web|url=http://www.theregister.co.uk/2007/06/05/google_buys_peakstream/|title=Google shivs server crowd with PeakStream buy|publisher=[[The Register]]|date=2007-06-05|accessdate=2007-06-05}}</ref> ==References== {{Reflist}} ==External links== {{DEFAULTSORT:Peakstream}} [[Category:Parallel computing]] [[Category:Google acquisitions]] {{tech-company-stub}}</text> </page> <page> <id>28731</id> <title>Peer-to-peer web hosting</title> <text>'''Peer-to-peer web hosting''' refers to the concept of using [[peer-to-peer]] networking to distribute access to [[webpage]]s. This is differentiated from the [[client–server model]] which involves the distribution of Web data between dedicated [[web server]]s and user-end client computers. P2P web hosting may take the form of P2P [[web cache]]s and [[Content delivery network]]s like [[Dijjer]] and [[Coral Cache]] which allow users to hold copies of data from single web pages and distribute the caches with other users for faster access during peak traffic. ==See also== * [[Opera (web browser)#Opera Unite|Opera Unite]] * [[Freesite]]s on [[Freenet]] * [[YouServ]] * [[cloud computing]] {{File sharing protocols}} [[Category:File sharing]] [[Category:Peer-to-peer computing]] [[Category:Web hosting]]</text> </page> <page> <id>28750</id> <title>Pelmanism (system)</title> <text>{{Cleanup|date=June 2010}}'''Pelmanism''' was a system of training the mind which was popular in the [[United Kingdom]] during the first half of the twentieth century. Originally devised as a memory system in the [[1890s]] by [[William Joseph Ennever]], the system was taught via [[Distance education|correspondence]] from the [[Pelman Institute]] in London. It was advertised as a system of scientific mental training which strengthened and developed your mind just as physical training strengthened your body. It was developed to expand "Mental Powers in every direction" and "remove those tendencies to indolence and inefficiency". The system promised to cure a range of problems such as [[forgetfulness]], [[depression (mood)|depression]], [[phobia]], [[procrastination]], and "Lack of System".<ref>[http://www.ennever.com/histories/history386p.php The Pelman School of Memory, The Pelman Institute and Pelmanism | Ennever family history website, accessed 2010.06.01]</ref> ==Notes== {{Reflist|colwidth=30em}} [[Category:Mental structures]]</text> </page> <page> <id>28751</id> <title>Peloton (super computer)</title> <text>The '''Peloton''' Super Computer purchase is a program at the [[Lawrence Livermore National Laboratory]] intended to provide tera-flop computing capability using commodity Scalable Units (SUs). The [http://www.llnl.gov/linux/peloton/rfp/ Peloton RFP] defines the system configurations<ref>{{cite web | title = Linux at Livermore | url = http://www.llnl.gov/computing/tutorials/linux_clusters/ | accessdate = 2007-03-01 }} </ref>. [http://www.appro.com/ Appro] was awarded the contract for '''Peloton''' which includes the following machines: {| class="wikitable" |- ! Machine ! Nodes ! TPP (TFLops) |- ! atlas | 1152 || 44.24 |- ! hopi | 80|| 2.92 |- ! minos | 864 || 33.18 |- ! rhea | 576 || 22.12 |- ! yana | 80 || 3.07 |- ! zeus | 288 || 11.06 |} All of the machines run the [[CHAOS (Linux Clustering)|CHAOS]] variant of 