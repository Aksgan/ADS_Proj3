discussions take place primarily on the #parrot channel on irc.perl.org. In addition, there are weekly moderated meetings for Parrot and language developers hosted in #parrotsketch on the same network. Much discussion also occurs on the parrot-dev mailing list, hosted by parrot.org. Design discussions exist in the form of Parrot Design Documents, or PDDs, in the Parrot repository [http://docs.parrot.org/parrot/latest/html/pdds.html]. The chief architect or another designated designer produces these documents to explain the philosophy of a feature as well as its interface and design notes. Parrot hackers turn these documents into executable tests, and then existing features. The Parrot team releases a new stable version of the software on the third Tuesday of every month. Core committers take turns producing releases in a revolving schedule, where no single committer is responsible for multiple releases in a row. This practice has improved the project's velocity and stability. ==License== Parrot is a [[free software]] project, distributed under the terms [[Artistic License]] Version 2.0. ==See also== {{Portal|Free software}} * [[Common Language Runtime]] (CLR) * [[Comparison of application virtual machines]] * [[mod_parrot]] ==References== {{Reflist|2}} ==External links== * [http://www.parrot.org/ Parrot homepage] * [http://perl6.cz/wiki/Perl_6_and_Parrot_links Perl 6 and Parrot links] [[Category:Perl]] [[Category:Register-based virtual machines]] [[Category:Free compilers and interpreters]] [[Category:Cross-platform software]] [[Category:Free software programmed in C]] [[de:Parrot]] [[es:MÃ¡quina virtual Parrot]] [[fr:Parrot (machine virtuelle)]] [[it:Parrot]] [[nl:Parrot virtual machine]] [[ja:Parrot]] [[pl:Parrot]] [[pt:Parrot]] [[ru:Parrot]]</text> </page> <page> <id>28525</id> <title>Participatory modeling</title> <text>{{multiple issues|orphan =February 2009|confusing =June 2008|introrewrite =June 2008}} '''Participatory modeling''' is an approach which is a branch of the general field of [[conceptual modeling]]. Its specialisation is aimed towards involvement of a large number of people. Benefits obtained from this type of modeling is numerous, depending on the application area. In particular participatory modeling can give a high degree of ownership and motivation towards change for the people involved in the modeling process. There exists two major approaches which themselves provide highly different goals for the modeling; Continuous modeling and conference modeling. ==Continuous modeling== Continuous modeling focus on the [[end-user]] being the active modeler. This can be incorporated into an adaptable, context-sensitive, "intelligent" system, which is suited to the end-user on an individual level, this combination is often termed model generated workplaces or model generated user environments. The idea is that the end-user potentially has the greatest actual domain knowledge and thus the organization as a whole benefits by obtaining and [[externalization|externalize]] this knowledge. ==Conference modeling== Conference modeling is an approach where the goal often is of a more social kind, such as motivating, [[change management]], [[externalization]] of knowledge and so on. The idea is to involve a large number of diversified people from the domain in question. Then the modeling process is performed in participation among them during a fixed period of time. ==See also== * [[Model-driven architecture]] * [[Participatory Design]] * [[SEQUAL framework]] * [[Web2.0]] ==References== {{cite paper | author = Alexander Nossum | title = Modeling 2.0? State-of-the-art in participatory modeling | year = 2008 | url =http://folk.ntnu.no/alexanno/skole/ModIS/ParticipatoryModeling/ParticModel.pdf | format = [[PDF]] | accessdate = 2008-05-06 }} [[Category:Operations research]] [[Category:Scientific modeling]]</text> </page> <page> <id>28538</id> <title>Partition problem</title> <text>In [[computer science]], the '''partition problem''' is an [[NP-complete]] problem. The problem is to decide whether a given [[multiset]] of integers can be [[partition of a set|partitioned]] into two "halves" that have the same sum. More precisely, given a multiset ''S'' of integers, is there a way to partition ''S'' into two subsets ''S''<sub>1</sub> and ''S''<sub>2</sub> such that the sum of the numbers in ''S''<sub>1</sub> equals the sum of the numbers in ''S''<sub>2</sub>? The subsets ''S''<sub>1</sub> and ''S''<sub>2</sub> must form a [[Partition of a set|partition]] in the sense that they are [[Disjoint sets|disjoint]] and they [[Cover (topology)|cover]] ''S''. The [[optimization problem|optimization version]] asks for the "best" partition, and can be stated as: Find a partition into two subsets <math>S_1, S_2</math> such that <math>\max(\operatorname{sum}(S_1), \operatorname{sum}(S_2))</math> is minimized (sometimes with the additional constraint that the sizes of the two sets in the partition must be equal, or differ by at most 1). The partition problem is equivalent to the following special case of the [[subset sum problem]]: given a set ''S'' of integers, is there a subset ''S''<sub>1</sub> of ''S'' that sums to exactly ''t'' /2 where ''t'' is the sum of all elements of ''S''? (The equivalence can be seen by defining ''S''<sub>2</sub> to be the [[Set difference|difference]] ''S'' &minus; ''S''<sub>1</sub>.) Therefore, the [[pseudo-polynomial time]] dynamic programming solution to subset sum applies to the partition problem as well. A variation of the partition problem is the [[3-partition problem]], in which the set ''S'' must be partitioned into |''S''|/3 triples each with the same sum. In contrast to partition, 3-partition has no pseudo-polynomial time algorithm unless '''[[P = NP]]''': 3-partition remains NP-complete even when using [[unary coding]]. ==Methods== Although the partition problem is NP-complete, there are heuristics that solve the problem in many instances, either optimally or approximately. For this reason, it has been called "The Easiest Hard Problem" by [[Brian Hayes (scientist)|Brian Hayes]].<ref name=hayes>{{Harvnb|Hayes|2002}}</ref> The [[pseudo-polynomial time]] [[dynamic programming]] solution for the [[subset sum problem]] applies to the partition problem as well, and gives an exact answer in polynomial time when the size of the given integers is bounded. In general, however, the numbers in the input may be exponential in the input size, and this approach may not be feasible. One approach to the problem, imitating the way children choose teams for a game, is the ''greedy algorithm'', which goes through the numbers in descending order, assigning each of them to whichever subset has the smaller sum. This works well when the numbers in the set are of about the same size as its cardinality or less. Another heuristic, due to [[Narendra Karmarkar]] and [[Richard Karp]],<ref>{{Harvnb|Karmarkar|Karp|1982}}</ref> is the ''differencing'' algorithm, which at each step removes two numbers from the set and replaces them by their difference. This represents the decision to put the two numbers in different sets, without immediately deciding which one is in which set. The differencing heuristic performs better than the greedy one, but is still bad for instances where the numbers 