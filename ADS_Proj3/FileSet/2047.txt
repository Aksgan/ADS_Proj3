on. This provided the opportunity to drop some obsolescent features, which remained available to customers who needed them in the form of the "BONVME" option. The "2900" suffix was dropped at System Version 213 (SV213) when ICL launched Series 39 in 1985 as the successor to the original 2900 series; and the "Open" prefix was added after SV294 when VME became capable of hosting applications written originally for [[Unix]] through a [[UNIX System V|UNIX System V Release 3]] based subsystem using the [[ASCII]] character encoding adapted to run under VME. The most recent incarnations of VME run as a hosted subsystem, called '''''superNova''''', within [[Microsoft Windows]], or [[SUSE]] or [[Red Hat Enterprise Linux]] on [[Intel Corporation|Intel]]-based hardware.<ref>[http://www.vmesupport.net/brochures/superNOVAWP.pdf Supernova whitepaper]</ref> ==Architecture== VME is structured as a set of layers, each layer having access to resources at different levels of abstraction. Virtual resources provided by one layer are constructed from the virtual resources offered by the layer below. Access to the resources of each layer is controlled through a set of Access Levels: in order for a process to use a resource at a particular access level, it must have an access key offering access to that level. The concept is similar to the "rings of protection" in [[Multics]]. The architecture allows 16 access levels, of which the outer 6 are reserved for user-level code. Orthogonally to the access levels, the operating system makes resources available to applications in the form of a Virtual Machine. A Virtual Machine can run multiple processes. In practice, a VME Virtual Machine is closer to the concept of a process on other operating systems, while a VME process is more like a thread. The allocation of resources to a virtual machine uses a stack model: when the stack is popped, all resources allocated at that stack level are released. Calls from an application to the operating system are therefore made by a call that retains the same process stack, but with a change in protection level; the resulting efficiency of system calls is one of the features that makes the architecture competitive. Communication between Virtual Machines is achieved by means of Events (named communication channels) and shared memory areas. The hardware architecture also provides [[semaphore (programming)|semaphore]] instructions INCT (increment-and-test) and TDEC (test-and-decrement). Files and other persistent objects are recorded in a repository called the Catalogue. Unlike other operating systems, the file naming hierarchy is independent of the location of a file on a particular tape or disk volume. In days where there was more need for offline storage, this made it easy to keep track of files regardless of their location, and to move files between locations without renaming them. As well as files, the Catalogue keeps track of users and user groups, volumes, devices, network connections, and many other resources. Metadata for files can be held in an object called a File Description. [[Interrupt]]s are handled by creating a new stack frame on the stack for the relevant process, handling the interrupt using this new environment, and then popping the stack to return to the interrupted process. ===OMF===<!-- "Object Module Format" redirects to this section --> Compiled object code is maintained in a format called OMF (Object Module Format). Unlike in many other operating systems, this is also the format used by the loader. Various compilers are available, as well as utilities, notably the Collector, which links the code in several OMF modules into a single module, for more efficient loading at run-time, and the Module Amender, which allows patching of the instructions in an OMF module to fix bugs, using assembly language syntax. ===SCL=== The command language for VME is known as SCL (System Control Language). This is much more recognizably a typed [[high-level programming language]] than the job control or shell languages found in most other operating systems: it can be likened to scripting languages such as [[JavaScript]], though its surface syntax is derived from [[Algol 68]]. SCL is designed to allow both line-at-a-time interactive use from a console or from a [[shell script|command file]], and creation of executable scripts or programs (when the language is compiled into object module format in the same way as any other VME programming language). The declaration of a procedure within SCL also acts as the definition of a simple form or template allowing the procedure to be invoked from an interactive terminal, with fields validated according to the data types of the underlying procedure parameters or using the default procedure parameter values. The commands use a standardised acronym format referred to as "DALIX": * (D)isplay * (A)mend * (L)ist * (I)nsert / (I)ntroduce * (X) Delete SCL is block-structured, with begin/end blocks serving the dual and complementary roles of defining the lexical scope of variable declarations, and defining the points at which resources acquired from the operating system should be released. Variables in the language (which are accessible from applications in the form of [[environment variable]]s) can have a number of simple types such as strings, superstrings (sequences of strings), booleans, and integers, and are also used to contain references to system resources such as files and network connections. A simple code example can be seen on the [[99 bottles of beer]] website.<ref>[http://99-bottles-of-beer.net/language-scl-848.html SCL code example on the 99 bottles of beer website]</ref> ===Enhanced security variants=== As a result of [[International Computers Limited|ICL's]] heavy involvement with delivery of computer services to the UK Public Sector, in particular those with special security requirements such as [[OPCON CCIS]], it was an early entrant into the market for [[Information Security|Secure Systems]]. VME formed a core of ICL's activities in the Secure Systems arena. It had the advantage that as the last large-scale operating system ever designed, and one built from scratch, its underlying architecture encompassed many of the primitives needed to develop a Secure System, in particular the hardware assisted Access Control Registers (ACR) to limit to privileges that could be taken by any process (including Users). This led to the UK Government's Central Computing and Telecommunications Agency ([[CCTA]]) 