8 visible per [[scan line]]) *25 colors simultaneously (although more colors are possible using programming tricks) from a hardware [[Palette (computing)|color palette]] of 64 colors *Picture resolution of 256 × 240 pixels (fully visible on PAL, but cropped to 256 × 224 on most [[NTSC]] television sets) ==Technical information== The PPU is controlled via eight [[Processor register|registers]] visible in the [[CPU]]'s address space in the addresses $2000 through $2007. All data and information is passed to the PPU through these, except the raw tile data (there are exceptions, as some games had RAM instead of ROM to store the tile data, and the tiles had to be written each time), which is hardwired to the PPU's address space. The PPU uses the tile graphics data together with information stored by the program in the PPU's RAM, such as color and position, to render the final graphical output to the screen. The lowest graphical components the PPU operates with are [[tile]]s, which are blocks of 8&times;8 or 8&times;16 pixels. The tiles are stored in a [[Read-only memory|ROM]] chip on the game cartridge. The tiles are the basic building blocks, used to create larger moving objects, or large static backgrounds. Essentially, the PPU supports two different kinds of objects: movable (sprites) and non-movable (background). Both kind of objects are basically a tile, and moreover a sprite and background object can use the same tile. The difference is that a tile used as a sprite can move around, whereas a tile used as a background cannot. Sprite data is stored in a special memory called the "Sprite-RAM" or "SPR-RAM" for short, which is a 256-byte memory built into the PPU core. The data stored here is 4 bytes; the position, color and tile, for each of the 64 sprites. This data is used by the PPU to place the sprite when it [[Rendering (computer graphics)|renders]] the frame. Background objects, however, are stored in a much less exclusive way, which is more like the way characters are stored in [[text mode]] on [[Personal computer|PCs]]. A background is defined by a simple data structure called a nametable, which is essentially a two dimensional array. The integer value in each array slot corresponds to a tile number, and the index values of this slot correspond to the tile's intended x/y position on screen. The PPU has, without the use of memory mappers, two nametables, so smooth scrolling between backgrounds is possible. A color palette must be defined in order to show graphics on the screen. It is stored in a separate 32 byte location in RAM, known as "palette-RAM". Each entry here picks a color from the hardware color palette, which are the predefined colors to choose between. 16 colors can be chosen for sprites, and 16 colors for backgrounds. However, bytes 4, 8 and 12 of the sprite palette, and bytes 0, 4, 8, and 12 of the background palette, are not in use by the PPU. Therefore, the number of actually usable colors is reduced to 25 instead of 32. The first byte of the sprite palette also defines the global background color for both sprites and the background. ==See also== * [[Nintendo Entertainment System]] ==External links== *[http://nesdev.parodius.com/NinTech.txt Technical information about the PPU] *[http://nesdev.parodius.com/2C02%20technical%20reference.TXT Very detailed technical information] [[Category:Graphics chips]] [[Category:Nintendo Entertainment System]] [[Category:Nintendo hardware]] [[sv:Picture processing unit]]</text> </page> <page> <id>29249</id> <title>Pie in the Sky (game engine)</title> <text>''This article is about the game engine, for other uses see [[Pie in the sky]].'' '''Pie in the Sky''' is a [[2.5D]] and [[3D computer graphics|3D]] [[first person shooter]] [[video game engine|engine]] most popular in the mid to late [[1990s]] by Pie in the Sky Software, also known as the '''3D Game Creation''' or '''3D Game Creation System''' engine. The engine was used in two games by the company as well as many other independent games and amateur projects after it was turned into a game creator, largely due to it minimizing the amount of [[computer programming]] knowledge needed to make 3D games in its editing tools. ==History== The company first learned to program 3D by creating a modestly popular [[Terminate and Stay Resident|TSR]] 3D [[screen saver]] called InnerMission in 1987.<ref>[http://garbo.uwasa.fi/pc/screen.html Inner Mission - Garbo]</ref> After more developments, they developed a 3D [[flight simulator]] ''[[Pie in the Sky (game engine)#Corncob 3D|Corncob 3D]]'' in [[1992 in video gaming|1992]]. The game was inspired by a flight simulator for the [[Apple II]]. The game was first released as [[shareware]] and then later commercially as ''Corncob Deluxe'' by [[MVP Software]]. After seeing ''[[Wolfenstein 3D]]'', they wrote a new 3D engine in [[C (programming language)|C]] and used it in the first person shooter ''[[Pie in the Sky (game engine)#Lethal Tender|Lethal Tender]]'' in [[1993 in video gaming|1993]]. Based on that, they were hired by a [[Germany|German]] group to create a [[German language|German]] first person shooter.<ref>[http://pieintheskysoftware.com/menuitem-resources-history.html Historical Pie in the Sky - Pie in the Sky Software]</ref> Pie in the Sky released ''[[Pie in the Sky (game engine)#Terminal Terror|Terminal Terror]]'', the sequel to ''Lethal Tender'', in [[1994 in video gaming|1994]]. The development of this game, to be published by [[Expert Software]], had taken precedence over the German development and thus strained the relationship. The game was relatively successful, but the company sensed they were unable to keep up and stay ahead of other first person shooter developers. To get around this and enter a [[niche market]], they decided to create the ''3D Game Creation System'' and market themselves to consumers who wanted to make their own 3D Games. It is first used by games such as ''[[Pie in the Sky (game engine)#Red Babe|Red Babe]]'' by The DaRK CaVErN Productions and ''[[Pie in the Sky (game engine)#La Cosa Nostra|La Cosa Nostra]]'' by Slade 3D Software. In [[1995 in video gaming|1995]] it was used in [[Pie in the Sky (game engine)#Despair series|''Despair 2'' and ''3'']], ''[[Pie in the Sky (game engine)#Terror in Christmas Town|Terror in Christmas Town]]'', ''[[Pie in the Sky (game engine)#Deer Napped|Deer Napped]]'', and ''[[Pie in the Sky (game engine)#Castaway: The Ordeal Begins|Castaway: The 