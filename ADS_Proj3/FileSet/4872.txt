then on a figure) *http://www.web3d.org/x3d/content/examples/HelloWorld.x3d *http://cic.nist.gov/vrml/nistlogo.x3d ===Example documents of X3DOM code=== *http://cic.nist.gov/vrml/nistlogo_x3dom.html ===General=== *[http://www.web3d.org/x3d/content/examples/X3dResources.html X3D Resources], [http://www.web3d.org/x3d/content/examples/X3dResources.html#Conversions X3D Conversions], [http://www.web3d.org/x3d/content/examples/X3dResources.html#Books X3D Books], and [http://www.web3d.org/x3d/content/examples/X3dResources.html#Examples X3D Examples] *[http://www.web3d.org/x3d/wiki/index.php/Player_support_for_X3D_components Player support for X3D components] and [http://www.web3d.org/x3d/wiki/index.php/Tool_support_for_X3D_components Tool support for X3D components] *[http://cic.nist.gov/vrml/vbdetect.html VRML and X3D Plugin Detector] that determines which VRML and X3D plugins are installed in your web browser *[http://search.dmoz.org/cgi-bin/search?search=x3d X3D] at the [[Open Directory Project]] *[http://www.web3d.org/x3d/opensource List of X3D Open Source Projects] maintained by web3d.org ===Documentation=== *[http://www.web3d.org/x3d/specifications/ X3D Specifications] *[http://www.web3d.org/ Web3D Consortium] *[http://www.web3d.org/x3d/wiki/index.php/Main_Page X3D Wiki] *[http://www.web3d.org/x3d/content/X3dTooltips.html X3D Tooltips] *[http://xml.coverpages.org/vrml-X3D.html VRML (Virtual Reality Modeling Language) and X3D] *[http://www.xml.com/pub/a/2003/08/06/x3d.html Extensible 3D: XML Meets VRML] {{vector graphics markup languages|state=uncollapsed}} {{ISO standards}} {{DEFAULTSORT:X3d}} [[Category:3D computer graphics]] [[Category:Graphics file formats]] [[Category:Graphics standards]] [[Category:ISO standards]] [[Category:Vector graphics markup languages]] [[Category:Virtual reality]] [[Category:XML-based standards]] [[cs:Extensible 3D]] [[da:X3d]] [[de:X3D]] [[es:X3D]] [[fr:Extensible 3D]] [[it:X3D]] [[nl:X3D]] [[ja:X3D]] [[pl:X3D]] [[pt:X3D]] [[ru:X3D]] [[sv:X3D]] [[tr:X3D]] [[yo:X3D]] [[zh:X3D]]</text> </page> <page> <id>40607</id> <title>X704</title> <text>The '''x704''' is a [[microprocessor]] that implements the 32-bit version of the [[PowerPC]] [[instruction set architecture]] (ISA) developed by [[Exponential Technology]]. The microprocessor was notable for its high clock frequency (for the time, circa 1997) in the range of 400 to 533 MHz, its use of [[Bipolar junction transistor|bipolar transistor]]s for logic and [[CMOS]] circuits for memory, and its failure to see use in an [[Apple, Inc|Apple]] [[Apple Macintosh|Macintosh]], the opposite of what industry observers such as ''[[Microprocessor Report]]'' expected. Exponential Technology eventually failed as a result of the x704's lack of success, but its former employees founded [[Intrinsity]], a start-up that developed a high clock frequency [[MIPS architecture|MIPS]] implementation, FastMath. The company has now left the microprocessor business and licenses Fast14 [[Dynamic logic (digital logic)|dynamic logic]] to third-parties such as [[ATI]] for their [[GPU]]s. The x704 was a [[superscalar]] microprocessor that issued up to three instructions per cycle to an [[arithmetic logic unit]] (ALU), [[floating-point unit]] (FPU) and branch unit. To realize the short cycle times, the caches were kept small, limiting its performance. There are three levels of cache. The first consisted of separate 2 KB instruction and data caches. These were direct-mapped. The L2 cache was on-die and was 32 KB large. It is eight-way set set-associative. The L3 cache was larger, supporting capacities of 512 KB to 2 MB, and was located externally. The x704 contained 2.7 million transistors, of which 0.7 million were [[Bipolar junction transistor|bipolar transistors]] and 2.0 million were [[metal oxide semiconductor]] (MOS), and measured 15 mm by 10 mm (150 mm<sup>2</sup>). It was fabricated in a 0.5 Âµm [[BiCMOS]] process with six levels of interconnect. It used 3.6 and 2.1 V power supplies and dissipated less than 85 W at 533 MHz. The x704 was packaged in a 356-ball [[ball grid array]] (BGA). == References == * Halfhill, Tom R. (November 1996). "PowerPC Regroups". ''[[Byte (magazine)|Byte]]''. * Halfhill, Tom R. (December 1996). "PowerPC Speed Demon". ''[[Byte (magazine)|Byte]]''. * Maier, Cliff A. et al. (1997). "A 533-MHz BiCMOS Superscalar RISC Microprocessor". ''IEEE Journal of Solid-State Circuits'', Volume 32, Number 11, pp. 1625&ndash;1634. {{Electron-stub}} [[Category:PowerPC implementations]]</text> </page> <page> <id>40614</id> <title>X86 instruction listings</title> <text>{{nofootnotes|date=January 2010}} {{lowercase|title=x86 instruction listings}} The [[x86]] [[instruction set]] has been extended several times, introducing wider registers and datatypes and/or new functionality. {{TOC right}} ==x86 integer instructions== This is the full 8086/8088 instruction set, but most, if not all of these instructions are available in 32-bit mode, they just operate on 32-bit registers (eax, ebx, etc) and values instead of their 16-bit (ax, bx, etc) counterparts. See also [[x86 assembly language]] for a quick tutorial for this processor family. The updated instruction set is also grouped according to architecture (i386, i486, i686) and more generally is referred to as x86_32 and x86_64 (also known as AMD64). It is important to know the x86-64 instruction set. ===Original 8086/8088 instructions=== {| class="wikitable" ! Instruction !! Meaning !! Notes |- | [[Intel BCD opcodes|AAA]] || '''A'''SCII '''a'''djust AL after '''a'''ddition || used with unpacked [[binary coded decimal]] |- | AAD || '''A'''SCII '''a'''djust AX before '''d'''ivision || 8086/8088 datasheet documents only base 10 version of the AAD instruction (opcode 0xD5 0x0A), but any other base will work. Later Intel's documentation has the generic form too. NEC V20 and V30 (and possibly other NEC V-series CPUs) always use base 10, and ignore the argument, causing a number of incompatibilities |- | AAM || '''A'''SCII '''a'''djust AX after '''m'''ultiplication || Only base 10 version is documented, see notes for AAD |- | AAS || '''A'''SCII '''a'''djust AL after '''s'''ubtraction || |- | ADC || '''Ad'''d with '''c'''arry || adc $immediate,%register ; adc %register,%register |- | ADD || Add || |- | AND || [[Logical conjunction|Logical AND]] || |- | CALL || Call procedure || |- | CBW || '''C'''onvert '''b'''yte to '''w'''ord || |- | CLC || '''Cl'''ear [[Carry flag|'''c'''arry flag]] || |- | CLD || '''Cl'''ear '''d'''irection flag || |- | [[CLI (x86 instruction)|CLI]] || '''Cl'''ear [[IF (x86 flag)|'''i'''nterrupt flag]] || |- | CMC || '''C'''o'''m'''plement '''c'''arry flag || |- | CMP || '''C'''o'''mp'''are operands || |- | CMPSB || '''C'''o'''mp'''are bytes in memory || |- | CMPSW || '''C'''o'''mp'''are words || |- | CWD || '''C'''onvert '''w'''ord to '''d'''oubleword || |- | [[Intel BCD opcodes|DAA]] || '''D'''ecimal '''a'''djust AL after '''a'''ddition || (used with packed [[binary coded decimal]]) |- | [[Intel BCD opcodes|DAS]] || '''D'''ecimal '''a'''djust AL after '''s'''ubtraction || |- | DEC || '''Dec'''rement by 1 || |- | DIV || Unsigned '''div'''ide || |- | ESC || Used with [[floating-point unit]] || |- | [[HLT]] || Enter '''h'''a'''lt''' state || |- | IDIV || S'''i'''gned '''div'''ide || |- | IMUL || S'''i'''gned '''mul'''tiply || |- | IN || '''In'''put from port || |- | INC || '''Inc'''rement by 1 || |- | [[INT (x86 instruction)|INT]] || Call to [[interrupt|'''int'''errupt]] || |- | INTO || Call to '''int'''errupt if '''o'''verflow || |- | IRET || '''Ret'''urn from '''i'''nterrupt || |- | Jxx || '''J'''ump if condition || (''JA, JAE, JB, JBE, JC, JCXZ, JE, JG, JGE, JL, JLE, JNA, JNAE, JNB, JNBE, JNC, JNE, JNG, JNGE, 