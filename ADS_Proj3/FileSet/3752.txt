to be undecidable. Suppose ''E''(''M'') is the problem of determining whether the language a given Turing machine ''M'' accepts is empty (in other words, whether ''M'' accepts any strings at all). We show that ''E'' is undecidable by a reduction from ''H''. To obtain a contradiction, suppose ''R'' is a decider for ''E''. We will use this to produce a decider ''S'' for ''H'' (which we know does not exist). Given input ''M'' and ''w'' (a Turing machine and some input string), define ''S''(''M'', ''w'') with the following behavior: ''S'' creates a Turing machine ''N'' that accepts only if the input string to ''N'' is ''w'' and ''M'' halts on input ''w'', and does not halt otherwise. The decider ''S'' can now evaluate ''R''(''N'') to check whether the language accepted by ''N'' is empty. If ''R'' accepts ''N'', then the language accepted by ''N'' is empty, so in particular ''M'' does not halt on input ''w'', so ''S'' can reject. If ''R'' rejects ''N'', then the language accepted by ''N'' is nonempty, so ''M'' does halt on input ''w'', so ''S'' can accept. Thus, if we had a decider ''R'' for ''E'', we would be able to produce a decider ''S'' for the halting problem ''H''(''M'', ''w'') for any machine ''M'' and input ''w''. Since we know that such an ''S'' cannot exist, it follows that the language ''E'' is also undecidable. == See also == * [[Reduction (recursion theory)]] * [[Many-one reduction]] * [[Truth table reduction]] * [[Turing reduction]] * [[Optimization (computer science)]] == External links == == References == *Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest and Clifford Stein, Introduction to Algorithms, MIT Press, 2001, ISBN 978-0-262-03293-3 *Hartley Rogers, Jr.: Theory of Recursive Functions and Effective Computability, McGraw-Hill, 1967, ISBN 978-0-262-68052-3. *Peter Bürgisser: Completeness and Reduction in Algebraic Complexity Theory, Springer, 2000, ISBN 978-3-540-66752-0. *E.R. Griffor: Handbook of Computability Theory, North Holland, 1999, ISBN 978-0-444-89882-1. {{DEFAULTSORT:Reduction (Complexity)}} [[Category:Computational complexity theory]] [[Category:Structural complexity theory]] [[ca:Reducció (complexitat)]] [[de:Reduktion (Theoretische Informatik)]] [[ko:환산 (복잡도)]] [[he:רדוקציה חישובית]] [[ja:還元 (計算複雑性理論)]] [[ru:Сведение (теория сложности вычислений)]] [[sk:Redukcia (teoretická informatika)]] [[th:การลดรูป (ความซับซ้อน)]] [[zh:歸約]]</text> </page> <page> <id>31586</id> <title>Reduction of summands</title> <text>{{Orphan|date=September 2010}} '''Reduction of summands''' is an algorithm for fast [[binary multiplication]] of non-signed binary integers. It is performed in three steps: production of summands, reduction of summands, and summation. ==Steps== ===Production of summands=== In binary multiplication, each row of the summands will be either zero or one of the numbers to be multiplied. Consider the following: 1001 x1010 ----- 0000 1001 0000 1001 The second and fourth row of the summands are equivalent to the first term. Production of the summands requires a simple [[AND gate]] for each summand. Given enough AND gates, the time to produce the summands will be one cycle of the [[arithmetic logic unit]]. ===Reduction of summands=== The summands are reduced using a common 1-bit [[adder (electronics)|full adder]] that accepts two 1-bit terms and a carry-in bit. It produces a sum and a carry-out. The full adders are arranged such that the sum remains in the same column of summands, but the carry-out is shifted left. In each round of reduction, three bits in a single column are used as the two terms and carry-in for the full adder, producing a single sum bit for the column. This reduces the bits in the column by a factor of 3. However, the column to the right will shift over carry-out bits, increasing the bits in the column by a third of the number of rows of summands. At worst, the reduction will be 2/3 the number of rows per round of reduction. The following shows how the first round of reduction is performed. Note that all "empty" positions of the summands are considered to be zero (a . is used here as indicator of the "assumed zero values"). In each row, the top three bits are the three inputs to the full adder (two terms and carry-in). The sum is placed in the top bit of the column. The carry-out is placed in the second row of the column to the left. The bottom bit is a single feed into a adder. The sum of this adder is placed in the third row of the column. Carry-out is ignored as it will always be zero, but by design it would be placed in the fourth row of the column to the left. For design, it is important to note that rows 1, 3, 5, ... (counting from the top) are filled with sums from the column itself. Rows 2, 4, 6, ... are filled with carry-out values from the column to the right. 1011 x0110 ----- ...0000 ..1011. .1011.. 0000... ------- 0111010 000100. 00000.. Reduction is performed again in exactly the same way. This time, only the top three rows of summands are of interest because all other summands must be zero. 0111010 000100. 00000.. ------- 0110010 001000. When there are only two significant rows of summands, the reduction cycles end. A basic full adder normally requires three cycles of the [[arithmetic logic unit]]. Therefore, each cycle of reduction is commonly 3 cycles long. ===Summation=== When there are only two rows of summands remaining, they are added using a fast adder. There are many designs of fast adders, any of which may be used to complete this algorithm. ==Calculation time== The calculation time for the reduction of summands algorithm is: ''T'' = 1Δt + r3Δt + FA (where r is the number of reduction cycles and FA is the time for the fast adder at the end of the algorithm). {{DEFAULTSORT:Reduction Of Summands}} [[Category:Computer arithmetic]]</text> </page> <page> <id>31588</id> <title>Redundancy (engineering)</title> <text>[[File:PC-Netzteil (redundant).jpg|thumb|Redundant power supply]] [[File:Reliability block diagram.png|thumb|Redundant subsystem "B"]] In [[engineering]], '''redundancy''' is the duplication of critical [[wikt:Component|component]]s of a system with the intention of increasing reliability of the [[system]], usually in the case of a backup or [[fail-safe]]. In many [[safety-critical system]]s, such as [[fly-by-wire]] and [[hydraulic]] systems in [[aircraft]], some parts of the control system may be triplicated,{{ref|spaceshuttle}} which is 