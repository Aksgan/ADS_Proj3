to be flown aboard the space shuttle in a project called the Iowa Joint Experiment in Microgravity Solidification (IJEMS). The project involved many institutions, including Iowa State University (ISU), the University of Iowa, the Ames Laboratory, the Institute for Physical Research and Technology, Rockwell International, and Space Industries Incorporated. In September 1995, the project was successfully flown on board STS-69. IJEMS had the following attributes:<ref name="Various">The Fifth Annual Iowa Space Conference, Conference Proceedings, Iowa Space Grant Consortium., 1995.</ref> * Microprocessor: 33 MHz 486SLC * Storage Media: 3MB Flash memory formatted with FAT for executable and data storage * Operating system: DOS * Thermocouples quantity: 32 * Solid state relays quantity: 24 * Programming language: C++ * Hosted experiments quantity: 4 * Available power: 20A @ 28V * Pre-flight acceleration testing: 9G * Smart Can pressure regulation: 1/2 ATM ==External links== * [http://www.sscl.iastate.edu/ - Space Systems and Controls Lab] * [http://sites.google.com/site/ssclisu/ - Space Systems and Controls Lab Wiki Site] * [http://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19960003781_1996103781.pdf - Iowa Joint Experiment in Microgravity Solidification] == References == {{Reflist}} {{DEFAULTSORT:Spacecraft Systems And Controls Lab}} [[Category:Spaceflight]] [[Category:Balloons (aircraft)]] [[Category:Unmanned vehicles]] [[Category:Meteorological instrumentation and equipment]] [[Category:Scientific observation]]</text> </page> <page> <id>35203</id> <title>Spaghetti code</title> <text>{{Refimprove|date=June 2009}} [[Image:Spaghetti.jpg|thumb|A bowl of [[spaghetti]] looks twisted and tangled, which is where the name for spaghetti code comes from.]] '''Spaghetti code''' is a [[pejorative]] term for [[source code]] that has a complex and tangled [[control structure]], especially one using many [[GOTO]]s, exceptions, threads, or other "unstructured" [[Branch (computer science)|branching]] constructs. It is named such because program flow tends to look like a bowl of spaghetti, i.e. twisted and tangled. Spaghetti code can be caused by several factors, including inexperienced programmers and a complex program which has been continuously modified over a long life cycle. [[Structured programming]] greatly decreased the incidence of spaghetti code. ==Examples== Below is what would be considered a trivial example of spaghetti code in [[BASIC programming language|BASIC]]. The program prints the numbers 1 to 10 to the screen along with their square. Notice that indentation is not needed and that the program's <code>[[GOTO]]</code> statements create a reliance on [[line number]]s. Also observe the unpredictable way the flow of execution jumps from one area to another. Real-world occurrences of spaghetti code are more complex and can add greatly to a program's maintenance costs. <source lang="qbasic"> 10 i = 0 20 i = i + 1 30 PRINT i; " squared = "; i * i 40 IF i >= 10 THEN GOTO 60 50 GOTO 20 60 PRINT "Program Completed." 70 END </source> Here is the same code written in a [[structured programming]] style: <source lang="qbasic"> FOR i = 1 TO 10 PRINT i; " squared = "; i * i NEXT i PRINT "Program Completed." END </source> The program jumps from one area to another but this jumping is predictable and formal. This is because using [[for loop]]s and [[Subroutine|functions]] are standard ways of providing [[control flow|flow control]] whereas the ''goto'' statement encourages arbitrary flow control. Though this example is small, real world programs are composed of many lines of code and are difficult to maintain when written in a spaghetti code fashion. == Assembly and script languages == When using the many forms of [[assembly language]] (and also the underlying [[machine code]]) the danger of writing spaghetti code is especially great. This is because they are [[low-level programming language]]s where equivalents for structured control flow statements such as [[for loop]]s and [[while loop]]s seldom exist. Many scripting languages have the same deficiencies: this applies to the batch scripting language of [[DOS]] and [[DIGITAL Command Language|DCL]] on [[OpenVMS|VMS]]. Nonetheless, adopting the same discipline as in [[structured programming]] can greatly improve the readability and maintainability of such code. This may take the form of conventions limiting the use of <code>goto</code> to correspond to the standard structures, or use of a set of assembler macros for <code>if</code> and <code>loop</code> constructs. Most assembly languages also provide a [[function stack]], and [[Subroutine|function]] call mechanisms which can be used to gain the advantages of [[procedural programming]]. Macros can again be used to support a standardized form of parameter passing, to avoid ad hoc [[global variable]]s and the [[Action at a distance (computer science)|action at a distance]] anti-pattern. Programs written in [[High-level programming language|higher-level languages]] with high-level constructs such as ''for loops'' (as in the second example above) are often compiled into assembly or machine code. When this process occurs, the high-level constructs are translated into low-level "spaghetti code" which may resemble the first example above in terms of control flow. But because compilers must be faithful to high-level constructs in the source code, the problems that plague relatively unstructured languages like BASIC do not haunt higher-level languages. It does, however, mean that debugging even mildly optimized code with a source-level debugger can be surprisingly confusing. == Ravioli code == Ravioli code is a type of computer program structure, characterized by a number of small and (ideally) [[loose coupling|loosely-coupled]] [[software component]]s. The term is in comparison with spaghetti code, comparing program structure to [[pasta]]; with [[ravioli]] (small pasta pouches containing cheese, meat, or vegetables) being analogous to [[object (computer science)|object]]s (which ideally are encapsulated modules consisting of both code and data). == Lasagna code == {{main|Architectural layer|Layer (object-oriented design)}} [[Image:Lasagna NIH.jpg|200px|thumb|Lasagna code has many layered components, much like the filling and pasta of its namesake.]] Lasagna code is a type of program structure, characterized by several well-defined and separable ''layers'', where each layer of code accesses services in the layers below through well-defined [[interface (computer science)|interface]]s. The term is in comparison with spaghetti code, comparing program structure to [[pasta]]. The analogy stems from the layered structure of a plate of [[lasagna]], where different ingredients (meat, sauce, vegetables, or cheese) are each separated by strips of pasta. One common instance of lasagna code occurs at the interface between different subsystems, such as between web application code, [[business logic]], and a [[relational database]]. Another common programming technique, alternate hard and soft layers (use of different [[programming language]]s at different levels of the 