{{yes2}}8 | {{no2}}No | {{yes2}}4 | {{yes2}}2 | {{no2}}No | {{yes2}}2 | {{yes2}}Yes |} ===Output=== Feedback components of each controller, to alert the user to events in-game. {| class="wikitable" style="width: auto; table-layout: fixed; text-align: center; font-size: smaller;" ! rowspan="2" style="width: 10em" | Name ! rowspan="2" | Visual ! colspan="2" | [[Transducer]]s |- ! [[Haptic technology|Haptic feedback]] ! [[Sound|Auditory]] |- ! colspan="4" |[[History of video game consoles (fifth generation)|Fifth Generation Consoles]] |- ! [[Nintendo 64 controller|N64 Controller]] | {{no2}}No | {{partial|With [[Rumble Pak]]}} | {{no2}}No |- ! [[Dual Analog Controller]] | {{no2}}No | {{partial|Japan only}} | {{no2}}No |- ! [[DualShock]] | {{no2}}No | {{yes2}}Yes | {{no2}}No |- ! rowspan="2" style="width: 10em" | Name ! rowspan="2" | Visual ! colspan="2" | [[Transducer]]s |- ! [[Haptic technology|Haptic feedback]] ! [[Sound|Auditory]] |- ! colspan="4" |[[History of video game consoles (sixth generation)|Sixth Generation Consoles]] |- ! [[Dreamcast|Dreamcast Controller]] & [[Dreamcast light guns#Dreamcast Gun|Gun]] | {{partial|48x32 pixel monochrome LCD [[Dreamcast#Accessories|VMU]]}} | {{partial|With [[Dreamcast#Accessories|Jump Pack]]}} | {{partial|Piezoelectric Buzzer Via VMU}} |- ! [[DualShock#DualShock 2|DualShock 2]] | {{no2}}No | {{yes2}}Yes | {{no2}}No |- ! [[Xbox|Xbox controller]] | {{no2}}No | {{yes2}}Yes | {{partial|With headset}} |- ! [[Nintendo GameCube|GameCube Controller]] | {{no2}}No | {{yes2}}Yes | {{no2}}No |- ! [[Nintendo GameCube|Wavebird]] | {{no2}}No | {{no2}}No | {{no2}}No |- ! [[Game Boy Advance]] | {{yes2}}240×160 pixel color LCD | {{no2}}No | {{yes2}}Yes |- ! rowspan="2" style="width: 10em" | Name ! rowspan="2" | Visual ! colspan="2" | [[Transducer]]s |- ! [[Haptic technology|Haptic feedback]] ! [[Sound|Auditory]] |- ! colspan="4" |[[History of video game consoles (seventh generation)|Seventh Generation Consoles]] |- ! [[Xbox 360|Xbox 360 Controller]] | {{partial|Some system specific signals communicated through light ring surrounding guide button.}} | {{yes2}}Yes | {{partial|With headset}} |- ! [[PlayStation 3 accessories#Sixaxis|Sixaxis]] | {{partial|Some system specific signals communicated through 4 LED lights at the top of the Sixaxis.}} | {{no2}}No | {{no2}}No |- ! [[DualShock#DualShock 3|DualShock 3 Sixaxis]] | {{partial|Some system specific signals communicated through 4 LED lights at the top of the Sixaxis.}} | {{yes2}}Yes | {{no2}}No |- ! [[PlayStation Portable]] | {{yes2}}480×272 pixel color LCD | {{no2}}No | {{yes2}}Stereo Speakers |- ! [[Wii Remote]] | {{partial|Some system specific signals communicated through 4 LED lights at the bottom of the Wiimote.}} | {{yes2}}Yes | {{yes2}}Yes |- ! [[Wii Remote#Classic Controller|Wii Classic Controller]] | {{no2}}No | {{no2}}No | {{partial|Via [[Wii Remote]]}} |- ! [[Nintendo DS]] | {{yes2}}Two 256×192 pixel color LCDs | {{partial|With [[Rumble Pak#Nintendo DS|Nintendo DS Rumble Pak]]}} | {{yes2}}Stereo Speakers |} == References == <references /> [[Category:Game controllers|Game controllers]] [[Category:Video game hardware]] [[Category:Computing comparisons|Video game controllers]]</text> </page> <page> <id>7184</id> <title>Comparison of database access</title> <text>{{Confusing|date=February 2008}} {{ProgLangCompare}} This is an article [[Comparability|comparing]] [[database]] [[programming language]]s. == Database input commands == === Database and table management === {| class="wikitable" !Database !Create database !Delete database !List databases !Use a db !Create table !Delete table !List tables !List table fields |- | [[MySQL]] | create database ''dbname''; | drop database ''dbname''; | show databases; | use ''dbname''; | create table ''tbname''; | drop table ''tbname''; | show tables; | describe ''tbname''; |- | [[PostgreSQL]] | | | | | | | | |- | [[Sqlite]] ver 3 | ? | ? | ? | $ sqlite3 ''filename'' | create table ''tbname'' (''field1'' ''value_type1'', ''field2'' ''value_type2'', ... ) | drop table ''tbname'' | .tables | .schema |- |} === Value types === {| class="wikitable" ! Database ! Integer ! Float ! Text ! Date ! Blob |- | SQLite 3 | INTEGER | DOUBLE | TEXT | DATE | |} === Using data in a table === {| class="wikitable" !Database !show all data in all fields !show all data in some fields !show filtered data in all fields |- | [[MySQL]] | select * from "tbname"; | select "fields" from "tbname"; | select * from "tbname" where "filter_expr"; |} === Filtering expressions === {| class="wikitable" !Database !matching !different !logical AND !logical OR |- | [[MySQL]] | "field" = "value"; | "field" != "value"; | "expr1" AND "expr2" | "expr1" OR "expr2" |} === Altering tables === {| class="wikitable" !Database !Add new column !Delete column !Change column !Add element !Delete element |- | [[MySQL]] | alter table "tbname" add column "column_name"; | alter table "tbname" drop column "column_name"; | alter table "tbname" change "old" "new" "newtype"; | insert into "tbname" ("fields") values ("values"); | delete from "tbname" where "expr"; |} === Managing users and permissions === == MySQL databases == {| class="wikitable" ![[Programming Language|Prog Language]] !Access server !Use database !List databases !List tables |- |raw MySQL access | |use ''db''; |show databases; |show tables; |- |[[PHP]] |$db = mysql_access(host, user, password); |mysql_select_db(''name'', $db); | | |- |[[Python (programming language)|Python]] |db = MySQLdb.connect(host = "hostname", user = "username", passwd = "password", db = "dbname", connect_timeout = 5) |import MySQLdb |c=db.cursor(); c.execute("show databases"); c.fetchall() |c.execute("show tables"); c.fetchall() |} === Reading from tables === {| class="wikitable" ![[Programming Language|Prog Language]] !Describe !List table content !Search |- |raw MySQL access |describe ''tablename''; |select ''field'' from ''tablename''; | |- |[[PHP]] | | | |} == Databases in Object-Relational mapping systems == {{see also|Object-relational mapping}} There are ORMs to manage a database: * [[django (web framework)]] * [[SQLObject]] * others === Defining the object === ==== Django ==== This class represents a row of a table named "Table" <source lang="python"> class Table(models.Model): field1_name = models."field_name"() field2_name = models."field_name"() # More explicit examples integer_field = models.IntegerField() char_field = models.CharField(max_length=1000) </source> === Using a table === {| class="wikitable" ! ! Read value ! Change value ! Search ! Inserting |- |django | table_var."field_name" | table_var."field_name" = "value" | table_var = Table.objects.filter( "expr" ) | table_var = Table() <br /> table_var.save() |} == See also == *[[ODBC]] *[[JDBC]] *[[MySQL]] *[[PostgreSQL]] {{database-stub}} [[Category:Application programming interfaces]] [[Category:Databases]] [[Category:Open source database management systems]] [[Category:Programming languages]] [[Category:SQL data access]]</text> </page> <page> <id>7190</id> <title>Comparison of domestic robots</title> <text>[[Domestic robot]]s can vary widely in their capabilities and tasks. [[Sensor]]s include: cliff or stair sensors, motion sensors, [[Ultrasonic sensor|ultrasonic object sensors]], dirt sensors, [[IR]] sensors, and more. Intelligence varies also. Some have none while others can map out their environment and 