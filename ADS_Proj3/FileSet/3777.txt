Equilibrium payoff is equal to the minmax payoff, then the player has no reason to stick to a socially optimum strategy and is free to play a selfish strategy throughout, since the punishment cannot affect him (being equal to the minmax payoff). This deviation to a selfish Nash Equilibrium strategy is explained by the [[Chainstore paradox]]. The second class of finitely repeated games are usually thought of as infinitely repeated games. ==Repeated prisoner's dilemma== Although the [[Prisoner's dilemma]] has only one [[Nash equilibrium]] (everyone defect), cooperation can be sustained in the repeated Prisoner's dilemma if the discount factor is not too low, that is if the players are interested enough in future outcomes of the game. Strategies known as [[Trigger strategy|trigger strategies]] comprise Nash equilibria of the repeated Prisoner's dilemma. However, Prisoner's dilemma is one where the minmax value is equal to the Nash Equilbrium payoff. This means that a player who knows the exact horizon may just decide to switch to Defect without fear of punishment. An example of repeated prisoner's dilemma is the WWI trench warfare. Here, though initially it was best to cause as much damage to the other party as possible, as time passed and the opposing parties got to 'know' each other, they realised that causing as much damage as possible to the other by, e.g. artillery will only prompt a similar response: e.g. blowing up the foodstock of the other (through bombardment) will only leave both battalions hungry. After some time, the opposing battalions learned that it is sufficient to ''show'' what they are capable of, instead of actually carrying out the act. ==Solving repeated games== Complex repeated games can be solved using various techniques most of which rely heavily on [[linear algebra]] and the concepts expressed in [[fictitious play]]. == References == *Fudenberg, Drew and [[Jean Tirole]] (1991) ''Game Theory'' MIT Press. *Mailath, G. and Samuelson, L. (2006) ''Repeated games and reputations: long-run relationships'', Oxford University Press, USA. *Martin J. Osborne and Ariel Rubinstein ''A Course in Game Theory''. *Sylvain Sorin (2002) ''A First Course on Zero-Sum Repeated Games,'' Springer, Berlin. ==External links== *[http://www.dudziak.com/poker.php Game-Theoretic Solution to Poker Using Fictitious Play] *[http://wiki.cc.gatech.edu/theory/index.php/Repeated_games Game Theory notes on Repeated games] {{Game theory}} [[Category:Game theory]] [[ar:لعبة متكررة]] [[it:Gioco ripetuto]] [[he:משחק חוזר]] [[ja:繰り返しゲーム]] [[zh:重复博弈]]</text> </page> <page> <id>31834</id> <title>Repetition blindness</title> <text>'''Repetition Blindness''' ('''RB''') is a phenomenon observed in [[Rapid Serial Visual Presentation]]. Subjects are less likely to detect the repetition of a target [[stimulus (physiology)|stimulus]] than they are to detect a second, different target. For example, a subject's chances of correctly reporting both appearances of the word "cat" in the RSVP stream "dog mouse cat elephant cat snake" are lower than their chances of reporting the third and fifth words in the stream "dog mouse cat elephant pig snake". The precise mechanism underlying RB has been extensively debated. [[Nancy Kanwisher]] has argued that it involves failure to [[tokenize]] the second appearance of a repeated stimulus, leading to the second appearance being dropped from short term memory before it can be reported. However, Whittlesea and colleagues have argued that repetition blindness arises from a failure to properly reconstruct the list, both online and post list. This failure to properly reconstruct the list arises from the poor encoding cues that are the result of the RSVP task. == See also == * [[Attentional blink]] * [[Semantic satiation]] == References == Kanwisher, N.G. (1987). Repetition blindness: Type recognition without token individuation. Cognition, 27, 117-143. Whittlesea, W.A., Dorken, M.D., Podrouzek, K.W. (1995). Repeated events in rapid lists: Part 1. Encoding and representation. Journal of Experimental Psychology; Learning, Memory and Cognition, 21,6, 1670-1688. Whittlesea, W.A., Podrouzek, K.W. (1995). Repeated events in rapid lists: Part 2. Remembering repetitions. Journal of Experimental Psychology; Learning, Memory and Cognition, 21,6, 1689-1697. [[Category:Cognition]]</text> </page> <page> <id>31838</id> <title>Replay system</title> <text>{{No footnotes|date=November 2009}} {{Refimprove|date=December 2008}} The '''Replay system''' is a little known subsystem within the [[Intel]] [[Pentium 4]] processor. Its primary function is to catch operations that have been mistakenly sent for execution by the processor's [[Instruction scheduling|scheduler]]. Operations caught by the replay system are then re-executed in a loop until the conditions necessary for their proper execution have been fulfilled. ==Origins== The replay system came about as a result of Intel's now-defunct [[megahertz myth|quest for ever increasing clock speeds]]. These higher clock speeds necessitated very lengthy [[pipeline (computing)|pipelines]] (up to 31 stages in the [[Pentium 4#Prescott|Prescott]] core). Because of this, there are 6 stages between the scheduler and the [[execution unit]]s in the Prescott core. In an attempt to maintain acceptable performance, Intel engineers had to design the scheduler to be very optimistic. ==Operation== The scheduler in a Pentium 4 processor is so aggressive that it will send operations for execution without a guarantee that they can be successfully executed. (Among other things, the scheduler assumes all data is in level 1 [[cache]].) The most common reason execution fails is that the requisite data is not available, which itself is most likely due to a cache miss. When this happens, the replay system springs into action. The replay system signals the scheduler to stop, and then repeatedly executes the failed string of dependent operations until they have completed successfully. ==Performance considerations== Not surprisingly, in some cases the replay system can have a very bad impact on performance. Under normal circumstances, the execution units in the Pentium 4 are in use roughly 33% of the time. When the replay system is invoked, it will occupy execution units nearly every available cycle. This wastes power, which is an increasingly important architectural design metric, but poses no performance penalty because the execution units would be sitting idle anyway. However, if [[hyper-threading]] is in use, the replay system will prevent the other thread from utilizing the execution units. This is the true cause of any performance degradation concerning hyper-threading. In Prescott, the Pentium 4 gained a replay queue, which reduces the time the replay system will occupy the execution units. In other cases, where each thread is processing different types of operations, the 