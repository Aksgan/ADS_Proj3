[http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-046JFall-2005/VideoLectures/detail/embed15.htm MIT course on algorithms] - Includes a video lecture on DP along with lecture notes * [http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Dynamic More DP Notes] *King, Ian, 2002 (1987), "[http://researchspace.auckland.ac.nz/bitstream/handle/2292/190/230.pdf A Simple Introduction to Dynamic Programming in Macroeconomic Models.]" An introduction to dynamic programming as an important tool in economic theory. * [http://www.topcoder.com/tc?module=Static&d1=tutorials&d2=dynProg Dynamic Programming: from novice to advanced] A TopCoder.com article by Dumitru on Dynamic Programming * [http://bibiserv.techfak.uni-bielefeld.de/adp/ Algebraic Dynamic Programming] - a formalized framework for dynamic programming, including an [http://bibiserv.techfak.uni-bielefeld.de/dpcourse entry-level course] to DP, University of Bielefeld * Dreyfus, Stuart, "[http://www.eng.tau.ac.il/~ami/cd/or50/1526-5463-2002-50-01-0048.pdf Richard Bellman on the birth of Dynamic Programming.]" * [http://www.avatar.se/lectures/molbioinfo2001/dynprog/dynamic.html Dynamic programming tutorial] *[http://www.cambridge.org/resources/0521882672/7934_kaeslin_dynpro_new.pdf A Gentle Introduction to Dynamic Programming and the Viterbi Algorithm] * Tabled Prolog [http://www.probp.com BProlog] and [http://xsb.sourceforge.net/ XSB] * [http://ifors.org/tutorial/category/dynamic-programming/ Online interactive dynamic programming modules] including, shortest path, traveling salesman, knapsack, false coin, egg dropping, bridge and torch, replacement, chained matrix products, and critical path problem. {{DEFAULTSORT:Dynamic Programming}} [[Category:Dynamic programming| ]] [[Category:Mathematical optimization]] [[Category:Optimization algorithms]] [[Category:Equations]] [[Category:Systems engineering]] [[Category:Optimal control]] [[Category:Operations research]] [[ca:Programació dinàmica]] [[cs:Dynamické programování]] [[de:Dynamische Programmierung]] [[es:Programación dinámica]] [[fa:برنامه‌ریزی پویا]] [[fr:Programmation dynamique]] [[gl:Programación dinámica (computación)]] [[hi:डाइनैमिक प्रोग्रामिंग]] [[ko:동적 계획법]] [[it:Programmazione dinamica]] [[he:תכנון דינמי]] [[lt:Dinaminis programavimas]] [[ja:動的計画法]] [[pl:Programowanie dynamiczne]] [[pt:Programação dinâmica]] [[ru:Динамическое программирование]] [[sl:Dinamično programiranje]] [[sr:Динамичко програмирање]] [[sh:Dinamičko programiranje]] [[sv:Dynamisk programmering]] [[uk:Динамічне програмування]] [[vi:Quy hoạch động]] [[zh:动态规划]]</text> </page> <page> <id>11272</id> <title>Dynamic simulation</title> <text>'''Dynamic simulation''' is the use of a computer program to model the time varying behavior of a system. The systems are typically described by [[ordinary differential equations]] or [[partial differential equations]]. As [[mathematical model]]s incorporate real-world constraints, like gear [[backlash (engineering)]] and rebound from a hard stop, equations become nonlinear. This requires numerical methods to solve the equations. A numerical simulation is done by stepping through a time interval and calculating the integral of the derivatives by approximating the area under the derivative curves. Some methods use a fixed step through the interval, and others use an adaptive step that can shrink or grow automatically to maintain an acceptable error tolerance. Industrial uses of dynamic simulation are many and range from nuclear power, steam turbines, 6 degree of freedom vehicle modeling, electric motors, econometric models, biological systems, robot arms, mass spring dampers, hydraulic systems, and drug dose migration through the human body to name a few. These models can often be run in real time to give a virtual response close to the actual system. This is useful in [[process control]] and [[mechatronic]] systems for tuning the [[automatic control]] systems before they are connect to the real system, or for human training before they control the real system. Simulation is also used in computer games and animation and can be accelerated by using a [[physics engine]], the technology used in many powerful [[computer graphics]] [[software]] [[computer program|programs]], like [[3ds Max]], [[Maya (software)|Maya]], [[Lightwave]], and many others to simulate physical characteristics. In computer animation, things like [[hair]], [[cloth]], [[liquid]], [[fire]], and [[wiktionary:particles|particles]] can be easily modeled, while the human [[animator]] animates simpler objects. Computer-based dynamic animation was first used at a very simple level in the 1989 [[Pixar Animation Studios]] [[short film]] ''Knick Knack'' to move the fake snow in the snowglobe and pebbles in a fish tank. === Example of Dynamic simulation === [[Image:TRUE_Procedural_Animation.gif|centre|[[Piston_motion_equations]]|frame]] This animation was made with a software system dynamics, with a 3D modeler. <br> The calculated values are associated with parameters of the rod and crank.<br> In this example the crank is driving, we vary both the speed of rotation, its radius and the length of the rod, the piston follows. ==See also== *[[Modelica]] A non-proprietary, object-oriented, equation based language for dynamic simulation *[[Physics engine]] *[[VisSim]] A visual language for nonlinear dynamic simulation *[[EICASLAB]] A software suite allowing nonlinear dynamic simulation == External links == * [http://sbel.wisc.edu/Courses/ME751/2010/index.htm Textbook and lectures on dynamic simulation] [[Category:Computer physics engines]] [[Category:Control theory]] [[Category:Electro mechanical engineering]] [[Category:Embedded systems]] [[Category:Gears]] [[Category:Operations research]] [[Category:Ordinary differential equations]] [[Category:Partial differential equations]] [[Category:Process management]] [[Category:Production and manufacturing]] [[Category:Simulation software]]</text> </page> <page> <id>11278</id> <title>Dynamic window approach</title> <text>In [[robotics]], the '''dynamic window approach''' is a real-time collision avoidance strategy developed by [[Dieter Fox]], [[Wolfram Burgard]], and [[Sebastian Thrun]] in 1997.<ref name=Fox1997>{{cite journal | author = Fox, D. | coauthors = Burgard, W.; Thrun, S. | year = 1997 | title = The dynamic window approach to collision avoidance | journal = Robotics & Automation Magazine, IEEE | volume = 4 | issue = 1 | pages = 23–33 | url = http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=580977 | accessdate = 2008-06-30 | doi = 10.1109/100.580977 }}</ref> Unlike other avoidance methods, the dynamic window approach is derived directly from the dynamics of the robot, and is especially designed to deal with the constraints imposed by limited velocities and accelerations of the robot. ==References== {{reflist}} [[Category:Robotics]] [[de:Dynamic window approach]]</text> </page> <page> <id>11279</id> <title>Dynamic window manager</title> <text>{{Refimprove|date=February 2010}} In computing, a '''dynamic''' [[window manager]] is capable of dynamically switching between using a [[tiling window manager]] screen organizational strategy and a [[stacking window manager]] layout.<ref name=lu1208/> == X Window System == The following dynamic window managers are available for the [[X Window System]]: * [[awesome (window manager)|awesome]]<ref name=lu1208>{{de icon}} Falko Benthin (Dec 2008) ''[http://www.linux-community.de/Internal/Artikel/Print-Artikel/LinuxUser/2008/12/Herr-der-Fenster Herr der Fenster. Schlanker Windowmanager Awesome]'', [https://www.linux-user.de/ausgabe/2008/12/039/index.html alt. link], [[LinuxUser]]</ref><ref>[http://awesome.naquadah.org/ Awesome window manager homepage]</ref> * bluetile - A full featured window manager for the [[GNOME]] environment * [[dwm]]<ref name=lu1208/> * echinus * [[larswm]] * scrotwm * [[wmii]] * [[xmonad]] == References == {{reflist}} {{Window managers}} {{Unix-stub}} [[Category:Window managers]]</text> </page> <page> <id>11285</id> <title>Dynamization</title> <text>In [[computer science]], '''Dynamization''' is the process of transforming a [[static data structure]] into a [[dynamic data structure|dynamic]] one. Although static data structures may provide very good functionality and fast queries, their utility is limited because of their inability to grow/shrink fast, thus making them inapplicable for the solution of [[dynamic problem (algorithms)|dynamic problem]]s, where the amount of the input data changes. Dynamization techniques provide uniform ways of creating dynamic data structures. ==Decomposable search problems== We define problem P of searching for the predicate M match in the set S as <math>P(M,S)</math>. Problem P is decomposable if the set S can be decomposed into subsets 