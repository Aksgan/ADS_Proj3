for instance a Windows laptop may be synchronized with a Unix server. * It detects 'conflicts' where a file has been modified on both sources, and displays these to the user * It communicates over the TCP/IP protocol so that any two machines with an internet connection can be synchronized. This also means that the data transferred can be secured by tunneling over an encrypted [[Secure Shell|SSH]] connection. * It uses the [[rsync]] algorithm developed by [[Andrew Tridgell]]. This algorithm transfers only the parts of a file that have changed, and so is faster than copying the whole file. * It is designed to be robust in the event of a program or system crash or a communication failure. * It is [[open-source]]. * It is written in the [[Objective Caml]] language. File synchronization tools such as Unison are similar to [[version control]] tools ([[Git (software)|git]], CVS, Subversion, etc.), [[List of file systems#Distributed file systems|distributed filesystems]] ([[Coda (file system)|Coda]], [[Lustre (file system)|Lustre]], etc.), and [[mirror (computing)|mirroring]] utilities ([[rsync]], etc.), in that all these attempt to keep sets of files synchronized. However file synchronization tools can deal with modifications to both versions of the directory structure, without the overhead of version control. ==Development Status== Unison is no longer under active development. However as the original developers still use Unison, they occasionally release bug fixes, small improvements, and contribute patches.<ref name="status" /> Support for Unison is provided by third parties for specific operating systems. The latest stable version, as of February 2010, is 2.32.52 (available as source code). For binary stable versions, the following are available: *Linux: 2.32.52 *Win32: 2.32.52 *Mac OS X: 2.32.12 The original developers began focusing on a project called 'Harmony', which they considered a natural progression from Unison, to synchronize any hierarchical structure expressed in XML<ref>http://www.seas.upenn.edu/~harmony/old/</ref>. However, Harmony has been abandoned, and the developers are now focusing on the [[Boomerang (programming language)|Boomerang]] project which creates 'lenses' for transforming string data<ref>http://www.seas.upenn.edu/~harmony/ Related projects - Harmony, Boomerang and Unison</ref>. ==See also== {{Portal|Free software}} * [[File synchronization]] * [[rsync]] ==References== {{Reflist}} ==External links== *[http://www.cis.upenn.edu/~bcpierce/unison/ Unison homepage] *[http://www.cis.upenn.edu/~bcpierce/unison/download.html Download page] *[http://sites.google.com/site/keigoattic/ocaml-on-android Unison on Android howto] *[http://www.portablefreeware.com/?id=979 Unison portable for Windows] ===Advice on using Unison=== *[http://www.cs.washington.edu/homes/bershad/Mac/filesynch.html File synchronization] *[http://www.stanford.edu/~pgbovine/unison_guide.htm Using Unison, by Philip Guo] *[http://www.stanford.edu/~pgbovine/unison-for-your-mom.htm Setting up Unison for your mom (simplified setup guide), by Philip Guo] *[http://www.markus-gattol.name/ws/unison.html All about Unison on one page] - a page covering Unison, starting with theory and ending with many practical examples about its usage. {{DEFAULTSORT:Unison (File Synchronizer)}} [[Category:Free network-related software]] [[Category:Unix software]] [[Category:Data synchronization]] [[Category:OCaml software]] [[de:Unison (Programm)]] [[fr:Unison (logiciel)]] [[nl:Unison]] [[ja:Unison]] [[ru:Unison]]</text> </page> <page> <id>38851</id> <title>Unit disk graph</title> <text>[[Image:Unit disk graph.svg|thumb|A collection of unit circles and the corresponding unit disk graph.]] In [[geometric graph theory]], a '''unit disk graph''' is the [[intersection graph]] of a family of [[unit circle]]s in the [[Euclidean plane]]. That is, we form a vertex for each circle, and connect two vertices by an edge whenever the corresponding circles cross each other. There are several possible definitions of the unit disk graph, equivalent to each other up to a choice of scale factor: * An intersection graph of equal-radius circles, or of equal-radius disks * A graph formed from a collection of equal-radius circles, in which two circles are connected by an edge if one circle contains the center of the other circle * A graph formed from a collection of points in the Euclidean plane, in which two points are connected if their distance is below a fixed threshold Every [[induced subgraph]] of a unit disk graph is also a unit disk graph. An example of a graph that is not a unit disk graph is the [[Star (graph theory)|star]] K<sub>1,7</sub> with one central node connected to seven leaves: if each of seven unit disks touches a common unit disk, some two of the seven disks must touch each other. Beginning with the work of {{harvtxt|Huson|Sen|1995}}, unit disk graphs have been used in [[computer science]] to model the topology of [[Mobile ad-hoc network|ad-hoc wireless communication networks]]. In this application, nodes are connected through a direct wireless connection without a [[base station]]. It is assumed that all nodes are homogeneous and equipped with [[omnidirectional antenna]]s. Node locations are modeled as Euclidean points, and the area within which a signal from one node can be received by another node is modeled as a circle. If all nodes have transmitters of equal power, these circles are all equal. Random geometric graphs, formed as unit disk graphs with randomly generated disk centers, have also been used as a model of percolation and various other phenomena.<ref>See, e.g., {{harvtxt|Dall|Christensen|2002}}.</ref> It is [[NP-hard]] to determine whether a graph, given without geometry, can be represented as a unit disk graph.<ref>{{harvtxt|Breu|Kirkpatrick|1998}}.</ref> However, many important and difficult graph optimization problems such as [[maximum independent set]], [[graph coloring]], and minimum [[dominating set]] can be [[Approximation algorithm|approximated]] efficiently by using the geometric structure of these graphs,<ref>{{harvtxt|Marathe|Breu|Hunt, III|Ravi|1994}}; {{harvtxt|Matsui|2000}}.</ref> and the [[maximum clique problem]] can be solved exactly for these graphs in polynomial time, given a disk representation.<ref>{{harvtxt|Clark|Colbourn|Johnson|1990}}.</ref> When a given vertex set forms a subset of a [[Hexagonal lattice|triangular lattice]], a necessary and sufficient condition for the [[perfect graph|perfectness]] of a unit graph is known.<ref>{{harvtxt|Miyamoto|Matsui|2005}}.</ref> For the perfect graphs, a number of NP-complete optimization problems ([[graph coloring problem]], [[maximum clique problem]], and [[maximum independent set problem]]) are polynomially solvable. ==See also== * [[Vietoris–Rips complex]], a generalization of the unit disk graph that constructs higher-order topological spaces from unit distances in a metric space * [[Unit distance graph]], a graph formed by connecting points that are at distance exactly one rather than (as here) at most a given threshold ==Notes== {{reflist}} ==References== * {{citation | last1 = Breu | first1 = Heinz | authorlink2 = David G. Kirkpatrick | last2 = Kirkpatrick | first2 = David G. | title = Unit disk graph recognition is NP-hard | journal = Computational Geometry Theory and Applications | volume = 9 | issue = 1–2 | pages = 3–24 | year = 1998}} * {{citation | 