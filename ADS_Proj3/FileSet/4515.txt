addsub.1 r2 -> addsub.2 addsub.3 -> r3 addsub.4 -> r4 </code> Getting rid of the two moves might not seem much, but it might provide bigger savings in the long run if the sequence is executed in a tight loop with only a few instructions. Furthermore, the same optimization strategy of converting sequences of operations into a single custom operation can be applied to chains of operations of virtually arbitrary length. == Programmer visible operation latency == The leading philosophy of TTAs is to move complexity from hardware to software. Due to this, several additional hazards are introduced to the programmer. One of them is the programmer visible operation latency of the function units. Timing is completely a responsibility of programmer. The programmer has to schedule the instructions such that the result is neither read too early nor too late. There is no hardware detection to lock up the processor in case a result is read too early. Consider, for example, an architecture that has an operation ''add'' with latency of 1, and operation ''mul'' with latency of 3. When triggering the ''add'' operation, it is possible to read the result in the next instruction (next clock cycle), but in case of ''mul'', one has to wait for two instructions before the result can be read. The result is ready for the 3rd instruction after the triggering instruction. Reading a result too early results in reading the result of a previously triggered operation, or in case no operation was triggered previously in the function unit, the read value is undefined. On the other hand, result must be read early enough to make sure the next operation result does not overwrite the yet unread result in the output port. Due to the abundance of programmer-visible processor context which practically includes, in addition to register file contents, also function unit pipeline register contents and/or function unit input and output ports, context saves required for external interrupt support can become complex and expensive to implement in a TTA processor. Therefore, interrupts are usually not supported by TTA processors, but their task is delegated to an external hardware (e.g., an I/O processor) or their need is avoided by using an alternative synchronization/communication mechanism such as polling. ==Implementations== *[[MAXQ (Microcontroller)|MAXQ]] :Currently, the only commercially available microcontroller built upon (though not "featuring") Transport Triggered Architecture is from [[Dallas Semiconductor]]. However, it is an [[OISC]] or "One instruction set computer", offering but a '''single''' though flexible MOVE instruction, which can then function as various virtual instructions by moving values directly to the [[program counter]]. * The [http://ce.et.tudelft.nl/MOVE/ "move project"] has designed and fabricated several experimental TTA microprocessors. * The [http://tce.cs.tut.fi/ TCE project] is a re-implementation of the MOVE tools. The tools are available as open source, and the compiler is built around the [[LLVM]] compiler framework. * The architecture of the [[Original Amiga chipset#Copper|Amiga Copper]] has all the basic features of a transport triggered architecture. * The [http://sites.google.com/site/macthenaief/Home/retro/able Able] processor developed by New England Digital. * The [[WireWorld]] based [http://www.quinapalus.com/wi-index.html computer]. * [http://www.drdobbs.com/embedded-systems/221800122 Dr. Dobb's] published One-Der a 32-bit TTA in Verilog with a matching cross assembler and Forth compiler. ==See also== *[[Very long instruction word]] (VLIW) *[[Explicitly parallel instruction computing]] (EPIC) *[[Dataflow architecture]] ==External links== * [http://ce-serv.et.tudelft.nl/MOVE/ MOVE project: Automatic Synthesis of Application Specific Processors] **[http://ce-serv.et.tudelft.nl/MOVE/section3.3.html Advantages of transport-triggered architectures] *[http://www.ics.ele.tue.nl/~heco/documents/TTAbook/TTAbook.html Microprocessor Architectures from VLIW to TTA] *[http://tce.cs.tut.fi TTA Codesign Environment, an open source (MIT licensed) toolset for design of application specific TTA processors.] *[http://web.archive.org/web/20071013182106/http://byte.com/art/9502/sec13/art1.htm BYTE overview article] *[http://www.ddj.com/embedded/221800122?pgno=1 Dr. Dobb's article with 32-bit FPGA CPU in Verilog] *[http://www.one-der-cpu.info/ Web site with more details on the Dr. Dobb's CPU] *[http://blog.llvm.org/2010/06/tce-project-co-design-of-application.html Article] about TTAs, explaining how the TTA-based Codesign Environment project uses [[Low Level Virtual Machine|LLVM]] * [http://www.maxim-ic.com/appnotes.cfm/appnote_number/3222 Introduction to the MAXQ Architecture] – Includes transfer map diagram {{DEFAULTSORT:Transport Triggered Architecture}} [[Category:Computer architecture]] [[Category:Instruction processing]] [[fi:Transport triggered architecture]]</text> </page> <page> <id>38159</id> <title>Transverse redundancy check</title> <text>In [[telecommunications]], a '''transverse redundancy check''' (TRC) or '''vertical redundancy check''' is a [[redundancy check]] for synchronized parallel [[bit]] streams that is applied once per bit time, across the bit streams. This requires additional parallel channels for the check bit or bits. The term usually applies to a single [[parity bit]], although it could also be used to refer to a larger [[Hamming code]]. The adjective "transverse" is most often used when it is used in combination with additional error control coding, such as a [[longitudinal redundancy check]]. Although parity alone can only detect and not correct errors, it can be part of a system for correcting errors. An example of a TRC is the parity written to the 9th track of a [[9 track tape]]. ==References== *{{FS1037C MS188}} [[Category:Error detection and correction]] [[de:Vertikale Redundanzprüfung]] [[th:การตรวจสอบด้วยส่วนซ้ำซ้อนตามขวาง]]</text> </page> <page> <id>38168</id> <title>Travel 2.0</title> <text>{{Cleanup|date=April 2007}} '''Travel 2.0''', was used as early as December 2003 on a posting on the Planeta Web 2.0 Discussion Forum<ref>{{cite web|title=Using Web 2.0 to connect locals and travelers | url=http://forum.planeta.com/viewtopic.php?t=940&sid=e26ae965e5c68071a37c3e9fd785d69c |publisher=[[Planeta.com]] |accessdate=September 12, 2007}}</ref> and is an offshoot of the [[Web 2.0]] phenomenon. Like many other industries, the online [[tourism|travel industry]] is currently in transition, adapting to new technologies and trends available on the [[Internet]].<ref>{{cite news | title=Business travel 2.0 | publisher=[[Times Online]] | url=http://travel.timesonline.co.uk/tol/life_and_style/travel/business/article1477541.ece|accessdate=April 5, 2007 | location=London | date=March 6, 2007}}</ref> Travellers, for their part, are becoming increasingly more interested in finding the opinions and reviews of their fellow travellers in lieu of professional travel advice.<ref>{{cite news | title= Travel 2.0: Social networking takes a useful turn| url=http://www.usatoday.com/travel/columnist/grossman/2007-01-26-grossman_x.htm | publisher=[[USAToday]] | accessdate=April 5, 2007 | date=January 26, 2007}}</ref> . This impact is significant given the travel sector's economic influence on the Internet, indeed more money is spent on travel than anything else online. Roughly two-thirds of Americans research and plan travel online and approximately the same amount book online as well.<ref>{{cite web | title=Online Travel's Future is Now | publisher=[[iMedia Connection]] | url=http://www.imediaconnection.com/content/12380.asp|accessdate=April 6, 2007}}</ref> The online travel industry breaks down into several different categories: online [[travel agent]]s, online [[travel guide]]s, online travel planners, and online travel communities and 