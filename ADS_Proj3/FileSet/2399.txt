[[San Francisco Art Institute]], [[MIT Media Lab]], and the [[Art Center College of Design]]. ''The Tribe'', a short film he co-wrote with his wife, [[Tiffany Shlain]] (who also directed and produced the film) was selected for the 2006 [[Sundance Film Festival]] and the 2006 [[Tribeca Film Festival]]. Goldberg's Ballet Mori project, performed by the San Francisco Ballet, won an Isadora Duncan Award in 2006. ==References== * {{cite book |last = Baumgärtel |first = Tilman |title = net.art 2.0 - New Materials towards Net art |publisher = Verlag für Moderne Kunst Nürnberg |location= Nürnberg |year = 2001 |pages=88–95 |isbn = 3-933096-66-9}} ==External links== *[http://www.ieor.berkeley.edu/~goldberg Ken Goldberg's UC Berkeley homepage] *[http://www.ieor.berkeley.edu/~goldberg/art Ken Goldberg's Artwork] *[http://automation.berkeley.edu Berkeley Automation Lab homepage] *[http://www.ieee.org/t-ase/ IEEE Transactions on Automation Science] *[http://atc.berkeley.edu/ Art, Technology, and Culture Colloquium] *[http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/g/Goldberg:Kenneth_Y=.html Goldberg's publications] at the [[Digital Bibliography & Library Project]] *[http://leonardo.info/isast/leobooks/books/goldberg.html The Robot in the Garden (MIT Press/Leonardo Books)] *[http://iasl.uni-muenchen.de/links/lektion5.html Thomas Dreher: Telepresence - Eduardo Kac and Ken Goldberg] (in German) {{DEFAULTSORT:Goldberg, Ken}} [[Category:Living people]] [[Category:American computer scientists]] [[Category:Roboticists]] [[Category:American inventors]] [[Category:American artists]] [[Category:Digital artists]] [[Category:University of California, Berkeley faculty]] [[Category:Jewish inventors]] [[Category:San Francisco Bay Area artists]] [[zh:肯·戈德堡]]</text> </page> <page> <id>20506</id> <title>Ken Kennedy Award</title> <text>The '''Ken Kennedy Award''', established in 2009 by the [[Association of Computing Machinery]] and the [[IEEE Computer Society]] in memory of [[Ken Kennedy (computer scientist)|Ken Kennedy]], is awarded annually and recognizes substantial contributions to programmability and productivity in computing and substantial community service or mentoring contributions. The award includes a $5,000 honorarium and the award recipient will be announced at the [[Supercomputing Conference|ACM - IEEE Supercomputing Conference]]. ==Ken Kennedy Award Past Recipients== * 2010 David J. Kuck<ref name="WP_article">[[David_Kuck#Honors]]</ref><ref name="KK_award_press_rel"> {{cite web | url = http://www.acm.org/press-room/news-releases/2010/kennedy-award-2010 | title = (press release) : ACM - IEEE Computer Society Award Honors Intel's Kuck for Innovations in High-Performance Computing | accessdate = Oct. 02, 2010 | archiveurl = http://www.webcitation.org/5tAv5DAM5 | archivedate = Oct. 02, 2010 | quote = The second annual ACM-IEEE Computer Society Ken Kennedy Award will go to Intel Fellow David Kuck for advances to compiler technology and parallel computing that have improved the cost-effectiveness of multiprocessor computing. }} </ref><ref name="KK_award_citation"> {{cite web | url = http://awards.acm.org/citation.cfm?id=1018449&year=2010&aw=167&ao=KENNEDY&yr=2010 | title = Citation - David J Kuck (awarded) the 2010 acm - ieee cs Ken_Kennedy_Award | accessdate = Oct. 02, 2010 | archiveurl = http://www.webcitation.org/5tAuU6fyy | archivedate = Oct. 02, 2010 | quote = For his pioneering contributions to compiler technology and parallel computing, the impact of his research on industry, and the widespread influence of his teaching and mentoring. }} </ref> * 2009 Francine Berman ==References== <references/> ==Nomination Process== * [http://awards.computer.org/ana/nomination/nominate.action/ IEEE Computer Society Nomination Process] ==External links== * [http://awards.acm.org/homepage.cfm?awd=167 ACM - IEEE CS Ken Kennedy Award] [[Category:Computer science awards]] [[Category:Computational science]] {{Comp-sci-stub}}</text> </page> <page> <id>20529</id> <title>Kent Recursive Calculator</title> <text>{{Infobox programming language | name = KRC | logo = | paradigm = [[Functional programming|functional]] | year = 1981 | designer = [[David Turner (computer scientist)|David Turner]] | developer = | latest_release_version = | latest_release_date = | latest_test_version = | latest_test_date = | typing = | implementations = | dialects = | influenced_by = [[SASL (programming language)|SASL]] | influenced = [[Miranda programming language|Miranda]] | operating_system = | license = | website = }} '''KRC''' ('''Kent Recursive Calculator''') is a [[lazy evaluation|lazy]] [[functional language]] developed by [[David Turner (computer scientist)|David Turner]] in (or before?) 1981 based on [[SASL programming language|SASL]], with [[pattern matching]], [[guard (computing)|guard]]s and [[ZF expression]]s (now more usually called [[list comprehensions]]). Two implementations of KRC were written: David Turner's original one in [[BCPL]] running on [[Edinburgh Multiple Access System|EMAS]], and Simon Croft's later one in [[C (programming language)|C]] under [[Unix]], and KRC was the main language used for teaching functional programming at the [[University of Kent]] at Canterbury (UK) from 1982 to 1985. The direct successor to KRC is [[Miranda programming language|Miranda]], which includes a polymorphic type discipline based on that of Milner's [[ML programming language|ML]]. ==Further reading== * ''Functional Programming and its Applications'', David A. Turner, Cambridge U Press 1982. ==References== {{FOLDOC}} * {{cite journal |last=Turner|first=D.A.|title=The semantic elegance of Applicative Languages|journal=ACM Proceedings of the 1981 conference on Functional programming languages and computer architecture, 1981 ISBN 0-89791-060-5 Portsmouth, New Hampshire, United States,Pages:85-92}} {{compu-lang-stub}} [[ru:KRC]] [[Category:Programming languages]]</text> </page> <page> <id>20538</id> <title>Kermeta</title> <text>'''Kermeta''' is a modeling and programming language for [[metamodel]] engineering. ==History== The '''Kermeta''' language was initiated by Franck Fleurey in 2005 within the [http://www.irisa.fr/triskell Triskell] team of [[IRISA]] (gathering researchers of the [[INRIA]], [[CNRS]], [[Institut national des sciences appliquées|INSA]] and the [[University of Rennes]] 1). The Kermeta language borrows concepts from languages such [[Meta-Object Facility|MOF]], [[Object Constraint Language|OCL]] and [[QVT]], but also from BasicMTL, a model transformation language implemented in 2004 in the Triskell team by D. Vojtisek and F. Fondement. It is also inspired by the previous experience on MTL, the first transformation language created by Triskell, and by the [[Xion]] action language for [[Unified Modeling Language|UML]]. The name Kermeta is an abbreviation for "Kernel Metamodeling" and reflects the fact that the language is conceived as a core for (meta-)modeling. The [[Breton language]] consonance of this name is an intentional reflection of the Triskell team's location in Britanny. Kermeta, and its execution platform under [[Eclipse (software)|Eclipse]] is currently available under its version 1.4.1. It is [[open-source]], under the [[Eclipse Public License]]. ==Philosophy== Kermeta is a modeling and [[aspect oriented programming]] language. Its underlying metamodel conforms to the [[EMOF]] standard. It is designed to write programs which are also models, to write transformations of models (programs that transform a model into another), to write constraints on these models, and to execute them 1). The goal of this model approach is to bring an additional level of abstraction on top of the "object" level and thus to see a given system like a set of concepts (and instances of concepts) that form an explicitly coherent whole, which one will call a model. Kermeta thus brings: * all the concepts of EMOF used for the specifications of a model. * a real concept of model, more precisely of model type (Jim 