''n'') algorithm for triangulation. Simple randomised methods such as Seidel's <ref>{{Citation |last=Seidel|first=Raimund |author-link= Raimund Seidel| title=A Simple and Fast Incremental Randomized Algorithm for Computing Trapezoidal Decompositions and for Triangulating Polygons |journal=Computational Geometry: Theory and Applications |volume=1 |year=1991 |pages=51–64}}</ref> or Clarkson et al's, have [[Big_O_notation#Orders_of_common_functions|''O''(''n'' log<sup>*</sup> ''n'')]] behaviour which, in practice, are indistinguishable from ''O''(''n''). [[Bernard Chazelle]] showed in 1991 that any simple polygon can be triangulated in linear time, though the proposed algorithm is very complex.<ref>{{Citation |last=Chazelle |first=Bernard |author-link=Bernard Chazelle | title=Triangulating a Simple Polygon in Linear Time |journal=Discrete & Computational Geometry |volume=6 |year=1991|pages=485–524 |issn=0179-5376 |doi=10.1007/BF02574703}}</ref> The [[time complexity]] of triangulation of a polygon with holes has an Ω(''n'' log ''n'') [[lower bound]].<ref name= bkos/> ==See also== *[[Catalan number]] *[[Point set triangulation]] *[[Delaunay triangulation]] *[[Minimum-weight triangulation]], for a point set and for a simple polygon ==References== {{reflist}} * {{Citation |last1=Amato |first1=Nancy M. |last2=Goodrich |first2=Michael T. |author2-link=Michael T. Goodrich|last3=Ramos |first3=Edgar A. |title=A Randomized Algorithm for Triangulating a Simple Polygon in Linear Time |journal=Discrete & Computational Geometry |volume=26 |year=2001 <!--|month=May--> |pages=245–265 |issn=0179-5376 |doi=10.1007/s00454-001-0027-x |url=http://parasol.tamu.edu/publications/abstract.php?pub_id=185 |issue=2}} ==External links== * [http://computacion.cs.cinvestav.mx/~anzures/geom/triangulation.php Demo as Flash swf], A Sweep Line algorithm. {{DEFAULTSORT:Polygon Triangulation}} [[Category:Geometric algorithms]] [[ar:تثليث مضلع]] [[fa:مثلث‌بندی چندضلعی‌ها]] [[fr:Triangulation d'un polygone]]</text> </page> <page> <id>29558</id> <title>Polygonal modeling</title> <text>In [[3D computer graphics]], '''polygonal modeling''' is an approach for modeling objects by representing or approximating their [[surface]]s using [[polygon]]s. Polygonal modeling is well suited to [[scanline rendering]] and is therefore the method of choice for [[real-time computer graphics]]. Alternate methods of representing 3D objects include [[NURBS]] surfaces, [[subdivision surface]]s, and equation-based representations used in [[Ray tracing (graphics)|ray tracers]]. See [[polygon mesh]] for a description of how polygonal models are represented and stored. == Geometric theory and polygons == The basic object used in mesh modeling is a [[vertex (geometry)|vertex]], a point in three dimensional space. Two vertices connected by a straight line become an [[edge (graph theory)|edge]]. Three vertices, connected to the each other by three edges, define a [[triangle]], which is the simplest polygon in [[Euclidean space]]. More complex [[polygons]] can be created out of multiple triangles, or as a single object with more than 3 vertices. Four sided polygons (generally referred to as quads) and triangles are the most common shapes used in polygonal modeling. A group of polygons, connected to each other by shared vertices, is generally referred to as an '''element'''. Each of the polygons making up an element is called a '''face'''. In [[Euclidean geometry]], any three non-colinear points determine a [[mathematical plane|plane]]. For this reason, triangles always inhabit a single plane. This is not necessarily true of more complex polygons, however. The flat nature of triangles makes it simple to determine their [[surface normal]], a three-dimensional vector perpendicular to the triangle's surface. Surface normals are useful for determining light transport in ray tracing, and are a key component of the popular [[Phong shading]] model. Some rendering systems use [[vertex normal]]s instead of face normals to create a better-looking lighting system at the cost of more processing. Note that every triangle has two face normals, which are on the same line but opposite from each other. In many systems only one of these normals is considered valid – the other side of the polygon is referred to as a '''backface''', and can be made visible or invisible depending on the programmer’s desires. Many [[modeling program]]s do not strictly enforce geometric theory; for example, it is possible for two vertices to have two distinct edges connecting them, occupying exactly the same spatial location. It is also possible for two vertices to exist at the same spatial coordinates, or two faces to exist at the same location. Situations such as these are usually not desired and many packages support an auto-cleanup function. If auto-cleanup is not present, however, they must be deleted manually. A group of polygons which are connected together by shared vertices is referred to as a '''mesh'''. In order for a mesh to appear attractive when [[Rendering (computer graphics)|rendered]], it is desirable that it be '''non-self-intersecting''', meaning that no edge passes through a polygon. Another way of looking at this is that the mesh cannot pierce itself. It is also desirable that the mesh not contain any errors such as doubled vertices, edges, or faces. For some purposes it is important that the mesh be a [[manifold]] – that is, that it does not contain holes or singularities (locations where two distinct sections of the mesh are connected by a single vertex). == Construction of polygonal meshes == Although it is possible to construct a mesh by manually specifying vertices and faces, it is much more common to build meshes using a variety of tools. A wide variety of [[3D computer graphics software|3d graphics software]] packages are available for use in constructing polygon meshes. One of the more popular methods of constructing meshes is [[box modeling]], which uses two simple tools: * The '''subdivide''' tool splits faces and edges into smaller pieces by adding new vertices. For example, a square would be subdivided by adding one vertex in the center and one on each edge, creating four smaller squares. * The '''extrude''' tool is applied to a face or a group of faces. It creates a new face of the same size and shape which is connected to each of the existing edges by a face. Thus, performing the '''extrude''' operation on a square face would create a cube connected to the surface at the location of the face. A second common modeling method is sometimes referred to as '''inflation modeling''' or '''extrusion modeling'''. In this method, the user creates a 2d shape which traces the outline of an object from a photograph or a drawing. The user then uses a second image of the subject from a different angle and extrudes the 2d shape into 3d, again following the shape’s outline. This method is especially common for creating faces and heads. In general, the artist will model half of the head and then duplicate the vertices, invert their location relative to 