(how far), time lines (when and how long), and availability (how often). |- | || Define performance and design constraint requirements || Design constraints define those factors that limit design flexibility. |- | || Model the system || The LIST OF REQUIREMENTS is the basis of the functions presented in the FUNCTIONAL ARCHITECTURE. This architecture can help to identify bottlenecks. It can be either a written document or a graphical representation of the functions of the system. |- | || Investigate alternatives || Investigate alternative designs and look which requirement is met by each design. |- | || Integrate the product || Bring the subsystems or functionalities |- | || Implement the product || The creation of the SOFTWARE PRODUCT is completed and can be implemented and delivered to the customer. |- | '''Evaluation processes'''||Verification | rowspan=2 |After implementing the product it is important to verify and validate if the user needs are met and if the product fulfills the intended use. Several evaluation methods are available for this purpose. The outcomes are described in an EVALUATION report. But also during the technical processes evaluation will constantly take place, especially the evaluation of requirements. |- | || Validation |- | || Maintenance of the product || Together with possible complaints, the EVALUATION report is the basis for the maintaining process. This is a closed concept and out of the scope of systems engineering. If adjustments to the product have been made, the product should be evaluated again. |- | ||Dispose of the product || When the product isn’t been used anymore the product is disposed. This is a closed concept and out of the scope of systems engineering. |} <span id="concepts"> == Concepts == </span> {| class="wikitable" |+ '''Table of Concepts''' |- !Concept ||Definition |- | Top level/ Customer requirements ||Identification of the user needs. Talking to customers and supplier’s is very useful for this matter (SIMILAR; Bahill & Dean, 2005). This will result in a general overview and initial requirements of the system. |- | Problem Definition||Description of the intended use of the system. The problem statement starts with a reason for change followed by vision and mission statements for the company (SIMILAR; Bahill, & Dean, 2005). |- | Feasibility Report||This contains benefits and costs of the software product that is to be made |- | Project Management/ Project Plan||Project management is the planning, organizing, directing and controlling of company resources to meet specific goals and objectives within time, within cost and at the desired performance level. This results in a project which is actually a collection of all documents created within the agreement processes and project processes and will change over time. ( ANSI/EIA 632; ISO/IEC 15288; SIMILAR; Bahill, & Dean, 2005) |- | Risk Management||Identification of risks and/or Opportunities. This results in a list of risks or opportunities and a plan how to deal with a certain risk or opportunity. |- | Data Management||Control of all documentation and activities of the systems engineering process. ( ANSI/EIA 632; Mil-Std-499B; ISO/IEC 15288; SIMILAR; Bahill, & Dean, 2005) |- | Configuration Management||Configuration management ensures that any changes in requirements, design or implementation are controlled. ( ANSI/EIA 632; Mil-Std-499B; ISO/IEC 15288; SIMILAR; Bahill, & Dean, 2005). Configuration management involves Configuration Identification, Control, Status Accounting, Audit and Planning. |- | Requirement List||Customer needs/requirements are translated into a set of requirements that define what the system must do and how well it must perform. Requirements analysis must clarify and define functional requirements and design constraints. (Mil-Std-499B; US department of defense, 2001) |- | Requirement || A single requirement. It consists of a number, type, description and evaluation method that can be used to test the requirement. |- | Functional Architecture || Functions are analyzed by decomposing higher-level functions identified through requirements. (Mil-Std-499B; US department of defense, 2001) |- | Software Product||Definition of Systems Engineering according to INCOSE: ''“Systems Engineering is an engineering discipline whose responsibility is creating and executing an interdisciplinary process to ensure that the customer’s and stake-holder's needs are satisfied throughout a system's entire life cycle.”'' (INCOSE SE handbook; Vasquez, 2003) The outcome of the Systems Engineering process is a SOFTWARE PRODUCT which satisfies the needs of the customer and stakeholders. |- | Evaluation||Each requirement must be verified and validated to determine whether the software product fulfils the requirements and if the final as-built software product fulfills its specific intended use. ( ANSI/EIA 632; Mil-Std-499B; ISO/IEC 15288) |- |} == See also == *[[Design review]] *[[Configuration management]] *[[ISMART]] *[[ISO 15288]] *[[Meta-modeling]] *[[Meta-process model]] *[[Project management]] *[[Process architecture]] *[[Requirements analysis]] *[[Risk management]] *[[Systems engineering]] *[[Software engineering]] *[[Technical peer review]] == References == {{reflist}} {{Unreferenced|date=April 2009}} == Further reading == *Defense Acquisition Guidebook (2004). [http://akss.dau.mil/dag/Guidebook/IG_c4.0.asp Chapter 4: Systems Engineering]. *Bahill, T. & Briggs, C. (2001). "The Systems Engineering Started in the Middle Process: A Consensus of Systems Engineers and Project Managers". in: ''Systems Engineering'', Vol. 4, No. 2 (2001) *Bahill, T. & Dean, F. (2005). [http://www.sie.arizona.edu/sysengr/whatis/ What Is Systems Engineering?] *Boehm, B. (2005). "Some Future Trends and Implications for Systems and Software Engineering Processes". In: ''Systems Engineering'', Vol. 9, No. 1 (2006) *Vasquez, J. (2003). [http://g2sebok.incose.org/app/mss/menu/index.cfm Guide to the Systems Engineering Body of Knowledge &ndash; G2SEBoK]. International Council on Systems Engineering. {{systems Engineering}} [[Category:Systems engineering]] [[pt:Processo de engenharia de sistemas]]</text> </page> <page> <id>36570</id> <title>Systems philosophy</title> <text>'''Systems philosophy''' is the study of the development of [[systems]], with an emphasis on [[design]] and [[root cause analysis]]. Systems philosophy is a form of [[systems thinking]]. [[Ludwig von Bertalanffy]], the founder of [[systems science]], categorized three domains of [[systemics]]: the [[philosophy]] of systems, the [[theory]] of systems, and the [[technology]] of systems. This was later modified by [[Béla H. Bánáthy]] of the Primer Group to a fourfold model, the philosophy, the science, the methodology and the application of systemics. The philosophy and the science of systems constitute the knowledge of systems; the methodology and the application constitute the action of systems. According to systems philosophy, there are no "systems" in nature. The universe, the world and nature 