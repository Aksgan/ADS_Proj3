[[ProVerif]] [http://www.proverif.ens.fr/] due to [[Bruno Blanchet]], based on a translation of the applied <math>\pi</math>-calculus into Blanchet's logic programming framework. Another example is Cryptyc [http://www.cryptyc.org], due to Andrew Gordon and Alan Jeffrey, which uses Woo and Lam's method of correspondence assertions as the basis for type systems that can check for authentication properties of cryptographic protocols. Around 2002, Howard Smith and [[Peter Fingar]] became interested in using the <math>\pi</math>-calculus as a description tool for modelling business processes. As of July 2006, there is discussion in the community as to how useful this will be. Most recently, the <math>\pi</math>-calculus has been used as the theoretical basis of [[Business Process Modeling Language]] (BPML), and of Microsoft's XLANG.<ref>"BPML | BPEL4WS: A Convergence Path toward a Standard BPM Stack." BPMI.org Position Paper. August 15, 2002.[http://www.bpmi.org/downloads/BPML-BPEL4WS.pdf]</ref> The <math>\pi</math>-calculus has also attracted interest in molecular biology. In 1999, [[Aviv Regev]] and [[Ehud Shapiro]] showed that one can describe a cellular signaling pathway (the so-called [[Receptor tyrosine kinase|RTK]]/[[MAPK]] cascade) and in particular the molecular "lego" which implements these tasks of communication in an extension of the <math>\pi</math>-calculus.<ref>{{cite journal|first=Aviv|last=Regev|authorlink=Aviv Regev|coauthors=William Silverman and Ehud Y. Shapiro|year=2001|title=Representation and Simulation of Biochemical Processes Using the pi-Calculus Process Algebra|journal=[[Pacific Symposium on Biocomputing]]|pages=459–470}}</ref> == Implementations == The following programming languages are implementations either of the <math>\pi</math>-calculus or of its variants: * [[Acute (programming language)|Acute]] * [[Business Process Modeling Language]] (BPML) * [[Nomadic Pict]] * [[occam-π]] * [[Pict programming language|Pict]] * [[JoCaml]] (based on the [[Join-calculus]]) * [[Funnel (programming language)|Funnel]] (A JRE-compatible join calculus implementation) * The [http://www-poleia.lip6.fr/~pesch/cube/about.html CubeVM] (a stackless implementation) * The [http://spico.gforge.inria.fr/ SpiCO] language: a stochastic pi-calulus for concurrent objects * [http://www.wisdom.weizmann.ac.il/~biospi/ BioSPI] and [http://research.microsoft.com/~aphillip/spim/ SPiM]: simulators for the stochastic pi-calculus * [http://www.ateji.com/px Ateji PX]: a Java language extension with parallel primitives inspired from <math>\pi</math>-calculus == Notes == {{Reflist}} == References == * {{cite book|last=Milner|first=Robin|authorlink=Robin Milner|title=Communicating and Mobile Systems: the Pi-Calculus|year=1999|publisher=Cambridge University Press|location=Cambridge, UK|isbn=0-521-65869-1}} * {{cite book|last=Milner|first=Robin|authorlink=Robin Milner|editor=F. L. Hamer, W. Brauer, H. Schwichtenberg|title=Logic and Algebra of Specification|url=http://www.lfcs.inf.ed.ac.uk/reports/91/ECS-LFCS-91-180/ECS-LFCS-91-180.ps|year=1993|publisher=Springer-Verlag|chapter=The Polyadic π-Calculus: A Tutorial}} * {{cite book|last1=Sangiorgi|first1=Davide|last2=Walker|first2=David|title=The Pi-calculus: A Theory of Mobile Processes|year=2001|publisher=Cambridge University Press|location=Cambridge, UK|isbn=0-521-78177-9}} == External links == * [http://c2.com/cgi/wiki?PiCalculus PiCalculus] on the C2 wiki * [http://move.to/mobility Calculi for Mobile Processes] * [http://www.eecs.harvard.edu/~nr/cs257/archive/jeannette-wing/pi.pdf FAQ on Pi-Calculus] by [[Jeannette M. Wing]] [[Category:Process calculi]] [[Category:Theoretical computer science]] [[ca:Càlcul Pi]] [[de:Pi-Kalkül]] [[es:Cálculo pi]] [[fr:Pi-calcul]] [[id:Kalkulus pi]] [[it:Pi calculus]] [[ru:Пи-исчисление]] [[uk:Пі-числення]]</text> </page> <page> <id>29224</id> <title>Pick operating system</title> <text>{{Infobox OS | name = Pick operating system | logo = | screenshot = | caption = | developer = Don Nelson, Dick Pick, [[TRW]] | source_model = | kernel_type = [[monolithic kernel|Monolithic]] (or none for [[operating environment]] implementations) | supported_platforms = [[Linux]], [[AIX]], [[Windows Server]] (2000 and up) | ui = [[text-based (computing)|Text-based]] | family = | released = 1965 ([[GIRLS]]), 1973 (Reality Operating System) | latest_release_version = | latest_release_date = | latest_test_version = | latest_test_date = | marketing_target = Business [[data processing]] | programmed_in = [[Assembly language]] | prog_language = Data/BASIC ([[BASIC]]-like), [[PROC procedure language]], [[ENGLISH (programming language)|ENGLISH]] | language = [[English language|English]] | updatemodel = | package_manager = | working_state = | license = ? | website = }} The '''Pick operating system''' (often called just "the '''Pick system'''" or simply "Pick") is a [[demand paging|demand-paged]], multiuser, [[virtual memory]], [[time-sharing]] [[operating system]] based around a unique [[MultiValue|"multivalued" database]]. Pick is used primarily for business [[data processing]]. The term "Pick system" has also come to be used as the general name of all [[operating environment]]s which employ this multivalued database and have some implementation of Pick/BASIC and [[ENGLISH (programming language)|ENGLISH]]/[[Access query language|Access]] queries. Although Pick started on a variety of [[minicomputer]]s, the system and its various implementations eventually spread to a large assortment of [[microcomputer]]s and [[mainframe computer]]s and is still in use today. ==Overview== The Pick database is a '[[hash table|hash-file]]' data management system. A hash-file system is a collection of dynamic [[associative array]]s which are organized altogether and linked and controlled using associative files as a database management system. Being hash-file oriented, Pick provides efficiency in data access time. All data structures in Pick are hash-files (at the lowest level) meaning records are stored as associated couplets of a primary key to a set of values. A Pick database is divided into one or more accounts, master dictionaries, dictionaries, files and sub-files, each of which is a hash-table oriented file. These files contain records made up of fields, sub-fields and sub-sub-fields. In Pick, records are called items, fields are called attributes, and sub-fields are called values or sub-values (hence the present-day label "multivalued database"). All elements are variable-length, with field and values marked off by special delimiters, so that any file, record, or field may contain any number of entries of the lower level of entity. As a result, a Pick item (record) can be one complete entity (one entire invoice, purchase order, sales order, etc.), or is like a file on most conventional systems. Entities that are stored as 'files' in other common-place systems (i.e. source programs and text documents) must be stored as records within files on Pick. The file hierarchy is roughly equivalent to the common [[Unix-like]] hierarchy of directories, sub-directories, and files. The master dictionary is similar to a directory in that it stores pointers to other dictionaries, files and executable programs. The master dictionary also contain the command-line language. All files (accounts, dictionaries, files, sub-files) are organized identically as are all records. This uniformity is exploited throughout the system, both by system functions, and by the system administration commands. For example, the 'find' command will find and report the occurrence of a word or phrase in a file, and can operate on any account, dictionary, file or sub-file. Each record must have a unique, primary key which determines where in a file that record is stored. To retrieve a record, its key is [[hash function|hashed]] and the resultant value specifies which of a set of discrete "buckets" (called "groups") to look in for the record. (Within a bucket, records are scanned sequentially.) Therefore, most records (i.e. a complete document) can 