[[universal quantum computer]], [[Shor's algorithm]], [[Grover's algorithm]], [[Deutsch-Jozsa algorithm]], [[amplitude amplification]], [[quantum Fourier transform]], [[quantum gate]], [[Adiabatic quantum computation|quantum adiabatic algorithm]] and [[quantum error correction]]. ==Potential== [[Integer factorization]] is believed to be computationally infeasible with an ordinary computer for large integers if they are the product of few [[prime number]]s (e.g., products of two 300-digit primes).<ref>[http://modular.fas.harvard.edu/edu/Fall2001/124/misc/arjen_lenstra_factoring.pdf Integer Factoring] By ARJEN K. LENSTRA - Designs, Codes and Cryptography, 19, 101–128 (2000) Kluwer Academic Publishers</ref> By comparison, a quantum computer could efficiently solve this problem using [[Shor's algorithm]] to find its factors. This ability would allow a quantum computer to decrypt many of the [[cryptography|cryptographic]] systems in use today, in the sense that there would be a [[polynomial time]] (in the number of digits of the integer) algorithm for solving the problem. In particular, most of the popular [[Asymmetric Algorithms|public key ciphers]] are based on the difficulty of factoring integers (or the related [[discrete logarithm]] problem which can also be solved by Shor's algorithm), including forms of [[RSA]]. These are used to protect secure Web pages, encrypted email, and many other types of data. Breaking these would have significant ramifications for electronic privacy and security. However, other existing cryptographic algorithms don't appear to be broken by these algorithms.<ref name="pqcrypto_survey">Daniel J. Bernstein, [http://pqcrypto.org/www.springer.com/cda/content/document/cda_downloaddocument/9783540887010-c1.pdf Introduction to Post-Quantum Cryptography]. Introduction to Daniel J. Bernstein, Johannes Buchmann, Erik Dahmen (editors). Post-quantum cryptography. Springer, Berlin, 2009. ISBN 978-3-540-88701-0</ref><ref>See also [http://pqcrypto.org/ pqcrypto.org], a bibliography maintained by Daniel J. Bernstein and Tanja Lange on cryptography not known to be broken by quantum computing.</ref> Some public-key algorithms are based on problems other than the integer factorization and discrete logarithm problems to which Shor's algorithm applies, like the [[McEliece cryptosystem]] based on a problem in [[coding theory]].<ref name="pqcrypto_survey" /><ref>Robert J. McEliece. "[http://ipnpr.jpl.nasa.gov/progress_report2/42-44/44N.PDF A public-key cryptosystem based on algebraic coding theory]." Jet Propulsion Laboratory DSN Progress Report 42–44, 114–116.</ref> [[Lattice based cryptography|Lattice based cryptosystems]] are also not known to be broken by quantum computers, and finding a polynomial time algorithm for solving the [[dihedral group|dihedral]] [[hidden subgroup problem]], which would break many lattice based cryptosystems, is a well-studied open problem.<ref>{{Cite journal| last1=Kobayashi|first1=H.|last2=Gall|first2=F.L.|title=Dihedral Hidden Subgroup Problem: A Survey|year=2006|journal=Information and Media Technologies|volume=1|issue=1|pages=178–185|url=http://www.jstage.jst.go.jp/article/imt/1/1/1_178/_article}} </ref> It has been proven that applying Grover's algorithm to break a [[Symmetric cryptography|symmetric (secret key) algorithm]] by brute force requires roughly 2<sup>n/2</sup> invocations of the underlying cryptographic algorithm, compared with roughly 2<sup>n</sup> in the classical case,<ref name=bennett_1997>Bennett C.H., Bernstein E., Brassard G., Vazirani U., ''[http://www.cs.berkeley.edu/~vazirani/pubs/bbbv.ps The strengths and weaknesses of quantum computation]''. [[SIAM Journal on Computing]] 26(5): 1510-1523 (1997).</ref> meaning that symmetric key lengths are effectively halved: AES-256 would have the same security against an attack using Grover's algorithm that AES-128 has against classical brute-force search (see [[Key_size#Effect_of_quantum_computing_attacks_on_key_strength|Key size]]). [[Quantum cryptography]] could potentially fulfill some of the functions of public key cryptography. Besides factorization and discrete logarithms, quantum algorithms offering a more than polynomial speedup over the best known classical algorithm have been found for several problems,<ref>[http://www.its.caltech.edu/~sjordan/zoo.html Quantum Algorithm Zoo] - Stephen Jordan's Homepage</ref> including the simulation of quantum physical processes from chemistry and solid state physics, the approximation of [[Jones polynomial]]s, and solving [[Pell's equation]]. No mathematical proof has been found that shows that an equally fast classical algorithm cannot be discovered, although this is considered unlikely. For some problems, quantum computers offer a polynomial speedup. The most well-known example of this is ''quantum database search'', which can be solved by [[Grover's algorithm]] using quadratically fewer queries to the database than are required by classical algorithms. In this case the advantage is provable. Several other examples of provable quantum speedups for query problems have subsequently been discovered, such as for finding collisions in two-to-one functions and evaluating NAND trees. Consider a problem that has these four properties: #The only way to solve it is to guess answers repeatedly and check them, #The number of possible answers to check is the same as the number of inputs, #Every possible answer takes the same amount of time to check, and #There are no clues about which answers might be better: generating possibilities randomly is just as good as checking them in some special order. An example of this is a [[Password cracking|password cracker]] that attempts to guess the password for an [[encryption|encrypted]] file (assuming that the password has a maximum possible length). For problems with all four properties, the time for a quantum computer to solve this will be proportional to the square root of the number of inputs. That can be a very large speedup, reducing some problems from years to seconds. It can be used to attack [[symmetric cipher]]s such as [[Triple DES]] and [[Advanced Encryption Standard|AES]] by attempting to guess the secret key. [[Grover's algorithm]] can also be used to obtain a quadratic speed-up over a brute-force search for a class of problems known as [[NP-complete]]. Since chemistry and nanotechnology rely on understanding quantum systems, and such systems are impossible to simulate in an efficient manner classically, many believe [[Universal quantum simulator|quantum simulation]] will be one of the most important applications of quantum computing.<ref>[http://www.wired.com/science/discoveries/news/2007/02/72734 The Father of Quantum Computing] By Quinn Norton 02.15.2007, Wired.com</ref> There are a number of practical difficulties in building a quantum computer, and thus far quantum computers have only solved trivial problems. [[David DiVincenzo]], of IBM, listed the following requirements for a practical quantum computer:<ref>{{Cite web| url=http://arxiv.org/abs/quant-ph/0002077|title=The Physical Implementation of Quantum Computation|accessdate=2006-11-17|author=David P. DiVincenzo, IBM|date=2000-04-13}}</ref> *scalable physically to increase the number of qubits; *qubits can be initialized to arbitrary values; *quantum gates faster than [[decoherence]] time; *universal gate set; *qubits can be read easily. ===Quantum decoherence=== One of the greatest challenges is controlling or removing [[quantum decoherence]]. This usually means isolating the system from its environment as the slightest interaction with the external world would cause the system to decohere. This effect is irreversible, as it is non-unitary, and is usually something that should be highly controlled, if not avoided. Decoherence times for candidate systems, in particular the transverse relaxation time T<sub>2</sub> (for [[Nuclear magnetic resonance|NMR]] and [[MRI]] technology, also called the ''dephasing time''), typically 