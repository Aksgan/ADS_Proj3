be due to a covert movement of the quantifier phrase at a more abstract level of syntactic representation (such as [[Logical form (linguistics)|Logical Form]] (LF)). == Strong crossover == Strong crossover (SCO) refers to the restriction on possible binding or coreference found between certain phrases and pronouns, as below: : (3) *Who<sub>''i''</sub> does he<sub>''i''</sub> love ''t''<sub>''i''</sub>? : (4) *He<sub>''i''</sub> loves each boy<sub>''i''</sub>. In (3), the object [[interrogative word|wh]]-phrase ''who'' is said to have "crossed over" the subject pronoun ''he''; in this configuration, the individuals picked out by ''he'' cannot covary with those selected by ''who'' (that is, ''he'' cannot be bound by the quantifier associated with ''who''). The same set of data found with quantifiers, as in (4), has often been claimed to be due to a covert movement of the quantifier phrase at a more abstract level of syntactic representation (such as Logical Form (LF)). Crossover effects were originally discovered by [[Paul Postal]] in 1971;<ref>Postal, Paul. 1971. Crossover phenomena. </ref> the division into 'weak' and 'strong' is due to [[Thomas Wasow]], whose dissertation describes the fact that for many speakers, the restriction on binding is felt to be stronger in cases like (3) and (4) than in Weak Crossover configurations like (1) and (2).<ref>Wasow, Thomas. 1973. MIT dissertation.</ref> ==References== {{reflist}} *[[Gennaro Chierchia|Chierchia, Gennaro]]. 1995. ''[http://books.google.com.au/books?id=ficc4clskvMC Dynamics of meaning]''. [[University of Chicago Press]] [[Category:Syntax]] [[Category:English grammar]] {{ling-stub}}</text> </page> <page> <id>8566</id> <title>Crowds</title> <text>{{Otheruses|Crowd}} {{Cleanup|date=February 2007}} '''Crowds''' is a proposed anonymity network that gives probable innocence in the face of a large number of attackers. Crowds was designed by [[Michael_Reiter|Michael K. Reiter]] and [[Avi_Rubin|Aviel D. Rubin]] and defends against internal attackers and a corrupt receiver, but provides no anonymity against a global attacker or a local eavesdropper (see "Crowds: Anonymity For Web Transactions"). Crowds is vulnerable to the [[predecessor attack]]; this was discussed in Reiter and Rubin's paper and further expanded in "The Predecessor Attack: An Analysis of a Threat to Anonymous Communications Systems" by Matthew K. Wright, Micah Adler, And Brian Neil Levine. Crowds is important as it introduced the concept of users blending into a crowd of computers, and many of the concepts used in newer systems (e.g. [[Tarzan (anonymity network)|Tarzan]]). Provide users with a mechanism for anonymous Web browsing. The main idea behind Crowds anonymity protocol is to hide each user's communications by routing them randomly within a group of similar users. By Crowds protocol a corrupt group member or local eavesdropper that observes a message being sent by a particular user can never be sure whether the user is the actual sender, or is simply routing another user's message. ==How crowds works== # Each user joins a crowd of other users by registering himself at the blender which is a single server responsible for membership management. When a user registers, all the other members in the crowd are notified. The blender is also responsible for key distribution, as it distributes symmetric keys to individual pairs of jondos, used for encryption and decryption, respectively of packets routed along the virtual paths. # Each user is represented by a jondo on her machine which is an application that runs on a userâ€™s computer. # Each jondo either submit request to end server or forwards it to a randomly chosen jondo (possibly itself). Other jondo tasks are to strip out any personal information such as cookies, identifying header fields. # A jondo cannot tell if a request is initiated by the previous jondo or one before it. # Request and reply follow the same virtual paths which are constructed using an algorithm involving probabilities.The virtual paths are torn down and reconstructed on a regular basis to allow anonymity for newly added members. ==Definitions== Crowds uses and defines the following terms: ; Sender : The initiator of a message ; Receiver : The final recipient of a message ; Probable Innocence : The attacker is unable to have greater than 50% confidence that any node initiated the message (a node appears equally like to have initiated the message as to not have - each user is more likely innocent than not.) ; Local Eavesdropper : An attacker that can observe all incoming and outgoing messages for any propersubset of the nodes ; Corrupt Node : A node is corrupt if it uses information obtained from forwarding the message to determine the sender ; <math>C</math> : The number of corrupt nodes ; <math>N</math> : The number of nodes (<math>N - C</math> is the number of good nodes) ; <math>p_f</math> : The probability of forwarding ==Basic Design== Crowds works by making each node seem equally likely to be the initiator of the message. As we said each node joins the network by starting a ''jondo'' (from "John Doe"), which is a small process that will forward and receive requests from other users. When the jondo is started all nodes in the network are informed of the new node's entrance, and will begin to select him as a forwarder. To actually send a message a node chooses randomly (with uniform probability) from all nodes in the network and forwards the message to them. Upon receiving the message the node flips a biased coin (with probability <math>p_f > \frac{1}{2}</math>) and if it lands heads forwards it to another random node, otherwise it forwards it to the final destination. Each node when forwarding to another node records the predecessor and in this way a tunnel is built, this is used for the communication between the sender and the receiver. ===The algorithm on each machine=== <code> OnReceive(Node P, Message M) # Flip biased coin (<math>\Pr(Heads) = p_f</math>) ## ''If'' Heads ''Then'' Select a uniformly random node and forward to them ## ''Else'' Forward to destination # Record P so that a tunnel can be built </code> ==Security analysis== We consider the question of what information an attacker can learn about the senders and receivers of web transactions, given the mechanisms of Crowds we described. === Local eavesdropper === Recall that every message forwarded on a path, except for 