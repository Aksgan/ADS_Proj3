its functionality was greatly expanded in [http://man.cat-v.org/plan_9/3/proc Plan 9 from Bell Labs]. ===Linux /sys filesystem=== The /sys filesystem on Linux is a counterpart to /proc, which provides a lot of (non-process related) detailed information about the in-kernel status to userspace, eg. [[device file|devices]], busses and [[loadable kernel module|loaded modules]]. ===ObexFS=== ObexFS is a [[Filesystem in Userspace|FUSE]]-based filesystem that provides access to [[OBEX]] objects via a filesystem. Applications can work on remote objects via the OBEX protocol as if they were simply (local) files. ===Plan 9 file servers=== On the [[Plan 9 from Bell Labs]] operating system family, the concept of [[9P]] synthetic filesystem is used as a generic [[Inter-process communication|IPC]] method. Contrary to most other operating systems, Plan 9's design is heavily distributed: while in other OS worlds, there are many (and often large) libraries and frameworks for common things, Plan 9 encapsulates them into fileservers. The most important benefit is that applications can be much simpler and that services run network and platform agnostic - they can reside on virtually any host and platform in the network, and virtually any kind of network, as long the fileserver can be mounted by the application. Plan 9 drives this concept expansively: most operating system services, eg. hardware access and networking stack are presented as fileservers. This way it is trivial to use these resources remotely (eg. one host directly accessing another host's block devices or network interfaces) without the need of additional protocols. [http://9p.cat-v.org/implementations Other implementations of the 9P file system protocol] also exists for many other systems and environments. ===Embedded systems=== Debugging embedded systems or even system-on-chip (SoC) devices is widely known to be difficult.{{Citation needed|date=October 2009}} Several protocols have been implemented to provide direct access to in-chip devices, but they tend to be proprietary, complex and hard to handle. Based on [[9P]], Plan 9's network filesystem, studies suggest using synthetic filesystems as universal access scheme to those information. The major benefit is that 9P is very simple and so quite easy to implement in hardware and can be easily used and over virtually any kind of network (from a serial link up to the internet). ==Arguments for using synthetic filesystems== The major point might be flexibility and easy access to [[service-oriented architecture]]s. Once a noticeable number of applications use this scheme, the overall overhead (code, resource consumption, maintenance work) can be reduced significantly Many general arguments for SOAs also apply here. ==Arguments against synthetic filesystems== Filesytem semantics do not fit all application scenarios. For example complex [[remote procedure call]]s with many parameters tend to be hard to map to filesystem schemes,{{Citation needed|date=October 2009}} and may require application redesign. ==External links== * [http://9p.cat-v.org The 9P synthetic-file-system protocol]. * BROWN, Geoffrey: [http://www.metux.de/download/soc-filesystem.pdf On-Chip Filesystems to support Complex Embedded Systems] * JONES Warren, RUBALSKY Lana: [http://www.yacpos.org/Content/files/StoredPurpose_SyntheticFileSystem.html Stored Purpose Synthetic File System] * PISUPATI, Bhani N.: [http://www.cs.indiana.edu/pub/techreports/TR647.pdf A virtual filesystem framework to support embedded software development] * PATIL, Ameet; FREEMAN, Michael; GAO, Rui; BAILEY: [http://www-users.cs.york.ac.uk/~mjf/publications/12.pdf Implementing the Styx network protocol in hardware] * MINNICH, Ron: [http://www.cs.unm.edu/~fastos/05meeting/PLAN9NOTDEADYET.pdf Why Plan9 is not dead and we can learn from it] [[Category:Computer file systems]]</text> </page> <page> <id>36456</id> <title>SystemRDL</title> <text>{{Multiple issues|advert = January 2010|one source = January 2010}} The '''SystemRDL''' language, supported by the [[SPIRIT Consortium]], was specifically designed to describe and implement a wide variety of [[Control Status Register|control status registers]]. Using SystemRDL, developers can automatically generate and synchronize register views for specification, hardware design, software development, verification, and documentation. ==External links== * [http://www.spiritconsortium.org/releases/SystemRDL SystemRDL V1.0: A Specification for a Register Description Language] {{DEFAULTSORT:Systemrdl}} [[Category:Hardware description languages]]</text> </page> <page> <id>36462</id> <title>System 1</title> <text>{{Unreferenced|date=August 2010}} '''System 1''', also known as Mac System Software, was the original Macintosh operating system, and a part of the [[Classic Mac OS]] family, and ran on the 68K processor architecture. It was released on January 24, 1984 and replaced by System 1.1 on May 5, 1984. (Note: Eventually, the "Systems" were renamed "Mac OS") System 1 was originally released with the first [[Macintosh]], later named the [[Macintosh 128k]]. System 1 introduced many features that would appear for years to come, some even still existing in Mac OS X. These features included a total lack of a command line, the Finder, and the menu bar. In addition to this, it popularized the [[graphical user interface]] and [[desktop metaphor]]. [[Category:Apple Inc. operating systems]]</text> </page> <page> <id>36490</id> <title>System Reference Manual</title> <text>{{No footnotes|date=April 2009}} [[Image:SRM loading aboot.png|thumb|right|A screenshot of SRM loading aboot (a [[Linux]] bootloader)]] The '''SRM firmware''' (also called the '''SRM console''') is the boot [[firmware]] written by [[Digital Equipment Corporation]] (DEC) for computer systems based on the [[Alpha AXP]] [[microprocessor]]. The acronym SRM is derived from the phrase '''Alpha System Reference Manual''', the publication detailing the Alpha AXP architecture and which specified various features of the SRM firmware. The SRM console was initially designed to boot DEC's [[OSF/1 AXP]] (later called Digital UNIX and finally Tru64 UNIX) and [[OpenVMS]] operating systems, although various other operating systems (such as [[Linux]], [[NetBSD]], [[OpenBSD]], and [[FreeBSD]], for example) were also written to boot from the SRM console. The third proprietary [[operating system]] published for the Alpha AXP architecture – [[Microsoft]] [[Windows NT]] – did not boot from SRM; instead, Windows booted from the [[Advanced RISC Computing|ARC]] boot firmware. (ARC is also known as AlphaBIOS.) On many Alpha computer systems – for example, the [[Digital Personal Workstation]] – both SRM and ARC could be loaded onto the [[EEPROM]] which held the boot firmware. However, on some smaller systems (or large systems which were never intended to boot Windows), only one of the two boot firmwares could fit onto the EEPROM at one time. For example, the flash EEPROM of the [[DEC Multia]], which was a small, personal Alpha AXP workstation designed to run Windows NT, was only large enough to hold a single firmware. The SRM console is capable of display on either a graphical adapter (such as a [[Peripheral Component Interconnect|PCI]] [[Video graphics array|VGA]] card) or, if no graphical console and/or local keyboard is detected, on a serial 