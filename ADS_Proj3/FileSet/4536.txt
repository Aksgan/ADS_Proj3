require the user to disclose his/her EKpub with the TTP. The unique new feature of the DAA is that it has the ability to convince the remote entity that a particular TPM (trusted platform module) is a valid TPM without disclosing the EKpub or any other unique identifier. Before the TPM can send a certification request for an AIK to the remote entity, the TPM has to generate a set of DAA credentials. This can only be done by interacting with an issuer. The DAA credentials are created by the TPM sending a TPM-unique secret that remains within the TPM. The TPM secret is similar but not analogous to the EK. When the TPM has obtained a set of DAA credentials, it can send these to the Verifier. When the Verifier receives the DAA credentials from the TTP, it will verify them and send a certified AIK back to the user. The user will then be able to communicate with other trusted parties using the certified AIK. The Verifier may or may not be a trusted third party (TTP). The Verifier can determine if the DAA credentials are valid, but the DAA credentials do not contain any unique information that discloses the TPM platform. An example would be where a user wants trusted status and sends a request to the Issuer. The Issuer could be the manufacturer of the user’s platform, e.g. Compaq. Compaq would check if the TPM it has produced is a valid one, and if so, issues DAA credentials. In the next step, the DAA credentials are sent by the user to the Verifier. As mentioned this might be a standard TTP, but could also be a different entity. If the Verifier accepts the DAA supplied it will produce a certified AIK. The certified AIK will then be used by the user to communicate with other trusted platforms. In summary the new version introduces a separate entity that will assist in the anonymous attestation process. By introducing the Issuer which supplies a DAA, one will be able to sufficiently protect the user’s anonymity towards the Verifier/TTP. The issuer most commonly will be the platform manufacturer. Without such credentials, it will be probably difficult for a private customer or small business or organisation to convince others that they have a genuine trusted platform. ==Known applications== ===Hard drive encryption=== The Microsoft products [[Windows Vista]] and [[Windows 7]] make use of a Trusted Platform Module to facilitate [[BitLocker Drive Encryption]].<ref name="bitlocker">{{cite web | url=http://download.microsoft.com/download/0/2/3/0238acaf-d3bf-4a6d-b3d6-0a0be4bbb36e/BitLockerCipher200608.pdf | title=AES-CBC + Elephant: A Disk Encryption Algorithm for Windows Vista | publisher = Microsoft TechNet |month=August | year=2006 | author = [[Niels Ferguson|Ferguson, Niels]] | accessdate = 2007-02-07 |format=PDF}}</ref> ==Possible applications== ===Digital rights management=== Trusted Computing would allow companies to create a [[Digital rights management]] system which would be very hard to circumvent, though not impossible. An example is downloading a music file. Remote attestation could be used so that the music file could refuse to play except on a specific music player that enforces the record company's rules. This means that only major media players would be able to play your music. Sealed storage could be used to prevent the user from opening the file with another player or another computer. The music would be played in curtained memory, which would prevent the user from making an unrestricted copy of the file while it is playing, and secure I/O would prevent capturing what is being sent to the sound system. Circumventing such a system would require either manipulation of the computer's hardware, capturing the analogue (and possibly degraded) signal using a recording device or a microphone, or breaking the encryption algorithm. New business models for use of software (services) over Internet may be boosted by the technology. By strengthening the DRM system, one could base a business model on renting programs for a specific time periods or "pay as you go" models. For instance one could download a music file which you only could play a certain amount of times before it became unusable, or the music file could be used only within a certain time period. ===Preventing cheating in online games=== Trusted Computing could be used to combat [[cheating in online games]]. Some players modify their game copy in order to gain unfair advantages in the game; remote attestation, secure I/O and memory curtaining could be used to determine that all players connected to a server were running an unmodified copy of the software. ===Ensuring that people upload in peer-to-peer file sharing networks=== In [[peer-to-peer]] [[file sharing]] networks it is important that the clients upload as well as download, but only the download is usually of interest to the users. Because of this some [[Bittorrent (protocol)|Bittorrent]] servers for example keep track of how much each user uploads and downloads and users with a poor upload/download ratio are banned. For [[Direct Connect (file sharing)|Direct Connect]], client software is available that "cheats" in one way or another, and some people also use third party software to limit their upload speed. With Trusted Computing it would be possible to write peer-to-peer software/protocols that can not be misused like this. For example the client software could refuse to download anything before the upload/download ratio improves, and there would be nothing the user could do to get around that. ===Verification of remote computation for grid computing=== Trusted Computing could be used to guarantee participants in a grid computing system are returning the results of the computations they claim to be instead of forging them. This would allow large scale simulations to be run (say a climate simulation) without expensive redundant computations to guarantee malicious hosts are not undermining the results to achieve the conclusion they want.<ref>{{cite web | url = http://www.hpl.hp.com/personal/Wenbo_Mao/research/tcgridsec.pdf | title = Innovations for Grid Security From Trusted Computing | author = Mao, Wenbo Jin, Hai and Martin, Andrew | date = 2005-06-07 | accessdate = 2007-02-07 |format=PDF |archiveurl = http://web.archive.org/web/20060822043633/http://www.hpl.hp.com/personal/Wenbo_Mao/research/tcgridsec.pdf <!-- Bot retrieved archive --> |archivedate = 2006-08-22}}</ref> ==Criticism== Trusted Computing opponents such as the 