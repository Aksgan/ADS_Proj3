confusion. * Necromancer, a long-time friend of the founder of ACiD Productions, RaD Man, contacted him at the time of Remorse's original incarnation in 1994 to see if the creation of an ASCII art department in ACiD was possible. RaD Man's response? "ASCII in ACiD? Over my dead body!" Later after the death of the original Remorse, one of the original members of the group, Christopher Robin, convinced RaD Man to allow an ASCII section in ACiD. * The actual name of the art group is Remorse ASCII, but at one point a certain select few of the members that had been around since pack #1 decided that the best way to signify their loyalty to the group would be to show how Remorse was "cooler" than one of the longest-living underground computer groups, [[Razor 1911]], founded in 1985. As such, Remorse 1981 came to exist as a catch-phrase related to loyalty. * Remorse ASCII artists Necromancer and Killa Hertz both appear in the Artscene episode of the documentary film [[BBS Documentary]] by [[Jason Scott Sadofsky|Jason Scott]]. ==External links== * [http://www.remorse.org/index.php Remorse ASCII website] * [http://sixteencolors.net/group/remorse1981/index.html Remorse on Sixteen Colors ANSI Art and ASCII Art Archive] [[Category:1994 establishments]] [[Category:Artscene groups]] [[Category:ASCII art]]</text> </page> <page> <id>31775</id> <title>Remote Data Objects</title> <text>'''Remote Data Objects''' (abbreviated '''RDO''') is the name of an obsolete [[data access]] [[application programming interface]] primarily used in [[Microsoft]] [[Visual Basic]] applications on [[Windows 95]] and later [[operating systems]].<ref>{{cite web | last = Microsoft | title = Using Remote Data Objects and the RemoteData Control | url=http://msdn.microsoft.com/en-us/library/aa733681(VS.60).aspx | accessdate = 2009-01-04 }}</ref> This includes database connection, queries, stored procedures, result manipulation, and change commits. It allowed developers to create interfaces that can directly interact with [[Open Database Connectivity]] (ODBC) data sources on remote machines, without having to deal with the comparatively complex ODBC API. Remote Data Objects was included with versions 4, 5, and 6 of Visual Basic; the final version of RDO is version 2.0. == References == {{reflist}} == See also == * [[Microsoft Data Access Components]] == External links == * [http://msdn2.microsoft.com/en-us/library/aa733681(VS.60).aspx Using Remote Data Objects and the RemoteData Control] &mdash; Documentation on the Microsoft Developer Network {{windows-stub}} [[Category:Microsoft application programming interfaces]] [[Category:Databases]] [[de:Remote Data Objects]] [[es:Remote Data Objects]] [[ja:Remote Data Objects]] [[pt:RDO]] [[ru:RDO]]</text> </page> <page> <id>31781</id> <title>Remote Terminal Unit</title> <text>{{Other uses|Terminal (disambiguation)}} {{unreferenced|date=January 2008}} A '''Remote Terminal Unit (RTU)''' is a [[microprocessor]]-controlled electronic device that interfaces objects in the physical world to a [[distributed control system]] or [[SCADA]] (supervisory control and data acquisition system) by transmitting [[telemetry]] data to the system and/or altering the state of connected objects based on control messages received from the system. Another term that may be used for '''RTU''' is '''Remote Telemetry Unit''', the common usage term varies with the application area generally. ==Architecture and communications== An RTU monitors the field digital and analog parameters and transmits all the data to the Central Monitoring Station. An RTU can be interfaced with the Central Station with different communication media (usually serial ([[RS232]], [[RS485]], [[RS422]]) or [[Ethernet]]). RTU can support standard protocols ([[Modbus]], [[IEC 60870-5-101/103/104]], [[DNP3]], [[ICCP Protocol|ICCP]], etc.) to interface any third party software. In some control applications, RTUs drive high current capacity relays to a digital output (or "DO") board to switch power on and off to devices in the field. The DO board switches voltage to the coil in the relay, which closes the high current contacts, which completes the power circuit to the device. An RTU can monitor analog inputs of different types including 4 to 20 [[milliampere]]s ([[4â€“20 mA]]), 0 to 10 V., &minus;2.5V to 2.5V, 1 to 5V etc.; the RTU or host system then translates this raw data into the appropriate units such as gallons of water left or temperature before presenting the data to the user via the [[Human-machine interface|HMI]] or [[Man-machine interface|MMI]]. RTUs differ from [[Programmable Logic Controller]]s (PLCs) in that RTUs are more suitable for wide geographical telemetry, often using wireless communications, while PLCs are more suitable for local area control (plants, production lines, etc.) where the system utilizes physical media for control. The [[IEC 61131]] programming tool is more popular for use with PLCs, while RTUs often use proprietary programming tools. ==Software and logic control== Modern RTUs are usually capable of executing simple programs autonomously without involving the host computers of the [[Distributed Control System|DCS]] or [[SCADA]] system to simplify deployment, and to provide redundancy for safety reasons. An RTU in a modern water management system will typically have code to modify its behavior when physical override switches on the RTU are toggled during maintenance by maintenance personnel. This is done for safety reasons; a miscommunication between the system operators and the maintenance personnel could cause system operators to mistakenly enable power to a water pump when it is being replaced, for example. ==Comparison with other control systems== RTUs, [[Programmable logic controller|PLC]]s and [[Distributed control system|DCS]] are increasingly beginning to overlap in responsibilities, and many vendors sell RTUs with PLC-like features and vice versa. The industry has standardized on the [[IEC 61131-3]] functional block language for creating programs to run on RTUs and PLCs, although nearly all vendors also offer proprietary alternatives and associated development environments. In addition, some vendors now supply RTUs with comprehensive functionality pre-defined, sometimes with PLC extensions and/or interfaces for configuration. See the [http://www.multitrode.com/pump-station-manager MultiSmart pump station manager] for a water/wastewater example. Some suppliers of RTUs have created simple Graphical User Interfaces [[GUI]] to enable customers to configure their RTUs easily. Some examples are MoxGRAF from [http://www.mox.com.au MOX Products] for their MX602 Field Controller and PC-Link from [http://www.mypromosys.com/home.html Promosys Technology] for their RTU-1, RTU-3 and RTU-8. In some applications [[datalogger]]s are used in similar applications. A [[programmable automation controller]] (PAC) is a compact controller that combines the features and capabilities of a PC-based control system with that of a typical PLC. PACs are deployed in SCADA systems to provide RTU and PLC functions. In many electrical substation SCADA applications, "distributed RTUs" use information processors or station computers to communicate 