the first representation results with an upper bound estimator for the second one, hence using it may dramatically decrease the quality of the calculated estimator. This simple example shows us that great care should be given to the formulation of constraints when relaxation of the feasibility region is used. == References == * Y. C. Eldar, A. Beck, and M. Teboulle, [http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4471880 "A Minimax Chebyshev Estimator for Bounded Error Estimation,"] IEEE Trans. Signal Processing, 56(4): 1388-1397 (2007). * A. Beck and Y. C. Eldar, [http://dx.doi.org/10.1137/060656784 "Regularization in Regression with Bounded Noise: A Chebyshev Center Approach,"] SIAM J. Matrix Anal. Appl. 29 (2): 606-625 (2007). * Stephen Boyd and Lieven Vandenberghe, ''[http://www.stanford.edu/~boyd/cvxbook/ Convex Optimization,]'' Cambridge University Press, 2004. [[Category:Estimation theory]] [[Category:Geometry]] [[Category:Mathematical optimization]]</text> </page> <page> <id>5993</id> <title>Chebyshev nodes</title> <text>In [[numerical analysis]], '''Chebyshev nodes''' are the roots of the [[Chebyshev polynomials|Chebyshev polynomial of the first kind]]. They are often used as nodes in [[polynomial interpolation]] because the resulting interpolation polynomial minimizes the [[Runge's phenomenon]]. ==Definition== For a given natural number ''n'', '''Chebyshev nodes''' in the interval [&minus;1, 1] are :<math>x_i = \cos\left(\frac{2i-1}{2n}\pi\right) \mbox{ , } i=1,\ldots,n.</math> For nodes over an arbitrary interval [''a'', ''b''] a [[linear transformation]] can be used: :<math>\tilde{x}_i = \frac{1}{2} (a+b) + \frac{1}{2} (b-a) \cos\left(\frac{2i-1}{2n}\pi\right). </math> ==Approximation using Chebyshev nodes== The Chebyshev nodes are important in [[approximation theory]] because they form a particularly good set of nodes for [[polynomial interpolation]]. Given a function ƒ on the interval <math>[-1,+1]</math> and <math>n</math> points <math>x_1, x_2, ... , x_n,</math> in that interval, the interpolation polynomial is that unique polynomial <math>P_{n-1}</math> of degree <math>n-1</math> which has value <math>f(x_i)</math> at each point <math>x_i</math>. The interpolation error at <math>x</math> is :<math>f(x) - P_{n-1}(x) = \frac{f^{(n)}(\xi)}{n!} \prod_{i=1}^n (x-x_i) </math> for some <math>\xi</math> in [&minus;1, 1].<ref>{{harvtxt|Stewart|1996}}, (20.3)</ref> So it is logical to try to minimize :<math>\max_{x \in [-1,1]} \left| \prod_{i=1}^n (x-x_i) \right|. </math> This product Π is a ''[[monic polynomial|monic]]'' polynomial of degree ''n''. It may be shown that the maximum absolute value of any such polynomial is bounded above by 2<sup>1&minus;''n''</sup>. This bound is attained by the scaled Chebyshev polynomials 2<sup>1&minus;''n''</sup> ''T''<sub>''n''</sub>, which are also monic. (Recall that |''T''<sub>''n''</sub>(''x'')| ≤ 1 for ''x'' ∈ [&minus;1, 1].<ref>{{harvtxt|Stewart|1996}}, Lecture 20, &sect;14</ref>). When interpolation nodes ''x''<sub>''i''</sub> are the roots of the ''T''<sub>''n''</sub>, the interpolation error satisfies therefore :<math>|f(x) - P_{n-1}(x)| \le \frac{1}{2^{n-1}n!} \max_{\xi \in [-1,1]} |f^{(n)} (\xi)|.</math> <!-- To do: write about Lebesgue constant and connection with Fourier series --> ==Notes== <references/> ==References== *Burden, Richard L.; Faires, J. Douglas: ''Numerical Analysis'', 8th ed., pages 503-512, ISBN 0534392008. *{{Citation | last1=Stewart | first1=Gilbert W. | title=Afternotes on Numerical Analysis | publisher=[[Society for Industrial and Applied Mathematics|SIAM]] | isbn=978-0-89871-362-6 | year=1996}}. [[Category:Numerical analysis]] [[it:Nodi di Čebyšëv]] [[sl:Vozli Čebišova]]</text> </page> <page> <id>6008</id> <title>Checkstyle</title> <text>{{Primary|date=July 2010}} '''Checkstyle'''<ref>{{cite web | url = http://checkstyle.sourceforge.net/ | title = Checkstyle Home Page | year = 2010 | accessdate = 2010-11-02}}</ref> is a [[static code analysis]] tool used in [[software development]] for checking if [[Java (programming language)|Java]] [[source code]] complies with [[Programming style|coding rules]]. == Advantages and limits == The [[programming style]] adopted by a software development project can help to comply with good programming practices which improve the code quality, readability, re-usability, and reduce the cost of development. The performed checks mainly limit themselves to the presentation and don't analyze content, and do not confirm the correctness or completeness of the program. In practice, it can be fastidious to comply with all the style constraints, some of which could possibly harm the programming stages' dynamic; so, it may be useful to determine which level of check is needed for a certain type of program. == Examples of available modules == '''Checkstyle''' defines a set of available modules, each of which provides rules checking with a configurable level of strictness (mandatory, optional...). Each rule can raise notifications, warnings, and errors. It permits to check for instance: * [[Javadoc]] comments for classes, attributes and methods; * Naming conventions of attributes and methods; * Limit of the number of function parameters, line lengths; * Presence of mandatory headers; * The use of packets imports, of classes, of scope modifiers and of instructions blocks; * The spaces between some [[Character (computing)|characters]]; * The good practices of class construction; * [[Duplicate code|Duplicated code sections]]<ref>{{cite web | url = http://checkstyle.sourceforge.net/config_duplicates.html | title = Checkstyle Duplicate Code Check | year = 2010 | accessdate = 2010-11-02}}</ref>; * Multiple [[Software metrics|complexity measurements]], among which expressions. == Usage == '''Checkstyle''' is built in a [[JAR (file format)|JAR file]] which can run inside a [[Java VM]] or as an [[Apache Ant]] task. It can also integrate into an [[Integrated development environment|IDE]] or other tools. A Checkstyle plug-in can provide new functionalities, like: * overload [[syntax coloring]] or decorations in code editor; * decorate the project explorer to highlight problem-posing resources; * add warnings and errors outputs to the outputs. Thus, the developer can directly access to the code parts highlighted by Checkstyle. == History == '''Checkstyle''', originally developed by Oliver Burn back in 2001, is maintained by a team of several developers around the world. The current stable release is version 5.3<ref>{{cite web | url = http://checkstyle.sourceforge.net/releasenotes.html | title = Checkstyle Release Notes | year = 2010 | accessdate = 2010-11-02}}</ref> which is targeted towards the [[Java 5]] language. ==See also== * [[List of tools for static code analysis]] ==References== {{Reflist}} {{Software Engineering}} [[Category:Static code analysis]] [[Category:Java libraries]] [[Category:Java development tools]] {{software-eng-stub}} [[fr:Checkstyle]]</text> </page> <page> <id>6012</id> <title>Cheetah3D</title> <text>{{Infobox Software |name = Cheetah3D |logo = [[Image:Cheetah3dlogo.png|48px]] |screenshot = [[Image:Cheetah3dscreenshot.png|250px|An example scene, showing the Render Manager in the foreground.]] |caption = An example scene demonstrating the Cheetah3D renderer. |developer = Martin Wengenmayer |latest_release_version = 5.0 |latest_release_date = October 8, 2009 |operating_system = [[Mac OS X]] |genre = [[Computer graphics]] |license = [[Proprietary software|Proprietary]] |website = http://www.cheetah3d.com }} '''Cheetah3d''' is a [[computer graphics]] program for [[3D modelling]], animation and rendering. It is written in [[Cocoa (API)|Cocoa]] for [[Mac OS X]]. The program is aimed at beginning and amateur 3D artists. It offers a number of medium- and high-end features in 