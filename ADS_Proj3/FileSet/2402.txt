1449-1454, 2005. [[Category:Machine learning]] [[Category:Kernel methods for machine learning]] [[Category:Signal processing]] [[Category:Non-linear filters]]</text> </page> <page> <id>20556</id> <title>Kernel methods</title> <text>'''Kernel methods''' (KMs) are a class of algorithms for [[pattern analysis]], whose best known element is the [[support vector machine]] (SVM). The general task of pattern analysis is to find and study general types of relations (for example [[Cluster analysis|clusters]], [[ranking]]s, [[principal components]], [[correlation]]s, [[Categorization|classification]]s) in general types of data (such as sequences, text documents, sets of points, vectors, images, etc.). KMs approach the problem by mapping the data into a high dimensional [[feature space]], where each [[coordinate]] corresponds to one feature of the data items, [[data transformation|transforming]] the data into a set of points in a [[Euclidean space]]. In that space, a variety of methods can be used to find relations in the data. Since the mapping can be quite general (not necessarily [[linear]], for example), the relations found in this way are accordingly very general. This approach is called the [[kernel trick]]. KMs owe their name to the use of [[Kernel (statistics)|kernel function]]s, which enable them to operate in the feature space without ever computing the coordinates of the data in that space, but rather by simply computing the [[inner product]]s between the images of all pairs of data in the feature space. This operation is often computationally cheaper than the explicit computation of the coordinates. Kernel functions have been introduced for sequence data, graphs, text, images, as well as vectors. Algorithms capable of operating with kernels include [[Support vector machine]] (SVM), [[Gaussian process]]es, [[Ronald Fisher|Fisher's]] [[linear discriminant analysis]] (LDA), [[principal components analysis]] (PCA), [[canonical correlation analysis]], [[ridge regression]], [[spectral clustering]], [[Adaptive filter|linear adaptive filters]] and many others. Because of the particular culture of the research community that has been developing this approach since the mid-1990s, most kernel algorithms are based on [[convex optimization]] or [[Eigenvalue, eigenvector and eigenspace|eigenproblems]], are [[computationally efficient]] and statistically well-founded. Typically, their statistical properties are analyzed using [[statistical learning theory]] (for example, using [[Rademacher complexity]]). ==Applications== At the moment, the main application areas are in [[geostatistics]], [[kriging]], [[inverse distance weighting]], [[bioinformatics]], [[chemoinformatics]], [[information extraction]], [[text categorization]], and [[handwriting recognition]]. ==See also== [http://onlineprediction.net/?n=Main.KernelMethods onlineprediction.net Kernel Methods Article] ==References== * [http://www.kernel-machines.org Kernel-Machines Org] -- community website * [http://www.support-vector-machines.org www.support-vector-machines.org] ''(Literature, Review, Software, Links related to Support Vector Machines - Academic Site)'' * J. Shawe-Taylor and N. Cristianini. ''Kernel Methods for Pattern Analysis.'' Cambridge University Press, 2004. * W. Liu, J. Principe and S. Haykin. ''Kernel Adaptive Filtering: A Comprehensive Introduction.'' Wiley, 2010. {{DEFAULTSORT:Kernel Methods}} [[Category:Machine learning]] [[Category:Kernel methods for machine learning]] [[Category:Geostatistics]] [[Category:Classification algorithms]] [[ja:カーネル法]]</text> </page> <page> <id>20557</id> <title>Kernel panic</title> <text>{{Refimprove|date=November 2009}} [[Image:Ubuntu-linux-kernel-panic-by-jpangamarca.JPG|thumb|right|[[Linux]] kernel panic caused by a hard disk hardware failure.]] [[Image:FreeBSD kernel panic.png|thumb|right|A kernel panic in [[FreeBSD]], forced by sending [[SIGSEGV]] to [[init]].]] A '''kernel panic''' is an action taken by an [[operating system]] upon detecting an internal [[fatal error]] from which it cannot safely recover. The term is largely specific to [[Unix]] and [[Unix-like]] systems; for [[Microsoft Windows]] operating systems the equivalent term is "[[Fatal system error|Bug check]]" (or, [[Colloquialism|colloquially]], "[[Stop error screen|Blue Screen of Death]]"). The [[Kernel (computer science)|kernel]] routines that handle panics (in [[AT&T]]-derived and [[Berkeley Software Distribution|BSD]] Unix source code, a routine known as <code>panic()</code>) are generally designed to output an [[error message]] to the [[system console|console]], dump an image of kernel memory to disk for post-mortem [[debugging]] and then either wait for the system to be manually rebooted, or initiate an automatic [[Reboot (computer)|reboot]].<ref>http://www.unix.com/man-page/FreeBSD/9/panic/</ref> The information provided is of highly technical nature and aims to assist a [[system administrator]] or [[software developer]] in diagnosing the problem. Attempts by the operating system to read an invalid or non-permitted [[memory address]] are a common source of kernel panics. A panic may also occur as a result of a hardware failure or a bug in the operating system. In many cases, the operating system could continue operation after memory violations have occurred. However, the system is in an unstable state and rather than risking security breaches and data corruption, the operating system stops to prevent further damage and facilitate diagnosis of the error. The kernel panic was introduced in an early version of [[Unix]] and demonstrated a major difference between the design philosophies of Unix and its predecessor [[Multics]]. Multics developer [[Tom van Vleck]] recalls a discussion of this change with Unix developer [[Dennis Ritchie]]: {{quote|I remarked to Dennis that easily half the code I was writing in Multics was error recovery code. He said, "We left all that stuff out. If there's an error, we have this routine called panic, and when it is called, the machine crashes, and you holler down the hall, 'Hey, reboot it.'"<ref>[http://www.multicians.org/unix.html Unix and Multics<!-- Bot generated title -->]</ref>}} The original <code>panic()</code> function was essentially unchanged from Fifth Edition UNIX to the [[VAX]]-based UNIX 32V and output only an error message with no other information, then dropped the system into an endless idle loop. As the Unix [[codebase]] was enhanced, the <code>panic()</code> function was also enhanced to dump various forms of debugging information to the console. == Linux == Linux has kernel panic as other [[unix-like]] systems. There is also [[Linux kernel oops|kernel oops]] message that informs about a bug in the kernel that could be recovered by [[kill (Unix)|killing]] offending [[process (computing)|process]]. As this means that some subsystem or resource could be then unavailable, this could later leads to a kernel panic when the kernel will try to use them. ==Mac OS X== <!-- [[Image:MacOSX kernel panic.png]] - commented out because the article is too short at the moment --> [[Image:Panic10.6.png|right|thumb|[[Mac OS X 10.6]] kernel panic.]] <!-- [[File:MacOSX kernel panic.png|right|thumb|[[Mac OS X]] kernel panic, featured in versions [[Mac OS X Panther|10.3]] through to [[Mac OS X Leopard|10.5]].]] - article is too short --> Kernel panics also appear in Mac OS X. These can appear while booting up or when using an application. Once they show up they tell the user that they need to reboot the system (except for versions below 10.2).<ref>http://support.apple.com/kb/HT1392?viewlocale=en_US</ref> They vary from version 