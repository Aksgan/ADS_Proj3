but only the range 1â€“31 is currently assigned. Normally, the CMD line is left high (logic 0) and SCK pulses have no effect. To send a command, a sequence of 32 bits is clocked out over the CMD lines: * 4 bits of <code>1100</code>, a command start signal. * A read/write bit. If 0, this is a read, if 1 this is a write. * A single/broadcast bit. If 0, only the device with the matching ID is selected. If 1, all devices execute the command. * 6 bits of serial device ID. Device IDs are automatically assigned, starting with 0, on device reset. * 8 bits of register address * A single bit of "0". This provides time to process read requests, and enable the SDO output in case of a read, * 8 bits of data. If this is a read command, the bits provided must be 0, and the register's value is produced on the SDO pin of the selected chip. All non-selected chips connect their SDI inputs to their SDO outputs, so the controller will see the value. * A single bit of "0". This ends the command and provides time to disable the SDO output. == See also == * [[RDRAM]] * [[XDR2 DRAM]] * [[List of device bandwidths]] ==References== {{reflist}} == External links == *[http://www.rambus.com/us/products/xdr_xdr2/index.html Rambus XDR Product Page] *[http://www.rambus.com/us/products/flex_io/index.html Rambus FlexIO CPU Interface provides XDR Interface] *[http://www.qimonda.com/graphics-ram/XDR/index.html Qimonda XDR(TM) DRAM product] {{DRAM}} [[Category:Computer memory]] [[Category:SDRAM]] [[de:XDR-DRAM]] [[es:XDR DRAM]] [[fr:XDR DRAM]] [[ko:XDR DRAM]] [[ja:XDR DRAM]] [[pl:XDR DRAM]] [[fi:XDR DRAM]] [[sv:XDR DRAM]]</text> </page> <page> <id>40677</id> <title>XML-RPC</title> <text>'''XML-RPC''' is a [[remote procedure call]] (RPC) protocol which uses [[XML]] to encode its calls and [[HTTP]] as a transport mechanism.<ref name="book1">Simon St. Laurent, Joe Johnston, Edd Dumbill. (June 2001) ''Programming Web Services with XML-RPC.'' O'Reilly. First Edition.</ref> "XML-RPC" also refers generically to the use of XML for remote procedure call, independently of the specific protocol. This article is about the protocol named "XML-RPC". ==History== XML-RPC, the protocol, was created in 1998 by [[Dave Winer]] of [[UserLand Software]] and [[Microsoft]]<ref>{{cite web | last = Box | first = Don | title = A Brief History of SOAP | publisher = [[O'Reilly]] | date = 1 April 2001 | url = http://www.xml.com/pub/a/ws/2001/04/04/soap.html | accessdate = 27 October 2010 }}</ref>. As new functionality was introduced, the standard evolved into what is now [[SOAP (protocol)|SOAP]]. The generic use of XML for [[remote procedure call]] (RPC) was patented by [[Phillip Merrick]], Stewart Allen, and Joseph Lapp in April 2006, claiming benefit to a provisional application filed in March 1998. The patent is assigned to [[webMethods]], located in [[Fairfax, VA]].<ref name= "merrick01">{{cite web |url=http://www.google.com/patents?id=WFV4AAAAEBAJ |title=US Patent 7,028,312 |accessdate=18 September 2008 |author=Merrick et al. |date=11 April 2006}}</ref> ==Usage== XML-RPC works by sending a HTTP request to a server implementing the protocol. The client in that case is typically software wanting to call a single method of a remote system. Multiple input parameters can be passed to the remote method, one return value is returned. The parameter types allow nesting of parameters into maps and lists, thus larger structures can be transported. Therefore XML-RPC can be used to transport objects or structures both as input and as output parameters. ''Identification'' of clients for authorization purposes can be achieved using popular HTTP security methods. [[Basic access authentication]] is used for identification, [[HTTPS]] is used when identification (via certificates) and encrypted messages are needed. Both methods can be combined. In comparison to [[REST]], where ''resources'' are transported, XML-RPC is designed to ''call methods''. XML-RPC is simpler to use and understand than [[SOAP (protocol)|SOAP]] because it * allows only one method of method serialization, whereas SOAP defines multiple different encodings * has a simpler security model * does not require (nor support) the creation of [[Web Services Description Language|WSDL]] service descriptions, although [http://code.google.com/p/xrdl/ XRDL] provides a simple subset of the functionality provided by WSDL [[JSON-RPC]] is similar to XML-RPC. ==Data types== Common [[datatype]]s are converted into their XML equivalents with example values shown below: {| class="wikitable" !Name !Tag Example !Description |- |array | <source lang="xml"> <array> <data> <value><i4>1404</i4></value> <value><string>Something here</string></value> <value><i4>1</i4></value> </data> </array> </source> |[[Array data structure|Array]] of values, storing no keys |- |base64 | <source lang="xml"> <base64>eW91IGNhbid0IHJlYWQgdGhpcyE=</base64> </source> |[[Base64]]-encoded binary data |- |boolean | <source lang="xml"> <boolean>1</boolean> </source> |[[Boolean datatype|Boolean]] logical value (0 or 1) |- |date/time | <source lang="xml"> <dateTime.iso8601>19980717T14:08:55</dateTime.iso8601> </source> |Date and time in [[ISO 8601]] format |- |double | <source lang="xml"> <double>-12.53</double> </source> |[[Double precision]] floating point number |- |integer | <source lang="xml"> <i4>42</i4> </source> or <source lang="xml"> <int>42</int> </source> |Whole number, [[integer]] |- |string | <source lang="xml"> <string>Hello world!</string> </source> |String of characters. Must follow [[XML#Characters_and_escaping|XML encoding]]. |- |struct | <source lang="xml"> <struct> <member> <name>foo</name> <value><i4>1</i4></value> </member> <member> <name>bar</name> <value><i4>2</i4></value> </member> </struct> </source> |[[Associative array]] |- |nil | <source lang="xml"> <nil/> </source> |[[nullable type|Discriminated null value]]; an XML-RPC [http://ontosys.com/xml-rpc/extensions.php extension] |} ==Examples== An example of a typical XML-RPC request would be: <source lang="xml"> <?xml version="1.0"?> <methodCall> <methodName>examples.getStateName</methodName> <params> <param> <value><i4>40</i4></value> </param> </params> </methodCall> </source> An example of a typical XML-RPC response would be: <source lang="xml"> <?xml version="1.0"?> <methodResponse> <params> <param> <value><string>South Dakota</string></value> </param> </params> </methodResponse> </source> A typical XML-RPC fault would be: <source lang="xml"> <?xml version="1.0"?> <methodResponse> <fault> <value> <struct> <member> <name>faultCode</name> <value><int>4</int></value> </member> <member> <name>faultString</name> <value><string>Too many parameters.</string></value> </member> </struct> </value> </fault> </methodResponse> </source> == Criticism == Critics of XML-RPC argue that RPC calls can be made with plain XML, and that XML-RPC doesn't add any value over XML. Both XML-RPC and XML require an application level data model, such as which field names are defined in the XML schema or the parameter names in XML-RPC <ref>[http://stackoverflow.com/questions/1376688 What is the benefit of XML-RPC over plain XML?] Stack Overflow post 9.9.2009</ref> <ref>[http://www.intertwingly.net/wiki/pie/XmlRpcDiscussion?action=show&redirect=DontUseXmlRpc] An open poll on the merits of XmlRpc versus alternatives</ref> <ref>[http://michaeldehaan.net/2008/07/17/xmlrpc-vs-rest-vs-soap-vs-all-your-rpc-options/] An overview of all the alternatives</ref> == Implementations == === Python === * [http://docs.python.org/library/xmlrpclib.html xmlrpclib] ** Renamed [http://docs.python.org/3.1/library/xmlrpc.client.html xmlrpc.client] in Python 3. * [http://twistedmatrix.com/documents/current/web/howto/xmlrpc.html Creating XML-RPC Servers and Clients with Twisted] === C++ === * [http://libiqxmlrpc.sourceforge.net/ Libiqxmlrpc] * [http://ulxmlrpcpp.sourceforge.net/ Ultra lightweight 