if the application has specified a timeout or idle task). While GLib has built-in support for file descriptor and child termination events, it is possible to add an event source for any event that can be handled in a prepare-check-dispatch model.[http://developer.gnome.org/doc/API/2.0/glib/glib-The-Main-Event-Loop.html#mainloop-states] Application libraries that are built on the GLib event loop include [[GStreamer]] and the [[asynchronous I/O]] methods of [[GnomeVFS]], but [[GTK+]] remains the most visible client library. Events from the [[windowing system]] (in [[X Window System|X]], read off the X [[Unix domain socket|socket]]) are translated by [[GDK]] into GTK+ events and emitted as GLib signals on the application's widget objects. ===Core Foundation run loops=== Exactly one CFRunLoop is allowed per thread, and arbitrarily many sources and observers can be attached. Sources then communicate with observers through the run loop, with it organising queueing and dispatch of messages. The CFRunLoop is abstracted in [[Cocoa (API)|Cocoa]] as an NSRunLoop, which allows any message (equivalent to a function call in non-[[Reflection (computer science)|reflective]] runtimes) to be queued for dispatch to any object. ===Report Program Generator (RPG) language=== [[IBM RPG]] was designed to operate with a main loop or '''program cycle''' consisting of # input (originally from punch cards) # process (calculation section) # output (printed "report" or file) and was only later adapted to use more conventional programmer directed loop handling. ==References== <references/> ==See also== * [[Message passing]] * [[Inter-process communication]] * [[Asynchronous I/O]] * The ''game loop'' in [[Game programming]] ==External links== * [http://www.microsoft.com/msj/0795/dilascia/dilascia.aspx Meandering Through the Maze of MFC Message and Command Routing] * [http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/windowprocedures/windowprocedurereference/windowprocedurefunctions/windowproc.asp WindowProc (MSDN)] [[Category:Control flow]] [[Category:Events (computing)]] [[de:Ereignisschleife]] [[ja:メインループ]] [[pt:Laço de eventos]] [[sv:Slinga (programmering)]]</text> </page> <page> <id>12676</id> <title>Everyday Explorers</title> <text>{{Orphan|date=September 2008}} {{Wikify|date=April 2010}} '''Everyday Explorers''' is [[National Geographic]]'s user-generated video site. It was launched in Beta format in July, 2008. Users can upload and comment on each other's videos, as well as rating their favorites. Clips may be selected as a featured videos, which may also result in being contacted by National Geographic to include the film in the organization's professional library. Videos must be in .flv, .wmv, .asf, .avi, .mov, .3gp, .mpg, .mpeg, or .mp4 format, with the files no larger than 100 MB. ==Video Categories== At present, users can upload videos into four categories *'''Wildlife and Pets''' animal and animal-related videos *'''Weather''' all types of weather phenomena *'''Favorite Places''' travel destinations *'''Green Tips''' anything related to promoting a healthy environment ==External links== *[http://everydayexplorers.nationalgeographic.com/ Everyday Explorers] Official Website [[Category:Social network services]] [[Category:Video hosting]] [[Category:Video on demand services]]</text> </page> <page> <id>12677</id> <title>Everyman kernel</title> <text>{{Orphan|date=May 2010}} {{Advert|date=July 2009}} {{Infobox OS | name = The Everyman Kernel. | logo = | screenshot = | caption = | developer = Barry Watson | kernel_type = [[Microkernel]] | supported_platforms = | ui = | family = [[real-time operating system]]s | released = | latest_release_version = 1 | latest_release_date = June 26, 2009 | latest_test_version = | latest_test_date = | marketing_target = | programmed_in = | prog_language = | language = | updatemodel = | package_manager = | working_state = Current | license = [[BSD License]] | website = [http://barrywatson.se/?p=3 barrywatson.se] }} The '''Everyman kernel''' is a minimalistic [[Kernel (computer science)|kernel]] designed to support hard [[Real-time computing|real-time]] applications. The kernel is built from three parts: scheduling, resource access, and communication. Each part is implemented with an algorithm that does not lead to blocking. The removal of any blocking leads to predictable execution times and it is this which makes the kernel suitable for hard [[Real-time computing|real-time]] systems development. <ref name="buttazzo1997">{{cite book | title = Hard Real-time Computing Systems | year = 1997 | author = Giorgio C. Buttazzo | publisher = Kluwer }}</ref> Scheduling is implemented with either the [[Earliest deadline first scheduling|Earliest Deadline First]]<ref name="ll1973">{{cite journal | author = C.L. Liu, J.W. Layland | month = January | year = 1973 | title = Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment | journal = Journal of the Association for Computing Machinery | volume = 20 | issue = 1 | pages = 46&ndash;61 }} </ref> or the Deadline Monotonic algorithms.<ref name="lw1982">{{cite journal | author=J. Leung, J.W. Whitehead | title=On the Complexity of Fixed Priority Scheduling of Periodic Real-time Tasks | journal=Performance Evaluation 2(4) | month=July | year=1982 }} </ref> Resource access, or Concurrency control, is achieved with the [[Stack Resource Policy]]<ref name="baker1990">{{cite journal | author=T. P. Baker | title=Stack-based scheduling of real-time processes | journal=Journal of Real-Time Systems | year=1991 }} </ref> which eliminates any form of run-time unbounded blocking including deadlock and livelock. Furthermore, the use of this algorithm also means that all of the processes can share the same stack which reduces the system's memory footprint. Inter-process communication is implemented with Cyclical Asynchronous Buffers<ref name="clark1989">{{cite journal | author=D. Clark | title=Hic: An Operating System for Hierarchies of Servo Loops | journal=Proceedings of the IEEE International Conference on Robotics and Automation | year=1989 }} </ref> - a one-to-many communications mechanism which never blocks. The kernel is designed to be simple enough that a single programmer can understand the entire system. The kernel is effectively one file containing 22 C functions. Most kernel code is written in C and is in places 32-bit specific. To port the kernel to a new platform requires the implementation of at least five functions in assembly language. The Everyman kernel can be run in Unix user space and, along with POSIX.1b real-time scheduling, the kernel can be used to implement a [[Real-time computing|real-time]] threads package. ==Notes and references== {{Reflist}} ==See also== {{Portal|Free software}} *[[Real-time operating system]] ==External links== *[http://barrywatson.se/?p=3 The Everyman kernel] official announcement {{DEFAULTSORT:Everyman Kernel}} [[Category:Real-time operating systems]] [[Category:Free software operating systems]]</text> </page> <page> <id>12684</id> <title>Evidential reasoning approach</title> <text>In [[decision theory]], the '''evidential reasoning approach (ER)''', is a generic evidence-based [[multi-criteria decision analysis]] (MCDA) approach for dealing with problems having both quantitative and qualitative criteria under various uncertainties including ignorance and randomness. It has been used to support various [[decision analysis]], assessment and [[evaluation]] activities such as [[environmental impact assessment]]<ref>{{cite journal |doi=10.1016/j.ejor.2004.09.059 |author=Wang Y.M., Yang J.B., Xu D.L. |title=Environmental Impact Assessment Using 