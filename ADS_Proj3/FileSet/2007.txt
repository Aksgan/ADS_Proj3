by ''M'' (so <math>R_S</math> consists of the vertices in ''S'' with no incoming edge and <math>R_T</math> consists of the vertices in ''T'' with no outgoing edge). Let <math>Z</math> be the set of vertices reachable in <math>\overrightarrow{G_y}</math> from <math>R_S</math> by a directed path only following edges that are tight. This can be computed by [[breadth-first search]]. If <math>R_T \cap Z</math> is nonempty, then reverse the orientation of a directed path in <math>\overrightarrow{G_y}</math> from <math>R_S</math> to <math>R_T</math>. Thus the size of the corresponding matching increases by 1. If <math>R_T \cap Z</math> is empty, then let <math>\Delta := \min \{c(i,j)-y(i)-y(j): i \in Z \cap S, j \in T \setminus Z\}</math>. <math>\Delta</math> is positive because there are no tight edges between <math>Z \cap S</math> and <math>T \setminus Z</math>. Increase ''y'' by <math>\Delta</math> on the vertices of <math>Z \cap S</math> and decrease ''y'' by <math>\Delta</math> on the vertices of <math>Z \cap T</math>. The resulting ''y'' is still a potential. The graph <math>G_y</math> changes, but it still contains ''M''. We orient the new edges from ''S'' to ''T''. By the definition of <math>\Delta</math> the set ''Z'' of vertices reachable from <math>R_S</math> increases (note that the number of tight edges does not necessarily increase). We repeat these steps until ''M'' is a perfect matching, in which case it gives a minimum cost assignment. The running time of this version of the method is <math>O(n^4)</math>: ''M'' is augmented ''n'' times, and in a phase where ''M'' is unchanged, there are at most ''n'' potential changes (since ''Z'' increases every time). The time needed for a potential change is <math>O(n^2)</math>. ==Matrix interpretation== Given <math>n</math> workers and tasks, and an ''n''Ã—''n'' matrix containing the cost of assigning each worker to a task, find the cost minimizing assignment. First the problem is written in the form of a matrix as given below :<math>\begin{bmatrix} a1 & a2 & a3 & a4\\ b1 & b2 & b3 & b4\\ c1 & c2 & c3 & c4\\ d1 & d2 & d3 & d4\end{bmatrix}</math> where a, b, c and d are the workers who have to perform tasks 1, 2, 3 and 4. a1, a2, a3, a4 denote the penalties incurred when worker "a" does task 1, 2, 3, 4 respectively. The same holds true for the other symbols as well. The matrix is square, so each worker can perform only one task. '''Step 1''' Then we perform row operations on the matrix. To do this, the lowest of all ''a''<sub>''i''</sub> (i belonging to 1-4) is taken and is subtracted from each element in that row. This will lead to at least one zero in that row (We get multiple zeros when there are two equal elements which also happen to be the lowest in that row). This procedure is repeated for all rows. We now have a matrix with at least one zero per row. Now we try to assign tasks to agents such that each agent is doing only one task and the penalty incurred in each case is zero. This is illustrated below. {|class="wikitable" style="text-align:center" |- |0 ||a2'||0' ||a4' |- |b1'||b2'||b3'||0' |- |0' ||c2'||c3'||c4' |- |d1'||0' ||d3'||d4' |} The zeros that are indicated as 0' are the assigned tasks. '''Step 2''' Sometimes it may turn out that the matrix at this stage cannot be used for assigning, as is the case in for the matrix below. {|class="wikitable" style="text-align:center" |- |0 ||a2'||a3'||a4' |- |b1'||b2'||b3'||0 |- |0 ||c2'||c3'||c4' |- |d1'||0 ||d3'||d4' |} In the above case, no assignment can be made. Note that task 1 is done efficiently by both agent a and c. Both can't be assigned the same task. Also note that no one does task 3 efficiently. To overcome this, we repeat the above procedure for all columns (i.e. the minimum element in each column is subtracted from all the elements in that column) and then check if an assignment is possible. '''Step 3''' In most situations this will give the result, but if it is still not possible to assign then the procedure described below must be followed. Initially assign as many tasks as possible then do the following (assign tasks in rows 2, 3 and 4) {|class="wikitable" style="text-align:center" |- |0 ||a2'||a3'||a4' |- |b1'||b2'||b3'||0' |- |0' ||c2'||c3'||c4' |- |d1'||0' ||d3'||d4' |} Mark all rows having no assignments (row 1). Then mark all columns having zeros in that row(s) (column 1). Then mark all rows having assignments in the given column (row 3). Repeat this till a closed loop is obtained. <!-- this might need to make the borders go away, if the current appearance is thought to be ugly --> {|class="wikitable" style="text-align:center" |- style="background: white" |&times; || || || || |- |0 ||a2'||a3'||a4' |style="background: white"|&times; |- |b1'||b2'||b3'||0' |style="background: white"| |- |0' ||c2'||c3'||c4' |style="background: white"|&times; |- |d1'||0' ||d3'||d4' |style="background: white"| |} Now draw lines through all marked columns and unmarked rows. {|class="wikitable" style="text-align:center" |- style="background: white" |&times; || || || || |- |style="background:lightgrey"|0 ||a2'||a3'||a4' |style="background: white"|&times; |- style="background:lightgrey" |b1'||b2'||b3'||0' |- |style="background:lightgrey"|0' ||c2'||c3'||c4' |style="background: white"|&times; |- style="background:lightgrey" |d1'||0' ||d3'||d4' |} The aforementioned detailed description is just one way to draw the minimum number of lines to cover all the 0's. Other methods work as well. '''Step 4''' From the elements that are left, find the lowest value. Subtract this from the marked rows, and add this to the marked columns. Repeat the procedure (steps 1 -4) till an assignment is possible; this is when the minimum number of lines used to cover all the 0's is equal to the max(number of people, number of assignments), assuming dummy variables (usually the max cost) are used to fill in when the number of people is greater than the number of assignments. Basically you find the second minimum cost among the two rows. The procedure is repeated until you are able to distinguish among the workers in terms of least cost. ==Bibliography== * R.E. Burkard, M. Dell'Amico, S. Martello: ''Assignment Problems''. SIAM, Philadelphia (PA.) 2009. ISBN 978-0-89871-663-4 * Harold W. Kuhn, "The Hungarian Method for the assignment problem", ''[[Naval Research Logistics Quarterly]]'', '''2''':83&ndash;97, 1955. 