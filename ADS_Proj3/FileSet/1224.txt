is a real number a ∈ R so that for every δ > 0 there is an infinite dimensional subspace ''Y'' of ''X'', so that |a &minus; ''&fnof;''(''y'')| < δ, for all ''y'' ∈ ''Y'', with ||''y''|| = 1. In a separable [[Hilbert space]], the distortion problem is equivalent to the question of whether there exist subsets of the unit sphere that are separated by a positive distance and yet intersect every infinite-dimensional closed subspace. Unlike many properties of Banach spaces, the distortion problem seems to be as difficult on Hilbert spacs as on other Banach spaces. On a separable Hilbert space, the distortion problem was solved affirmatively by {{harvtxt|Odell|Schlumprecht|1994}}. ==See also== * [[Tsirelson space]] ==References== *{{citation|title=Uniformly nonsquare Banach spaces|first=R.C.|last=James|journal=Annals of Mathematics|year=1964|volume=80|issue=2|pages=542&ndash;550}}. *{{citation|last=Milman|title=Geometry of Banach spaces II, geometry of the unit sphere|journal=Russian Math Surveys|year=1971|volume=26|pages=79&ndash;163}}. *{{citation|chapter=Distortion and asymptotic structure|first1=E|last1=Odell|first2=Th.|last2=Schlumprecht|title=Hanbook of the geometry of Banach spaces, Volume 2|editors=Johnson, Lindenstrauss|publisher=Elsevier|year=2003|isbn=9780444513052}}. *{{Citation | last1=Odell | first1=E. | last2=Schlumprecht | first2=Th. | title=The distortion problem of Hilbert space | id={{MathSciNet | id = 1209302}} | year=1993 | journal= Geom.Funct.Anal | issn=1016-443X | volume=3 | pages=201–207 | doi=10.1007/BF01896023}}. *{{Citation | last1=Odell | first1=E. | last2=Schlumprecht | first2=Th. | title=The distortion problem | id={{MathSciNet | id = 1301394}} | year=1994 | journal= Acta Mathematica | issn=0001-5962 | volume=173 | pages=259–281 | doi=10.1007/BF02398436}}. [[Category:Functional analysis]]</text> </page> <page> <id>10767</id> <title>Distributed Objects Everywhere</title> <text>'''Distributed Objects Everywhere''' ('''DOE''') was a long-running [[Sun Microsystems]] project to build a [[distributed computing]] environment based on the [[CORBA]] system in the 'back end' and [[OpenStep]] as the user interface. First started in 1990 and announced soon thereafter, it remained [[vaporware]] for many years before it was finally released as '''NEO''' in 1995. It was sold for only a short period before being dropped (along with OpenStep) in 1996. In its place is what is today known as [[Enterprise JavaBean]]s. == Background == In the early 1990s the 'next big thing' in computing was to use desktop [[microcomputer]]s to display and edit data being provided by [[Mainframe computer|mainframes]] and [[minicomputer]]s. Although a number of methods for this sort of access already existed, the division of labor was not at all even. For instance, [[SQL]] required the workstation to download huge data sets and then process them locally, whereas use of [[terminal emulator]]s left all of the work to the server and provided no [[GUI]]. It seemed that the proper split of duties would be to have a cooperative set of objects, the workstation being responsible for display and user interaction, with processing on the server. Standing in the way of this sort of solution was the massive differences in [[operating system]]s and [[programming language]]s between platforms. While it might be possible to build such a system that would work on any one combination of workstation and server, the same solution would not work on any other system. Oddly, the differences between any two [[programming language]]s on a single platform was almost as great. Each language had its own format for passing parameters into [[procedure call]]s, the file formats that they generated were often quite different. In general terms, it was not always possible to write different portions of a program in different languages, although doing so often has real utility. The problem was not so acute on [[minicomputer]]s and mainframes where the vendor often specified standards for their libraries, but on microcomputers the programming systems were generally delivered by a variety of 3rd party companies with no interest in standardization. Nevertheless this problem was being addressed in the early 1990s through the introduction of various [[shared library]] systems. These were actually intended to ease resource use on smaller platforms, by allowing a number of programs using a common resource, like the GUI, to share a single copy of code instead of each loading a separate copy into memory. As a side effect of being able to be called from many programs, these systems also defined a standard way to call them, using an [[interface definition language]], or IDL, to allow any language on the platform to understand the code inside the library. Extending these systems to support [[remote procedure call]]s behind the scenes was seen as a natural evolution, providing a solution to the client/server programming problem. At the time there were a number of major projects to deliver such a system, including [[IBM]]'s [[System Object Model]] (SOM/DSOM), [[NeXT]]'s [[Portable Distributed Objects]], [[Microsoft]]'s [[Component Object Model]] (COM/DCOM) and many [[CORBA]] flavors. Sun, attempting to position itself as the future IBM in terms of backoffice support, felt they had to attack this market as well. == Spring, DOE, OpenStep, NEO == Sun's solution was based on work in their [[Spring operating system]], which used intercommunicating objects for almost all programming tasks. Modifying this to work under a 'traditional' Unix like Solaris was not all that difficult, although Unix makes the assumption that all programs run locally, and an interface for remote access had to be added. For this, DOE added an [[object request broker]] (ORB) that ran on the backoffice servers, listening for DOE requests and handing them off to the proper program to be handled. During development, CORBA became a key [[buzzword]] in the industry. This prompted a delay while the ORB was re-engineered for CORBA support. Under the CORBA model, different objects, like those from DOE or SOM, would be able to interact by sharing a common interface. A bigger problem for Sun is that they had no integrated desktop object programming solution. Although [[C++]] object libraries were becoming common on some platforms, their own [[SunOS]] (later known as [[Solaris Operating System|Solaris]]) operating system and associated [[SunView]] and [[X Window System|X]] window systems were 'plain C' based. In order to supply a comprehensive and flexible object programming solution, Sun turned to NeXT and the two developed [[OpenStep]]. The idea was to have OpenStep programs calling DOE objects on Sun servers, providing a backoffice-to-frontoffice solution on Sun machines. OpenStep was not released until 1993, further delaying the project. By the time DOE, now known as NEO, 