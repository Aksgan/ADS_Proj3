in a programming language that combines subprograms in only three specific ways. These three [[control structure]]s are #Executing one subprogram, and then another subprogram (sequence) #Executing one of two subprograms according to the value of a [[Boolean data type|boolean]] variable (selection) #Executing a subprogram until a boolean variable is true (repetition) Computer scientists usually credit the theorem to a 1966 paper by [[Corrado Böhm]] and [[Giuseppe Jacopini]]. However, [[David Harel]] traced its origins to the 1946 description of the [[von Neumann architecture]] and [[Stephen Kleene]]'s [[Kleene normal form|normal form theorem]]. The Böhm-Jacopini proof describes how to construct a structured flow chart from an arbitrary chart, using the [[bit]]s in an extra integer variable to keep track of information that the original program represents by the program location. This construction was based on Böhm's programming language [[P′′]]. The Böhm-Jacopini proof did not settle the question of whether to adopt [[structured programming]] for software development, partly because the construction was more likely to obscure a program than to improve it. On the contrary, it signalled the beginning of the debate. [[Edsger Dijkstra]]'s famous letter, "[[Go To Statement Considered Harmful]]," followed in 1968. Subsequent proofs of the theorem addressed practical shortcomings of the Böhm-Jacopini proof with constructions that maintained or improved the clarity of the original program.[http://www.cse.buffalo.edu/~rapaport/111F04/greatidea3.html] In the 1980s [[IBM]] researcher [[Harlan Mills]] oversaw the development of the [[COBOL Structuring Facility]], which applied a structuring algorithm to [[COBOL]] code. Mills's transformation involved the following steps for each procedure. #Identify the [[basic block]]s in the procedure. #Assign a unique [[Label (programming language)|label]] to each block's entry path, and label each block's exit paths with the labels of the entry paths they connect to. Use 0 for return from the procedure and 1 for the procedure's entry path. #Break the procedure into its basic blocks. #For each block that is the destination of only one exit path, reconnect that block to that exit path. #Declare a new variable in the procedure (called L for reference). #On each remaining unconnected exit path, add a statement that sets L to the label value on that path. #Combine the resulting programs into a selection statement that executes the program with the entry path label indicated by L #Construct a loop that executes this selection statement as long as L is not 0. #Construct a sequence that initializes L to 1 and executes the loop. Note that this construction can be improved by converting some cases of the selection statement into subprocedures. ==See also== *[[Structured programming]] ==References== *{{cite journal|last=Ashcroft|first=Edward|coauthors=and Zohar Manna|year=1971|title=The translation of go to programs to 'while' programs|journal=Proceedings of IFIP Congress}} *{{cite journal|last=Bohm|first=Corrado|coauthors=and Giuseppe Jacopini|date=May 1966|title=Flow Diagrams, Turing Machines and Languages with Only Two Formation Rules|journal=Communications of the ACM|volume=9|issue=5|pages=366–371|doi=10.1145/355592.365646}} *{{cite journal|last=Harel|first=David|year=1980|title=On Folk Theorems|journal=Communications of the ACM|volume=23|issue=7|pages=379–389|doi=10.1145/358886.358892}} *{{cite journal|last=Dijkstra|first=Edsger|year=1968|title=Go To Statement Considered Harmful|journal=Communications of the ACM|volume=11|issue=3|pages=147–148|doi=10.1145/362929.362947}} http://www.acm.org/classics/oct95/ [[Category:Programming paradigms]] [[Category:Mathematical theorems]] [[ca:Teorema del programa estructurat]] [[es:Teorema del programa estructurado]] [[it:Teorema di Böhm-Jacopini]]</text> </page> <page> <id>35998</id> <title>Stub Series Terminated Logic</title> <text>'''Stub Series Terminated Logic''' ('''SSTL''') is a group of electrical standards for driving [[transmission line]]s commonly used with [[DRAM]] based [[DDR]] memory IC's and memory modules . Primarily designed for driving the [[DDR SDRAM|DDR (double-data-rate) SDRAM]] modules used in [[computer memory]]. However, they are also used in other applications, notably, some [[PCI Express]] PHYs and other high-speed devices. Three voltage levels for SSTL are defined: *SSTL_3, 3.3 V, defined in EIA/JESD8-8 1996 *SSTL_2, 2.5 V, defined in EIA/JESD8-9B 2002 *SSTL_18, 1.8 V, defined in EIA/JESD8-15 *SSTL_15, 1.5 V, (Upcoming for [[DDR3]]) All SSTL voltage specs reference a voltage that is exactly VDDQ/2. For example, the VREF for an SSTL_18 signal is exactly 0.9 Volts. Terminations can be: *Class I (one series resistor at the source and one parallel resistor at the load) *Class II (one series resistor at the source and two parallel resistors, one at each end). *Class III (asymmetrically parallel terminated) *Class IV (asymmetrically doubly parallel terminated) ==See also== *[[High-Speed Transceiver Logic]] - HSTL == External links == * [http://www.jedec.org/download/search/jesd8-9b.pdf JEDEC SSTL_2 Standard] * [http://www.jedec.org/download/search/JESD8-15a.pdf JEDEC SSTL_18 Standard] [[Category:Computer memory]] [[Category:JEDEC standards]] {{electronics-stub}}</text> </page> <page> <id>36004</id> <title>Studia Logica</title> <text>'''''Studia Logica''''' is an international [[academic journal|journal]] of [[mathematics]] and [[logic]]. The scope of the journal is all scientific disciplines, however the main criterion for publication is not the scope of the submission, but rather the use of [[formal methods]]. The journal is published by the [[Institute of Philosophy and Sociology of the Polish Academy of Sciences]] and [[Springer Science+Business Media|Springer publications]]. == External links == *[http://www.studialogica.org/ Studia Logica website] [[Category:Logic journals]] [[Category:Formal methods]]</text> </page> <page> <id>36012</id> <title>Stumbling on Happiness</title> <text>{{Infobox Book | name = Stumbling on Happiness | image = [[Image:Stumbling on Happiness.jpg|215px]] | author = [[Daniel Gilbert]] | country = [[United States]] | language = [[English language|English]] | subject = [[Psychology]] | publisher = [[Knopf]] | pub_date = 2006 | media_type = hardback | isbn = 1400042666 | dewey= 158 22 | congress= BF575.H27 G55 2006 | oclc= 61362165 }} '''''Stumbling on Happiness''''' is a [[non-fiction book]] by [[Daniel Gilbert (psychologist)|Daniel Gilbert]]. It was published in the [[United States]] and [[Canada]] in 2006 by [[Knopf]], and has been translated into 20 languages. It is a ''[[New York Times]]'' [[bestseller]]. ==Summary== Gilbert's central [[thesis]] is that, through perception and [[cognitive bias]]es, people imagine the future poorly, in particular what will make them happy. He argues that imagination fails in three ways:<ref>{{harv|Gilbert|2006|pp=224&ndash;228}}</ref> # Imagination tends to add and remove details, but people do not realize that key details may be fabricated or missing from the imagined scenario. # Imagined futures (and pasts) are more like the present than they actually will be (or were). # Imagination fails to realize that things will feel differently once they actually happen -- most notably, the psychological immune system will make bad things feel not so bad as they are imagined to feel. The advice Gilbert offers is to use other people's experiences to predict the future, instead of imagining it. It is surprising how similar people are in much of their experiences, 