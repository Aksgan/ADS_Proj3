name = Mixminion | logo = | screenshot = | caption = | collapsible = | author = Nick Mathewson | developer = | released = December 16, 2002 | latest release version = 0.0.8alpha3 | latest release date = September 15, 2007 | latest preview version = | latest preview date = | frequently updated = | programming language = [[Python (programming language)|Python]] | operating system = | platform = | size = | language = | status = | genre = [[Anonymous remailer]] | license = | website = http://mixminion.net/ }} [[Image:Mixminion-Windows frontend.jpg|thumb|250px|Mixminion using a [[Microsoft Windows|Windows]] frontend]] '''Mixminion''' is the standard implementation of the Type III [[anonymous remailer]] protocol. Mixminion can send and receive anonymous [[e-mail]]. Mixminion uses a mix network architecture to provide strong [[anonymity]], and prevent eavesdroppers and other attackers from linking senders and recipients. Volunteers run servers (called "mixes") that receive messages, decrypt them, re-order them, and re-transmit them toward their eventual destination. Every e-mail passes through several mixes so that no single mix can link message senders with recipients. To send an anonymous message, mixminion breaks it into uniform-sized chunks (also called "packets"), pads the packets to a uniform size, and chooses a path through the mix network for each packet. The software encrypts every packet with the [[Public-key cryptography|public keys]] for each server in its path, one by one. When it is time to transmit a packet, mixminion sends it to the first mix in the path. The first mix decrypts the packet, learns which mix will receive the packet, and relays it. Eventually, the packet arrives at a final (or "exit") mix, which sends it to the chosen recipient. Because no mix sees any more of the path besides the immediately adjacent mixes, they cannot link senders to recipients. Mixminion supports Single-Use Reply Blocks (or SURBs) to allow anonymous recipients. A SURB encodes a half-path to a recipient, so that each mix in the sequence can unwrap a single layer of the path, and encrypt the message for the recipient. When the message reaches the recipient, the recipient can decode the message and learn which SURB was used to send it; the sender does not know which recipient has received the anonymous message. The most current version of Mixminion Message Sender is 1.2.7, released on February 11, 2009. ==See also== {{Portal|Cryptography}} * [[Anonymity]] ** [[Anonymous P2P]] ** [[Anonymous remailer]] *** [[Cypherpunk anonymous remailer]] (Type I) *** [[Mixmaster anonymous remailer]] (Type II) ** [[Onion routing]] *** [[Tor (anonymity network)]] ** [[Pseudonymous remailer]] (a.k.a. nym servers) *** [[Penet remailer]] * [[Data privacy]] * [[Traffic analysis]] ==External links== *[http://mixminion.net/ Mixminion official site] *[http://peculiarplace.com/mixminion-message-sender/ Windows GUI Frontend for Mixminion] *[http://trac.macports.org/browser/trunk/dports/mail/mixminion/Portfile/ Apple OSX, Macport File for Mixminion ] ===Network stats=== *[http://www.noreply.org/mixminion-nodes/ Noreply number of mixminion nodes] *[http://tainaron.dyndns.org/pinger/ Tainaron pinger] [[Category:Network-related software]] [[Category:Anonymity networks]] [[de:Mixminion]] [[it:Mixminion]] [[ru:Mixminion]]</text> </page> <page> <id>24760</id> <title>Mizar system</title> <text>{{for|the star system|Mizar (star)}} The '''Mizar system''' consists of a language for writing strictly formalized mathematical definitions and [[mathematical proof|proofs]], a [[computer program]] which is able to check proofs written in this language, and a library of definitions and proved theorems which can be referenced and used in new articles. Mizar has goals similar to those of the [[QED project]] proposed by [[Robert S. Boyer|Bob Boyer]] around 1993. Mizar is proprietary.<ref name="not-open-source">[http://old.nabble.com/TPHOLs-becomes-ITP-%28fwd%29-td19435554.html#a19493250 Mailing list discussion] referring to the close-sourcing of Mizar.</ref> ==History== The system was created beginning in 1973 by [[Andrzej Trybulec]] and is maintained at [[Białystok University]], [[Poland]], the [[University of Alberta]], [[Canada]], and [[Shinshu University]], [[Japan]]. Mizar articles are written in ordinary [[ASCII]]. The Mizar language is close enough to the mathematical vernacular that mathematicians can read and understand Mizar articles almost immediately; it is formal enough that proofs can be checked automatically. All steps in a proof have to be justified, and it has been estimated that a Mizar article is about four times as long as an equivalent mathematical paper written in ordinary style. The proof checker uses classical logic, is written in [[Pascal programming language|Pascal]], and can be downloaded and freely used for non-commercial purposes. It runs on [[IBM PC compatible|PC platform]]s, [[Microsoft Windows|Windows]], [[Solaris (operating system)|Solaris]], [[FreeBSD]] and [[Linux]], and [[Mac OS X]]/[[Darwin (operating system)|Darwin]]. The source code is available only to members of the Association of Mizar Users.<ref>[http://mizar.uwb.edu.pl/sum/ Association of Mizar Users<!-- Bot generated title -->]</ref> The Mizar distribution includes the Mizar Mathematical Library (MML) consisting of many definitions and theorems which can be referred to in newly written articles. These new articles, after having been reviewed and checked automatically, can be published in the associated Journal of Formalized Mathematics<ref name="Journal of Formalized Mathematics">[http://fm.mizar.org/ Journal of Formalized Mathematics<!-- Bot generated title -->]</ref> and then become part of the MML. The MML is built on the axioms of the [[Tarski-Grothendieck set theory]]. As of February 2010, it contained about 9500 definitions and 49,500 theorems.<ref>see [http://mmlquery.mizar.org] for up-to-date statistics</ref> Examples are the [[Hahn–Banach theorem]], [[König's lemma]], [[Brouwer fixed point theorem]], [[Gödel's completeness theorem]], and facts about the [[Cantor set]]. Even though semantically all objects MML talks about are [[set (mathematics)|sets]], the language nevertheless allows one to define and use syntactical types: a variable may for example be declared of type <tt>Nat</tt> if it stands for a [[natural number]], or of type <tt>Group</tt> if it denotes a [[group (mathematics)|group]]. This makes the notation more convenient and closer to the way mathematicians think of symbols. Browsable abstracts of MML articles are available as the Journal of Formalized Mathematics<ref name="Journal of Formalized Mathematics"/> and MML Query<ref>[http://mmlquery.mizar.org MML Query (home page)<!-- Bot generated title -->]</ref> implements a search engine for MML. == See also == * [[QED project]] * [[Automath]] ==References== <references/> == External links == * [http://www.mizar.org Main Mizar site], contains links to the MML, to the Journal of Formalized Mathematics, and a bibliography section linking to several introductions to the system * [http://mmlquery.mizar.org MML Query], is a search engine for MML. * [http://www.cs.ru.nl/~freek/mizar/ Freek Wiedijk's Mizar site], contains slides of a conference talk about the system, as well as a 40 page 