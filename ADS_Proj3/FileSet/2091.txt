that the tool verifies all ''relevant interleavings'' of a concurrent program by replaying the actual program code ''without'' building verification models. This idea was pioneered in a number of tools, notably by Godefroid, in his VeriSoft tool.<ref>Patrice Godefroid, ''Model Checking for Programming Languages using VeriSoft'' [http://research.microsoft.com/en-us/um/people/pg/public_psfiles/popl97.ps POPL 1997]</ref> Other recent tools of this genre include the [http://javapathfinder.sourceforge.net/ Java Pathfinder], [http://research.microsoft.com/en-us/downloads/b23f8dc3-bb73-498f-bd85-1de121672e69/default.aspx Microsoft's CHESS tool], and [http://www.usenix.org/events/nsdi09/tech/ MODIST]. Relevant interleavings are computed using a customized ''dynamic partial order reduction''<ref>Cormac Flanagan and Patrice Godefroid, ''Dynamic partial-order reduction for model checking software,'', [http://www.cs.princeton.edu/~dpw/popl/05/ POPL 2005], pp. 110-121, ACM, ISBN 1-58113-830-X</ref> algorithm called ''POE''.<ref>Sarvani Vakkalanka, Ganesh Gopalakrishnan, and Robert M. Kirby, ``Dynamic Verification of MPI Programs with Reductions in Presence of Split Operations and Relaxed Orderings,'' Computer Aided Verification [http://www.princeton.edu/cav2008/ (CAV 2008)], pp. 66-79, LNCS 5123. </ref> ISP has been used to successfully verify up to 14,000 lines of MPI/C code for deadlocks and assertion violations. It currently supports over 60 [[Message Passing Interface|MPI 2.1]] functions, and has been tested with [[MPICH2]], [[OpenMPI]],and [[Message Passing Interface|Microsoft MPI]] libraries. ISP is available for download for [[linux]] and [[Mac OS X]]; as a [[Visual Studio]] plugin for running under [[Microsoft Windows|Windows]], and as an [[Eclipse (software)|Eclipse]] plugin.. ==References== <references/> Anh Vo, Sarvani Vakkalanka, Michael DeLisi, Ganesh Gopalakrishnan, Robert M. Kirby, and Rajeev Thakur, ``Formal Verification of Practical MPI Programs,'' [http://ppopp09.rice.edu/ PPoPP 2009] Sarvani Vakkalanka, Michael DeLisi, Ganesh Gopalakrishnan, and Robert M. Kirby, ``Scheduling Considerations for Building Dynamic Verification Tools for MPI,'' Parallel and Distributed Systems - Testing and Debugging [http://www.haifa.il.ibm.com/Workshops/padtad2008/ (PADTAD-VI)], Seattle, WA, July, 2008. Sarvani Vakkalanka, Michael DeLisi, Ganesh Gopalakrishnan, Robert M. Kirby, Rajeev Thakur, and William Gropp, ``Implementing Efficient Dynamic Formal Verification Methods for MPI Programs,'' Recent Advances in Parallel Virtual Machine and Message Passing Interface [http://pvmmpi08.ucd.ie/ (EuroPVM/MPI 2008)], Dublin, Ireland, 2008, LNCS 5205, pp. 248–256. Sarvani Vakkalanka, Subodh Sharma, Ganesh Gopalakrishnan, and Robert M. Kirby, ``ISP: A Tool for Model Checking MPI Programs,'' Principles and Practices of Parallel Programming [http://research.ihost.com/ppopp08/ (PPoPP 2008)], Salt Lake City, February 2008, pp. 285–286. Salman Pervez, Robert Palmer, Ganesh Gopalakrishnan, Robert M. Kirby, Rajeev Thakur, and William Gropp, ``Practical Model Checking Methods for Verifying Correctness of MPI Programs,'' Recent Advances in Parallel Virtual Machine and Message Passing Interface [http://www.cs.utah.edu/formal_verification/publications/conferences/pdf/europvm-mpi-07.pdf (PDF)] (EuroPVM/MPI), Paris, 344—353, LNCS 4757, France, September 30 - October 3, 2007 ==Cited By== ''Combining symbolic execution with model checking to verify parallel numerical programs'',umass.edu [http://laser.cs.umass.edu/techreports/08-tosem.pdf PDF]  SF Siegel, A Mironova, GS Avrunin, LA Clarke - ACM Transactions on Software Engineering and Methodology - portal.acm.org Verification of halting properties for MPI programs using nonblocking operations  - psu.edu [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.4722&rep=rep1&type=pdf PDF]  SF Siegel, GS Avrunin - Lecture Notes in Computer Science, 2007 - Springer [http://www.cs.ucsd.edu/~voelker/pubs/mpiwiz-ppopp09.pdf MPIWiz: Subgroup reproducible replay of MPI applications] R Xue, X Liu, M Wu, Z Guo, W Chen, W Zheng, Z Zhang, Geoffrey M. Voelker Tsinghua University, Microsoft Research Asia, University of Southern California San Diego - cs.ucsd.edu Dynamic testing of flow graph based parallel applications  - epfl.ch [http://infoscience.epfl.ch/getfile.py?docid=20721&name=dtofgbpa08&format=pdf&version=1 PDF]  B Schaeli, RD Hersch - Proceedings of the 6th workshop on Parallel and distributed Programming, 2008 - portal.acm.org Visual Debugging of MPI Applications  - epfl.ch [http://infoscience.epfl.ch/getfile.py?docid=21443&name=vdoma08&format=pdf&version=1 PDF]  B Schaeli, A Al-Shabibi, RD Hersch - Proceedings of the 15th European PVM/MPI Users' Group …, 2008 - Springer ==External links== * [http://www.cs.utah.edu/formal_verification/ISP-release ISP-Release] {{DEFAULTSORT:Isp Formal Verification Tool}} [[Category:Parallel computing]] [[Category:Application programming interfaces]]</text> </page> <page> <id>17731</id> <title>ISWIM</title> <text>{{Infobox programming language | name = ISWIM | logo = | paradigm = [[Imperative programming language|imperative]], [[Functional programming|functional]] | year = 1966 | designer = [[Peter J. Landin]] | developer = | latest_release_version = | latest_release_date = | latest_test_version = | latest_test_date = | typing = | implementations = | dialects = | influenced_by = | influenced = [[SASL programming language|SASL]], [[Miranda programming language|Miranda]], [[ML programming language|ML]], [[Haskell (programming language)|Haskell]], [[Clean (programming language)|Clean]] | operating_system = | license = | website = }} '''ISWIM''' is an abstract computer [[programming language]] (or a family of programming languages) devised by [[Peter J. Landin]] and first described in his article, ''The Next 700 Programming Languages'', published in the [[Communications of the ACM]] in 1966. The [[acronym]] stands for "'''I'''f you '''S'''ee '''W'''hat '''I''' '''M'''ean". Although not implemented, it has proved very influential in the development of programming languages, especially [[functional programming]] languages such as [[SASL programming language|SASL]], [[Miranda programming language|Miranda]], [[ML programming language|ML]], [[Haskell (programming language)|Haskell]] and their successors. I<small>SWIM</small> is an imperative language with a functional core, consisting of a [[syntactic sugar]]ing of [[lambda calculus]] to which are added mutable variables and assignment and a powerful control mechanism — the [[Peter Landin's J operator|J operator]]. Being based on lambda calculus I<small>SWIM</small> has [[higher order functions]] and [[lexically scoped]] variables. The operational semantics of I<small>SWIM</small> are defined using Landin's [[SECD machine]] and use call-by-value, that is [[eager evaluation]]. A goal of I<small>SWIM</small> was to look more like mathematical notation, so Landin abandoned [[Algol programming language|ALGOL]]'s semicolons between statements and <small>begin</small> <small>end</small> blocks and replaced them with the [[off-side rule]] and scoping based on indentation. A notationally distinctive feature of I<small>SWIM</small> is its use of where clauses. An I<small>SWIM</small> program is a single expression qualified by 'where' clauses (auxiliary definitions including equations among variables), conditional expressions and function definitions. With [[CPL programming language|CPL]], I<small>SWIM</small> was one of the first programming languages to use 'where' clauses. A notable semantic feature was the ability to define new data types, as a (possibly recursive) sum of products - this was done using a somewhat verbose natural language style description, but apart from notation amounts exactly to the [[algebraic data types]] found in modern functional languages. I<small>SWIM</small> variables did not have explicit type declarations and it seems likely (although not explicitly stated in the 1966 paper) that Landin intended the language to be dynamically typed, like LISP and unlike [[Algol programming language|ALGOL]]; but it is also just possible that he had in mind to develop some form of [[type inference]]. No direct implemention of I<small>SWIM</small> was attempted but Art Evan's PAL and [[John C. Reynolds]]' G<small>edanken</small> captured most of Landin's concepts including powerful transfer-of-control operations. Both of 