transformation]] operation. An MDA tool may be one or more of the following types{{Citation needed|date=February 2007}}: * Creation Tool: A tool used to elicit initial models and/or edit derived models. * Analysis Tool: A tool used to check models for completeness, inconsistencies, or error and warning conditions. Also used to calculate metrics for the model. * Transformation Tool: A tool used to transform models into other models or into code and documentation. * Composition Tool: A tool used to compose (i.e. to merge according to a given composition semantics) several source models, preferably conforming to the same metamodel. * Test Tool: A tool used to "test" models as described in [[Model-based testing]]. * Simulation Tool: A tool used to simulate the execution of a system represented by a given model. This is related to the subject of model execution. * Metadata Management Tool: A tool intended to handle the general relations between different models, including the metadata on each model (e.g. author, date of creation or modification, method of creation (which tool? which transformation? etc.)) and the mutual relations between these models (i.e. one metamodel is a version of another one, one model has been derived from another one by a transformation, etc.) * Reverse Engineering Tool: A tool intended to transform particular legacy or information artifact portfolios into full-fledged models. Some tools perform more than one of the functions listed above. For example, some creation tools may also have transformation and test capabilities. There are other tools that are solely for creation, solely for graphical presentation, solely for transformation, etc. One of the characteristics of MDA tools is that they mainly take models (e.g. MOF models or metamodels) as input and generate models as output{{Citation needed|date=February 2007}}. In some cases however the parameters may be taken outside the MDA space like in model to text or text to model transformation tools. Implementations of the OMG specifications come from private companies or [[open source]] groups. One important source of implementations for OMG specifications is the [[Eclipse Foundation]] (EF). Many implementations of OMG modeling standards may be found in the [[Eclipse Modeling Framework]] (EMF) or [[Graphical Modeling Framework]] (GMF), the Eclipse foundation is also developing other tools of various profiles as GMT. Eclipse's compliance to OMG specifications is often not strict. This is true for example for OMG's EMOF standard, which Eclipse approximates with its ECORE implementation. More examples may be found in the M2M project implementing the QVT standard or in the M2T project implementing the MOF2Text standard. One should be careful not to confuse the ''List of MDA Tools'' and the [[List of UML tools]], the former being much broader. This distinction can be made more general by distinguishing 'variable metamodel tools' and 'fixed metamodel tools'. A UML CASE tool is typically a 'fixed metamodel tool' since it has been hard-wired to work only with a given version of the UML metamodel (e.g. UML 2.1). On the contrary, other tools have internal generic capabilities allowing them to adapt to arbitrary metamodels or to a particular kind of metamodels. Usually MDA tools focus rudimentary architecture specification, although in some cases the tools are architecture-independent (or platform independent). Simple examples of architecture specifications include: * Selecting one of a number of supported [[reference architecture]]s like [[Java EE]] or [[Microsoft .NET]], * Specifying the architecture at a finer level including the choice of presentation layer technology, business logic layer technology, persistence technology and persistence mapping technology (e.g. object-relational mapper). * Metadata: information about data. === MDA concerns === Some key concepts that underpin the MDA approach (launched in 2001) were first elucidated by the [[Shlaer-Mellor]] method during the late 1980s. Indeed a key absent technical standard of the MDA approach (that of an action language syntax for [[Executable UML]]) has been bridged by some vendors by adapting the original Shlaer-Mellor Action Language (modified for UML){{Citation needed|date=February 2007}}. However during this period the MDA approach has not gained mainstream industry acceptance; with the [[Gartner Group]] still identifying MDA as an "on the rise" technology in its 2006 "[[Hype cycle|Hype Cycle]]"<ref name=gartnermda>[http://www.gartner.com/DisplayDocument?ref=g_search&id=494180&subref=simplesearch "Hype Cycle for Emerging Technologies, 2006"] $495.00</ref>, and [[Forrester Research]] declaring MDA to be "D.O.A." in 2006<ref name=forrestermda>[http://www.forrester.com/Research/Document/Excerpt/0,7211,39156,00.html "MDA Is DOA, Partly Thanks To SOA"]</ref>. Potential concerns that have been raised with the OMG MDA approach include: * Incomplete Standards: The MDA approach is underpinned by a variety of technical standards, some of which are yet to be specified (e.g. an action semantic language for [[Executable UML|xtUML]]), or are yet to be implemented in a standard manner (e.g. a [[QVT]] transformation engine or a [[Platform-independent model|PIM]] with a virtual execution environment).<ref name=mdanoaslsyntaxone>[http://www.jot.fm/issues/issue_2003_01/column1 "UML - Unified or Universal Modeling Language? UML2, OCL, MOF, EDOC - The Emperor Has Too Many Clothes"]</ref><ref name=mdanoaslsyntaxtwo>[http://www.theserverside.com/tt/articles/article.tss?l=MDA_Haywood "MDA: Nice Idea. Shame about the..."]</ref> * Vendor Lock-in: Although MDA was conceived as an approach for achieving (technical) platform independence, current MDA vendors have been reluctant to engineer their MDA toolsets to be interoperable. Such an outcome could result in vendor lock-in for those pursuing an MDA approach.{{Citation needed|date=February 2007}} * Idealistic: MDA is conceived as a forward engineering approach in which models that incorporate Action Language programming are transformed into implementation artifacts (e.g. executable code, database schema) in one direction via a fully or partially automated "generation" step. This aligns with OMG's vision that MDA should allow modelling of a problem domain's full complexity in UML (and related standards) with subsequent transformation to a complete (executable) application<ref name=eclipsemda>[http://www.java-forum-stuttgart.de/jfs/2006/folien/A5_Schoenhage_Compuware.pdf "Bringing MDA to Eclipse, using a pragmatic approach"]</ref>. This approach does, however, imply that changes to implementation artifacts (e.g. database schema tuning) are not supported . This constitutes a problem in situations where such post-transformation "adapting" of implementation artifacts is seen to be necessary. Evidence that the full MDA approach may be too idealistic for some real world deployments has been seen in the rise of so-called "pragmatic MDA"<ref name=forresterresponse>[http://www.bptrends.com/publicationfiles/04-06-COL-MDA-ResponseToForrester-Frankel.pdf#search=%22%22pragmatic%20MDA%22%22 "A Response to Forrester"]</ref>. Pragmatic MDA blends the literal standards from OMG's MDA with more traditional model driven mechanisms such as 