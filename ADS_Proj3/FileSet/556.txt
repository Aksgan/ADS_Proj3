characters and allow digital devices to communicate with each other and to process, store, and communicate character-oriented information such as written language, and lowercase characters, a 7-bit [[ASCII]] code was introduced (see [[ASCII]] history). Since with just only one bit more an eight bits allows two four-bit patterns to efficiently encode two digits with binary coded decimal, the eight-bit [[EBCDIC]] (see [[EBCDIC]] history) character encoding was later adopted and promulgated as a standard by the IBM in the [[System/360]], the preset byte. The size of a byte was at first selected to be a multiple of existing teletypewriter codes, particularly the [[Sixbit|6-bit codes]] used by the [[U.S. Army]] ([[Fieldata]]) and Navy. In 1963, to end the use of incompatible teleprinter codes by different branches of the U.S. government, [[ASCII]], a 7-bit code, was adopted as a [[Federal Information Processing Standard]], making 6-bit bytes commercially obsolete. In the early 1960s, AT&T introduced [[digital telephony]] first on long-distance [[trunk line]]s. These used the 8-bit [[µ-law algorithm|µ-law encoding]]. This large investment promised to reduce transmission costs for 8-bit data. The use of 8-bit codes for digital telephony also caused 8-bit data "octets" to be adopted as the basic data unit of the early [[Internet]]. In the late 1970s, microprocessors such as the [[Intel 8008]] (the direct predecessor of the [[Intel 8080|8080]], and then the [[Intel 8086|8086]] used in early PCs) could perform a small number of operations on [[4bit| four bits]], such as the DAA (decimal adjust) instruction, and the ''half carry'' flag, which were used to implement decimal arithmetic routines. These four-bit quantities were called [[nibble]]s, in homage to the then-common 8-bit bytes. Reasons for the ubiquity of the eight-bit byte include the popularity of the IBM [[System/360]] architecture, introduced in the 1960s, and the [[8-bit]] [[microprocessor]]s, introduced in the 1970s. The term [[Octet (computing)|octet]] is used to unambiguously specify a size of eight bits, and is used extensively in [[Protocol (computing)|protocol]] definitions, for example. ==Unit symbol== {{Bit and byte prefixes}} The unit symbol for the byte is specified in [[IEEE 1541]] and the Metric Interchange Format<ref>[http://people.csail.mit.edu/jaffer/MIXF Metric-Interchange-Format]</ref> as the upper-case character B, while other standards, such as the [[International Electrotechnical Commission]] (IEC) standard [[IEC 60027]], appear silent on the subject. In the [[International System of Units]] (SI), B is the symbol of the [[bel]], a unit of logarithmic power ratios named after [[Alexander Graham Bell]]. The usage of B for byte therefore conflicts with this definition. It is also not consistent with the SI convention that only units named after persons should be capitalized. However, there is little danger of confusion because the bel is a rarely used unit. It is used primarily in its decadic fraction, the [[decibel]] (dB), for [[signal strength]] and [[sound pressure level]] measurements, while a unit for one tenth of a byte, i.e. the decibyte, is never used. The unit symbol kB is commonly used for [[kilobyte]], but may be confused with the common meaning of kb for [[kilobit]]. IEEE 1541 specifies the lower case character b as the symbol for [[bit]]; however, the IEC 60027 and Metric-Interchange-Format specify bit (e.g., Mbit for megabit) for the symbol, a sufficient disambiguation from byte. The lowercase letter o for [[Octet (computing)|octet]] is a commonly used symbol in several non-English languages (e.g., [[French language|French]]<ref>{{cite web |url=http://www.iec.ch/zone/si/si_bytes.htm |title=When is a kilobyte a kibibyte? And an MB an MiB? | date= |work=The International System of Units and the IEC |publisher=[[International Electrotechnical Commission]] |accessdate=August 30, 2010}})</ref> and [[Romanian language|Romanian]]), and is also used with metric prefixes (for example, ''ko'' and ''Mo'') Today the harmonized [[ISO]]/IEC [[ISO/IEC 80000|80000-13:2008 – Quantities and units — Part 13: Information science and technology]] standard cancels and replaces subclauses 3.8 and 3.9 of IEC 60027-2:2005, namely those related to Information theory and Prefixes for binary multiples. ==Unit multiples== [[Image:Binaryvdecimal.svg|thumb|right|175px|Percentage difference between decimal and binary interpretations of the unit prefixes grows with increasing storage size.]] {{See also|Binary prefix}} There has been considerable confusion about the meanings of [[SI prefix|SI (or metric) prefixes]] used with the unit byte, especially concerning prefixes such as kilo (k or K) and mega (M) as shown in the chart ''Prefixes for bit and byte''. Since computer memory is designed with binary logic, multiples are expressed in [[power of two|powers of 2]], rather than 10. The software and computer industries often use binary estimates of the SI-prefixed quantities, while producers of computer storage devices prefer the SI values. This is the reason for specifying computer hard drive capacities of, say, 100 GB, when it contains 93 GiB of storage space. While the numerical difference between the decimal and binary interpretations is small for the prefixes kilo and mega, it grows to over 20% for prefix yotta, illustrated in the linear-log graph (at right) of difference versus storage size. ==Common uses== The byte is also defined as a [[data type]] in certain [[programming language]]s. The [[C (programming language)|C]] and [[C++]] programming languages, for example, define ''byte'' as an "''addressable unit of data large enough to hold any member of the basic character set of the execution environment''" (clause 3.6 of the C standard). The C standard requires that the <code>char</code> integral data type is capable of holding at least 255 different values, and is represented by at least 8 bits (clause 5.2.4.2.1). Various implementations of C and C++ define a byte as 8, 9, 16, 32, or 36 bits.<ref>[http://www.parashift.com/c++-faq-lite/intrinsic-types.html#faq-26.4 [26&#93; Built-in / intrinsic / primitive data types, C++ FAQ Lite<!-- Bot generated title -->]</ref><ref>[http://home.att.net/~jackklein/c/inttypes.html#char Integer Types In C and C++]</ref> The actual number of bits in a particular implementation is documented as <code>CHAR_BIT</code> as implemented in the <code>[[limits.h]]</code> file. [[Java (programming language)|Java's]] primitive <code>byte</code> data type is always defined as consisting of 8 bits and being a signed data type, holding values from −128 to 127. In data transmission systems, a contiguous sequence of binary bits in a serial data stream, such as in modem or satellite communications, which is the smallest meaningful unit of data. These bytes might include start bits, stop bits, or parity 