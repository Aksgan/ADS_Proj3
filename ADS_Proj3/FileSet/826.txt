be described in this format. See [[C syntax#Arrays]]. <br/>{{note|Java's array|b}} The C-like "type '''x[]'''" works in Java, however "type'''[] x'''" is the preferred form of array declaration. <br/>{{note|subrange|c}} Subranges are use to define the bounds of the array. <br/>{{note|JavaScript's array|d}} JavaScript's array are a special kind of object. <!-- explain array(size) thing --> === Other types === {| class="wikitable" ! rowspan=2| ! colspan=2|Simple composite types ! rowspan=2|[[Algebraic data type]]s ! rowspan=2|[[Union (computer science)|Unions]] |- ! [[Record (computer science)|Records]] ! [[Tuple]] expression |- | ALGOL 68 | '''struct''' ('''modename''' ''«fieldname»'', '''...'''); | colspan=2 align=center| Required types and operators can be [[User-defined function|user defined]] | '''union''' ('''modename''', '''...'''); |- | C (C99) | rowspan=2| '''struct''' «name» '''{'''type name''';'''...'''};''' | rowspan=2 {{n/a}} | rowspan=3 {{n/a}} | rowspan=3| '''union {'''type name''';'''...'''};''' |- | Objective-C |- | C++ | {{N/A}}{{ref|just classes|[a]}}{{ref|C++'s struct|[b]}} | {{n/a}} |- | C# | '''struct''' name '''{'''type name''';'''...'''}''' | | | rowspan=3 {{n/a}} |- | Java | {{n/a}}{{ref|just classes|[a]}} | | |- | JavaScript | | {{n/a}} | |- | Go | '''struct {<ul>'''«name» type'''<br/>'''...'''</ul>}''' | | | |- | Common Lisp | | rowspan=2| '''(cons '''val<sub>1</sub> val<sub>2</sub>''')'''{{ref|pair only|[c]}} | | |- | Scheme | {{n/a}} | | |- | Pascal | '''record'''<ul>name''':''' type''';'''<br/>...</ul>'''end''' | {{n/a}} | {{n/a}} | '''record'''<ul>'''case''' type '''of''' <br/>value''': ('''types''');'''<br/>...</ul>'''end''' |- | Visual Basic | | | | |- | Visual Basic .NET | '''Structure''' name <ul> '''Dim''' name '''As''' type <br/> ... </ul>''' End Structure''' | | | |- | Python | {{n/a}}{{ref|just classes|[a]}} | «'''('''»val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... «''')'''» | | {{n/a}} |- | S-Lang | '''struct {'''name [=value], ...'''}''' | | | |- | Fortran |'''TYPE''' name <ul> ''' '''type''' :: ''' name <br/> ... </ul>''' END TYPE''' | | | |- | PHP | {{n/a}}{{ref|just classes|[a]}} | | | |- | Perl | {{n/a}}{{ref|Perl's records|[d]}} | | | rowspan=3 {{n/a}} |- | Perl 6 | {{n/a}}{{ref|just classes|[a]}} | | |- | Ruby | OpenStruct.new({:name => value}) | | |- | Windows PowerShell | | | | |- | OCaml | rowspan=2| '''type''' name '''= {'''«'''mutable'''» name ''':''' type''';'''...'''}''' | rowspan=2| «'''('''»val<sub>1</sub>''',''' val<sub>2</sub>''',''' val<sub>3</sub>''',''' ... «''')'''» | rowspan=2| '''type''' name '''=''' Foo «'''of''' type»''' <nowiki>|</nowiki>''' Bar «'''of''' type»''' <nowiki>|</nowiki>''' ... | rowspan=4 {{n/a}} |- | F# |- | Standard ML | '''type''' name '''= {'''name ''':''' type''','''...'''}''' | rowspan=2| '''('''val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... ''')''' | '''datatype''' name '''=''' Foo «'''of''' type»''' <nowiki>|</nowiki>''' Bar «'''of''' type»''' <nowiki>|</nowiki>''' ... |- | Haskell | '''data''' Name '''=''' Constr '''{'''name '''::''' type''','''...'''}''' | '''data''' Name '''=''' Foo «types»''' <nowiki>|</nowiki>''' Bar «types»''' <nowiki>|</nowiki>''' ... |} {{note|just classes|a}} Only classes are supported. <br />{{note|C++'s struct|b}} <code>struct</code>s in C++ are actually classes, but [[Plain old data structure|POD]] objects are in fact records. <br />{{note|pair only|c}} pair only <br />{{note|Perl's records|d}} Although Perl doesn't have records, because Perl's type system allows different data types to be in an array, "hashes" (associative arrays) that don't have a variable index would effectively be the same as records. <br />{{note|enum|e}} Enumerations in this language are algebraic types with only nullary constructors == Variable and Constant Declarations == {| class="wikitable" ! ! variable ! constant ! type synonym |- | [[ALGOL 68]] |'''modename''' ''name'' «''':=''' initial_value»'''; |'''modename''' ''name'' '''=''' value'''; |'''[[typedef|mode]]''' '''synonym''' = '''modename'''; |- | C (C99) | rowspan=3| type name «'''=''' initial_value»''';''' | rowspan=2| '''enum{''' name '''=''' value '''};''' | rowspan=3| '''[[typedef]]''' type synonym''';''' |- | Objective-C |- | C++ | '''const''' type name '''=''' value''';''' |- | C# | type name «'''=''' initial_value»''';''' or <br/> '''var''' name '''=''' value''';''' | '''const''' type name '''=''' value''';''' or <br/> '''readonly''' type name '''=''' value''';''' | '''using''' synonym '''=''' type''';''' |- | D | type name «'''=''' initial_value»''';''' or <br/> '''auto''' name '''=''' value''';''' | '''const''' type name '''=''' value''';''' or <br/> '''immutable''' type name '''=''' value''';''' | '''alias''' type synonym''';''' |- | Java | type name «'''=''' initial_value»''';''' | '''final''' type name '''=''' value''';''' | rowspan=2 {{n/a}} |- | JavaScript | '''var''' name «'''=''' initial_value»''';''' | '''const''' name '''=''' value''';''' |- | Go | '''var''' name type «'''=''' initial_value» or <br/> name ''':=''' initial_value | '''const''' name «type» '''=''' initial_value | '''type''' synonym type |- | Common Lisp | '''(defparameter''' name initial_value''')''' or <br/> '''(defvar''' name initial_value''')''' or <br/> '''(setf (symbol-value <nowiki>'</nowiki>'''symbol''')''' initial_value''')''' | '''(defconstant''' name value''')''' | '''(deftype '''synonym''' () <nowiki>'</nowiki>'''type''')''' |- | Scheme | '''(define''' name initial_value''')''' | | |- | Pascal{{ref|Pascal's declarations|[a]}} | name''':''' type «'''=''' initial_value» | name '''=''' value | synonym '''=''' type |- | Visual Basic | '''Dim''' name '''As''' type | rowspan=2| '''Const''' name '''As''' type '''=''' value | |- | Visual Basic .NET | '''Dim''' name '''As''' type«'''=''' initial_value»''' | '''Imports''' synonym '''=''' type |- | Python | name '''=''' initial_value | {{n/a}} | synonym '''=''' type{{ref|variable types|[b]}} |- | S-Lang | name '''=''' initial_value''';''' | | '''typedef struct {...}''' typename |- | Fortran | type name | type''', PARAMETER :: ''' name '''=''' value | |- | PHP | '''$'''name '''=''' initial_value''';''' | '''define("'''name'''", '''value''');''' <br /> '''const '''name''' = '''value (5.3+) | rowspan=2 {{n/a}} |- | Perl | «'''my'''» '''$'''name «'''=''' initial_value'''»;'''{{ref|Perl's my keyword|[c]}} | '''use constant''' name '''=>''' value''';''' |- | Perl 6 | «'''my''' «type»» $name «'''=''' initial_value'''»;'''{{ref|Perl's my keyword|[c]}} | «'''my''' «type»» '''constant''' name '''=''' value''';''' | '''::'''synonym '''::=''' type |- | Ruby | name '''=''' initial_value | Name '''=''' value | synonym '''=''' type{{ref|variable types|[b]}} |- | Windows PowerShell | «'''['''type''']'''»''' $'''name '''=''' initial_value | | |- | OCaml | '''let''' name «''':''' type '''ref'''» '''= ref''' value{{ref|ML ref|[d]}} | rowspan=2| '''let''' name «''':''' type» '''=''' value | rowspan=3| '''type''' synonym '''=''' type |- | F# | '''let mutable''' name «''':''' type» '''=''' value |- | Standard ML | '''val''' name «''':''' type '''ref'''» '''= ref''' value{{ref|ML ref|[d]}} | '''val''' name «''':''' type» '''=''' value |- | Haskell | | «name'''::'''type''';'''» name '''=''' value | '''type''' Synonym '''=''' type |- | Forth | '''VARIABLE''' name (in some systems use value '''VARIABLE''' name instead) | value '''CONSTANT''' name | |} {{note|Pascal's declarations|a}} 