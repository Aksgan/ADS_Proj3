[[attrib|attribute]] set. Cygwin 1.5 represented them as [[Windows Explorer]] [[File shortcut|shortcuts]], but this has been changed for reasons of performance and POSIX correctness. Cygwin also recognises NTFS [[NTFS junction point|junctions points]] and [[NTFS symbolic link|symbolic links]] and treats them as POSIX symbolic links, but it does not create them as their semantics are not fully POSIX-compliant. *The [[Solaris Operating System|Solaris]] API for handling [[access control list]]s (ACLs) is supported and maps to the Windows NT ACL system. *Special formats of <code>/etc/passwd</code> and <code>/etc/group</code> are provided that include pointers to the Windows equivalent [[Security Identifier|SID]]s (in the [[Gecos field|GECOS field]]), allowing for mapping between Unix and Windows users and groups. *The [[Fork (computing)|fork]] system call for duplicating a process is fully implemented, but it does not map well to the Windows API. For example, the [[copy-on-write]] optimization strategy could not be used. As a result, Cygwin's fork is rather slow compared with Linux and others. (That overhead can often be avoided by replacing uses of the [[fork-exec|fork/exec]] technique with calls to the [[spawn (computing)|spawn]] functions declared in the Windows-specific [[process.h]] header). *The Cygwin DLL contains a console driver that emulates a Unix-style [[Terminal emulator|terminal]] within the [[Win32 console|Windows console]]. Cygwin's default user interface is the [[Bash (Unix shell)|bash]] shell running in the Cygwin console. *The DLL also implements [[pseudo terminal]] (pty) devices. Cygwin ships with a number of [[terminal emulator|terminal emulators]] that are based on them, including [[mintty]], [[rxvt]]([[rxvt-unicode|-unicode]]), and [[xterm]]. These are more compliant with Unix terminal standards and user interface conventions than the Cygwin console, but are less suited for running Windows console programs. *Various utilities are provided for converting between Windows and Unix paths and file formats, for handling line ending (CRLF/LF) issues, for displaying the [[Dynamic-link library|DLL]]s that an executable is linked with, etc. *Apart from always being linked against the Cygwin DLL, Cygwin executables are normal Windows executables. This means that Cygwin programs have full access to the [[Windows API]] and other Windows libraries, which allows gradual porting of programs from one platform to the other. Programmers do need to be careful though about mixing conflicting POSIX and Windows functions. The version of [[GNU Compiler Collection|gcc]] that comes with Cygwin has various extensions for creating Windows DLLs, specifying whether a program is a windowing or console mode program, adding resources, etc. Support for compiling programs that do not require the POSIX compatibility layer provided by the Cygwin DLL used to be included in the default gcc, but is now provided by cross compilers contributed by the [[MinGW]]-w64 project. Cygwin is used heavily for porting many popular pieces of software to the Windows platform. It is used to compile [[Sun Microsystems|Sun]] [[Java (programming language)|Java]], [[OpenOffice.org]], and even server software, like [[lighttpd]]. Red Hat normally licenses the Cygwin library under the [[GNU General Public License]] version 2 with an exception to allow linking to any [[free and open source software]] whose license conforms to the [[Open Source Definition]]. Red Hat also sells commercial licenses to those who wish to redistribute programs that use the Cygwin library under [[proprietary software|proprietary]] terms. ==History== Cygwin began in 1995 as a project of [[Steve Chamberlain]], a [[Cygnus Solutions|Cygnus]] engineer who observed that Windows NT and 95 used [[COFF]] as their [[object file format]], and that GNU already included support for [[x86]] and COFF, and the C library [[newlib]]. He thought it would be possible to retarget [[GNU Compiler Collection|GCC]] and produce a [[cross compiler]] generating executables that could run on Windows. This proved indeed practical and a prototype was quickly developed. The next step was to attempt to [[Bootstrapping (compilers)|bootstrap]] the compiler on a Windows system, requiring sufficient emulation of Unix to let the [[Autoconf|GNU configure]] [[shell script]] run. A [[Bourne shell]]-compatible command interpreter, such as [[Bash (Unix shell)|bash]], was needed and in turn a [[Fork (computing)|fork]] system call emulation and [[Standard streams|standard input/output]]. Windows includes similar functionality, so the Cygwin library just needed to provide a [[POSIX]]-compatible [[application programming interface]] (API) and properly translate calls and manage private versions of data, such as [[file descriptor]]s. Initially, Cygwin was called gnuwin32 (not to be confused with the current [[GnuWin32]] project). The name was changed to Cygwin32 to emphasize Cygnus' role in creating it. When [[Microsoft]] registered the trademark [[Win32]], the 32 was dropped to simply become Cygwin. By 1996, other engineers had joined in, because it was clear that Cygwin would be a useful way to provide Cygnus' embedded tools hosted on Windows systems (the previous strategy had been to use [[DJGPP]]). It was especially attractive because it was possible to do a three-way cross-compile, for instance to use a hefty [[Sun workstation]] to build, say, a Windows-x-[[MIPS architecture|MIPS]] cross-compiler, which was faster than using the PC at the time. In 1999, Cygnus offered Cygwin 1.0 as a commercial product of interest in its own right although subsequent versions have not been released, instead relying on continued open source releases. Geoffrey Noer was the project lead from 1996-1998. Christopher Faylor has been the project lead since 1998. Corinna Vinschen became co-lead since early 2004 when Faylor left Red Hat. ==Features== Cygwin's default package selection is fairly minimal, containing little more than the [[bash]] shell and the core file manipulation utilities expected of a Unix command line. A wide range of additional packages are available as optional installs in Cygwin's package manager ("setup.exe"). These include (among much else): * Shells (i.e. command line interpreters): [[bash]], [[Debian Almquist shell|dash]], [[Korn shell|pdksh]], [[tcsh]], [[zsh]] * File and system utilities: [[coreutils]], [[findutils]], [[util-linux]] * Text utilities: [[grep]], [[sed]], [[diff]], [[patch (Unix)|patch]], [[awk]] * Terminals: [[mintty]], [[rxvt]], [[GNU Screen|screen]] * Editors: [[emacs]], [[Joe's Own Editor|joe]], [[mined]], [[nano (text editor)|nano]], [[vim]] * Remote login: [[OpenSSH|ssh]], [[Remote Shell|rsh]], [[telnet]] * Remote file transfer/synchronization: [[ftp]], [[Secure copy|scp]], [[rsync]], [[Unison (file synchronizer)|unison]], [[rtorrent]] * Compression/archiving: [[tar (file format)|tar]], [[gzip]], [[bzip2]], [[lzma]], [[ZIP (file format)|zip]] * Text processing: [[TeX]], [[groff (software)|groff]], [[Ghostscript]] * Programming languages: [[C (programming language)|C]], [[C++]], [[Objective-C]], [[Fortran]], [[Perl]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[Tcl]], [[Ada (programming language)|Ada]], 