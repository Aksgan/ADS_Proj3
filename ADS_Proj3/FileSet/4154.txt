* CT37**: CT3780 * CT39**: CT3900, CT3910, CT3919, CT3940, CT3960, CT3980, CT3990, CT3991, CT3999 * CT43**: CT4331, CT4332 ==Sound Blaster 32== [[Image:Soundblaster32.jpg|thumb|150px|right|Sound Blaster 32 (CT3930]] The '''Sound Blaster 32''' (SB32) was a value-oriented offering from Creative, announced on June 6, 1995, designed to fit below the AWE32 Value in the lineup. The SB32 lacked onboard [[RAM]], the [[Creative Wave Blaster|Wave Blaster]] header, and the CSP socket. The boards also used the Vibra digital audio chip which lacked adjustments for bass, treble, and gain. The SB32 had the same [[MIDI]] capabilities as the AWE32, and had the same [[SIMM|30-pin SIMM]] RAM expansion capability. The board was also fully compatible with the AWE32 option in software and used the same Windows drivers. Once the SB32 was outfitted with 30-pin SIMMs, its sampler section performed identically to the AWE32's. Some Sound Blaster 32 PnP with onboard 512kB RAM was sold as AWE32 OEM in Dell computers. ===Sound Blaster 32 Model Numbers=== The following model numbers were assigned to the Sound Blaster 32: * CT36**: CT3600, CT3604, CT3605, CT3620, CT3630, CT3640, CT3671, CT3672 * CT39**: CT3930, CT3991, CT3999 * CT43**: CT4330, CT4335, CT4335 == External links == *[http://www.gamedev.net/reference/articles/article445.asp "Programming the Soundblaster AWE-32"] *[http://www.treiberupdate.de/treiber-download/treiber-awe%2032-0.html "Soundblaster AWE-32 Driver Download"] {{Sound Blaster}} [[Category:Creative Technology products]] [[Category:Sound cards]] [[ko:사운드 블라스터 AWE32]]</text> </page> <page> <id>35143</id> <title>Soup (Apple)</title> <text>'''Soup''' is the file system for the [[Apple Newton]] platform, based on a shallow database system. The Newton considers its internal storage, and each inserted card, as a separate "store" (a volume). Any store may have either read/write "soups" (databases), or read-only objects called "packages" (Packages are roughly equivalent to applications, though they may also be storage areas or plug-ins). A soup is a simple one-table database of "entries" which may be indexed in different ways and queried by a variety of methods. Various soups store the Newton's equivalent of "documents" or "files". The Newton has a rich set of indexing and querying mechanisms for soups. One important index is the "tags" index. Soup entries may be "tagged" with some user-defined string; applications use these tags to mimic the mechanism of filing entries into "folders", each folder identified by a user-defined string. Soups have an accompanying ID symbol which represents a soup of that "kind"; this ID is assigned to a soup by the application which created it and uses it. For example, Hemlock (an Internet search tool for the Newton) maintains two soups, each with a different ID. One soup holds a list of search engines, the other holds the query results. Soups on different stores may have the same ID, meaning that they are the same kind of soup, just spread out on different cards. When applications access soups, they usually do so by querying and accessing a "union soup" object. From an application's perspective, union soups merge all the soups of a given ID on different stores into one unified soup for that ID. This happens dynamically; when a user adds or removes cards, the union soup changes automatically, each application is notified, and they update their presentation to the user to reflect this. For example, if the user pulls out a card containing a Note Pad soup, the appropriate soup entries (i.e. "notes") in the Note Pad's union soup automatically disappear, the Note Pad is notified, and its display is updated to show that these entries are now gone. Treating documents as database entries in a global union soup made Newtons very apt at handling multiple cards yanked and inserted while applications are running. There are a few global soups which all applications use; the most important one is the "System" Soup, which stores global information for applications, commonly application preferences. == References == {{refbegin}} * {{cite web|last=Robinson|first=Ian|year=2004|url=http://www.canicula.com/newton/prog/soups.htm|title=Newton Data Storage}} {{refend}} [[Category:Apple Newton]] [[Category:Proprietary database management systems]] {{database-software-stub}}</text> </page> <page> <id>35152</id> <title>Source (game engine)</title> <text>{{Infobox software | name = Source engine | logo = [[Image:Source engine logo.svg|170px|Source engine logo]] | screenshot = [[Image:Tf2 engineerlaugh.jpg|200px|[[Non-photorealistic rendering]] in [[Team Fortress 2]].]] [[Image:Hl2ep2 jalopy.jpg|200px|[[Photorealistic rendering]] in [[Half-Life 2: Episode Two]].]] | developer = [[Valve Corporation]] | latest_release_version = Build 4335 | latest_release_date = 2010 | platform = [[Microsoft Windows]]<br />[[Mac OS X]]<br />[[Xbox]]<br />[[Xbox 360]]<br />[[PlayStation 3]] | programming language = [[C++]] | license = [[proprietary software|Proprietary]] | website = http://source.valvesoftware.com/ }} '''Source''' is a [[game engine|3D game engine]] developed by [[Valve Corporation]]. It debuted in June 2004 with ''[[Counter-Strike: Source]]'' and shortly thereafter ''[[Half-Life 2]]''. Other notable games using the engine include first-person shooter ''[[Left 4 Dead]]'', the physics sandbox ''[[Garry's Mod]]'', first-person action RPG games ''[[Vampire: The Masquerade - Bloodlines]]'' and ''[[Dark Messiah of Might and Magic]]'', the first-person puzzle game ''[[Portal]]'', first-person [[beat-em-up]] ''[[Zeno Clash]]'' and the [[MMORPG]] ''[[Vindictus]]'' developed by [[Nexon]]. == Notable technology == :''For a more complete list, see [http://developer.valvesoftware.com/wiki/Source_Engine_Features Source Engine Features] at the [[#Valve Developer Community|Valve Developer Community]].'' * [[Direct3D]] rendering on Microsoft Windows PCs, Xbox and Xbox 360. * [[OpenGL]] rendering on Mac OS X and the PlayStation 3. * [[High dynamic range rendering|High dynamic range rendering (HDR)]]: introduced with ''[[Half-Life 2: Lost Coast]]'' and the first major use of Source's modularity. * [[Lag]]-compensated, [[client-server]] networking model<ref name="vdc_networking">{{cite web|url=http://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking|title=Source Multiplayer Networking|work=Valve Developer Community|date=2005-06-30|accessdate=2008-07-20}}</ref> * [[Computer network|Network]]-enabled and [[bandwidth (computing)|bandwidth]]-efficient [[physics engine]].<ref name="vdc_vphysics">{{cite web|url=http://developer.valvesoftware.com/wiki/Vphysics|archiveurl=http://web.archive.org/web/20060601162447/http://developer.valvesoftware.com/wiki/Vphysics|archivedate=2006-06-01|title=VPhysics|work=Valve Developer Community|date=2006-10-15|accessdate=2008-07-20}}</ref> Source uses a heavily tweaked version of the [[Havok (software)|Havok]] physics engine.<ref>{{cite web|url=http://www.hlfallout.net/articles.php/article_2/4/ |title=Source: Belly of the Beast |publisher=hlfallout.net |quote=''Since they licensed and integrated it into Source, Valve have been tweaking and adding to Havok to the point it's virtually a new animal. Almost every aspect of the Source engine follows on from the physics — including the sound, graphics, AI and animation. When asked whether or not they would be upgrading to Havok 2, Valve seemed to suggest they probably wouldn't, in part because H2 wouldn't be much of a step forward from what they currently have. |date=2004-06-21 |accessdate=2008-12-06}}</ref> * Scalable [[multiprocessor]] support<ref name="bit-tech_multicore">{{cite web |url= http://www.bit-tech.net/gaming/2006/11/02/Multi_core_in_the_Source_Engin/1.html |title=Multi-Core in the Source Engine Core |accessdate = 2006-11-02|publisher=[[Bit-tech]]|date=2006-11-02}}</ref> * Facial animation system: A full range of human and 