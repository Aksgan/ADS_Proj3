(TIMS), now part of [[INFORMS]]. The refereed journal's distinguishing feature is its case-study style: It offers examples of how operations research theory has been applied in businesses and organizations.<ref>[http://portal.acm.org/citation.cfm?id=1245500 ACM Portal: The Guide to Computing Literature]</ref><ref>[http://stang.sc.mahidol.ac.th/internal/if2004/pdf/OPER.pdf Journal Citation Reports Year 2004 Science Edition]</ref><ref>[http://www.lib.unideb.hu/hun/impact/jcrsoc05.html Journal Citation Reports 2005 Social Sciences Edition]</ref> ''Interfaces'' is a bimonthly journal published by the professional society [[INFORMS]] the [[Institute for Operations Research and the Management Sciences]]. INFORMS describes ''Interfaces'' as "improving the practical application of OR/MS to decisions and policies in today's organizations and industries. Each article provides details of the completed application, along with the results and impact on the organization. Interfaces is essential reading for analysts, engineers, project managers, consultants, students, researchers, and educators".<ref>[http://www.informs.org/index.php?c=31&kat=-+INFORMS+Journals&p=49|53 INFORMS Journals]. Retrieved 18 June 2008.</ref> An annual feature is an issue with papers by the previous year's Franz Edelman Award participants.<ref>[http://mat.tepper.cmu.edu/blog/?p=265 Michael Trick's Operations Research Blog]</ref><ref>[http://www.hollandtrade.com/vko/zoeken/ShowBouwsteen.asp?bstnum=2438&location=/vko/sectoranalyses/sector.asp?sector=bwi Holland Trade]</ref><ref>[http://www.afmc.af.mil/news/story.asp?id=123019962 Air Force Materiel Command]</ref> == References == {{reflist}} == External links == * [http://interfaces.pubs.informs.org/ Interfaces] homepage. [[Category:Operations research]] [[Category:Management science]] [[Category:Systems journals]] {{sci-journal-stub}}</text> </page> <page> <id>18888</id> <title>Interlisp</title> <text>'''Interlisp''' (also seen with a variety of capitalizations) was a programming environment built around a version of the [[Lisp programming language]]. Interlisp development began in 1967 at [[Bolt, Beranek and Newman]] in [[Cambridge, Massachusetts]] as [[BBN LISP]], which ran on [[PDP-10]] machines running the [[TOPS-20|TENEX]] operating system. When [[Daniel_G_Bobrow|Danny Bobrow]], [[Warren Teitelman]] and [[Ronald Kaplan]] moved from BBN to [[Xerox PARC]], it was renamed Interlisp. Interlisp became a popular Lisp development tool for AI researchers at [[Stanford University]] and elsewhere in the [[DARPA]] community. Interlisp was notable for the integration of interactive development tools into the environment, such as a [[debugger]], an automatic correction tool for simple errors ([[DWIM]]<ref>Teitelman, Warren, "Do What I Mean": the programmer's assistant," Computers and Automation, pp. 8-11, April 1972.</ref> - "do what I mean"), and analysis tools. ==Adaptations== At [[Xerox PARC]], there was an early attempt to define a [[virtual machine]] to facilitate porting, known as the "Interlisp virtual machine". However, this wasn't useful as a basis for porting. [[L._Peter_Deutsch|Peter Deutsch]] defined a byte-coded instruction set for Interlisp, and implemented it as a microcoded emulator for the [[Xerox Alto]]. This was subsequently ported to a series of workstation designs produced by Xerox for both their own use and for commercial exploitation, including the Xerox 1100 (Dolphin), 1108 (Dandelion), 1109 (the floating-point enabled "Dandetiger"), [[Xerox Daybreak|1186 (Daybreak)]], and 1132 (Dorado). Interlisp implementations for these were known collectively as Interlisp-D. Commercially, these were sold as [[Lisp Machine]]s and branded as Xerox AI Workstations; the same designs, but with different software, were also sold under different names (e.g. when running the Viewpoint system, the 1186 Daybreak was sold as the Xerox 6085.) Releases of Interlisp-D were named according to a musical theme, which ended with Koto, Lyric, and Medley. Later versions included an implementation of pre-[[ANSI]] [[Common Lisp]], known as [[Xerox Common Lisp]]. [[LOOPS]], the object system for Interlisp-D, became, along with [[Symbolics]]' [[FLAVORS]] system, the basis for the [[Common Lisp Object System]]. The PDP-10 version of Interlisp became '''Interlisp-10'''; BBN had an internal project to build '''Interlisp-Jericho''' and there was a 1982 port to [[Berkeley Software Distribution|Berkeley Unix]] on the [[VAX]] by [[Stanford University]], [[Information Sciences Institute|ISI]] and Xerox PARC, called '''Interlisp-VAX'''.<ref>{{cite report | title = Interlisp-VAX: A Report | author = Larry M. Masinter | url = http://www.softwarepreservation.org/projects/LISP/interlisp/Interlisp-VAX_A_Report.pdf | year = 1981 | publisher = Stanford University }}</ref> In 1981, Warren Teitelman and Larry Masinter published a paper on Interlisp in [[IEEE Computer]] that provides a nice overview of the system and its design philosophy.<ref>Warren Teitelman, Larry M. Masinter. [http://larry.masinter.net/interlisp-ieee.pdf The Interlisp Programming Environment]. IEEE Computer, April 1981.</ref> In 1985-7, a team from [[Fuji Xerox]] developed a C implementation of the microcoded bytecode interpreter, and, together with [[Xerox AI Systems]] (XAIS) in [[Sunnyvale, California]], completed the port of the environment and emulator to the [[Sun Microsystems]] [[SPARC]] 4 architecture. In 1987, XAIS was spun off into [[Envos Corporation]], which almost immediately failed. In 1992, an [[Association for Computing Machinery|ACM]] [[Software System Award]] recognized the team of [[Daniel G. Bobrow]], [[Richard R. Burton]], [[L. Peter Deutsch]], [[Ronald Kaplan]], [[Larry Masinter]], [[Warren Teitelman]] for their pioneering work on Interlisp. ==References== <references/> ==Publications== *[[Warren Teitelman]] ''et al.'', ''Interlisp Reference Manual'' (Xerox tech report, 1974) *[[J Strother Moore]], ''The Interlisp Virtual Machine Specification'' (Xerox tech report, 1976) *[[L._Peter_Deutsch|L Peter Deutsch]], ''A LISP Machine with Very Compact Programs'' (Third Joint Conference on Artificial Intelligence, 1973). * Kaisler, S. H. 1986 Interlisp: the Language and its Usage. Wiley-Interscience. ==External links== * [http://bitsavers.org/pdf/xerox/interlisp/ Archived Interlisp documentation at bitsavers.org] * [http://blake.mcbride.name/software/lispf4/index.html LISPF4] an Interlisp interpreter written originally in [[Fortran]] by [[Mats Nordstrom]] and ported to [[C (programming language)|C]] ([[Microsoft Windows|Windows]] and [[Linux]]) by [[Blake McBride]]. * [http://www.softwarepreservation.org/projects/LISP/interlisp Interlisp documentation at Computer History Museum]. [[Category:Dynamic programming languages]] [[Category:Functional languages]] [[Category:Lisp programming language family]] [[Category:Lisp-based operating systems]] [[ja:Interlisp]] [[pl:Interlisp]] [[fi:Interlisp]]</text> </page> <page> <id>18891</id> <title>Interlock protocol</title> <text>The '''interlock protocol''', as described by [[Ron Rivest]] and [[Adi Shamir]], was designed to frustrate eavesdropper attack against two parties that use an anonymous key exchange protocol to secure their conversation. A further paper proposed using it as an authentication protocol, which was subsequently broken. ==Brief history== Most cryptographic protocols rely on the prior establishment of secret or public keys or passwords. However, the [[Diffie-Hellman key exchange]] protocol introduced the concept of two parties establishing a secure channel (that is, with at least some desirable security properties) without any such prior agreement. Unauthenticated Diffie-Hellman, as an anonymous [[key agreement]] protocol, has long been known to be subject to [[man in the middle attack]]. However, the dream of a "zipless"{{clarify|date=May 2010}} mutually authenticated secure channel remained. The Interlock Protocol was described<ref>R. Rivest and A. Shamir. How to Expose an Eavesdropper. CACM, Vol. 27, April 1984, pp. 393-395. [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.159.1673&rep=rep1&type=pdf]</ref> as a method to expose a middle-man who might try to compromise two parties that use anonymous key agreement to secure their conversation. ==How it works== The Interlock protocol works roughly as follows: Alice encrypts her message with 