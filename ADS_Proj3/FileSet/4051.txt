: <math> value = (-1)^{sign}(1 + \sum_{i=1}^{23} \ b_{i}2^{-i} )\times 2^{(e-127)}</math> === Exponent encoding === The single precision binary floating-point exponent is encoded using an [[offset binary]] representation, with the zero offset being 127; also known as exponent bias in the IEEE 754 standard. * E<sub>min</sub> = 01<sub>H</sub>−7F<sub>H</sub> = −126 * E<sub>max</sub> = FE<sub>H</sub>−7F<sub>H</sub> = 127 * [[Exponent bias]] = 7F<sub>H</sub> = 127 Thus, in order to get the true exponent as defined by the offset binary representation, the offset of 127 has to be subtracted from the stored exponent. The stored exponents 00<sub>H</sub> and FF<sub>H</sub> are interpreted specially. {|class="wikitable" style="text-align:center" ! Exponent !! Significand zero !! Significand non-zero !! Equation |- | 00<sub>H</sub> || [[0 (number)|zero]], [[−0]] || [[subnormal numbers]] || (-1)<sup>signbits</sup>×2<sup>−126</sup>× 0.significandbits |- | 01<sub>H</sub>, ..., FE<sub>H</sub> ||colspan=2| normalized value || (-1)<sup>signbits</sup>×2<sup>exponentbits-127</sup>× 1.significandbits |- | FF<sub>H</sub> || ±[[infinity]] || [[NaN]] (quiet, signalling) |} The minimum positive (subnormal) value is 2<sup>−149</sup> ≈ 1.4 × 10<sup>−45</sup>. The minimum positive normal value is 2<sup>−126</sup> ≈ 1.18 × 10<sup>−38</sup>. The maximum representable value is (2−2<sup>−23</sup>) × 2<sup>127</sup> ≈ 3.4 × 10<sup>38</sup>. === Converting from decimal representation to binary32 format=== In general refer to the IEEE 754 standard itself for the strict conversion (including the rounding behaviour) of a real number into its equivalent binary32 format. Here we can show how to convert a base 10 real number into an IEEE 754 binary32 format using the following outline : * consider a real number with an integer and a fraction part such as 12.375 * convert the integer part into binary as shown in [[Binary numeral system]] * convert the fraction part using the following technique as shown here * add the two results and adjust them to produce a proper final conversion '''Conversion of the fractional part :''' consider 0.375, the fractional part of 12.375. To convert it into a binary fraction, multiply the fraction by 2, take the integer part and re-multiply new fraction by 2 until a fraction of zero is found or until the precision limit is reached which is 23 fraction digits for IEEE 754 binary32 format. 0.375 x 2 = 0.750 = 0 + 0.750 => b<sub><small>-1</sub></small> = 0 , the integer part represents the binary fraction digit. Re-multiply 0.750 by 2 to proceed 0.750 x 2 = 1.500 = 1 + 0.500 => b<sub><small>-2</sub></small> = 1 0.500 x 2 = 1.000 = 1 + 0.000 => b<sub><small>-3</sub></small> = 1 , fraction = 0.000, terminate We see that (0.375)<sub><small>10</sub></small> can be exactly represented in binary as (0.011)<sub><small>2</sub></small>. Not all decimal fractions can be represented in a finite digit binary fraction. For example decimal 0.1 cannot be represented in binary exactly. So it is only approximated. Therefore (12.375)<sub>10</sub> = (12)<sub>10</sub> + (0.375)<sub>10</sub> = (1100)<sub>2</sub> + (0.011)<sub>2</sub> = (1100.011)<sub>2</sub> Also IEEE 754 binary32 format requires that you represent real values in <math> (1.x_1x_2...x_{23})_2 \times 2^{e}</math> format, (see [[Normalized number]], [[Denormalized number]]) so that 1100.011 is shifted to the left by 3 digits to become <math> (1.100011)_2 \times 2^{3} </math> Finally we can see that : <math> (12.375)_{10} =(1.100011)_2 \times 2^{3} </math> From which we deduce : * The exponent is 3 (and in the biased form it is therefore 130 = 1000 0010 ) * The fraction is 100011 (looking to the right of the binary point) From these we can form the resulting 32 bit IEEE 754 binary32 format representation of 12.375 as: 0-10000010-10001100000000000000000 = 41460000<sub>H</sub> '''Note:''' consider converting 68.123 into IEEE 754 binary32 format: Using the above procedure you expect to get 42883EF9<sub>H</sub> with the last 4 bits being 1001 However due to the default rounding behaviour of IEEE 754 format what you get is 42883EFA<sub>H</sub> whose last 4 bits are 1010 . '''Ex:''' Consider decimal 1 We can see that : <math> (1)_{10} =(1.0)_2 \times 2^{0} </math> From which we deduce : * The exponent is 0 (and in the biased form it is therefore 127 = 0111 1111 ) * The fraction is 0 (looking to the right of the binary point in 1.0 is all 0 = 000...0) From these we can form the resulting 32 bit IEEE 754 binary32 format representation of real number 1 as: 0-01111111-00000000000000000000000 = 3f800000<sub>H</sub> '''Ex:''' Consider a value 0.25 . We can see that : <math> (0.25)_{10} =(1.0)_2 \times 2^{-2} </math> From which we deduce : * The exponent is -2 (and in the biased form it is 127+(-2)= 125 = 0111 1101 ) * The fraction is 0 (looking to the right of binary point in 1.0 is all zeros) From these we can form the resulting 32 bit IEEE 754 binary32 format representation of real number 0.25 as: 0-01111101-00000000000000000000000 = 3e800000<sub>H</sub> '''Ex:''' Consider a value of 0.375 . We saw that <math> 0.375 = {(1.1)_2}\times 2^{-2} </math> Hence after determining a representation of 0.375 as <math>{(1.1)_2}\times 2^{-2} </math> we can proceed as above : * The exponent is -2 (and in the biased form it is 127+(-2)= 125 = 0111 1101 ) * The fraction is 1 (looking to the right of binary point in 1.1 is a single 1 = x<sub>1</sub>) From these we can form the resulting 32 bit IEEE 754 binary32 format representation of real number 0.375 as: 0-01111101-10000000000000000000000 = 3ec00000<sub>H</sub> === Single precision examples === These examples are given in bit ''representation'', in [[hexadecimal]], of the floating point value. This includes the sign, (biased) exponent, and significand. 3f80 0000 = 1 c000 0000 = −2 7f7f ffff ≈ 3.4028234 × 10<sup>38</sup> (max single precision) 0000 0000 = 0 8000 0000 = −0 7f80 0000 = infinity ff80 0000 = -infinity 3eaa aaab ≈ 1/3 By default, 1/3 rounds up instead of down like [[double precision]], because of the even number of bits in the significand. So the bits beyond the rounding point are <code>1010...</code> which is more than 1/2 of a [[unit in the last place]]. === Converting from single precision binary to decimal === We start with the hexadecimal representation of the value, 41c80000, in this example, and convert it to 