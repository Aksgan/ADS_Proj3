title=Constraints on Variables in Syntax | author=Ross, John Robert | publisher=MIT PhD dissertation | year=1967}}</ref> but remained undiscussed until papers by [[Knut Tarald Taraldsen]] and [[Elisabet Engdahl]] explored the properties of parasitic gaps in great depth. This work was extended by [[Noam Chomsky]] in 1982,<ref>{{cite book | author= Chomsky, Noam |title=Some Concepts and Consequences of the Theory of Government and Binding. Linguistic Inquiry Monograph Six|year=1982|publisher=MIT Press}}</ref> arguing that parasitic gaps are actually silent pronouns, licensed under particular conditions predicted by the general theory of grammar. Aspects of this analysis were developed in the framework of [[Generalized Phrase Structure Grammar]] (GPSG) in the mid 1980s, and refined in the [[Head-driven Phrase Structure Grammar]] (HPSG), done by Carl Pollard and Ivan Sag. More recent research by Chomsky and his student Jonathan Nissenbaum<ref>{{cite book | author=Jonathan Nissenbaum | title=Investigations of Covert Phrase Movement | year=2000 | publisher=MIT PhD dissertation}}</ref> has refined this view, arguing (in effect) that the pronouns themselves undergo a syntactic rule not unlike the rule that moves phrases like ''which book'' to the front of a sentence. ==Example== An [[English language|English]] example is: : ''Which book did she review __ without reading __?'' The key feature here is that both ''review'' and ''reading'' have a "gap" where their objects should be (indicated above with underscores), and both gaps appear to function as variables bound by ''which book''; i.e. "Which book x did she review x without reading x?". The second gap is considered to be "parasitic" on the first, since it (unlike the first gap) cannot easily stand on its own, shown by the following example. : ''*Which book did she review ''War and Peace'' without reading __.'' This has the same structure as the first sentence but with a non-WH [[matrix clause|matrix]] object, which doesn't front. Parasitic gaps are typically found in structures that would otherwise be [[Wh-movement#Extraction_islands|islands]] to extraction, such as adjuncts as in the above example, or subjects, as in the following example (where the subject ''even supporters of __'' hosts the parasitic gap licensed by the true gap following ''dislike''). This example further shows that parasitic gaps need not follow their licensing gap. : ''Which candidate do even supporters of __ tend to dislike __?'' Parasitic gaps are an important topic of study in [[syntax]], especially in the framework of [[generative grammar]]. It has been argued by some linguists working in generative frameworks that speakers' intuitive knowledge of the construction can only be explained by an innate [[universal grammar]]. The question of how these sentences should be analysed is still very much open. ==References== <references /> [[Category:Generative linguistics]] [[Category:Syntactic transformation]] [[Category:Syntax]] [[nl:Parasitisch gat]]</text> </page> <page> <id>28484</id> <title>Parrot intermediate representation</title> <text>The '''Parrot intermediate representation''' ('''PIR'''), previously called Intermediate code (IMC), is one of the two [[assembly language]]s for the [[Parrot virtual machine]]. The other is [[Parrot assembly language]] or PASM. Compared to PASM, PIR exists at a slightly higher [[abstraction layer]], and provides temporary registers and named registers, simplifying code generation. While Parrot is still evolving, it is currently being used in many different capacities, and has undergone several releases. ==Overview== PIR provides a set of abstractions that allow the programmer to ignore certain redundancies in the Parrot [[bytecode]] and quickly write code that adheres to the complexities of Parrot, such as the calling conventions. ===Abstractions=== PIR provides both type abstraction and [[Type polymorphism|polymorphism]] to some degree. For example, the "<code>+</code>" operator can be used with <code>int</code>, <code>num</code> or both: .local int a .local num b a = 1 b = 1.1 .local num c c = a + b ===Calling conventions=== The calling conventions in Parrot are complex, but all of that complexity can be hidden by using PIR directives: .sub foo .param int a .param int b .local int tmp tmp = a + b .return (tmp) .end Each of the directives prefixed with a "<code>.</code>" expands to the required Parrot bytecode, but does not directly represent any fundamental Parrot operation. ==Example== The [[hello world program]] in PIR is <code><pre> .sub hello :main print "Hello world!\n" .end</pre></code> If the program is saved as ''hello.pir'', it can be [[Compiler|compiled]] and [[Execution (computing)|executed]] with this command: <code>parrot hello.pir</code> ==External links== * [http://docs.parrot.org/parrot/latest/html/docs/user/pir/intro.pod.html Writing PIR] * [http://www.parrot.org/dev/examples/pir PIR examples at parrot.org] [[Category:Assembly languages]] [[Category:Perl]]</text> </page> <page> <id>28485</id> <title>Parrot virtual machine</title> <text>{{primarysources|date=December 2010}} {{Infobox software | name = Parrot virtual machine | logo = [[Image:Parrot Foundation logo.png|Parrot Foundation logo]] | developer = [[Parrot Foundation]] | latest release version = 3.0.0<ref name="Release Note"/> | latest release date = {{release date|2011|01|18}}<ref name="Release Note" /> | operating system = [[Cross-platform]] | programming language = [[C (programming language)|C]] | genre = [[Virtual machine]] | license = [[Artistic License]] 2.0 | website = [http://www.parrot.org/ www.parrot.org] }} '''Parrot''' is a [[register machine|register-based]] [[Application virtual machine|process virtual machine]] designed to [[abstraction layer|run]] [[dynamic language]]s efficiently. It uses [[just-in-time compilation]] for speed to reduce the interpretation overhead. It is currently possible to compile [[Parrot assembly language]] and [[Parrot intermediate representation|PIR]] (an intermediate language) to Parrot [[bytecode]] and execute it. Parrot is an [[open source]] project<ref name="opensource">{{cite web|url=http://www.parrot.org/files/parrot_cla.pdf|title=Parrot Contributor License Agreement 1.0|format=PDF|publisher=Parrot Foundation|accessdate=2009-03-18}}</ref> distributed with a [[free software licence]], making Parrot [[free software]]. Parrot was started by the [[Perl]] community and is developed with help from the [[free software community|open source and free software communities]]. As a result, it is focused on [[license compatibility]] ([[Artistic License|Artistic License 2.0]]), platform compatibility across a broad array of systems, processor architecture compatibility across most modern processors, speed of execution, small size (around 700k depending on platform), and the flexibility to handle the varying demands of [[Perl 6]], and most, if not all, other modern [[dynamic language]]s. Other goals include improving [[introspection (computer science)|introspection]], [[debugger]] capabilities, and compile-time semantic modulation.{{clarify|date=October 2010}} Version 1.0, with a stable [[Application programming interface|API]] for development, was released on March 17, 2009.<ref name="version1">{{Cite web | url = https://trac.parrot.org/parrot/report/14 | title = Parrot Roadmap | publisher = Parrot Foundation | date = 2008-11-20 | accessdate = 2008-11-20 }}</ref> The current stable production release of Parrot is version 3.0.0, 