Hierarchy== The architecture of TurboDOS can be viewed as a three-level hierarchy. The highest level of the hierarchy is the process level. TurboDOS can support many concurrent processes at this level. The intermediate level of the hierarchy is the kernel level. The kernel supports the 93 C-functions and T-functions, and controls the sharing of computer resources such as processor time, memory, peripheral devices, and disk files. Processes make requests of the kernel through the entrypoint module OSNTRY, which decodes each C-function and T-function by number and invokes the appropriate kernel module. The C functions include the CP/M BDOS functions and selected MP/M functions. The lowest level of the hierarchy is the driver level, and contains all the device-dependent drivers necessary to interface TurboDOS to the particular hardware being used. Drivers must be provided for all peripherals, including console, printers, disks, communications channels, and network interface. Drivers are also required for the real-time clock (or other periodic interrupt source), and for bank-switched memory (if applicable). TurboDOS is designed to interface with almost any kind of peripheral hardware. It operates most efficiently with interrupt-driven, DMA-type interfaces, but can also work fine using polled and programmed-I/O devices. ==TurboDOS Loader== The TurboDOS loader OSLOAD.COM is a program containing an abbreviated version of the kernel and drivers. Its purpose is to load the full TurboDOS operating system from a disk file (OSSERVER.SYS) into memory at each system cold-start. ==System Generation== The functional modules are distributed in relocatable format (.REL) and the GEN command is a specialised linker which builds an executable version of the system. ==Commands== TurboDOS has no "resident" commands. All commands are executable files. The standard commands are:- {| |'''AUTOLOAD''' |Set up a series of commands to be executed automatically at each cold-start or warm-start. |- |'''BACKUP''' |Performs a fast copy of an entire disk onto another disk of the same type and format. |- |'''BANK''' |In a banked memory Z80 system, allows changing between bank-switched and non-bank-switched operation. |- |'''BATCH''' |Enters commands into a FIFO file for processing by a dedicated batch processor in a networked system. |- |'''BOOT''' |Copies data to and from reserved (boot) tracks on a disk. |- |'''BUFFERS''' |Interrogates or changes the number and/or size of the disk buffers maintained by TurboDOS |- |'''CHANGE''' |Checks disk is not in use and flushes cache prior to removing a disk. |- |'''COPY''' |File copy. |- |'''DATE''' |Display or set system date and time. |- |'''DELETE''' |File delete. |- |'''DIR''' |Display or print disk directory. |- |'''DO''' |Execute a batch file. |- |'''DRIVE''' |Display disk format information. |- |'''DUMP''' |Display or print hexadecimal and ASCII file dump. |- |'''ERASEDIR''' |Erase entire disk directory |- |'''FIFO''' |Create a FIFO file. |- |'''FIXDIR''' |Directory clean-up utility, also used to convert between linear and hashed directory structure, (and vice-versa). |- |'''FIXMAP''' |Regenerate disk allocation map. |- |'''FORMAT''' |Disk format. |- |'''LABEL''' |Set or interrogate disk label. |- |'''LOGOFF''' |Terminate console session. |- |'''LOGON''' |Start console session. |- |'''MASTER''' |Attach console to the "master" processor (server) in network system. |- |'''PRINT''' |Control routing of print output. |- |'''PRINTER''' |Control despooling on any selected printer. |- |'''QUEUE''' |Manually queue for de-pooled printing. |- |'''RECEIVE''' |Read and display one record from FIFO file. |- |'''RENAME''' |Rename files. |- |'''SEND''' |Write message to FIFO file. |- |'''SET''' |Set or clear file attributes. |- |'''SHOW''' |Display file attributes. |- |'''TYPE''' |Display file contents to console or printer. |- |'''VERIFY''' |Scan disk for bad blocks and (optionally) mark them to prevent their usage. |} ==External links== * [http://www.cpm8680.com/turbodos/index.htm The TurboDOS Museum] * [http://www.bitsavers.org/pdf/ims/turboDos/ TUG Newsletters] * [http://www.bitsavers.org/pdf/ims/turboDos/turboDos1.4_Z80impl_Jun84.pdf] Z80 Implementors Guide (pdf) {{Operating System}} [[Category:CP/M]] [[Category:Microcomputer software]] [[Category:Disk operating systems]] [[ru:Turbo-DOS]]</text> </page> <page> <id>38401</id> <title>Turbo code</title> <text>In [[information theory]], '''turbo codes''' (originally in French ''Turbocodes'') are a class of high-performance [[forward error correction]] (FEC) codes developed in 1993, which were the first practical codes to closely approach the [[Shannon–Hartley theorem|channel capacity]], a theoretical maximum for the [[code rate]] at which reliable communication is still possible given a specific noise level. Turbo codes are finding use in ([[deep space]]) [[satellite]] [[telecommunication|communications]] and other applications where designers seek to achieve reliable information transfer over bandwidth or latency constrained communication links in the presence of data-corrupting noise. Turbo codes are nowadays competing with [[LDPC code]]s, which provide similar performance. ==History== Prior to turbo codes, the best constructions were serial [[concatenated code]]s based on an outer [[Reed-Solomon error correction]] code combined with an inner [[Viterbi algorithm|Viterbi-decoded]] short constraint length [[convolutional code]], also known as RSV codes. In 1993, turbo codes were introduced by [[Claude Berrou|Berrou]], [[Alain Glavieux|Glavieux]], and [[Punya Thitimajshima|Thitimajshima]] (from Telecom-Bretagne, former [[École Nationale Supérieure des Télécommunications de Bretagne|ENST Bretagne]], France) in their paper: "''Near Shannon Limit Error-correcting Coding and Decoding: Turbo-codes''" published in the Proceedings of IEEE International Communications Conference.<ref>{{Citation|url=http://www-elec.enst-bretagne.fr/equipe/berrou/Near%20Shannon%20Limit%20Error.pdf|first=Claude|first2=Alain|first3=Punya|last=Berrou|last2=Glavieux|last3=Thitimajshima|title=Near Shannon Limit Error - Correcting|accessdate=11 February 2010}}</ref> In a later paper, Berrou gave credit to the "intuition" of "G. Battail, J. Hagenauer and P. Hoeher, who, in the late 80s, highlighted the interest of probabilistic processing.". He adds "[[Robert G. Gallager|R. Gallager]] and M. Tanner had already imagined coding and decoding techniques whose general principles are closely related," although the necessary calculations were impractical at that time.<ref>{{Citation|first=Claude|last=Berrou|title=The ten-year-old turbo codes are entering into service|location=Bretagne, France|accessdate=11 February 2010|url=http://www-elec.enst-bretagne.fr/equipe/berrou/com_mag_berrou.pdf}}</ref> Since the introduction of the original parallel turbo codes in 1993, many other classes of turbo code have been discovered, including serial versions and repeat-accumulate codes. Iterative Turbo decoding methods have also been applied to more conventional FEC systems, including Reed-Solomon corrected convolutional codes. ==An example encoder== There are many different instantiations of turbo codes, using different component encoders, input/output ratios, interleavers, and puncturing patterns. This example encoder implementation describes a 'classic' turbo encoder, and demonstrates the general design of parallel turbo codes. This encoder implementation sends three sub-blocks of bits. The first sub-block is the ''m''-bit block of payload data. The second sub-block is ''n/2'' parity bits for the payload data, computed using a recursive systematic [[convolutional code]] (RSC code). The third sub-block is ''n/2'' 