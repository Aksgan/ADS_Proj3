Kuhn's original publication. * Harold W. Kuhn, "Variants of the Hungarian method for assignment problems", ''Naval Research Logistics Quarterly'', '''3''': 253&ndash;258, 1956. * J. Munkres, "Algorithms for the Assignment and Transportation Problems", ''[[Journal of the Society for Industrial and Applied Mathematics]]'', '''5'''(1):32&ndash;38, 1957 March. * M. Fischetti, "Lezioni di Ricerca Operativa", Edizioni Libreria Progetto Padova, Italia, 1995. * R. Ahuja, T. Magnanti, J. Orlin, "Network Flows", Prentice Hall, 1993. ==References== {{Reflist}} ==External links== * Mordecai J. Golin, [http://www.cse.ust.hk/~golin/COMP572/Notes/Matching.pdf Bipartite Matching and the Hungarian Method], Course Notes, [[Hong Kong University of Science and Technology]]. * [[R. A. Pilgrim]], ''[http://csclab.murraystate.edu/bob.pilgrim/445/munkres.html Munkres' Assignment Algorithm. Modified for Rectangular Matrices]'', Course notes, [[Murray State University]]. ** Or: [http://www.public.iastate.edu/~ddoty/HungarianAlgorithm.html Step-by-step description of algorithm] * [[Mike Dawes]], ''[http://www.math.uwo.ca/~mdawes/courses/344/kuhn-munkres.pdf The Optimal Assignment Problem]'', Course notes, [[University of Western Ontario]]. * [http://www.cs.elte.hu/egres/tr/egres-04-14.pdf On Kuhn's Hungarian Method - A tribute from Hungary], [[András Frank]], Egervary Research Group, Pazmany P. setany 1/C, H1117, Budapest, Hungary. ===Implementations=== (Note that not all of these satisfy the <math>O(n^3)</math> time constraint.) * [http://www.enseignement.polytechnique.fr/informatique/INF441/INF441b/code/kuhnMunkres.py Python implementation] * [http://github.com/evansenter/gene/blob/f515fd73cb9d6a22b4d4b146d70b6c2ec6a5125b/objects/extensions/hungarian.rb Ruby implementation with unit tests] * [http://noldorin.com/blog/2009/09/hungarian-algorithm-in-csharp/ C# implementation] * [http://www.ifors.ms.unimelb.edu.au/tutorial/hungarian/welcome_frame.html Online interactive implementation] Please note that this implements a variant of the algorithm as described above. * [http://web.axelero.hu/szilardandras/gaps.html Graphical implementation with options] ([[Java applet]]) * [http://www.netlib.org/utk/lsi/pcwLSI/text/node220.html Serial and parallel implementations.] * [http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=6543 Implementation in Matlab and C] * [http://search.cpan.org/src/ANAGHAKK/Algorithm-Munkres-0.06/lib/Algorithm/Munkres.pm Perl implementation] * [http://www.koders.com/lisp/fid7C3730AF4E356C65F93F20A6410814CBF5F40854.aspx?s=iso+3166 Lisp implementation] * [http://saebyn.info/2007/05/22/munkres-code-v2/ C++ implementation] * [http://www.topcoder.com/tc?module=Static&d1=tutorials&d2=hungarianAlgorithm Another C++ implementation with unit tests] * [http://sites.google.com/site/garybaker/hungarian-algorithm/assignment Java implementation (GPLv3)] * [http://timefinder.svn.sourceforge.net/viewvc/timefinder/trunk/timefinder-algo/src/main/java/de/timefinder/algo/roomassignment/ Another Java implementation with JUnit tests (Apache 2.0)] * [http://www.mathworks.com/matlabcentral/fileexchange/11609 Matlab implementation] *[https://launchpad.net/lib-bipartite-match] {{Use dmy dates|date=September 2010}} {{DEFAULTSORT:Hungarian Algorithm}} [[Category:Matching]] [[Category:Combinatorial optimization]] [[de:Ungarische Methode]] [[es:Algoritmo Húngaro]] [[nl:Hongaars algoritme]] [[pl:Metoda węgierska]] [[ru:Венгерский алгоритм]] [[zh:匈牙利算法]]</text> </page> <page> <id>17112</id> <title>Huygens Software</title> <text>'''Huygens software''' refers to different [[multiplatform]] [[microscope image processing]] packages from Scientific Volume Imaging, made for restoring [[Cartesian coordinate system#Cartesian coordinates in two dimensions|2D]] and [[Three-dimensional space|3D]] [[microscopy]] images or [[time series]] and analyzing and visualizing them. The restoration is based on different [[deconvolution]] [[algorithm]]s, that permit the recovery of objects from images that are degraded by blurring and noise. In [[microscopy]] the blurring is largely due to [[diffraction]] limited imaging by the instrument; the [[Noise_(physics)|noise]] is usually [[photon noise]]. The [[scientific visualization]] of 3D volume data is based on the [[simulated fluorescence process algorithm]] (SFP), but [[isosurface]]s and [[maximum intensity projection]]s are also used for object analysis and [[colocalization]]. Huygens software is named after the Dutch physicist [[Christiaan Huygens]] who is perhaps best known for his argument that light behaves like waves. Since wave diffraction plays a key role in the Huygens Software, it was named after him. ==External links== *[http://www.svi.nl Scientific Volume Imaging home page] *[http://support.svi.nl/wiki SVI-wiki on 3D microscopy and deconvolution] {{software-stub}} [[Category:Image processing]]</text> </page> <page> <id>17116</id> <title>Hybricon SFF-4 Small Form Factor</title> <text>{{ infobox computer peripheral | name = Hybricon SFF-4 Small Form Factor | image = | caption = | introduced = October 19th, 2009 | discontinued = | cost = | processor = | frequency = | minimum = | maximum = | slot = Supports 4-slot OpenVPX, VPX REDI 1” pitch backplane | rom = | ports = | type = | color = | dpi = | speed = | language = | power = 200W military power supply for MIL-STD-704 aircraft and MIL-STD-1275 vehicle use | weight = | dimensions = Height: 7.62” Width: 6.00” Depth: 7.00” }} The '''Hybricon SFF-4 Small Form Factor''' is a baseplate conduction cooled [[chassis]]<ref>http://www.vmecritical.com/articles/id/?4264</ref> designed for rugged environments with airborne and ground mobile applications, extended temperature, as well as extended shock & vibration tolerance. It was developed by [[Hybricon Corporation]] and is the first ever chassis designed to comply to [[OpenVPX]], [[VPX]] and REDI draft specifications. At MILCOM 2009, Hybricon along with [[Curtiss-Wright]] Controls released the Hybricon SFF-4 Small Form Factor conduction-cooled chassis integrated with Curtiss-Wright Controls' small form factor 3U OpenVPX-compliant cards, including [[single-board computers]], expansion carrier cards and [[graphics controller]] OpenVPX-compliant boards in the first display of a live OpenVPX system. The SFF-4 is designed in a supporting role for input/output for airborne and ground vehicle control applications, supporting [[I/O]] for [[Ethernet]], [[Serial communication|serial]], [[video]], [[MIL-STD-1553|1553]] or [[Canbus]].<ref>http://www.mil-embedded.com/news/Technology+Partnerships/19459</ref> The SFF-4 also can be customized to different I/O complements can be supported with a different backplane. The SFF-4 chassis is designed specifically for use for rugged environment in MIL-STD-704F aircraft and MIL-STD-1275B vehicles for airborne and ground mobile applications.<ref>http://www.defensesystems.com/Articles/2009/10/20/Open-VPX-demonstration.aspx</ref> ==See also== [[OpenVPX]] ==References== {{reflist}} ==External links== *[http://hybricon.com Hybricon Corporation] [[Category:Vehicle technology]] [[Category:Computer enclosure]]</text> </page> <page> <id>17139</id> <title>Hybrid theory for photon transport in tissue</title> <text>{{Orphan|date=February 2009}} {{Context|date=October 2009}} '''Hybrid Theory''' for photon transport in tissue uses the advantages and eliminates the deficiencies of both the '''Monte Carlo''' method and the '''Diffusion Theory''' for photon transport to model photons traveling through tissue both accurately and efficiently. ==MCML (Monte Carlo Modeling of Light Transportation in Multi-Layered Medium)== The [[Monte Carlo method for photon transport|MCML]] is a numerical way to simulate photon transport in biological tissue. Each photon packet follows a random walk with persistence, where the direction of each step dependent on the direction of the previous step. By averaging multiple independent random walks, MCML estimates the ensemble-averaged quantities such as reflectance, transmittance, absorption, and fluence. Briefly, a packet of photon is first launched into the biological tissue. The parameters of photon transport, including the step size and deflection angle due to scattering, are determined by random sampling from probability distributions. A fraction of weight, determined by the scattering and absorption coefficients is deposited at the interaction site. The photon packet continues propagating until the weight left is smaller than a certain threshold. If this packet of photon hits the boundary during the propagation, it is either reflected or transmitted, determined by a pseudorandom number. Statistically sufficient numbers of photon packets must be simulated to obtain the expected values accurately.<ref name = Wang_BioMedBooK>{{cite book |author=LV Wang and HI Wu |title=Biomedical Optics|publisher=Wiley |year=2007|isbn=9780471743040}}</ref> '''Advantages and Disadvantages''' This [[Monte Carlo method]] is rigorous and flexible. However, because of its statistical nature, this method requires tracking 