in [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.85.2610&rep=rep1&type=pdf ''Higher-Order and Symbolic Computation''], 11, pp. 125–143 (1998) {{FOLDOC}} [[Category:Computer jargon]] [[Category:Source code]] [[Category:Articles with example C code]] [[de:Syntaktischer Zucker]] [[es:Azúcar sintáctica]] [[fr:Sucre syntaxique]] [[io:Sintaxala sukro]] [[it:Zucchero sintattico]] [[nl:Syntactische suiker]] [[ja:糖衣構文]] [[pl:Lukier składniowy]] [[ru:Синтаксический сахар]] [[sv:Syntaktiskt socker]] [[tr:Sözdizimsel şeker]] [[zh:语法糖]]</text> </page> <page> <id>36419</id> <title>Syntactic web</title> <text>'''Syntactic Web''' is a phrase meant to describe the current, mostly [[HTML]]-based [[World Wide Web]], in order to distinguish it from the [[Semantic Web]], a concept in which web pages carry information that can be read and understood by machines in a systematic way. The term stems from the contrast between [[syntax]], which is the mechanics of a language used to convey information, and [[semantics]], which is the actual meaning of that information. On a syntactic web page, which is any document on the web that does not contain special tagging to convey meaning, meaning is difficult to parse by a [[computer program]]. An example is a site that gives the weather for any city in the world, in HTML form. Even though the site offers dynamic, database-driven information, it is presented in a purely syntactic way. One could imagine a computer program that tried to retrieve this weather information through text parsing or "[[web scraping]]". Though it would be possible to do, if the creators of the site ever decide to change around the layout or HTML of the site, the computer program would most likely need to be rewritten in some way. In contrast, if the weather site published its data semantically, the program could retrieve that semantic data, and the site's creators could change the [[look and feel]] of the site without affecting that retrieval ability. ==See also== * [[Pragmatic web]] ==External links== * [http://www.ecs.soton.ac.uk/~harnad/Hypermail/Syntactic.Web/ Syntactic Web Discussion List Archive] [[Category:Semantic Web]]</text> </page> <page> <id>36427</id> <title>Synth Look and Feel</title> <text>{{dablink|This article is about the Java Look and Feel. For other uses see [[Synth (disambiguation)]].}} '''synth''' is a [[skinnable]] [[Java (programming language)|Java]] [[Look and feel#Look and Feel in Widget Toolkits|look and feel]], which is configured with an [[XML]] property file. According to Sun, goals for synth were: * Enable to create custom look without writing any code. * Allow appearance to be configured from images. * Provide the ability to customize the look of a component based on its named properties. * Provide a centralized point for overriding the look of all components. * Enable custom rendering based on images, or user-defined {{Javadoc:SE|javax/swing/plaf/synth|SynthPainter}}s. == History== synth is available beginning with version '''J2SE 5.0''' of Java (see [[Java version history]]). [[Java version history#Java SE 6 Update 10|Java SE 6 Update 10]] release and newer contain ''Nimbus'', a cross-platform Look and Feel implemented with Synth. However, for backwards compatibility, Metal is still the default Swing look and feel.<ref>{{cite web | url=http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/nimbus.html | title=Nimbus Look and Feel (The Java&trade; Tutorials > Creating a GUI With JFC/Swing > Modifying the Look and Feel) | publisher=Sun Microsystems | accessdate=2010-07-01}}</ref> ==Architecture== Synth is a skinnable look and feel in which all painting is delegated to the components, without having to write any code (see {{Javadoc:SE|package=Synth Look and Feel|javax/swing/plaf/synth}}). However synth does not provide a default look, and components that are not defined in the synth [[XML]] file will not be painted. It is however possible to assign a default style to all other widgets, and customize styles for some specific widgets only. ==Example== The following XML declaration defines a style named textfield and binds it to all text fields. The ''defaultStyle'' allows to set a default font, foreground and background colors to all other widgets. <source lang="xml"> <synth> <style id="defaultStyle"> <font name="Verdana" size="16"/> <state> <color value="WHITE" type="BACKGROUND"/> <color value="BLACK" type="FOREGROUND"/> </state> </style> <bind style="defaultStyle" type="region" key=".*"/> <style id="textfield"> <state> <color value="yellow" type="BACKGROUND"/> </state> <imagePainter method="textFieldBorder" path="textfieldborder.png" sourceInsets="5 6 6 7" paintCenter="false"/> <insets top="5" left="6" bottom="6" right="7"/> </style> <bind style="textfield" type="region" key="TextField"/> </synth> </source> Supposing that the XML declaration is defined in a file named ''synthExample.xml'', the following code loads the XML definition file and sets the current look and feel to synth (loading a synth Look and Feel is done using the ''load'' method of the {{Javadoc:SE|javax/swing/plaf/synth|SynthLookAndFeel}} class): <source lang="java"> SynthLookAndFeel laf = new SynthLookAndFeel(); laf.load(new File("synthExample.xml").toURL()); UIManager.setLookAndFeel(laf); </source> ==See also== * [[Swing (Java)|Swing]], the standard cross-platform [[widget toolkit]] for Java * [[Pluggable look and feel]] * [[Look and feel#In widget toolkits|Look and Feel in Widget Toolkits]] ==References== {{reflist|2}} ==External links== * {{Javadoc:SE|package=Synth Look and Feel|javax/swing/plaf/synth}} API documentation * [http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/plaf/synth/doc-files/synthFileFormat.html synth file format] * [http://javadesktop.org/articles/synth/ synth tutorial] * [http://www.ibm.com/developerworks/java/library/j-synth/ another synth tutorial] * [https://nimbus.dev.java.net/ nimbus home page] * [http://www.javasoft.de/jsf/public/products/synthetica Synthetica - commercial Synth Look and Feel with many different themes] * [http://www.easynth.com/products/EaSynthLookAndFeelDesigner.html EaSynth Look And Feel Designer - commercial IDE for Synth based look and feel] [[Category:Java platform]] [[Category:Java programming language]] [[Category:Java libraries]] [[Category:Java APIs]] [[Category:Widget toolkits]] {{compu-library-stub}}</text> </page> <page> <id>36432</id> <title>Synthetic file system</title> <text>In [[computer science]], a '''synthetic file system''' is a hierarchical interface to non-file objects that appear as if they were regular files in the tree of the disk-based [[filesystem]]. These non-file objects may be accessed with the same [[system call]]s or [[utility program]]s as regular files and [[directory (computing)|directories]]. The common term for both regular files and the non-file objects is ''node''. The benefit of synthetic file systems is that well known file system semantics can be reused for a universal and easily implementable approach to [[interprocess communication]]. Clients can use such a file system to perform simple file operations on its nodes, and do not have to implement complex [[message passing|message encoding and passing]] methods and other aspects of protocol engineering. For most operations, common file utilities can be used, so even [[scripting]] is quite easy. ==Examples== ===/proc filesystem=== In the [[Unix]]-world, there is commonly a special filesystem [[mount (computing)|mount]]ed at [[/proc]]. This filesystem is implemented within the [[kernel (computing)|kernel]] and publishes information about [[process (computing)|process]]es. For each process, there is a directory (named by the [[process ID]]), containing detailed information about the process: [[process status|status]], open files, [[memory-mapped file|memory maps]], mounts, etc. /proc first appeared in [http://man.cat-v.org/unix_8th/4/proc Unix 8th Edition], and 