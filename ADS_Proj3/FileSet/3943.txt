=== {{Ref improve section|date=June 2010}} In 1999, developers wanting a free software version to be available went back to the older 1.2.12 release of the original SSH program, which was the last released under an [[open source]] license. [[Björn Grönvall]]'s [[OSSH]] was subsequently developed from this codebase. Shortly thereafter, [[OpenBSD]] developers [[fork (software development)|fork]]ed Grönvall's code and did extensive work on it, creating [[OpenSSH]], which shipped with the 2.6 release of OpenBSD. From this version, a "portability" branch was formed to port OpenSSH to other operating systems. {{As of|2005}}, OpenSSH was the single most popular SSH implementation, coming by default in a large number of operating systems. OSSH meanwhile has become obsolete.<ref>[https://www.kb.cert.org/vuls/id/MIMG-6L4LBL OSSH Information for VU#419241<!-- Bot generated title -->]</ref> OpenSSH continued to be maintained and now supports both 1.x and 2.0 versions. === Version 2.x === "Secsh" was the official [[Internet Engineering Task Force|Internet Engineering Task Force's]] (IETF) name for the IETF working group responsible for version 2 of the SSH protocol.<ref> [http://www.vandyke.com/technology/drafts.html Secsh Protocol Documents], VanDyke Software, Inc.</ref> In 2006, a revised version of the protocol, '''SSH-2''', was adopted as a standard. This version is incompatible with SSH-1. SSH-2 features both security and feature improvements over SSH-1. Better security, for example, comes through [[Diffie-Hellman key exchange]] and strong [[integrity]] checking via [[message authentication code]]s. New features of SSH-2 include the ability to run any number of [[Shell (computing)|shell]] sessions over a single SSH connection.<ref>[http://www.snailbook.com/faq/ssh-1-vs-2.auto.html SSH Frequently Asked Questions]</ref> ==== Vulnerabilities ==== In November 2008, a vulnerability was discovered for all versions of SSH, which allowed recovery of up to 32 bits of plaintext from a block of ciphertext that was encrypted using what was then the standard default encryption mode, [[Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29|CBC]].<ref>[http://www.kb.cert.org/vuls/id/958563 SSH CBC vulnerability], US-CERT</ref><ref>[http://www.cpni.gov.uk/docs/vulnerability_advisory_ssh.txt Plaintext Recovery Attack Against SSH]</ref> == Internet standard == The following [[Request for Comments|RFC]] publications by the [[IETF]] "secsh" [[working group]] document SSH-2 as a proposed [[Internet standard]]. * RFC 4250, The Secure Shell (SSH) Protocol Assigned Numbers * RFC 4251, The Secure Shell (SSH) Protocol Architecture * RFC 4252, The Secure Shell (SSH) Authentication Protocol * RFC 4253, The Secure Shell (SSH) Transport Layer Protocol * RFC 4254, The Secure Shell (SSH) Connection Protocol * RFC 4255, Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints * RFC 4256, Generic Message Exchange Authentication for the Secure Shell Protocol (SSH) * RFC 4335, The Secure Shell (SSH) Session Channel Break Extension * RFC 4344, The Secure Shell (SSH) Transport Layer Encryption Modes * RFC 4345, Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol It was later modified and expanded by the following publications. * RFC 4419, Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol (March 2006) * RFC 4432, RSA Key Exchange for the Secure Shell (SSH) Transport Layer Protocol (March 2006) * RFC 4462, Generic Security Service Application Program Interface (GSS-API) Authentication and Key Exchange for the Secure Shell (SSH) Protocol (May 2006) * RFC 4716, The Secure Shell (SSH) Public Key File Format (November 2006) * RFC 5656, Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer (December 2009) ==Uses== [[Image:X11 ssh tunnelling.png|right|250px|thumb|Example of tunneling an X11 application over SSH: the user 'josh' has SSHed from the local machine 'foofighter' to the remote machine 'tengwar' to run [[xeyes]].]] [[Image:OpenWrtPuTTY.png|right|250px|thumb|Logging into [[OpenWrt]] via SSH using [[PuTTY]] running on [[Microsoft Windows|Windows]].]] SSH is a protocol that can be used for many applications across many platforms including [[Unix]], [[Microsoft Windows]], [[Apple Inc|Apple's]] [[Mac OS X]], and [[Linux]]. Some of the applications below may require features that are only available or compatible with specific SSH clients or servers. For example, using the SSH protocol to implement a [[VPN]] is possible, but presently only with the [[OpenSSH]] server and client implementation. * For login to a shell on a remote host (replacing [[Telnet]] and [[rlogin]]) * For executing a single command on a remote host (replacing [[Remote shell|rsh]]) * Secure file transfer * In combination with [[rsync]] to back up, copy and mirror files efficiently and securely * For [[Port forwarding|forwarding]] or [[Tunneling protocol|tunneling]] a port (not to be confused with a VPN which [[VPN#Routing|routes]] packets between different networks or [[VPN#OSI Layer 1 services|bridges]] two [[broadcast domain]]s into one). * For using as a full-fledged encrypted VPN. Note that only [[OpenSSH]] server and client supports this feature. * For forwarding [[X Window System|X]] from a remote [[Host (network)|host]] (possible through multiple intermediate hosts) * For browsing the web through an encrypted proxy connection with SSH clients that support the [[SOCKS|SOCKS protocol]]. * For securely mounting a directory on a remote server as a [[File system|filesystem]] on a local computer using [[SSHFS]]. * For automated remote monitoring and management of servers through one or more of the mechanisms as discussed above. === File transfer protocols using SSH === There are multiple mechanisms for transferring files using the Secure Shell protocols. * [[Secure copy]] (SCP), which evolved from [[rcp (Unix)|RCP]] protocol over SSH * [[SSH file transfer protocol|SSH File Transfer Protocol]] (SFTP), a secure alternative to [[File Transfer Protocol|FTP]] (not to be confused with [[File_Transfer_Protocol#FTP_over_SSH_.28not_SFTP.29|FTP over SSH]]) * [[Files transferred over shell protocol]] (A.K.A. FISH), released in 1998, which evolved from [[Unix shell]] commands over SSH IETF Standards have not been developed for these protocols. A series of IETF drafts have been created for SFTP but as of 2006 they have become stalled due to controversy that SFTP is actually a [[file system]].<ref> [ftp://ftp.ietf.org/ietf-mail-archive/secsh/2006-08.mail FTP.ietf.org]</ref> ==Architecture== [[Image:Ssh binary packet alt.svg|right|250px|thumb|Diagram of the SSH-2 binary packet.]] The SSH-2 protocol has an internal architecture (defined in RFC 4251) with well-separated layers. These are: * The ''transport'' layer (RFC 4253). This layer handles initial key exchange, as well as server authentication and sets up encryption, compression and integrity verification. It exposes the upper layer an interface for sending and receiving plaintext packets with sizes of up to 32,768 bytes each (more can be allowed by the implementation). The transport layer also arranges for key re-exchange, usually after 1 GB of data has been 