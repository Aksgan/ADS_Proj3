’06: Proceedings of the Sixth IEEE International Symposium on Cluster Computing and the Grid, pages 301–304, Washington, DC, USA, 2006. IEEE Computer Society.</ref> is a Java based skeleton framework providing skeletons such as farm, pipe and heartbeat. Skeletons are specialized using inheritance. Programmers implement the abstract methods for each skeleton to provide their application specific code. Skeletons in JaSkel are provided in both sequential, concurrent and dynamic versions. For example, the concurrent farm can be used in shared memory environments (threads), but not in distributed environments (clusters) where the distributed farm should be used. To change from one version to the other, programmers must change their classes’ signature to inherit from a different skeleton. The nesting of skeletons uses the basic Java Object class, and therefore no type system is enforced during the skeleton composition. The distribution aspects of the computation are handled in '''JaSkel''' using AOP, more specifically the AspectJ implementation. Thus, '''JaSkel''' can be deployed on both cluster and Grid like infrastructures <ref>''J. Sobral and A. Proenca.'' "Enabling jaskel skeletons for clusters and computational grids." In IEEE Cluster. IEEE Press, 9 2007.</ref>. Nevertheless, a drawback of the '''JaSkel''' approach is that the nesting of the skeleton strictly relates to the deployment infrastructure. Thus, a double nesting of farm yields a better performance than a single farm on hierarchical infrastructures. This defeats the purpose of using AOP to separate the distribution and functional concerns of the skeleton program. ===Lithium & Muskel=== '''Lithium''' <ref>''M. Aldinucci and M. Danelutto.'' "Stream parallel skeleton optimization." In Proc. of PDCS: Intl. Conference on Parallel and Distributed Computing and Systems, pages 955–962, Cambridge, Massachusetts, USA, Nov. 1999. IASTED, ACTA press.</ref><ref>{{cite doi|10.1016/S0167-739X(02)00172-3}}</ref><ref>''M. Danelutto and P. Teti.'' "Lithium: A structured parallel programming environment in Java." In Proc. of ICCS: International Conference on Computational Science, volume 2330 of LNCS, pages 844–853. Springer Verlag, Apr. 2002.</ref> and its successor '''Muskel''' are skeleton frameworks developed at University of Pisa, Italy. Both of them provide nestable skeletons to the programmer as Java libraries.The evaluation of a skeleton application follows a formal definition of operational semantics introduced by Aldinucci and Danelutto <ref>''M. Aldinucci and M. Danelutto.'' "An operational semantics for skeletons." In G. R. Joubert, W. E. Nagel, F. J. Peters, and W. V. Walter, editors, Parallel Computing: Software Technology, Algorithms, Architectures and Applications, PARCO 2003, volume 13 of Advances in Parallel Computing, pages 63–70, Dresden, Germany, 2004. Elsevier.</ref><ref>{{cite doi|10.1016/j.cl.2006.07.004}}</ref>, which can handle both task and data parallelism. The semantics describe both functional and parallel behavior of the skeleton language using a labeled transition system. Additionally, several performance optimization are applied such as: skeleton rewriting techniques [18, 10], task lookahead, and server-to-server lazy binding<ref>''M. Aldinucci, M. Danelutto, and J. D&uuml;nnweber.'' "Optimization techniques for implementing parallel skeletons in grid environments." In S. Gorlatch, editor, Proc. of CMPP: Intl. Workshop on Constructive Methods for Parallel Programming, pages 35–47, Stirling, Scotland, UK, July 2004. Universit ̈t Munster, Germany.</ref>. At the implementation level, Lithium exploits macro-data flow <ref>''M. Danelutto''. Efficient support for skeletons on workstation clusters. Parallel Processing Letters, 11(1):41–56, 2001.</ref><ref>M. Danelutto. "Dynamic run time support for skeletons." Technical report, 1999.</ref> to achieve parallelism. When the input stream receives a new parameter, the skeleton program is processed to obtain a macro-data flow graph. The nodes of the graph are macro-data flow instructions (MDFi) which represent the sequential pieces of code provided by the programmer. Tasks are used to group together several MDFi, and are consumed by idle processing elements from a task pool. When the computation of the graph is concluded, the result is placed into the output stream and thus delivered back to the user. '''Muskel''' also provides non-functional features such as Quality of Service (QoS)<ref>''M. Danelutto.'' "Qos in parallel programming through application managers." In PDP ’05: Proceedings of the 13th Euromicro Conference on Parallel, Distributed and Network-Based Processing (PDP’05), pages 282–289, Washington, DC, USA, 2005. IEEE Computer Society.</ref>; security between task pool and interpreters <ref>''M. Aldinucci and M. Danelutto.'' "The cost of security in skeletal systems." In P. D’Ambra and M. R. Guarracino, editors, Proc. of Intl. Euromicro PDP 2007: Parallel Distributed and network-based Processing, pages 213–220, Napoli, Italia, February 2007. IEEE.</ref><ref>''M. Aldinucci and M. Danelutto.'' "Securing skeletal systems with limited performance penalty: the muskel experience." Journal of Systems Architecture, 2008.</ref>; and resource discovery, load balancing, and fault tolerance when interfaced with Java / Jini Parallel Framework (JJPF) <ref>''M. Danelutto and P. Dazzi.'' "A Java/Jini framework supporting stream parallel computations." In Proc. of Intl. PARCO 2005: Parallel Computing, Sept. 2005.</ref>, a distributed execution framework. '''Muskel''' also provides support for combining structured with unstructured programming <ref>''M. Danelutto and P. Dazzi.'' "Joint structured/non structured parallelism exploitation through data flow." In V. Alexandrov, D. van Albada, P. Sloot, and J. Dongarra, editors, Proc. of ICCS: International Conference on Computational Science, Workshop on Practical Aspects of High-level Parallel Programming, LNCS, Reading, UK, May 2006. Springer Verlag.</ref> and recent research has addressed extensibility <ref>''M. Aldinucci, M. Danelutto, and P. Dazzi.'' "Muskel: an expandable skeleton environment." Scalable Computing: Practice and Experience, 8(4):325–341, December 2007.</ref>. ===Mallba=== '''Mallba''' <ref>''E. Alba, F. Almeida, M. J. Blesa, J. Cabeza, C. Cotta, M. Diaz, I. Dorta, J. Gabarro, C. Leon, J. Luna, L. M. Moreno, C. Pablos, J. Petit, A. Rojas, and F. Xhafa.'' "Mallba: A library of skeletons for combinatorial optimisation (research note)." In Euro-Par ’02: Proceedings of the 8th International Euro-Par Conference on Parallel Processing, pages 927–932, London, UK, 2002. Springer-Verlag.</ref> is a library for combinatorial optimizations supporting exact, heuristic and hybrid search strategies<ref>E. Alba, F. Almeida, M. Blesa, C. Cotta, M. Diaz, I. Dorta, J. Gabarro, C. Leon, G. Luque, J. Petit, C. Rodriguez, A. Rojas, and F. Xhafa. Efficient parallel lan/wan algorithms for optimization: the mallba project. Parallel Computing, 32(5):415–440, 2006.</ref>. Each strategy is implemented in Mallba as a generic skeleton which can be used by prodiving the required code. On the exact search algorithms Mallba provides branch-and-bound and dynamic-optimization skeletons. For local search heuristics Mallba supports: hill climbing, metropolis, simulated annealing, and tabu search; and also population based heuristics derived 