<text>{{Unreferenced|date=December 2009}} {{FeatureDetectionCompVisNavbox}} '''Interest point detection''' is a recent terminology in [[computer vision]] that refers to the detection of interest points for subsequent processing. An interest point is a point in the image which in general can be characterized as follows: * it has a clear, preferably mathematically well-founded, definition, * it has a well-defined ''position'' in image space, * the local image structure around the interest point is rich in terms of local ''information contents'', such that the use of interest points simplify further processing in the vision system, * it is ''stable'' under local and global perturbations in the image domain, including deformations as those arising from perspective transformations (sometimes reduced to affine transformations, scale changes, rotations and/or translations) as well as illumination/brightness variations, such that the interest points can be reliably computed with high degree of ''reproducibility''. * Optionally, the notion of interest point should include an attribute of ''scale'', to make it possible to compute interest points from real-life images as well as under scale changes. Historically, the notion of interest points goes back to the earlier notion of [[corner detection]], where corner features were in early work detected with the primary goal of obtaining robust, stable and well-defined image features for object tracking and recognition of three-dimensional CAD-like objects from two-dimensional images. In practice, however, most corner detectors are sensitive not specifically to corners, but to local image regions which have a high degree of variation in all directions. The use of interest points also goes back to the notion of regions of interest, which have been used to signal the presence of objects, often formulated in terms of the output of a [[blob detection]] step. While blob detectors have not always been included within the class of interest point operators, there is no rigorous reason for excluding blob descriptors from this class. For the most common types of blob detectors (see the article on [[blob detection]]), each blob descriptor has a well-defined point, which may correspond to a local maximum, a local maximum in the operator response or a centre of gravity of a non-infinitesimal region. In all other respects, the blob descriptors also satisfy the criteria of an interest point defined above. It is true that a number of blob descriptors contain complementary information. But these additional attribute should not disqualify blob descriptors from being included within the class of interest points. ==Applications== In terms of applications, the use of [[corner detection]] and [[blob detection]] are also overlapping. Today, a main application of interest points is to signal points/regions in the image domain that are likely candidates to be useful for ''image matching'' and ''view-based object recognition''. For this purpose, several types of corner detectors and blob detectors have been demonstrated to be highly useful in practical applications (please, see the respective articles for references). Blob detectors and corner detectors have also been used as primitives for texture recognition, texture analysis and for constructing object models from multiple views of textured objects. If one aims at drawing a distinction between corner detectors and blob detectors, this can often be done in terms of their localization properties at corner structures. For a junction structure in the image domain that corresponds to an intersection of physical edges in the three-dimensional world, the localization properties of a corner detector will in most cases be much better than the localization properties that would be obtained from a blob detector. Hence, for the purpose of computing structure and motion from multiple views, corner detectors will in many cases have advantages compared to blob detectors in terms of smaller localization error. Notwithstanding this, blob descriptors have also been demonstrated to be useful when relating object models to temporal imagery. In terms of concepts, there is also a close relationship between the notion of interest points and [[ridge detection|ridge detectors]], which are often used to signal the presence of ''elongated objects''. Moreover, with regard to features that extend along one-dimensional curves in image space, there is the related notion of [[edge detection|edge detectors]] which satisfy similar requirements in terms of operational definitions, well-defined extent, locally high information contents and repeatability. ==See also== *[[corner detection]] *[[blob detection]] *[[ridge detection]] *[[edge detection]] *[[feature detection (computer vision)]] {{DEFAULTSORT:Interest Point Detection}} [[Category:Computer vision]] [[Category:Image processing]] [[de:Interest-Operator]] [[fr:détection de points d'intérêt]]</text> </page> <page> <id>18867</id> <title>Interface description language</title> <text>{{Distinguish|IDL (programming language)}} An '''interface description language''' (or alternately, '''interface definition language'''), or '''IDL''' for short, is a [[specification language]] used to describe a [[software component]]'s [[Interface (computer science)|interface]]. IDLs describe an interface in a language-neutral way, enabling communication between [[software components]] that do not share a language &ndash; for example, between components written in [[C++]] and components written in [[Java (programming language)|Java]]. IDLs are commonly used in [[remote procedure call]] software. In these cases the machines at either end of the "link" may be using different [[operating system]]s and computer languages. IDLs offer a bridge between the two different systems. Software systems based on IDLs include [[Sun Microsystems|Sun]]'s [[ONC RPC]], [[The Open Group]]'s [[Distributed Computing Environment]], [[IBM]]'s [[System Object Model]], the [[Object Management Group]]'s [[CORBA]] (which implements OMG IDL, an IDL based on DCE/RPC), [[Facebook]]'s [[Thrift (protocol)|Thrift]] and [[Web Services Description Language|WSDL]] for [[Web service]]s. ==Interface description languages== * [[Avro_(serialization_system) | Avro IDL]] - An IDL for the Apache Avro system. * [[Etch (protocol)]] - Cisco's Etch Cross-platform Service Description Language * [[IDL specification language]], the original Interface Description Language. * [[OMG IDL]] - an IDL standardized by [[Object Management Group]] and implemented in [[CORBA]] for DCE/RPC services, also selected by the W3C for exposing the DOM of XML, HTML, and CSS documents. * [[Microsoft Interface Definition Language]] - the Microsoft extension of OMG IDL to add support for DCOM * [[Open Service Interface Definitions]] * [[Protocol Buffers]] - [[Google]]'s IDL * [[Internet_Communications_Engine#Slice|Slice]] - The Specification Language for [[Internet_Communications_Engine|ICE]]. * [[SWIG]] - Simplified Wrapper and Interface Generator * [[Universal Network Objects]], [[OpenOffice.org]]'s component model * [[Web_Services_Description_Language|WSDL]], the Web Services Description Language. * [[XPIDL]] - Mozilla's Cross-Platform IDL 