value &rarr; || store int ''value'' into variable 0 |- | istore_1 || align="center" | 3c || || value &rarr; || store int ''value'' into variable 1 |- | istore_2 || align="center" | 3d || || value &rarr; || store int ''value'' into variable 2 |- | istore_3 || align="center" | 3e || || value &rarr; || store int ''value'' into variable 3 |- | isub || align="center" | 64 || || value1, value2 &rarr; result || int subtract |- | iushr || align="center" | 7c || || value1, value2 &rarr; result || int logical shift right |- | ixor || align="center" | 82 || || value1, value2 &rarr; result || int xor |- ! colspan="5" | J |- | jsr || align="center" | a8 || branchbyte1, branchbyte2 || &rarr; address || jump to subroutine at ''branchoffset'' (signed short constructed from unsigned bytes ''branchbyte1 << 8 + branchbyte2'') and place the return address on the stack |- | jsr_w || align="center" | c9 || branchbyte1, branchbyte2, branchbyte3, branchbyte4 || &rarr; address || jump to subroutine at ''branchoffset'' (signed int constructed from unsigned bytes ''branchbyte1 << 24 + branchbyte2 << 16 + branchbyte3 << 8 + branchbyte4'') and place the return address on the stack |- ! colspan="5" | L |- | l2d || align="center" | 8a || || value &rarr; result || converts a long to a double |- | l2f || align="center" | 89 || || value &rarr; result || converts a long to a float |- | l2i || align="center" | 88 || || value &rarr; result || converts a long to a int |- | ladd || align="center" | 61 || || value1, value2 &rarr; result || add two longs |- | laload || align="center" | 2f || || arrayref, index &rarr; value || load a long from an array |- | land || align="center" | 7f || || value1, value2 &rarr; result || bitwise and of two longs |- | lastore || align="center" | 50 || || arrayref, index, value &rarr; || store a long to an array |- | lcmp || align="center" | 94 || || value1, value2 &rarr; result || compares two longs values |- | lconst_0 || align="center" | 09 || || &rarr; 0L || pushes the long 0 onto the stack |- | lconst_1 || align="center" | 0a || || &rarr; 1L || pushes the long 1 onto the stack |- | ldc || align="center" | 12 || index || &rarr; value || pushes a constant ''#index'' from a constant pool (String, int or float) onto the stack |- | ldc_w || align="center" | 13 || indexbyte1, indexbyte2 || &rarr; value || pushes a constant ''#index'' from a constant pool (String, int or float) onto the stack (wide ''index'' is constructed as ''indexbyte1 << 8 + indexbyte2'') |- | ldc2_w || align="center" | 14 || indexbyte1, indexbyte2 || &rarr; value || pushes a constant ''#index'' from a constant pool (double or long) onto the stack (wide ''index'' is constructed as ''indexbyte1 << 8 + indexbyte2'') |- | ldiv || align="center" | 6d || || value1, value2 &rarr; result || divide two longs |- | lload || align="center" | 16 || index || &rarr; value || load a long value from a local variable ''#index'' |- | lload_0 || align="center" | 1e || || &rarr; value || load a long value from a local variable 0 |- | lload_1 || align="center" | 1f || || &rarr; value || load a long value from a local variable 1 |- | lload_2 || align="center" | 20 || || &rarr; value || load a long value from a local variable 2 |- | lload_3 || align="center" | 21 || || &rarr; value || load a long value from a local variable 3 |- | lmul || align="center" | 69 || || value1, value2 &rarr; result || multiplies two longs |- | lneg || align="center" | 75 || || value &rarr; result || negates a long |- | lookupswitch || align="center" | ab || <0-3 bytes padding>, defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, npairs1, npairs2, npairs3, npairs4, match-offset pairs... || key &rarr; || a target address is looked up from a table using a key and execution continues from the instruction at that address |- | lor || align="center" | 81 || || value1, value2 &rarr; result || bitwise or of two longs |- | lrem || align="center" | 71 || || value1, value2 &rarr; result || remainder of division of two longs |- | lreturn || align="center" | ad || || value &rarr; [empty] || returns a long value |- | lshl || align="center" | 79 || || value1, value2 &rarr; result || bitwise shift left of a long ''value1'' by ''value2'' positions |- | lshr || align="center" | 7b || || value1, value2 &rarr; result || bitwise shift right of a long ''value1'' by ''value2'' positions |- | lstore || align="center" | 37 || index || value &rarr; || store a long ''value'' in a local variable ''#index'' |- | lstore_0 || align="center" | 3f || || value &rarr; || store a long ''value'' in a local variable 0 |- | lstore_1 || align="center" | 40 || || value &rarr; || store a long ''value'' in a local variable 1 |- | lstore_2 || align="center" | 41 || || value &rarr; || store a long ''value'' in a local variable 2 |- | lstore_3 || align="center" | 42 || || value &rarr; || store a long ''value'' in a local variable 3 |- | lsub || align="center" | 65 || || value1, value2 &rarr; result || subtract two longs |- | lushr || align="center" | 7d || || value1, value2 &rarr; result || bitwise shift right of a long ''value1'' by ''value2'' positions, unsigned |- | lxor || align="center" | 83 || || value1, value2 &rarr; result || bitwise exclusive or of two longs |- ! colspan="5" | M |- | monitorenter || align="center" | c2 || || objectref &rarr; || enter monitor for object ("grab the 