in which a malicious user enters a short snippet of JavaScript into a textbox so that this script will be saved in the database and when a user retrieves and displays this later, the browser will execute the script.<ref>[http://www.aspnetbook.com/apps/design_secure_application_malicious_scripts.php How to avoid malicious scripts] ASPNET Book 2010</ref> Cross-site scripting holes are web-application vulnerabilities which allow attackers to bypass client-side security mechanisms normally imposed on web content by modern browsers. By finding ways of injecting malicious scripts into web pages, an attacker can gain elevated access privileges to sensitive page-content, session cookies, and a variety of other information maintained by the browser on behalf of the user. Cross-site scripting attacks are therefore a special case of [[code injection]]. The expression "cross-site scripting" originally referred to the act of loading the attacked, third-party web application from an unrelated attack site, in a manner that executes a fragment of [[JavaScript]] prepared by the attacker in the [[same origin policy|security context]] of the targeted domain (a ''reflected'' or ''non-persistent'' XSS vulnerability). The definition gradually expanded to encompass other modes of code injection, including persistent and non-JavaScript vectors (including [[Java (programming language)|Java]], [[ActiveX]], [[VBScript]], [[Adobe Flash|Flash]], or even pure [[HTML]]), causing some confusion to newcomers to the field of [[information security]].<ref name=Grossman>{{cite web|author=Grossman, Jeremiah|title= The origins of Cross-Site Scripting (XSS)|url=http://jeremiahgrossman.blogspot.com/2006/07/origins-of-cross-site-scripting-xss.html|date=July 30, 2006|accessdate=September 15, 2008}}</ref> XSS vulnerabilities have been reported and exploited since the 1990s. Prominent sites affected in the past include the social-networking sites [[Twitter]],<ref>{{cite news|author=Arthur, Charles|title=Twitter users including Sarah Brown hit by malicious hacker attack|url=http://www.guardian.co.uk/technology/blog/2010/sep/21/twitter-bug-malicious-exploit-xss|date=September 21, 2010\publisher=The Guardian|accessdate=September 21, 2010}} </ref> [[Facebook]],<ref>{{cite news|author=Leyden, John|title=Facebook poked by XSS flaw|url=http://www.theregister.co.uk/2008/05/23/facebook_xss_flaw/|date=May 23, 2008|publisher=The Register|accessdate=May 28, 2008}} </ref> [[MySpace]], and [[Orkut]].<ref> {{cite web|title=Full List of Incidents|url=http://projects.webappsec.org/Web-Hacking-Incident-Database|date=February 17, 2008|publisher=Web Application Security Consortium|accessdate=May 28, 2008}} </ref><ref> {{cite web|title=Obama site hacked; Redirected to Hillary Clinton|url=http://www.zdnet.com/blog/security/obama-site-hacked-redirected-to-hillary-clinton/1042|date=April 21, 2008|publisher=ZDNet|accessdate=May 28, 2008}} </ref> In recent years, cross-site scripting flaws surpassed [[buffer overflow]]s to become the most common publicly-reported security vulnerability,<ref>{{cite web|author=Christey, Steve and Martin, Robert A.|title=Vulnerability Type Distributions in CVE (version 1.1)|url=http://cwe.mitre.org/documents/vuln-trends/index.html|date=May 22, 2007|publisher=MITRE Corporation|accessdate=June 7, 2008}} </ref> with some researchers viewing as many as 68% of websites as likely open to XSS attacks.<ref>{{cite news|author=Berinato, Scott|title=Software Vulnerability Disclosure: The Chilling Effect|url=http://www.csoonline.com/article/221113|archiveurl=http://web.archive.org/web/20080418072230/http://www.csoonline.com/article/221113|archivedate=2008-04-18|work=CSO|page=7|publisher=CXO Media|date=January 1, 2007|accessdate=June 7, 2008}}</ref> ==Types== There is no single, standardized classification of cross-site scripting flaws, but most experts distinguish between at least two primary flavors of XSS: ''non-persistent'' and ''persistent''. Some sources further divide these two groups into ''traditional'' (caused by server-side code flaws) and ''DOM-based'' (in client-side code). ===Non-persistent=== {| class=wikitable style="float:right; clear:right; width:30%; margin:0 0 1em 1em;" !| Example of non-persistent XSS |- |Non-persistent XSS vulnerabilities in Google could allow malicious sites to attack Google users who visit them while logged in.<ref>{{cite web|author=Amit, Yair|title=Google.com UTF-7 XSS Vulnerabilities|url=http://www.securiteam.com/securitynews/6Z00L0AEUE.html|publisher=Watchfire|date=December 21, 2005|accessdate=May 29, 2008}}</ref> |} The ''non-persistent'' (or ''reflected'') cross-site scripting vulnerability is by far the most common type.<ref name=HopeWalther>{{Cite book | last = Hope | first = Paco | author-link = Paco Hope | last2 = Walther | first2 = Ben | author2-link = Ben Walther | title = Web Security Testing Cookbook | place = | publisher = O'Reilly Media, Inc. | year = 2008 | location = Sebastopol, CA | volume = | edition = | page = 128 | url = | doi = | id = | isbn = 978-0-596-51483-9 }}</ref> These holes show up when the data provided by a web client, most commonly in HTTP query parameters or in HTML form submissions, is used immediately by server-side scripts to generate a page of results for that user, without properly sanitizing the request.<ref name=WASC-2005>{{cite web|author=|title=Cross-site Scripting|url=http://projects.webappsec.org/Cross-Site-Scripting|year=2005|publisher=Web Application Security Consortium|accessdate=May 28, 2008}}</ref> Because HTML documents have a flat, serial structure that mixes control statements, formatting, and the actual content, any non-validated user-supplied data included in the resulting page without proper HTML encoding, may lead to markup injection.<ref name=HopeWalther /><ref name=WASC-2005 /> A classic example of a potential vector is a site search engine: if one searches for a string, the search string will typically be redisplayed verbatim on the result page to indicate what was searched for. If this response does not properly escape or reject HTML control characters, a cross-site scripting flaw will ensue.<ref name=GHFPR>{{cite book|author=Grossman, Jeremiah and Robert Hansen, Seth Fogie, Petko D. Petkov and Anton Rager|title=XSS Attacks: Cross Site Scripting Exploits and Defense (Abstract)|pages=70, 156|publisher=Elsevier Science & Technology via Google Book Search|url=http://books.google.com/?id=dPhqDe0WHZ8C|year=2007|isbn=1597491543|accessdate=May 28, 2008}}</ref> At first blush, this does not appear to be a serious problem: by submitting a malicious input to the web site, the user would only be able to compromise their own security context—that is, their own browser cookies, cache objects, and so forth. It is important to realize, however, that a third-party attacker may easily place hidden frames or deceptive links on unrelated sites and cause victims' browsers to navigate to URLs on the vulnerable site automatically—often completely in the background—and in such a case, the attacker can intrude into the security context that rightfully belonged to the victim. ===Persistent=== {| class=wikitable style="float:right; clear:right; width:30%; margin:0 0 1em 1em;" |- !| Example of persistent XSS |- |A persistent [[cross-zone scripting]] vulnerability coupled with a [[computer worm]] allowed execution of arbitrary code and listing of filesystem contents via a QuickTime movie on [[MySpace]].<ref>This worm is named JS/Ofigel-A, JS/Quickspace.A and JS.Qspace, in {{cite web|title=JS/Ofigel-A|url=http://www.sophos.com/security/analyses/viruses-and-spyware/jsofigela.html|publisher=Sophos|accessdate=June 5, 2008}} and {{cite web|title=F-Secure Malware Information Pages: JS/Quickspace.A|url=http://www.f-secure.com/v-descs/js_quickspace_a.shtml|date=January 5, 2007|publisher=F-Secure|accessdate=June 5, 2008}} and {{cite web|title=JS.Qspace|url=http://www.symantec.com/security_response/writeup.jsp?docid=2006-120313-2523-99|date=February 13, 2007|publisher=Symantec Corp.|accessdate=June 5, 2008}}</ref> |} The ''persistent'' (or ''stored'') XSS vulnerability is a more devastating variant of a cross-site scripting flaw: it occurs when the data provided by the attacker is saved by the server, and then permanently displayed on "normal" pages returned to other users in the course of regular browsing, without proper HTML escaping. A classic example of this is with online message boards where users are allowed to post HTML formatted messages for other users to read.<ref name=WASC-2005 /> Persistent XSS can be more significant than other types because an attacker's malicious script is rendered automatically, without the need to individually target victims or lure them to a third-party 