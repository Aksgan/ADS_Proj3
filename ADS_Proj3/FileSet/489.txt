of the e-mail is not examined. [[Mail Transfer Agent]]s (MTA) using the SMTP protocol use the <tt>RCPT TO</tt> command to determine where the e-mail should go, and the <tt>MAIL FROM</tt> command to indicate where it came from. ==Usage== While its original usage was to provide information about how to return bounce messages, since the late 1990s, other uses have come about. These typically take advantage of properties of the bounce address, such as: *It is given early in the [[SMTP]] session, so a message can be rejected without receiving its body. *It is typically not seen by users so it can be altered to include additional information without confusing them. *It is a required part of [[Mail Transfer Agent]] software, so it is easy for other programs to use. In contrast, the "from" address in the body of the mail can be on several different headers (e.g. the <tt>From:</tt>, <tt>Sender:</tt>, <tt>Resent-from:</tt>, etc.) or be missing entirely. Extended uses include mailing list handling in [[Variable envelope return path]] (VERP), [[e-mail authentication]], [[spam filtering]], and [[backscatter (e-mail)|backscatter]] reduction in [[Bounce Address Tag Validation]]. ==Terminology== The various terms have different origins and sometimes different meanings, although these differences have often become moot on the modern internet. * '''bounce address''' - When an e-mail can not be delivered, the MTA will create a [[bounce message]] and send it to the address given by the <tt>MAIL FROM</tt> command. Used in RFC 4406. * '''return path''' - When the e-mail is put in the recipient's [[mailbox (e-mail)|mailbox]], a new [[E-mail#Header|mail header]] is created with the name "Return-Path:" containing the address on the <tt>MAIL FROM</tt> command. Earlier forms of e-mail (such as [[UUCP]]) would require information about each "hop" along the path that the e-mail traveled to reach the destination, hence the "path" part of the name. Used in RFC 2821, RFC 3834, RFC 4409. * '''reverse path''' - the argument of the SMTP <tt>MAIL FROM</tt> command, whose content is supposed to consist of the envelope sender address. Used in RFC 5321, RFC 3464, RFC 3834, Internet Mail Architecture. * '''envelope from''' - information that the SMTP protocol uses analogous to the envelope of a letter. Used in RFC 5230, RFC 5233. * '''envelope sender address''' - the mailbox address in a non-empty reverse path excluding any (deprecated) reverse routing info. Used in RFC 2821, RFC 3461, RFC 3464, RFC 3798, RFC 5228. * '''envelope return address''' - similar to envelope sender address, used in RFC 3461, RFC 3464, RFC 3834, RFC 4952. * '''MAIL FROM''' - This variation comes directly from the SMTP <tt>MAIL FROM</tt> command name. Used in RFC 5321, RFC 3464, RFC 3834, RFC 4408, RFC 4409, RFC 4952. * '''2821-FROM''' - Until October, 2008, SMTP was defined in RFC 2821, while the body of the e-mail was defined in RFC 2822. The term "2821-FROM" makes it clear that the address referred to is the <tt>MAIL FROM</tt> information, while "2822-From:" refers to the address in the "From:" header seen by end users. Used in RFC 5598. * '''5321-FROM''' - Evolution of 2821-FROM as from October, 2008, SMTP has been defined in RFC 5321. * '''return address''' - Another term that comes from the latter analogy for e-mail. used in RFC 5321, RFC 3834. * '''From_''' - When an e-mail gets delivered to the user's [[mailbox (e-mail)|mailbox]], one file format that may be used is the [[mbox]] format. In this format, the e-mail address from the <tt>MAIL FROM</tt> command was placed on a line beginning with "From" followed by a single space, the "From_" term uses an underscore to represent the space to distinguish it from the "From:" mail header. In this mailbox format, lines in the actual e-mail that begin with a "From " have to be escaped and changed into lines that begin with ">From ". ==See also== * [[Bounce message]] * [[Email forwarding]] [[Category:Email]] [[Category:Email authentication]] [[de:Envelope Sender]] [[fr:Bounce address]]</text> </page> <page> <id>4365</id> <title>Bouncy Castle (cryptography)</title> <text>{{Infobox Software | name = Bouncy Castle | logo = | screenshot = | caption = | author = | developer = | released = | latest release version = '''Java:''' 1.45<br/>'''C#:''' 1.6.1 | latest release date = <br/>'''Java:''' {{release date|2010|01|13}}<br/>'''C#:''' {{release date|2010|02|08}} | latest preview version = | latest preview date = | operating system = [[cross-platform]] | platform = | language = | programming language = [[C Sharp (programming language)|C#]] and [[Java (programming language)|Java]] | status = | genre = [[cryptography]] [[Application programming interface|API]] | license = [[MIT License]]<ref name="license">{{cite web |title=Bouncy Castle - LICENSE |url=http://bouncycastle.org/licence.html }}</ref> | website = http://bouncycastle.org/ }} '''Bouncy Castle''' is a collection of [[Application Programming Interface|APIs]] used in [[cryptography]]. It includes APIs for both the [[Java (programming language)|Java]] and the [[C Sharp (programming language)|C#]] programming languages. Bouncy Castle is Australian in origin and thus American restrictions on the [[Export of cryptography in the United States|export of cryptographic software]] do not apply to it. == History == Bouncy Castle started when two colleagues tired of having to re-invent a set of cryptography libraries each time they changed jobs. One of the very early design considerations of Bouncy Castle came from one of the developers being active in [[Java Platform, Micro Edition|JavaME]] development, and as a result{{huh?|date=October 2010}} there are two distinct library sets. == Architecture == The low-level, or 'light-weight', API is a vendor-specific set of APIs that implement all the underlying cryptographic algorithms. The intent is to use the low-level API in memory constrained devices (JavaME) or when easy access to the [[Java Cryptography Extension|JCE]] libraries is not possible (such as distribution in an [[Java applet|applet]]). The JCE-compatible provider is built upon the low-level API's. As such, the source code for the JCE provider is an example of how to implement many of the "common" crypto problems using the low-level API. == See also == * [[Java Cryptography Architecture]] == Notes == {{Reflist}} == External links == *{{cite web |url=http://www.bouncycastle.org/ |title=Legion of the Bouncy Castle |ref=Legion of the Bouncy Castle }} * {{cite web |url=http://mindprod.com/jgloss/bouncycastle.html |title=Bouncy Castle |author=Roedy Green 