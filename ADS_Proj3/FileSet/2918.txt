visible, or interpolating vertex data into per-pixel data. #'''[[Pixel shader|Pixel Shader]]''': Determines the final pixel colour to be written to the render target and can also calculate a depth value to be written to the depth buffer. #'''Output Merger''': Merges various types of output data ([[Shader#Pixel shaders|pixel shader]] values, alpha blending, depth/stencil...) to build the final result. The pipeline stages illustrated with a round box are fully programmable. The application provides a shader program that describes the exact operations to be completed for that stage. Many stages are optional and can be disabled altogether. <br style="clear:both;"> ==Display modes== Direct3D implements two display modes: * Fullscreen mode: The Direct3D application generates all of the graphical output for a display device. In this mode Direct3D automatically captures Alt-Tab and sets/restores screen resolution and pixel format without the programmer intervention. This also provides plenty of problems for debugging due to the 'Exclusive Cooperative Mode'. * Windowed mode: The result is shown inside the area of a window. Direct3D communicates with [[Graphics Device Interface|GDI]] to generate the graphical output in the display. Depending on driver support windowed mode can perform the same as full-screen. ==Related tools== ===D3DX=== {{Main|D3DX}} Direct3D comes with [[D3DX]], a library of tools designed to perform common mathematical calculations on [[Euclidean vector|vector]]s, [[matrix (mathematics)|matrices]] and colors, calculating [[look-at]] and [[projection (mathematics)|projection]] matrices, [[spline interpolation]]s, and several more complicated tasks, such as compiling or assembling shaders used for 3D graphic programming, compressed [[skeletal animation]] storage and matrix stacks. There are several functions that provide complex operations over 3D [[mesh]]es like [[tangent-space]] computation, mesh simplification, [[precomputed radiance transfer]], optimizing for vertex cache friendliness and stripification, and generators for 3D text meshes. 2D features include classes for drawing [[screen-space]] lines, text and [[Sprite (computer graphics)|sprite]] based [[particle system]]s. Spatial functions include various intersection routines, conversion from/to [[barycentric coordinates (mathematics)|barycentric coordinates]] and [[bounding box]]/sphere generators. [[D3DX]] is provided as a [[dynamic link library]] (DLL). Some features present in previous versions of D3DX were removed in Direct3D 11, such as: * A large part of the math library has been removed. Microsoft recommends use of the [[XNA]] Math library instead. * The Effect framework has been removed and is now distributed as source. * The Mesh interface has been removed. ===DXUT=== DXUT (also called the sample framework) is a layer built on top of the Direct3D API. The framework is designed to help the programmer spend less time with mundane tasks, such as creating a window, creating a device, processing Windows messages and handling device events. It is only usable for writing simple technology-oriented demos, tutorials and workshops. ==Wine== The [[Wine (software)|Wine]] project has working implementations of the Direct3D 8 and 9 APIs (the implementations are, as of July 12, 2008, 95% complete). Work on implementing Direct3D 10 begun in wine 1.1.7, using OpenGL via [[WGL (software)|WGL]]. Therefore it can also be used on Windows.<ref>http://wiki.winehq.org/WineD3DOnWindows</ref> ==Direct3D and Windows Vista== Windows Vista and its updated driver model brings some new improvements and changes compared to the Windows XP model, and is expected to evolve even more as the hardware and the OS evolve (via future service packs or in the [[Windows 7|next version of Windows]]). Windows Vista forces multithreading, via a theoretically unlimited number of execution contexts on the GPU. Multithreading was already supported in Windows XP as two applications or more could execute in different windows and be hardware accelerated. Windows Vista makes it a requirement to support an arbitrarily large number of execution contexts (or threads) in hardware or in software. Vista, in its basic scheduling incarnation (the current driver model), manages threads all by itself, allowing the hardware to switch from one thread to the other when appropriate. This is a departure from Windows XP, where the hardware could decide to switch threads on its own, as the OS had limited control about what the GPU could do. Also Windows Vista handles memory management and paging (to system memory and to disk), which is a necessity in order to support a large number of execution contexts with their own resources. Each execution context is presented with a resource view of the GPU that matches the maximum available (or exceeds it for aware applications). Most of the management is implemented on the OS side in order to be properly integrated into the OS-kernel memory management. Execution contexts are protected from each other. Because of the user-mode implementation of the Vista driver, a rogue or badly written app can take control of the execution of the driver and could potentially access data from another process within GPU memory by sending modified commands. Though protected from access by another app, a well-written app still needs to protect itself against failures and device loss caused by other applications. The user-mode implementation can reduce the occurrence of BSODs caused by graphics drivers (which is a much more catastrophic event to a running app than a device-lost event). Regularly Microsoft spokespeople talked about the necessity to have a finer grain context switching (referred to as "advanced scheduling") so as to be able to switch two execution threads at the shader-instruction level instead of the single-command level or even batch of commands, as in yet-unpublished [[Windows Display Driver Model#WDDM 2.0|WDDM 2.x]] specification. This is not a requirement of Vista, nor of Direct3D 10 compatibility. Direct3D10 apps can run, and are now running, on top of the basic scheduling implementation. This isn't typically a problem except for a potential app that would have very long execution of a single command/batch of commands ([http://www.microsoft.com/whdc/device/display/wddm_timeout.mspx which is currently prevented under Windows Vista]). Vista cannot enforce right now a finer-grained context switching, as it will require additional support from hardware vendors, but it may appear in the future. ==See also== *[[High Level Shader Language|HLSL]] – High Level Shader Language *[[DirectX]] – Collection of API's in which Direct3D is implemented *[[OpenGL]] – Main competitor to Direct3D *[[DirectDraw]] *[[3D computer graphics]] *[[Shader]] *[[Silverlight]] ==References== {{Reflist|2}} ==External links== * [http://www.microsoft.com/games/en-US/aboutGFW/pages/directx.aspx DirectX website] * [http://msdn.microsoft.com/en-us/library/ee417855%28VS.85%29.aspx DirectX Graphics Documentation] * 