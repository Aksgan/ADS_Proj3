during any phase of compilation, however the bulk of optimizations are performed after the syntax and semantic analysis of the front-end and before the code generation of the back-end, thus a common, even though somewhat contradictory, name for this part of the compiler is "middle end." The exact set of GCC optimizations varies from release to release as it develops, but includes the standard algorithms, such as [[loop optimization]], [[jump threading]], [[common subexpression elimination]], [[instruction scheduling]], and so forth. The [[Register transfer language|RTL]] optimizations are of less importance with the addition of global SSA-based optimizations on [[GIMPLE]] trees,<ref> [http://www.redhat.com/magazine/002dec04/features/gcc/ From Source to Binary: The Inner Workings of GCC], by Diego Novillo, [[Red Hat#Red Hat Magazine|''Red Hat Magazine'']], December 2004</ref> as RTL optimizations have a much more limited scope, and have less high-level information. Some of these optimizations performed at this level include [[dead code elimination]], [[partial redundancy elimination]], [[global value numbering]], [[sparse conditional constant propagation]], and [[scalar replacement of aggregates]]. Array dependence based optimizations such as [[automatic vectorization]] and [[automatic parallelization]] are also performed. [[Profile-guided optimization]] is also possible as demonstrated here: http://gcc.gnu.org/install/build.html#TOC4 ===Back-end=== The behavior of GCC's back end is partly specified by [[C preprocessor|preprocessor macros]] and functions specific to a target architecture, for instance to define the [[endianness]], [[word size]], and [[calling convention]]s. The front part of the back end uses these to help decide RTL generation, so although GCC's RTL is nominally processor-independent, the initial sequence of abstract instructions is already adapted to the target. At any moment, the actual RTL instructions forming the program representation have to comply with the [[Front-end and back-end|machine description]]{{clarify|date=October 2010}} of the target architecture. Towards the end of compilation, valid RTL is further reduced to a ''strict'' form in which each instruction refers to real machine registers and real instructions from the target's [[instruction set]]. Forming strict RTL is a very complicated task, done mostly by the [[register allocation]] first but completed only by a separate "reloading" phase which must account for the vagaries of all of GCC's targets. The final phase is somewhat anticlimactic, because the patterns to match were generally chosen during reloading, and so the assembly code is simply built by running substitutions of registers and addresses into the strings specifying the instructions. ==Compatible IDEs== Most [[integrated development environment]]s written for [[GNU/Linux]] and some for other operating systems support GCC. These include: * [[Anjuta]] * [[Code::Blocks]] * [[CodeLite]] * [[Dev-C++]] * [[Eclipse (software)|Eclipse]] * [[geany]] * [[KDevelop]] * [[NetBeans]] * [[Qt Creator]] * [[Xcode]] ==Debugging GCC programs== The primary tool used to debug GCC code is the [[GNU Debugger]] (gdb). Among more specialized tools are [[Valgrind]], for finding memory errors and leaks, and the graph profiler ([[gprof]]) which can determine how much time is spent in which routines, and how often they are called; this requires programs to be compiled with [[Software profiling|profiling]] options. ==See also== {{Portal|Free software}} * [[MinGW]] (Windows port of GCC) * [[List of compilers]] ==References== {{Reflist|colwidth=30em}} ==Further reading== {{Refbegin}} * [[Richard Stallman]]: ''[http://gcc.gnu.org/onlinedocs/gcc-4.4.2/gcc/ Using the GNU Compiler Collection (GCC)]'', [[Free Software Foundation]], 2008. * [[Richard Stallman]]: ''[http://gcc.gnu.org/onlinedocs/gccint/ GNU Compiler Collection (GCC) Internals]'', [[Free Software Foundation]], 2008. * [[Brian J. Gough]]: ''[http://www.network-theory.co.uk/gcc/intro/ An Introduction to GCC]'', Network Theory Ltd., 2004 (Revised August 2005). ISBN 0-9541617-9-3. * Arthur Griffith, ''GCC: The Complete Reference''. McGrawHill/Osborne, 2002. ISBN 0-07-222405-3. {{Refend}} ==External links== {{Wikibooks|GNU C Compiler Internals}} * [http://gcc.gnu.org/ GCC homepage] * [http://gcc.gnu.org/onlinedocs/ The official GCC manuals and user documentation], by the GCC developers * [http://www.cse.iitb.ac.in/grc/docs.html Collection of GCC 4.0.2 architecture and internals documents] at I.I.T. Bombay. * {{cite news|date=2006-03-02|title=New GCC Heavy on Optimization|publisher= internetnews.com | last= Kerner|first=Sean Michael | url = http://www.internetnews.com/dev-news/article.php/3588926 }} * {{cite news|date=2005-04-22|title=Open Source GCC 4.0: Older, Faster|publisher= internetnews.com | last= Kerner|first=Sean Michael | url = http://www.internetnews.com/dev-news/article.php/3499881 }} * [http://www.redhat.com/magazine/002dec04/features/gcc/ From Source to Binary: The Inner Workings of GCC], by Diego Novillo, [[Red Hat#Red Hat Magazine|''Red Hat Magazine'']], December 2004 * [ftp://gcc.gnu.org/pub/gcc/summit/2003/GENERIC%20and%20GIMPLE.pdf A 2003 paper on GENERIC and GIMPLE] * [http://www.toad.com/gnu/cygnus/index.html Marketing Cygnus Support], an essay covering GCC development for the 1990s, with 30 monthly reports for in the "Inside Cygnus Engineering" section near the end. * [http://www.goof.com/pcg/egcs.html EGCS 1.0 announcement] * [http://gcc.gnu.org/egcs-1.0/features.html EGCS 1.0 features list] * [http://linuxmafia.com/faq/Licensing_and_Law/forking.html Fear of Forking], an essay by Rick Moen recording seven well-known forks, including the GCC/EGCS one * [http://www.cs.rochester.edu/twiki/bin/view/Main/ProjectHome A compiler course project] based on GCC at the [[University of Rochester]] * [http://www.trl.ibm.com/projects/security/ssp/ The stack-smashing protector], a GCC extension {{GNU}} {{FOSS}} {{DEFAULTSORT:Gnu Compiler Collection}} [[Category:1987 software]] [[Category:Java development tools]] [[Category:Compilers]] [[Category:C compilers]] [[Category:C++ compilers]] [[Category:Fortran compilers]] [[Category:GNU Project software|Compiler Collection]] [[Category:Free compilers and interpreters]] [[Category:Free cross-platform software]] [[Category:Pascal compilers]] [[Category:Unix programming tools]] [[ar:تجميعة مصرفات جنو]] [[bs:GNU Compiler Collection]] [[bg:GNU Compiler Collection]] [[ca:GNU Compiler Collection]] [[cv:GNU Compiler Collection]] [[cs:GCC]] [[da:GCC]] [[de:GNU Compiler Collection]] [[et:GNU Compiler Collection]] [[es:GNU Compiler Collection]] [[eo:GCC]] [[eu:GNU Compiler Collection]] [[fa:جی‌سی‌سی]] [[fr:GNU Compiler Collection]] [[gl:GNU Compiler Collection]] [[ko:GNU 컴파일러 모음]] [[hy:GCC]] [[hr:GNU Compiler Collection]] [[it:GNU Compiler Collection]] [[he:GCC]] [[ka:GNU Compiler Collection]] [[la:GCC]] [[lt:GCC]] [[hu:GCC (informatika)]] [[ml:ഗ്നു കമ്പൈലർ ശേഖരം]] [[nl:GNU Compiler Collection]] [[ja:GNUコンパイラコレクション]] [[no:GCC]] [[pl:GNU Compiler Collection]] [[pt:GNU Compiler Collection]] [[ro:GNU Compiler Collection]] [[ru:GNU Compiler Collection]] [[sk:GNU Compiler Collection]] [[sl:GNU Compiler Collection]] [[sr:ГНУ колекција компајлера]] [[fi:GCC]] [[sv:GCC]] [[th:ชุดแปลโปรแกรมของกนู]] [[tr:GNU Compiler Collection]] [[uk:GNU Compiler Collection]] [[vi:Bộ trình dịch GNU]] [[zh:GCC]]</text> </page> <page> <id>14597</id> <title>GNU Lesser General Public License</title> <text>{{ infobox software license | name = GNU Lesser General Public License | image = [[File:GNU Lesser General Public License 3 Logo.svg|200px]] | caption = The GNU LGPLv3 logo | author = [[Free Software Foundation]] | version = 3 | copyright = Free Software Foundation, Inc. | date = June 29, 2007 | OSI approved = Yes | Debian approved = Yes | Free Software = Yes | GPL compatible = Yes | copyleft = Yes | linking = Yes }} The '''GNU Lesser General Public License''' (formerly the '''GNU Library General Public License''') or '''LGPL''' is a [[free software license]] published by the [[Free Software Foundation]] (FSF). It was designed as a compromise between the strong-[[copyleft]] [[GNU General Public License|GNU General Public License or '''GPL''']] and [[Permissive free 