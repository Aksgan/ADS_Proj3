<math>S_i</math> and there exist an operation <math>+</math> of result unification such that <math>P(M,S) = P(M,S_0) + P(M,S_1) + \dots + P(M,S_n)</math>. ==Decomposition== Decomposition is a term used in computer science to break static data structures into smaller units of unequal size. The basic principle is the idea that any decimal number can be translated into a representation in any other base. For more details about the topic see [[Decomposition (computer science)]]. For simplicity, binary system will be used in this article but any other base (as well as other possibilities such as [[Fibonacci number]]s) can also be utilized. If using the binary system, a set of <math>n</math> elements is broken down into subsets of sizes with :<math>2^{i}*n_{i}</math> elements where <math>n_{i}</math> is the <math>i</math>-th bit of <math>n</math> in binary. This means that if <math>n</math> has <math>i</math>-th bit equal to 0, the corresponding set does not contain any elements. Each of the subset has the same property as the original static data structure. Operations performed on the new dynamic data structure may involve traversing <math>\log_{2}\left(n\right)</math> sets formed by decomposition. As a result, this will add <math>O(\log\left(n\right))</math> factor as opposed to the static data structure operations but will allow Insert/Delete operation to be added. [[Kurt Mehlhorn]] proved several equations for time complexity of operations on data structures dynamized according to this idea. Some of these equalities are listed. If <math>P_S\left(n\right)\,\!</math> = time to build the static data structure <math>Q_S\left(n\right)\,\!</math> = time to query the static data structure <math>Q_D\left(n\right)\,\!</math> = time to query the dynamic data structure formed by decomposition <math>\overline{I}</math> = amortized insertion time Then <math>Q_D\left(n\right) = O(Q_S\left(n\right)\log\left(n\right))\,\!</math> <math>\overline{I}=O(\left(P_S\left(n\right)/n\right)\log\left(n\right))</math> If <math>Q_S\left(n\right)</math> is [[at least polynomial]], then <math>Q_D\left(n\right)=O\left(Q_S\left(n\right)\right)</math>. ==Further reading== Kurt Mehlhorn, [http://www.mpi-sb.mpg.de/~mehlhorn/DatAlgbooks.html Data structures and algorithms] 3, . An EATCS Series, vol. 3, Springer, 1984. [[Category:Data structures]]</text> </page> <page> <id>11320</id> <title>E-mail injection</title> <text>{{Notability|date=July 2009}} '''E-mail injection''' is a [[security vulnerability]] that can occur in [[Internet]] [[application software|applications]] that are used to send [[e-mail]] messages. It is the email equivalent of [[HTTP Header Injection]]. Like [[SQL injection]] attacks, this vulnerability is one of a general class of vulnerabilities that occur when one [[programming language]] is embedded within another. When a form is added to a [[World Wide Web|Web]] page that submits data to a Web application, a malicious user may exploit the [[MIME]] format to append additional information to the message being sent, such as a new list of recipients or a completely different message body. Because the MIME format uses a [[carriage return]] to delimit the information in a message, and only the raw message determines its eventual destination, adding carriage returns to submitted form data can allow a simple guestbook to be used to send thousands of messages at once. A malicious [[spam (electronic)|spammer]] could use this tactic to send large numbers of messages anonymously. More information on this topic, including examples and ways to avoid the vulnerability, can be found at the [http://www.damonkohler.com/2008/12/email-injection.html SecurePHP Wiki]. However, this vulnerability is not limited to [[PHP]]; it can potentially affect ''any'' application that sends e-mail messages based on input from arbitrary users. ==External links== * [http://www.phpsecure.info/v2/article/MailHeadersInject.en.php Email Headers Injection Using mail() Function] (English) * [http://www.phpsecure.info/v2/article/MailHeadersInject.php Email Headers Injection Using mail() Function] (French) {{DEFAULTSORT:E-Mail Injection}} [[Category:Injection exploits]] {{compu-network-stub}} [[de:E-Mail-Injection]] [[he:הזרקת דואר אלקטרוני]]</text> </page> <page> <id>11322</id> <title>E-on Vue</title> <text>{{Infobox Software | name = Vue| <!-- logo=[[Image:|px]] | screenshot = [[Image:|px]]| caption = | --> developer = e-on software, inc. | latest_release_version = 9 | latest_release_date = November 5, 2010 | operating_system = [[Microsoft Windows|Windows]], [[Mac OS X]] | genre = [[3D computer graphics]] | commercial = yes | license = [[Proprietary software|Proprietary]] | website = http://www.e-onsoftware.com/products/}} '''Vue''' is a 3D [[scenery generator]] software package. It is used for the creation, animation, and rendering of natural [[3D computer graphics|3D]] environments. [[Image:Amazonhuntress.jpg|thumb|right|[[Digital Art]] created by using Poser 7 and Vue 6 Infinite.]] [[Image:An African Sunset.jpg|thumb|right|Vue atmosphere example]] [[File:Timothy-Klanderud-Beach-Lighthouse.jpg|thumb|right|Vue landscape example]] ==Versions== Vue is available in six versions: xStream, Infinite, Complete, Pro Studio, Esprit, and Pioneer <ref name="Products">{{cite web |url=http://www.e-onsoftware.com/products/ |title=E-on Products - Solutions for 3D Environments}}</ref>. xStream and Infinite have the same feature set, but Infinite is a standalone program, while xStream is designed to be used from within [[Autodesk 3ds Max|3ds Max]], [[Cinema 4D]], [[LightWave 3D|LightWave]], [[Autodesk Maya|Maya]], and [[Autodesk Softimage|Softimage]]. The rest are standalone programs with progressively-reduced feature sets. Vue's atmospheric engine is available separately as Ozone <ref name="Ozone">{{cite web |url=http://www.e-onsoftware.com/products/ozone/ozone_4.0/ |title=Ozone 4.0 - Atmospheres That Come Alive"}}</ref>. E-on offers Personal Learning Editions of xStream, Infinite, and Ozone. They are fully functional, but are restricted to non-commercial use and all renders carry a watermark. ==Users== *[[Blue Sky Studios]] *[[Digital Domain]] *[[DreamWorks Animation]] Kung Fu Panda <ref name="Vue 2008">{{cite press release |url=http://www.e-onsoftware.com/about/press_materials/?page=..%2FPRIndex&date=August%2013,%202008 |title=Vue "Summer 2008 Blockbuster" Roundup}}</ref> *[[Industrial Light & Magic]]: Indiana Jones and the Kingdom of the Crystal Skull <ref name="Vue 2008"/>, Pirates Of The Caribbean: Dead Man’s Chest <ref name="Pirates">{{cite press release |url=http://www.e-onsoftware.com/about/press_materials/?page=..%2FPRIndex&date=August%201,%202006 |title=Vue Helps Industrial Light & Magic Create Environments for “Pirates Of The Caribbean: Dead Man’s Chest” VFX}}</ref> *[[Sony Pictures Imageworks]] *[[Warner Bros. Interactive Entertainment]] *[[Weta Digital]] *[[Digital Blasphemy]] <ref name="Users">{{cite web |url=http://www.e-onsoftware.com/about/?page=customers |title=E-on Software - Customers}}</ref><!--This reference cannot be placed on the same line as "==Users=="--> ==See also== *[[Bryce (software)|Bryce]] *[[Terragen 2]] ==References== {{reflist}} ==External links== *[http://www.e-onsoftware.com E-on Software] {{3D software}} [[Category:3D graphics software]] [[de:Vue]] [[fr:Vue d'Esprit]] [[ru:E-on Vue]]</text> </page> <page> <id>11331</id> <title>E. Allen Emerson</title> <text>'''Ernest Allen Emerson''' is a computer scientist and endowed professor at the [[University of Texas, Austin]], [[USA]]. He won the 2007 [[Turing Award|A.M. Turing Award]] along with [[Edmund M. Clarke]] and [[Joseph Sifakis]] for their pioneering work on [[Model checking]].<ref name="ACM2008_02_04">{{cite web|url=http://www.cs.utexas.edu/oea/services/media_relations/utcs_spotlights/2008/acm_turing_award/|publisher=[[University of Texas]]|title=ACM Turing Award Honors Founders of Automatic Verification Technology That Enables Faster, More Reliable Designs|date=2008-02-04}}</ref> He is also the recipient of the 1998 [[Association for Computing Machinery|ACM]] [[Paris Kanellakis Award]] Theory and Practice Award for [[Symbolic Model Checking]].<ref>{{cite web|title= ACM Fellows Award / E Allen Emerson|url=http://awards.acm.org/citation.cfm?id=1671460&srt=all&aw=147&ao=KANELLAK}}</ref> He received his [[Bachelor of Science|BSc]] degree in mathematics from the [[University of Texas, Austin]] in 1976<ref name="ACM199_03_26">{{cite web|url=http://www.acm.org/announcements/kanellakis99.html|title=Kanellakis Award|publisher=[[Association for Computing Machinery]]|date=1999-03-26}}</ref> and his [[Doctor of Philosophy|PhD]] 