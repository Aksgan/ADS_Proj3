|title=Quantum Computation by Adiabatic Evolution |year=2000 |version=v1 |accessdate=2007-11-26 }}</ref> First, a complex [[Hamiltonian (quantum mechanics)|Hamiltonian]] is found whose ground state describes the solution to the problem of interest. Next, a system with a simple Hamiltonian is prepared and initialized to the ground state. Finally, the simple Hamiltonian is adiabatically evolved to the complex Hamiltonian. By the adiabatic theorem, the system remains in the ground state, so at the end the state of the system describes the solution to the problem. AQC is a possible method to get around the problem of [[Quantum_computer#Quantum_decoherence | quantum decoherence]]. Since the quantum system is in the ground state, interference with the outside world cannot make it move to a lower state. If the energy of the outside world (that is, the "temperature of the bath") is kept lower than the energy gap between the ground state and the next higher energy state, the system has a proportionally lower probability of going to a higher energy state. Thus the system can stay coherent as long as needed. In practice, there are problems during a computation. As the Hamiltonian is gradually changed, the interesting parts (quantum behaviour as opposed to classical) occur when multiple [[qubit]]s are close to a tipping point. It is exactly at this point when the ground state (one set of qubit orientations) gets arbitrarily close to a first energy state (a different arrangement of orientations). Adding a slight amount of energy (from the external bath, or as a result of slowly changing the Hamiltonian) could take the system out of the ground state, and ruin the calculation. Trying to perform the calculation more quickly increases the external energy; scaling the number of qubits makes the energy gap at the tipping points smaller. ==Notes== {{Reflist}} {{Quantum computing}} {{comp-sci-theory-stub}} [[Category:Quantum mechanics]] [[Category:Physics theorems]]</text> </page> <page> <id>1029</id> <title>Adjoint state method</title> <text>{{primarysources|date=January 2010}} The '''adjoint state method''' is a [[numerical method]] for computing the [[gradient]] of a [[Function (mathematics)|function]] or [[operator (mathematics)|operator]] in a numerical optimization problem. It has applications in [[geophysics]] and [[seismic imaging]]. The adjoint state space is chosen to simplify the physical interpretation of equation constraints.<ref name='symes_tr94'>Alain Sei & William Symes. ''Gradient Calculation of the Traveltime Cost Function Without Ray-tracing.'' Expanded Abstracts, 65th Annual [[Society of Exploration Geophysicists]] (SEG) Meeting and Exposition, pages 1351–1354 ([http://www.caam.rice.edu/caam/trs/94/TR94-15.pdf Available online])</ref> It may take the form of a [[Hilbert space]]. Adjoint state techniques allow the use of [[integration by parts]], resulting in a form which explicitly contains the physically interesting quantity. An adjoint state equation is introduced, including a new unknown variable. == References == <references/> [[Category:Numerical analysis]] {{Math-stub}}</text> </page> <page> <id>1030</id> <title>Adjunction space</title> <text>In [[mathematics]], an '''adjunction space''' is a common construction in [[topology]] where one [[topological space]] is attached or "glued" onto another. Specifically, let ''X'' and ''Y'' be a topological spaces with ''A'' a [[subspace (topology)|subspace]] of ''Y''. Let ''f'' : ''A'' → ''X'' be a [[continuous (topology)|continuous map]] (called the '''attaching map'''). One forms the adjunction space ''X'' ∪<sub>''f''</sub> ''Y'' by taking the [[disjoint union (topology)|disjoint union]] of ''X'' and ''Y'' and [[quotient space|identifying]] ''x'' with ''f''(''x'') for all ''x'' in ''A''. Schematically, :<math>X\cup_f Y = (X\amalg Y) / \{f(A) \sim A\}.</math> Sometimes, the adjunction is written as <math>X+\!_f \,Y</math>. Intuitively, we think of ''Y'' as being glued onto ''X'' via the map ''f''. As a set, ''X'' ∪<sub>''f''</sub> ''Y'' consists of the disjoint union of ''X'' and (''Y'' − ''A''). The topology, however, is specified by the quotient construction. In the case where ''A'' is a [[closed set|closed]] subspace of ''Y'' one can show that the map ''X'' → ''X'' ∪<sub>''f''</sub> ''Y'' is a closed [[embedding]] and (''Y'' − ''A'') → ''X'' ∪<sub>''f''</sub> ''Y'' is an open embedding. ==Examples== *A common example of an adjunction space is given when ''Y'' is a closed ''n''-[[ball (mathematics)|ball]] (or ''cell'') and ''A'' is the boundary of the ball, the (''n''−1)-[[sphere]]. Inductively attaching cells along their spherical boundaries to this space results in an example of a [[CW complex]]. *Adjunction spaces are also used to define [[connected sum]]s of [[manifold]]s. Here, one first removes open balls from ''X'' and ''Y'' before attaching the boundaries of the removed balls along an attaching map. *If ''A'' is a space with one point then the adjunction is the [[wedge sum]] of ''X'' and ''Y''. *If ''X'' is a space with one point then the adjunction is the quotient ''Y''/''A''. ==Categorical description== The attaching construction is an example of a [[pushout (category theory)|pushout]] in the [[category of topological spaces]]. That is to say, the adjunction space is [[universal property|universal]] with respect to following [[commutative diagram]]: <div style="text-align: center;"> [[Image:AdjunctionSpace-01.svg]] </div> Here ''i'' is the [[inclusion map]] and φ<sub>''X''</sub>, φ<sub>''Y''</sub> are the maps obtained by composing the quotient map with the canonical injections into the disjoint union of ''X'' and ''Y''. One can form a more general pushout by replacing ''i'' with an arbitrary continuous map ''g'' &mdash; the construction is similar. Conversely, if ''f'' is also an inclusion the attaching construction is to simply glue ''X'' and ''Y'' together along their common subspace. ==References== * Stephen Willard, ''General Topology'', (1970) Addison-Wesley Publishing Company, Reading Massachusetts. ''(Provides a very brief introduction.)'' * {{planetmath reference|id=3992|title=Adjunction space}} [[Category:Topology]] [[pl:Suma spójna]] [[zh:黏着空间]]</text> </page> <page> <id>1034</id> <title>Adjustment handles</title> <text>{{Unreferenced|date=August 2008}} <!-- Deleted image removed: [[Image:Button handles.png|thumb|right|The 8 white boxes are adjustment handles.]] -->'''Adjustment handles''' are the small boxes appearing on the corners and edges of a "selected control" that let you change the size and shape of the control. By [[dragging and dropping]] the control handle on an edge, you can make the control wider or narrower, taller or shorter. Corner handles let you move two edges at once. [[Category:User interface techniques]] {{comp-sci-stub}} [[de:Anfasser]]</text> </page> <page> <id>1036</id> <title>Adminer</title> <text>{{notability|Products|date=September 2009}} {{refimprove|date=September 2009}} {{Infobox Software | name = Adminer | logo = | screenshot = [[Image:Adminer01.png|250px|Adminer screenshot]] | caption = Adminer main screen | collapsible = | developer = Jakub Vrána | released = {{initial release|2007|07|25}} | frequently updated = yes<!-- Release version update? Don't edit 