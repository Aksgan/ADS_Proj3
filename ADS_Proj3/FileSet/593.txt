a wide range of edges in images. Most importantly, Canny also produced a ''computational theory of edge detection'' explaining why the technique works. [[Image:Valve monochrome canny (6).PNG|thumb|300px|right|The Canny edge detector applied to a colour photograph of a steam engine. (See the original image [[:Image:Valve_original_(1).PNG|here]])]] == Development of the Canny algorithm == Canny's aim was to discover the optimal edge detection algorithm. In this situation, an "optimal" edge detector means: * ''good [[detection]]'' – the algorithm should mark as many real edges in the image as possible. * ''good localization'' – edges marked should be as close as possible to the edge in the real image. * ''minimal response'' – a given edge in the image should only be marked once, and where possible, image noise should not create false edges. To satisfy these requirements Canny used the [[calculus of variations]] – a technique which finds the [[function (mathematics)|function]] which optimizes a given [[functional (mathematics)|functional]]. The optimal function in Canny's detector is described by the sum of four [[Exponential function|exponential]] terms, but can be approximated by the first [[derivative]] of a [[Gaussian function|Gaussian]]. == Stages of the Canny algorithm == === [[Image noise reduction|Noise reduction]] === [[Image:Valve gaussian (2).PNG|thumb|200px|right|The image after a 5x5 Gaussian mask has been passed across each pixel.]] The Canny edge detector uses a filter based on the first derivative of a Gaussian, because it is susceptible to noise present on raw unprocessed image data, so to begin with, the raw image is [[convolution|convolved]] with a Gaussian filter. The result is a slightly [[Gaussian blur|blurred]] version of the original which is not affected by a single noisy pixel to any significant degree. Here is an example of a 5x5 Gaussian filter, used to create the image to the right, with <math>\sigma</math> = 1.4: :<math> \mathbf{B} = \frac{1}{159} \begin{bmatrix} 2 & 4 & 5 & 4 & 2 \\ 4 & 9 & 12 & 9 & 4 \\ 5 & 12 & 15 & 12 & 5 \\ 4 & 9 & 12 & 9 & 4 \\ 2 & 4 & 5 & 4 & 2 \end{bmatrix} * \mathbf{A}. </math> === Finding the intensity gradient of the image === [[Image:Valve sobel with angle colour (4).PNG|thumb|200px|left|A binary edge map, derived from the Sobel operator, with a threshold of 80. The edges are coloured to indicate the edge direction: yellow for zero degrees, green for 45 degrees, blue for 90 degrees and red for 135 degrees.]] An edge in an image may point in a variety of directions, so the Canny algorithm uses four filters to detect horizontal, vertical and diagonal edges in the blurred image. The [[Edge detection|edge detection operator]] ([[Roberts Cross|Roberts]], [[Prewitt]], [[Sobel operator|Sobel]] for example) returns a value for the first derivative in the horizontal direction (Gy) and the vertical direction (Gx). From this the edge gradient and direction can be determined: :<math>\mathbf{G} = \sqrt{ {\mathbf{G}_x}^2 + {\mathbf{G}_y}^2 }</math> :<math>\mathbf{\Theta} = \operatorname{arctan}\left({ \mathbf{G}_y \over \mathbf{G}_x }\right).</math> The edge direction angle is rounded to one of four angles representing vertical, horizontal and the two diagonals (0, 45, 90 and 135 degrees for example). === Non-maximum suppression === [[Image:Valve canny with angle colour (7).PNG|thumb|200px|right|The same binary map shown on the left after non-maxima suppression. The edges are still coloured to indicate direction.]] Given estimates of the image gradients, a search is then carried out to determine if the gradient magnitude assumes a local maximum in the gradient direction. So, for example, * if the rounded angle is zero degrees the point will be considered to be on the edge if its intensity is greater than the intensities in the '''west and east''' directions, * if the rounded angle is 90 degrees the point will be considered to be on the edge if its intensity is greater than the intensities in the '''north and south''' directions, * if the rounded angle is 135 degrees the point will be considered to be on the edge if its intensity is greater than the intensities in the '''north west and south east''' directions, * if the rounded angle is 45 degrees the point will be considered to be on the edge if its intensity is greater than the intensities in the '''north east and south west''' directions. From this stage referred to as non-maximum suppression, a set of edge points, in the form of a [[binary image]], is obtained. These are sometimes referred to as "thin edges". === Tracing edges through the image and hysteresis thresholding === Intensity gradients which are large are more likely to correspond to edges than if they are small. It is in most cases impossible to specify a threshold at which a given intensity gradient switches from corresponding to an edge into not doing so. Therefore Canny uses thresholding with [[hysteresis]]. Thresholding with hysteresis requires two thresholds – high and low. Making the assumption that important edges should be along continuous curves in the image allows us to follow a faint section of a given line and to discard a few noisy pixels that do not constitute a line but have produced large gradients. Therefore we begin by applying a high threshold. This marks out the edges we can be fairly sure are genuine. Starting from these, using the directional information derived earlier, edges can be traced through the image. While tracing an edge, we apply the lower threshold, allowing us to trace faint sections of edges as long as we find a starting point. Once this process is complete we have a binary image where each pixel is marked as either an edge pixel or a non-edge pixel. From complementary output from the edge tracing step, the binary edge map obtained in this way can also be treated as a set of edge curves, which after further processing can be represented as polygons in the image domain. === Differential geometric formulation of the Canny edge detector === A more refined approach to obtain edges with sub-pixel accuracy is by using the approach of [[Edge detection#Differential edge 