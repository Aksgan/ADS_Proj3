limited to conservative definitions – that is, definitions in the traditional logic sense that only introduce terminology and do not add any knowledge about the world.<ref>H. B. Enderton (1972). ''A Mathematical Introduction to Logic''. San Diego, CA: Academic Press.</ref> To specify a conceptualization, one needs to state axioms that do constrain the possible interpretations for the defined terms.<ref name="TRG93"/> In the early years of the 21st century, the interdisciplinary project of [[cognitive science]] has been bringing the two circles of scholars closer together{{Citation needed|date=July 2009}}. For example, there is talk of a "computational turn in philosophy" that includes philosophers analyzing the formal ontologies of computer science (sometimes even working directly with the software), while researchers in computer science have been making more references to those philosophers who work on ontology (sometimes with direct consequences for their methods). Still, many scholars in both fields are uninvolved in this trend of cognitive science, and continue to work independently of one another, pursuing separately their different concerns. ==Ontology components== {{Main|Ontology components}} Contemporary ontologies share many structural similarities, regardless of the language in which they are expressed. As mentioned above, most ontologies describe individuals (instances), classes (concepts), attributes, and relations. In this section each of these components is discussed in turn. Common components of ontologies include: * Individuals: instances or objects (the basic or "ground level" objects) * [[Class (set theory)|Class]]es<!-- This deliberately links to the disambiguation page -->: [[Class (set theory)|set]]s, collections, concepts, [[Class (computer science)|classes in programming]], [[Class (philosophy)|types of objects]], or kinds of things. * [[Attribute (computing)|Attribute]]s: aspects, properties, features, characteristics, or parameters that objects (and classes) can have * [[Relation (mathematics)|Relations]]: ways in which classes and individuals can be related to one another * Function terms: complex structures formed from certain relations that can be used in place of an individual term in a statement * Restrictions: formally stated descriptions of what must be true in order for some assertion to be accepted as input * Rules: statements in the form of an if-then (antecedent-consequent) sentence that describe the logical inferences that can be drawn from an assertion in a particular form * Axioms: assertions (including rules) in a [[logical form]] that together comprise the overall theory that the ontology describes in its domain of application. This definition differs from that of "axioms" in [[generative grammar]] and [[formal logic]]. In those disciplines, axioms include only statements asserted as ''a priori'' knowledge. As used here, "axioms" also include the theory derived from axiomatic statements. * [[Event (philosophy)|Events]]: <!-- this links to the philosophy sense of 'Events' as that is currently the only article describing the issues around defining events in the ontology community--> the changing of attributes or relations Ontologies are commonly encoded using [[ontology language]]s. ==Domain ontologies and upper ontologies== A domain ontology (or domain-specific ontology) models a specific domain, or part of the world. It represents the particular meanings of terms as they apply to that domain. For example the word ''[[:wikt:card|card]]'' has many different meanings. An ontology about the domain of [[poker]] would model the "[[playing card]]" meaning of the word, while an ontology about the domain of [[computer hardware]] would model the "[[punched card]]" and "[[video card]]" meanings. An [[Upper ontology (computer science)|upper ontology]] (or foundation ontology) is a model of the common objects that are generally applicable across a wide range of domain ontologies. It employs a [[core glossary]] that contains, the terms, and associated object descriptions, as they are used in various, relevant domain sets. There are several standardized upper ontologies available for use, including [[Dublin Core]], [[General Formal Ontology|GFO]], [[Cyc#OpenCyc|OpenCyc]]/[[Cyc#ResearchCyc|ResearchCyc]], [[Suggested Upper Merged Ontology|SUMO]], and [http://www.loa-cnr.it/DOLCE.html DOLCE]. [[WordNet]], while considered an upper ontology by some, is not strictly an ontology. However, it has been employed as a linguistic tool for learning domain ontologies.<ref>R. Navigli, P. Velardi (2004). [http://www.mitpressjournals.org/doi/pdf/10.1162/089120104323093276 "Learning Domain Ontologies from Document Warehouses and Dedicated Web Sites"], Computational Linguistics, 30(2), MIT Press, pp. 151-179.</ref> The [[Gellish]] ontology is an example of a combination of an upper and a domain ontology. Since domain ontologies represent concepts in very specific and often eclectic ways, they are often incompatible. As systems that rely on domain ontologies expand, they often need to merge domain ontologies into a more general representation. This presents a challenge to the ontology designer. Different ontologies in the same domain can also arise due to different perceptions of the domain based on cultural background, education, ideology, or because a different representation language was chosen. At present, merging ontologies that are not developed from a common foundation ontology is a largely manual process and therefore time-consuming and expensive. Domain ontologies that use the same foundation ontology to provide a set of basic elements with which to specify the meanings of the domain ontology elements can be merged automatically. There are studies on generalized techniques for merging ontologies{{Citation needed|date=March 2010}}, but this area of research is still largely theoretical. ==Ontology engineering== {{Main|Ontology engineering}} [[Ontology engineering]] (or ontology building) is a subfield of [[knowledge engineering]] that studies the methods and methodologies for building ontologies. It studies the ontology development process, the ontology life cycle, the methods and methodologies for building ontologies, and the tool suites and languages that support them.<ref name="PFC04">A. Gómez-Pérez, M. Fernández-López, O. Corcho (2004). ''Ontological Engineering: With Examples from the Areas of Knowledge Management, E-commerce and the Semantic Web''. Springer, 2004.</ref><ref name="DMN">A. De Nicola, M. Missikoff, R. Navigli (2009). [http://www.dsi.uniroma1.it/~navigli/pubs/De_Nicola_Missikoff_Navigli_2009.pdf "A Software Engineering Approach to Ontology Building"]. Information Systems, 34(2), Elsevier, 2009, pp. 258-275.</ref> Ontology engineering aims to make explicit the knowledge contained within software applications, and within enterprises and business procedures for a particular domain. Ontology engineering offers a direction towards solving the interoperability problems brought about by semantic obstacles, such as the obstacles related to the definitions of business terms and software classes. Ontology engineering is a set of tasks related to the development of ontologies for a particular domain.<ref name="PIS00">L. Pouchard, N. Ivezic and C. Schlenoff (2000). [http://www.mel.nist.gov/msidlibrary/doc/AISfinal2.pdf "Ontology Engineering for Distributed Collaboration in Manufacturing"], In ''Proceedings of the AIS2000 