funding ''Project Spaceman'' in the mid 1980s for ICL Defence Technology Centre (DTC) to develop an enhanced security variant of VME. ICL launched this as a pair of complementary products, with the commercial release being called High Security Option (HSO), and the public sector release, including Government Furnished Encryption (GFE) technologies, being called Government Security Option (GSO). HSO and GSO were formally tested under the [[Government Communications Headquarters|CESG]] UK (Security) Evaluation Scheme, one of the predecessors to [[ITSEC]] and [[Common Criteria]], and in doing so became the first mainstream operating system to be formally Certified. ===Series 39=== The [[ICL Series 39|Series 39]] range introduced Nodal Architecture, a novel implementation of [[distributed shared memory]] that can be seen as a hybrid of a [[multiprocessor]] system and a [[computer cluster|cluster]] design. Each machine consists of a number of [[node (networking)|nodes]], and each node contains its own order-code processor and main memory. Virtual machines are typically located (at any one time) on one node, but have the capability to run on any node and to be relocated from one node to another. Discs and other peripherals are shared between nodes. Nodes are connected using a high-speed optical bus, which is used to provide applications with a virtual shared memory. Memory segments that are marked as shared (public or global segments) are replicated to each node, with updates being broadcast over the inter-node network. Processes which use unshared memory segments (nodal or local) run in complete isolation from other nodes and processes. <!-- if we're going to talk about public/global/nodal/local segments, we ought to explain them. Is this detail necessary? - MHK The nodal segments approach was leading edge and perhaps novel at the time, and would be worth describing I think - RW --> ==Development process== VME was originally written almost entirely in [[S3 (programming language)|S3]], a specially-designed [[system programming language]] based on [[Algol 68]] (however, VME/K was written primarily in the SFL assembly language). Although a [[high-level programming language|high-level language]] is used, the operating system is not designed to be independent of the underlying hardware architecture: on the contrary, the software and hardware architecture are closely integrated. From the early 1990s onwards, some entirely new VME subsystems were written partly or wholly in the [[C (programming language)|C programming language]]. From its earliest days, VME was developed with the aid of a [[software engineering]] [[software repository|repository]] known as [[CADES]], built for the purpose using an underlying [[IDMS]] database. [[CADES]] is not merely a [[revision control|version control system]] for code modules: it manages all aspects of the software lifecycle from requirements capture through to field maintenance. [[CADES]] was used in VME module development to hold separate definitions of data structures (Modes), constants (Literals), procedural interfaces and the core algorithms. Multiple versions ('Lives') of each of these components could exist. The algorithms were written in System Development Language ([[ICL_VME#SCL|SCL]]), which was then converted to [[S3 (programming language)|S3]] source by a pre-processor. Multiple versions of the same modules could be generated. ==Application development tools== The application development tools offered with VME fall into two categories: * [[third-generation programming language]]s * [[4GL|fourth-generation]] QuickBuild toolset. The toolset on VME is unusually homogeneous, with most customers using the same core set of languages and tools. As a result, the tools are also very well integrated. Third-party tools have made relatively little impression. For many years the large majority of VME users wrote applications in [[COBOL]], usually making use of the [[IDMS]] database and the [[Transaction Processing Management System|TPMS]] [[transaction processing]] monitor. Other programming languages included [[Fortran]], [[Pascal (programming language)|Pascal]], [[ALGOL 68]], [[Coral 66]] and [[IBM RPG|RPG2]], but these served minority interests. Later, in the mid 1980s, compilers for C became available, both within and outside the Unix subsystem, largely to enable porting of software such as [[relational database]] systems. The compilers developed within ICL share a common architecture, and in some cases share components such as code-generators. ===SFL=== An [[assembly language]] SFL ('''S'''ystem '''F'''unction '''L'''anguage) is also available, but is not widely used since the cancellation of VME/K (an exception is the VME version of the [[IDMS]] database engine). SFL was originally called '''M'''acro '''A'''ssembler '''P'''rogramming '''L'''anguag'''E''' (MAPLE), but as the 2900 architecture was being positioned as consisting of high level language machines the name was changed at the request of ICL Marketing. It had been developed as a part of the toolkit for System D, which was subsequently cancelled. Related families of assemblers for other architectures (CALM-xx running under VME, PALM-xx developed in Pascal and running on various hosts) were developed for internal use. ===QuickBuild=== The QuickBuild application development environment on VME has been highly successful despite the fact that applications are largely locked in to the VME environment. This environment is centred on the Data Dictionary System (DDS, also called OpenDDS), an early and very successful attempt to build a comprehensive [[software repository|repository]] supporting all the other tools, with full support for the development lifecycle. As well as database schemas and file and record descriptions, the dictionary keeps track of objects such as reports and queries, screen designs, and 4GL code; it also supports a variety of models at the requirements capture level, such as [[entity-relationship]] models and process models. The QuickBuild 4GL is packaged in two forms: * ApplicationMaster for the creation of online TP applications * ReportMaster for batch reporting. Both are high-level declarative languages, using [[Jackson Structured Programming]] as their design paradigm. ApplicationMaster is unusual in its approach to application design in that it focuses on the user session as if it were running in a single conversational process, completely hiding the complexity of maintaining state across user interactions. Because the 4GL and other tools such as the screen designer work only with the DDS dictionary, which also holds the database schemas, there is considerable reuse of metadata that is rarely achieved with other 4GLs. ==References== {{reflist}} ==Sources== *The Architecture of OpenVME. Nic Holt. ICL publication 55480001. Undated (probably around 1995) {{ICL hardware|VME}} {{DEFAULTSORT:Icl Vme}} [[Category:ICL operating systems|Virtual Machine Environment]] [[ru:VME]]</text> </page> <page> <id>17416</id> 