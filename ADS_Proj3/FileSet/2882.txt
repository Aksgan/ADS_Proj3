products that can offer this. [[WebSphere Message Broker]], from [[IBM]], does provide JMS support, as well as a whole suite of modern functionality. The [[Advanced Message Queuing Protocol]] (AMQP) is an emerging standard that defines the protocol and formats used in the messaging server and client, so implementations are interoperable. AMQP is defined to provide flexible routing, including common messaging paradigms like point-to-point, fanout, [[publish/subscribe]], and request-response. It also supports transaction management, queuing, distribution, security, management, clustering, federation and heterogeneous multi-platform support. Java applications that use AMQP are typically written in Java JMS. Other implementations provide APIs for C#, C++, PHP, Python, Ruby, and other languages. ==Trends== [[AMQP]] has been gaining adoption in applications that need an interoperable protocol for Message-oriented middleware. Other protocols used for message-oriented middleware include [[Extensible Messaging and Presence Protocol|XMPP]] and [[Streaming Text Oriented Messaging Protocol]]. Message-oriented messaging protocols under development include [http://www.restms.org RestMS], a protocol similar in nature to AMQP but constructed over a [[RESTful]] [[HTTP]] transport, and [http://rfc.zeromq.org/spec:2 SPB], a minimalist message framing protocol that can be used to carry higher-level MOM protocols. An additional trend sees message-oriented middleware functions being implemented in hardware - usually [[FPGA]]s or other specialized silicon chips.<ref>[http://advice.cio.com/ralph_frankel/are_you_soft_in_the_middle_the_future_of_enterprise_it_rests_in_hardware_applications?commentpage=1 Are You Soft in the Middle? The future of enterprise IT rests in hardware applications]</ref> ==See also== * [[Advanced Message Queuing Protocol]] * [[Enterprise messaging system]] * [[Enterprise service bus]] * [[Flow-based programming]] ==References== {{Reflist}} {{DEFAULTSORT:Message-Oriented Middleware}} <!--Categories--> [[Category:Enterprise application integration]] [[Category:Message-oriented middleware| ]] [[Category:Middleware]] <!--Other languages--> [[de:Message Oriented Middleware]] [[fr:Message-Oriented Middleware]] [[ko:메시지 지향 미들웨어]] [[it:Message-oriented middleware]] [[ja:メッセージ指向ミドルウェア]] [[pt:Message Oriented Middleware]] [[ru:Message Oriented Middleware]]</text> </page> <page> <id>24134</id> <title>Message Sequence Chart</title> <text>[[Image:CheckEmail.png|thumb|250px|right|Example of a simple [[Unified Modeling Language|UML]] message sequence chart.]] A '''Message Sequence Chart''' (or '''MSC''') is an interaction diagram from the [[Specification and Description Language|SDL]] family very similar to [[Unified Modeling Language|UML]]'s [[sequence diagram]], standardized by the [[International Telecommunication Union]]. The main area of application for Message Sequence Charts is as for communication behaviour in [[Real-time computing|real-time systems]], more specifically telecommunication [[Electronic Switching System]]s. ==History== The first version of the MSC standard was released in 1992<ref>{{cite web | url=http://www.sdl-forum.org/MSC2000present/sld006.htm | title=The history of MSC | publisher=sdl-forum.org | accessdate=2009-09-19}}</ref>. The 1996 version added references, ordering and [[Inline expansion|inlining]] expressions concepts, and introduced HMSC<ref>{{cite web | url=http://www.sdl-forum.org/MSC2000present/sld005.htm | title=HMSC | publisher=sdl-forum.org | accessdate=2009-09-19}}</ref> ('''H'''igh-level '''M'''essage '''S'''equence '''C'''harts), which are the MSC way of expressing [[State diagram]]s. The latest MSC 2000 version<ref>{{cite web | url=http://folk.uio.no/intime/msc2000.pdf | title=MSC 2000 | publisher=[[Ericsson]] | author=Øystein Haugen | accessdate=2009-09-19}}</ref> added object orientation, refined the use of data and time in diagrams, and added the concept of remote method calls<ref>{{cite web | url=http://www.sdl-forum.org/MSC2000present/sld007.htm | title=What is new in MSC 2000 relative to MSC 96. | publisher=sdl-forum.org | accessdate=2009-09-19}}</ref>. ==Comparison to UML== It has been said that MSC has been considered as a candidate for the [[Unified Modeling Language#Interaction diagrams|interaction diagrams]] in UML<ref>{{cite web | url=http://www.swe.informatik.uni-goettingen.de/publications/ER_JG_PG/SDL99-Harmonization.ps.gz | title=Towards a Harmonization of UML-Sequence Diagrams and MSC | year=1999 | publisher=[[University of Göttingen]] | author=Ekkart Rudolph, Jens Grabowskib, Peter Graubmann | accessdate=2009-09-20}}</ref>. However, proponents of MSC such as [[Ericsson]] think that MSC is better than [[Unified Modeling Language|UML 2.0]] for modelling large or complex systems<ref>{{cite web | url=http://www.irisa.fr/manifestations/2000/sam2000/SLIDES/Haugen.pdf | title=UML 2.0 vs. SDL/MSC - Ericsson Position Statement | date=June 2000 | publisher=[[Ericsson]] | author=Øystein Haugen | accessdate=2009-09-19}}</ref>. ==Live Sequence Charts== [[David Harel]] thinks that MSC still has several shortcomings such as: * MSC propose a weak [[Partially ordered set|partial ordering]] semantics that makes it impossible to capture some behavioral requirements, * The relationship between the MSC requirements and the executable specification is not clear. To address what he sees as weaknesses in the MSC model, David Harel proposed an extension on the MSC standard called '''LSC''' ('''L'''ive '''S'''equence '''C'''harts)<ref>{{cite web | url=http://www.comp.nus.edu.sg/~thiagu/public_papers/surveymsc.pdf | title=Message Sequence Charts | date=2003-04-08 | author=[[David Harel]] | accessdate=2009-09-20}}</ref><ref>{{cite web | url=http://www.springerlink.com/content/hfnna0r9jbl54ya4/ | title=LSCs: Breathing Life into Message Sequence Charts | date=2005-02-22 | publisher=[[Formal Methods in System Design]] | author=[[David Harel]] | accessdate=2009-09-20}}</ref><ref>{{cite web | url=http://portal.acm.org/citation.cfm?id=582429 | title=Multiple instances and symbolic variables in executable sequence charts | date=[[2002]] | publisher=[[Association for Computing Machinery]] | author=[[David Harel]] | accessdate=2009-09-20}}</ref>. ==Tools== *[[MscGen]] - Automatic generation of diagrams based on text descriptions of the messages. *[http://websequencediagrams.com/ Web-based MSC Generator] *[http://code.google.com/p/msc2svg/ Msc2Svg - Generates charts as SVG from a simple text description file] *[http://www.eventhelix.com/eventstudio/ EventStudio - Message sequence chart generation tool] *[http://www.doc.ic.ac.uk/ltsa/ LTSA] -- Supports the drawing and subsequent [[Formal verification|automated verification]] of message sequence charts. *[http://scstudio.sourceforge.net Sequence Chart Studio] - Extends [[Microsoft Visio]] to draw and verify Z.120 compliant sequence charts. *[http://trace2uml.tigris.org/ Trace2UML] - Tool for drawing and recording sequence charts. *[http://satoss.uni.lu/mscpackage/ MSC Latex package] - a [[LaTeX]] package for creating message sequence charts. ==See also== * [[Unified Modeling Language#Interaction diagrams|Interaction diagrams in UML]] ==References== {{reflist|2}} ==External links== *[http://www.itu.int/rec/T-REC-Z.120 ITU-T Recommendation Z.120] Message Sequence Chart (MSC) *Michel Reniers: “[http://www.win.tue.nl/~michelr/Files/proefschrift.pdf Message Sequence Charts -- Syntax and Semantics]”, PhD Thesis, [[Eindhoven University of Technology]], 1999 <references/> {{Soft-eng-stub}} {{telecomm-stub}} [[Category:Diagrams]] [[Category:Formal specification languages]] [[Category:Telephone exchanges]] [[Category:UML diagrams]] [[de:Message Sequence Chart]] [[pt:Diagrama de ladder]] [[sv:MSC]]</text> </page> <page> <id>24145</id> <title>Messaging Architects</title> <text>{{Infobox company |company_name = Messaging Architects |company_logo = [[File:Logo MessagingArchitects.gif]] |location_city = 180 Peel Street, Suite 333<br />[[Montreal, Quebec|Montreal]], [[Quebec]] |location_country = [[Canada]] |industry = [[Internet]], [[computer software]] |area served = {{flagicon|Earth}} Worldwide |homepage = [http://www.messagingarchitects.com www.messagingarchitects.com] }} '''Messaging Architects''' (MA) is a [[Canada|Canadian]] software company specializing in [[e-mail]] products. The flagship product is M+Platform, a product suite that prevents viruses, spam, and email abuse, ensures [[regulatory compliance]] and discovery, and supports disaster recovery. ==History== Launched in March 1995 as ChronoFAX, the company was a distributor of computer-based fax solutions. ChronoFAX became Tobit Software North America as result of a partnership with a German company called [[Tobit]] that produced fax software for the [[Novell]] [[NetWare]] and [[GroupWise]] markets. When the three-and-a-half-year partnership with Tobit came to a close, the company again renamed itself, as Messaging Architects. MA was initially a provider of add-ons for the Novell GroupWise messaging platform. Since then the company has launched other products, including: GWGuardian (now called M+Guardian) and GWArchive (M+Archive). 