a specific look and feel, or derive a look and feel from an existing one. ==Examples of look and feels== ===Platform look and feels=== The [[Java platform]] comes with several bundled look and feels<ref>{{cite web | url=http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/plaf.html#available | title=Java Tutorials: Available Look and Feels | publisher=[[Sun Microsystems]] | date=2008-02-14 | accessdate=2008-05-25}}</ref>: * A default [[cross-platform]] look and feel, called ''Metal'' (see {{Javadoc:SE|javax/swing/plaf/metal|MetalLookAndFeel}}). This look and feel comes with several [[Theme (computing)|themes]]: ** The {{Javadoc:SE|javax/swing/plaf/Metal|DefaultMetalTheme}}, which was historically the first Swing default theme. ** The smoother {{Javadoc:SE|javax/swing/plaf/Metal|OceanTheme}}, which became the default theme for [[Java version history#J2SE 5.0 (September 30, 2004)|Java 5.0]]. * Other cross-platform look and feels: ** A [[skinnable]] look and feel called [[Synth Look and Feel|synth]] (see {{Javadoc:SE|package=synth|javax/swing/plaf/synth}}), which is configured with an [[XML]] property file. ** The ''Nimbus'' look and feel (based on ''synth''), which is added for the [[Java version history#Java SE 6 Update 10|Java SE 6 Update 10]]<ref>{{cite web | url=http://www.jasperpotts.com/blog/category/nimbus/ | title=Nimbus Category | first=Jasper|last=Potts | date=2007-12-07 | accessdate=2008-05-25}}</ref><ref>{{cite web | url=http://java.sun.com/javase/downloads/ea/6u10/nimbus.jsp | title=Nimbus | publisher=[[Sun Microsystems]] | accessdate=2008-05-25 |archiveurl = http://web.archive.org/web/20080513022451/http://java.sun.com/javase/downloads/ea/6u10/nimbus.jsp <!-- Bot retrieved archive --> |archivedate = 2008-05-13}}</ref>. * Platform dependent look and feels<ref>{{cite web | url=http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/plaf.html#available | title=Available Look and Feels | publisher=[[Sun Microsystems]] | accessdate=2008-05-25}}</ref>: Look and feels that aim to be the closest as possible to the platform native GUI. The fidelity to the native look and feel theming has been improved in recent Java versions by leveraging the platform native GUI [[Theme (computing)|theming]] library when possible<ref>{{cite web | url=http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6185456 | title=GTK Native L&F Fidelity | publisher=[[Sun Microsystems]] | accessdate=2008-05-25}}</ref><ref>{{cite web | url=http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5106661 | title=XP L&F does not work on Windows Vista (Longhorn) - needs to use uxtheme api | publisher=[[Sun Microsystems]] | accessdate=2008-05-25}}</ref> ** A [[Microsoft Windows|Windows]] look and feel (this look and feel depends on the version of the Windows Operating System), ** A [[Motif (widget toolkit)|Motif]] or [[GTK+]] (for newer distributions) look and feel on [[Linux]] or [[Solaris (operating system)|Solaris]], ** A specific vendor look and feel for [[IBM AIX (operating system)|IBM AIX]], [[HP-UX]], and [[Mac OS X]]. ===Third-party look and feels=== Numerous other look and feels have been developed by third parties, such as: * [https://substance.dev.java.net/ Substance], a [[Skin (computing)|skinnable]] look and feel, * [http://napkinlaf.sourceforge.net/ Napkin], which can be used to make GUI work look provisional, * [http://www.javasoft.de/jsf/public/products/synthetica Synthetica], which is based on [[Synth Look and Feel|synth]], * [https://liquidlnf.dev.java.net/ Liquid], which aim to look like the ''Liquid'' theme for [[KDE]], * [http://www.jgoodies.com/freeware/looks/index.html JGoodies] Windows and plastic look and feels. ==References== {{reflist|2}} ==See also== * [[Look and feel]] * [[Swing (Java)|Swing]] ==External links== * [http://www.java2s.com/Product/Java/Swing/Look-And-Feel-LaF.htm List of Java look and feels] * [http://java.sun.com/docs/books/tutorial/uiswing/lookandfeel/plaf.html Sun's tutorial on setting the look and feel in Java] * [http://java.sun.com/docs/books/tutorial/ui/features/plaf.html Sun's tutorial overview of the pluggable look and feel mechanism] * [http://java.sun.com/products/jfc/tsc/articles/architecture/index.html#pluggable Swing pluggable look and feel architecture] * {{dmoz|Computers/Programming/Languages/Java/Class_Libraries/Graphics/User_Interface_Classes/Look_and_Feels|Swing pluggable look and feel links}} [[Category:Widget toolkits]] [[Category:Java platform]] [[Category:Java programming language]] [[Category:Java libraries]] [[Category:Java APIs]]</text> </page> <page> <id>29465</id> <title>Pnuts</title> <text>{{Infobox programming language | name = Pnuts | logo = [[Image:Pnuts logo.png]] | paradigm = [[Object-oriented programming|Object-oriented]], [[Scripting language|Scripting]] | year = 1997 | developer = Toyokazu Tomatsu (Sun Japan) | latest release version = 1.2.1 | latest release date = {{release date|2007|7|24}} | typing = [[Static typing|static]], [[Dynamic typing|dynamic]], [[Duck typing|duck]] | implementations = | dialects = | influenced by = [[Java (programming language)|Java]] | influenced = | platform = [[JVM]] | operating system = [[Cross-platform]] | license = [[Sun Public License]] | website = https://pnuts.dev.java.net/ }} '''Pnuts''' is a dynamic scripting language for the [[Java (software platform)|Java platform]]. It is designed to be used in a dual language system with the [[Java (programming language)|Java programming language]]. The goals of the Pnuts project are to provide a small, fast scripting language that has tight integration with the Java language. Pnuts uses syntax that is simple and friendly to Java developers, while also being very expressive. == Relationship to Java == Because Java and Pnuts share the same type system, Java code can easily invoke or define Pnuts functions. Likewise, Pnuts code can easily manipulate Java objects. Pnuts code can even define Java classes. Because Pnuts compiles to Java byte codes, these classes can be used by Java just like any other class. A class written in Pnuts can even later be replaced by a class written in Java with no other code changes. Pnuts syntax can look very similar to Java. The following is a code sample written in Java that is also a valid Pnuts script: <source lang="java"> import java.util.ArrayList; import java.util.List; List<String> countries = new ArrayList<String>(); countries.add("Canada"); countries.add("Austria"); countries.add("Brazil"); Collections.sort(countries); for (String country : countries) System.out.println("Hello " + country); </source> Alternatively, the expressiveness of Pnuts could be utilized: <source lang="java"> use("pnuts.lib") // Standard module that makes sort, println and other functions available. countries = ["Canada", "Austria", "Brazil"] sort(countries) for (country : countries) println("Hello " + country) </source> == History == Pnuts was originally developed in 1997 by Toyokazu Tomatsu as a testing tool for Java classes. Pnuts has since been extended, mainly focusing on essential functionality required for a Java-based scripting engine, such as a module system and bytecode compiler. == External links == * {{official|https://pnuts.dev.java.net}} * [http://pnuts.org/articles/pnutsHighlights.html Quick language overview and highlights] * [http://pnuts.org/snapshot/latest/ Latest downloads and documentation] * [http://pnuts.org/articles/pnutsQuickstart.html Language quickstart guide] * [http://www.jroller.com/tomatsu/ Pnuts Addict: Toyokazu Tomatsu's blog (Pnuts author)] [[Category:JVM programming languages]] [[Category:Scripting languages]] [[Category:Object-oriented programming languages]] [[Category:Java programming language family]]</text> </page> <page> <id>29470</id> <title>Pocket LOOX</title> <text>{{Userspace draft|source=ArticleWizard|date=February 2010}} [[File:Pocket LOOX 600.jpg|thumb|Pocket LOOX 600]] '''Pocket LOOX''' was a series of [[Pocket PC]] based [[Personal digital assistant]]s and [[automotive navigation system|navigation systems]] developed by [[Fujitsu Siemens]]. It was discontinued in 2007<ref name="Fujitsu Siemens Computers">[http://www.pocketloox-choice.com/]</ref>. ==Product Comparison Charts== ===Fujitsu Siemens Pocket LOOX PDAs=== Pocket LOOX 600 was a first PDA by Fujitsu Siemens<ref>{{cite web |url=http://www.filesaveas.com/loox.html |title=Fujitsu-Siemens Pocket Loox 600 - PDA Information |accessdate=2010-02-03}}</ref>,and HTC, released in 2002. It had a build-in [[Bluetooth]] module and two expansion slots, SD/MMC and CF. Fujitsu Siemens later released [[GPRS]] expansion module that provides mobile phone functionality. {|class="wikitable" style="font-size:95%;" border=1 |- !Model 