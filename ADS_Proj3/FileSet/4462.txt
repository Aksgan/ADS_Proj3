==How to build a time-bin encoded qubit== [[Image:timebin.jpg|center]] Time-bin encoding is done by having a single-photon go through a [[Mach-Zender interferometer]] (MZ), shown in black here. The photon coming from the left is guided through one of two paths (shown in blue and red); the guiding can be made by [[optical fiber]] or simply in free space using mirrors and [[Beam splitter|polarising cubes]]. One of the two paths is longer than the other. The difference in path length must be longer than the [[coherence length]] of the photon to make sure the path taken can be unambiguously distinguished. The interferometer has to keep a stable phase, which means that the path length difference must vary by much less than the wavelength of light during the experiment. This usually requires active temperature stabilization. If the photon takes the short path, it is said to be in the state <math>|0 \rangle</math>; if it takes the long path, it is said to be in the state <math>|1 \rangle</math>. If the photon has a non-zero probability to take either path, then it is in a coherent superposition of the two states: : <math>| \psi \rangle = \alpha |0 \rangle + \beta |1 \rangle,\,</math> These coherent superpositions of the two possible states are called qubits and are the basic ingredient of [[Quantum information science]]. In general, it is easy to vary the [[Phase (waves)|phase]] gained by the photon between the two paths, for example by stretching the fiber, while it is much more difficult to vary the amplitudes which are therefore fixed, typically at 50%. The created qubit is then : <math>| \psi \rangle = \frac{|0 \rangle +e^{i \phi} |1 \rangle}{\sqrt{2}},</math> which covers only a subset of all possible qubits. [[quantum measurement|Measurement]] in the {<math>|0 \rangle</math>,<math>|1 \rangle</math>} basis is done by measuring the time of arrival of the photon. Measurement in other bases can be achieved by letting the photon go through a second MZ before measurement, though, similar to the state preparation, the possible measurement setups are restricted to only a small subset of possible qubit measurements. ==Decoherence== Time-bin qubits do not suffer from depolarization or polarization mode-dispersion, making them better suited to fiber optics applications than polarization encoding. Photon loss is easily detectable since the absence of photons does not correspond to an allowed state, making it better suited than a photon-number based encoding. ==References== *http://arxiv.org/abs/quant-ph/0205144 [[Category:Quantum information science]]</text> </page> <page> <id>37748</id> <title>Time.h</title> <text>{{Manual|date=August 2009}} {{C_Standard_library}} <!-- to edit this template go to [[template:C_Standard_library]] --> {{lowercase|title=time.h}} The [[C (programming language)|C]] & [[C++ (programming language)|C++]] programming languages, '''time.h''' (ctime is the recommended header file for C++ programs) is a [[header file]] defined in the [[C Standard Library]] to declare [[system time|time and date]] functions that provide standardized access to time/date manipulation and formatting. ==Functions== ;<code>char *'''asctime'''([[const]] [[struct]] tm* ''tmptr'')</code> : Convert <code>tm</code> to a string in the format "Www Mmm dd hh:mm:ss yyyy", where Www is the weekday, Mmm the month in letters, dd the day of the month, hh:mm:ss the time, and yyyy the year. The string is followed by a [[newline]] and a terminating [[null character]], containing a total of 26 characters. The string pointed at is statically allocated and shared by <code>ctime</code> and <code>asctime</code> functions. Each time one of these functions is called the contents of the string is overwritten. ;<code>clock_t '''clock'''(void)</code> : Return number of clock ticks since process start. ;<code>char* '''ctime'''([[const]] time_t* ''timer'')</code> : Convert <code>[[time_t]]</code> time value to string in the same format as <code>asctime</code>. The string pointed is statically allocated and shared by <code>ctime</code> and <code>asctime</code> functions. Each time one of these functions is called the content of the string is overwritten. <code>ctime</code> also uses internally the buffer used by <code>gmtime</code> and <code>localtime</code> as return value, so a call to this function will overwrite this. ;<code>double '''difftime'''([[time_t]] ''timer2'', [[time_t]] ''timer1'')</code> : Returns the difference in seconds between the two times. ;<code>[[struct]] tm* '''gmtime'''([[const]] time_t* ''timer'')</code> : Convert a <code>[[time_t]]</code> value to a tm structure as UTC time. This structure is statically allocated and shared by <code>gmtime</code>, <code>localtime</code> and <code>ctime</code> functions. Each time one of these functions is called the content of the structure is overwritten. ;<code>[[struct]] tm* '''gmtime_r'''([[const]] time_t* ''timer'', [[struct]] tm* ''result'')</code> : Convert a <code>[[time_t]]</code> value to a tm structure as UTC time. The time is stored in the tm [[struct]] referred to by ''result''. This function is the [[Thread safety|thread-safe]] version of <code>gmtime</code>. ;<code>[[struct]] tm* '''localtime'''([[const]] time_t* ''timer'')</code> : Convert a <code>[[time_t]]</code> time value to a tm structure as local time (ie time adjusted for the local time zone and daylight savings). This structure is statically allocated and shared by <code>gmtime</code>, <code>localtime</code> and <code>ctime</code> functions. Each time one of these functions is called the content of the structure is overwritten. ;<code>[[time_t]] '''mktime'''([[struct]] tm* ''ptm'')</code> : Convert <code>tm</code> to a <code>[[time_t]]</code> time value. Checks the members of the tm structure passed as parameter ''ptm'' adjusting the values if the ones provided are not in the possible range or they are incomplete or mistaken and then translates that structure to a [[time_t]] value that is returned. The original values of ''tm_wday'' and ''tm_yday'' members of ''ptm'' are ignored and filled with the correspondent ones to the calculated date. The range of ''tm_mday'' is not checked until ''tm_mon'' and ''tm_year'' are determined. On error, a -1 value is returned. ;<code>[[time_t]] '''time'''(time_t* ''timer'')</code> : Get the current time (number of seconds from the [[Unix time|epoch]]) from the system clock. Stores that value in <code>timer</code>. If <code>timer</code> is null, the value is not stored, but it is still returned by the function. ;<code>[[size t]] '''strftime'''(char* ''s'', [[size t]] ''n'', [[const]] char* ''format'', [[const]] [[struct]] tm* ''tptr'')</code> : Format <code>tm</code> into a date/time string. ;<code>char * '''strptime'''([[const]] char* ''buf'', [[const]] char* ''format'', [[struct]] tm* ''tptr'')</code> : Scan values from <code>buf</code> string into <code>tptr</code> struct. On success it returns pointer to the character following the last character parsed. Otherwise it returns null. ;<code>time_t '''timegm'''(struct tm *brokentime)</code> : timegm is functionally identical to mktime except it always takes the input values to 