\frac{1}{2}} \right] + \frac{1}{\Delta x_i} \left[ P_{i + \frac{1}{2}} - P_{i - \frac{1}{2}} \right] </math>. Where, :<math>P_{i + \frac{1}{2}} = \frac{1}{2} \left[ Q \left( u_{i} , \frac{u_{i+1} - u_i}{\Delta x_i} \right) + Q \left( u_{i+1} , \frac{u_{i+1} - u_i}{\Delta x_i} \right) \right] </math> , :<math>P_{i - \frac{1}{2}} = \frac{1}{2} \left[ Q \left( u_{i-1} , \frac{u_{i} - u_{i-1}}{\Delta x_{i-1}} \right) + Q \left( u_{i} , \frac{u_{i} - u_{i-1}}{\Delta x_{i-1}} \right) \right] </math> . Full details of the algorithm (''full'' and ''semi-discrete'' versions) and its derivation can be found in the original paper (Kurganov and Tadmor, 2000), along with a number of 1D and 2D examples. Additional information is also available in the earlier related paper by Nessyahu and Tadmor (1990). '''Note:''' This scheme was originally presented by Kurganov and Tadmor as a 2nd order scheme based upon ''linear extrapolation''. A later paper (Kurganov and Levy, 2000) demonstrates that it can also form the basis of a third order scheme. A 1D advective example and an Euler equation example of their scheme, using parabolic reconstruction (3rd order), are shown in the ''parabolic reconstruction'' and ''Euler equation'' sections below. ==Piecewise parabolic reconstruction== [[Image:ParabolicExtrap.jpg|thumb|An example of MUSCL type state parabolic-reconstruction.|200px|right|An example of MUSCL type state parabolic-reconstruction.]] It is possible to extend the idea of linear-extrapolation to higher order reconstruction, and an example is shown in the diagram opposite. However, for this case the left and right states are estimated by interpolation of a second-order, upwind biased, difference equation. This results in a parabolic reconstruction scheme that is third-order accurate in space. We follow the approach of Kermani (Kermani, et al., 2003), and present a third-order upwind biased scheme, where the symbols <math> u^*_{i + \frac{1}{2}} </math> and <math> u^*_{i - \frac{1}{2}} </math> again represent scheme dependent functions (of the limited reconstructed cell edge variables). But for this case they are based upon parabolically-reconstructed states, i.e. :<math> u^*_{i + \frac{1}{2}} = f \left( u^L_{i + \frac{1}{2}} , u^R_{i + \frac{1}{2}} \right), u^*_{i - \frac{1}{2}} = f \left( u^L_{i - \frac{1}{2}} , u^R_{i - \frac{1}{2}} \right) </math>, and :<math> u^L_{i + \frac{1}{2}} = u_{i} + \frac{\phi \left( r_{i} \right)}{4} \left[ \left( 1 - \kappa \right) \delta u_{i - \frac{1}{2} } + \left( 1 + \kappa \right) \delta u_{i + \frac{1}{2} } \right]</math>, :<math>u^R_{i + \frac{1}{2}} = u_{i+1} - \frac{\phi \left( r_{i+1} \right)}{4} \left[ \left( 1 - \kappa \right) \delta u_{i + \frac{3}{2} } + \left( 1 + \kappa \right) \delta u_{i + \frac{1}{2} } \right] </math>, :<math> u^L_{i - \frac{1}{2}} = u_{i-1} + \frac{\phi \left( r_{i-1} \right)}{4} \left[ \left( 1 - \kappa \right) \delta u_{i - \frac{3}{2}} + \left( 1 + \kappa \right) \delta u_{i - \frac{1}{2} } \right]</math>, :<math>u^R_{i - \frac{1}{2}} = u_{i} - \frac{\phi \left( r_{i} \right)}{4} \left[ \left( 1 - \kappa \right) \delta u_{i + \frac{1}{2} } + \left( 1 + \kappa \right) \delta u_{i - \frac{1}{2} } \right]</math>. [[Image:StepParabolicKTalbada.png|thumb|1D advective equation <math>u_t+u_x=0</math>, with step wave propagating to the right. Shows the analytical solution along with a simulation based upon the Kurganov and Tadmor Central Scheme with parabolic reconstruction and van Albada limiter.|200px|right|1D advective equation <math>u_t+u_x=0</math>, with step wave propagating to the right. Shows the analytical solution along with a simulation based upon the Kurganov and Tadmor Central Scheme with parabolic reconstruction and van Albada limiter.]] Where <math> \kappa \ </math> = 1/3 and, :<math> \delta u_{i + \frac{1}{2} } = \left( u_{i+1} - u_{i} \right) , \delta u_{i - \frac{1}{2} } = \left( u_{i} - u_{i-1} \right)</math>, :<math> \delta u_{i + \frac{3}{2} } = \left( u_{i+2} - u_{i+1} \right) , \delta u_{i - \frac{3}{2} } = \left( u_{i-1} - u_{i-2} \right)</math>, and the limiter function <math> \phi \left( r \right)\ </math>, is the same as above. Parabolic reconstruction is straight forward to implement and can be used with the Kurganov and Tadmor scheme in lieu of the linear extrapolation shown above. This has the effect of raising the spatial solution of the KT scheme to 3rd order. It performs well when solving the Euler equations, see below. This increase in spatial order has certain advantages over 2nd order schemes for smooth solutions, however, for shocks it is more dissipative - compare diagram opposite with above solution obtained using the KT algorithm with linear extrapolation and Superbee limiter. This simulation was carried out on a mesh of 200 cells using the same KT algorithm but with parabolic reconstruction. Time integration was by RK-4, and the alternative form of van Albada limiter, <math> \phi_{va} (r) = \frac{2 r}{1 + r^2 } \ </math>, was used to avoid spurious oscillations. ==Example: 1D Euler equations== For simplicity we consider the 1D case without heat transfer and without body force. Therefore, in conservation vector form, the general [[Euler equations (fluid dynamics)|Euler equations]] reduce to :<math> \frac{\partial \mathbf{U}}{\partial t}+ \frac{\partial \mathbf{F}}{\partial x}=0 </math>, where :<math> \mathbf{U}=\begin{pmatrix}\rho \\ \rho u \\ E\end{pmatrix}\qquad \mathbf{F}=\begin{pmatrix}\rho u\\p+\rho u^2\\ u(E+p)\end{pmatrix}\qquad </math>, and where '''<math> \mbox{U} </math>''' is a vector of states and '''<math> \mbox{F} </math>''' is a vector of fluxes. The equations above represent conservation of '''mass''', '''momentum''', and '''energy'''. There are thus three equations and four unknowns, <math> \rho </math> (density) <math> u </math> (fluid velocity), <math> p </math> (pressure) and <math> E </math> (total energy). The total energy is given by, :<math>E=\rho e + \frac{1}{2} \rho u^2</math>, where <math> e\ </math> represents specific internal energy. In order to close the system an [[equation of state]] is required. One that suits our purpose is :<math>p=\rho \left(\gamma-1 \right)e</math>, where <math> \gamma\ </math> is equal to the ratio of specific heats <math> \left[ c_p/c_v \right] </math> for the fluid. We can now proceed, as shown above in the simple 1D example, by obtaining the left and right extrapolated states for each state variable. Thus, for density we obtain :<math> \rho^*_{i + \frac{1}{2}} = \rho^*_{i + \frac{1}{2}} \left( \rho^L_{i + \frac{1}{2}} , \rho^R_{i + \frac{1}{2}} \right), \rho^*_{i - \frac{1}{2}} = \rho^*_{i - \frac{1}{2}} \left( \rho^L_{i - \frac{1}{2}} , \rho^R_{i - \frac{1}{2}} \right) </math>, where :<math> \rho^L_{i + \frac{1}{2}} = \rho_{i} + 0.5 \phi \left( r_{i} 