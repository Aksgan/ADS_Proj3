Replication System (dRS). dRS can also be used for migration between object (db4o) and relational ([[RDBMS]]) technologies. As an [[embedded database]] db4o can be run in application process. It is distributed as a library (jar/dll). == Features == === One-line-of-code database === db4o contains a function to store any object with a single command: ''objectContainer.store(new SomeClass());'' Note that SomeClass here does not require any interface implementations, annotations or attributes added. It can be just any application class including third-party classes contained in referenced libraries. All field objects (including collections) are saved automatically. Special cases can be handled through writing custom [http://developer.db4o.com/Documentation/Reference/db4o-7.12/java/reference/Content/implementation_strategies/typehandlers.htm typehandlers]. === Embeddable === db4o is designed to be embedded in clients or other software components completely invisible to the end user. Thus, db4o needs no separate installation mechanism, but comes as just one easily deployable library with a very low footprint of ~670kB in .NET version and around 1MB in java version. === Client-server mode === Client/server version allows db4o to communicate between client and server-side applications. db4o uses TCP/IP for client-server communication and allows to configure port number. Communication is implemented through messaging. Due to using [http://developer.db4o.com/Documentation/Reference/db4o-7.12/java/reference/Content/implementation_strategies/db4o_reflection_api.htm Generic Reflection] db4o can work without implementing persistent classes on the server. However, this mode has certain limitations. Client-server performance is dependent on the network bandwidth. The querying performance can be enhanced by using Lazy Queries. === Dynamic schema evolution === db4o supports automatic object schema evolution for the basic class model changes (field name deletion/addition). More complex class model modifications, like field name change, field type change, hierarchy move are not automated out-of-the box, but can be automated by writing small utility update program (see documentation). This feature can be viewed as an advantage over relational model, where any change in the schema results in mostly manual code review and upgrade to match the schema changes. In most cases the code upgrade cannot be automated as the actual query language is string based (SQL) and is not recognised by IDE autocompletion and code generation tools like Intellisense. === Native Queries === Rather than using string-based APIs (such as [[SQL]], [[OQL]], JDOQL, [[EJB QL]], and SODA), Native Queries (NQ) allow developers to simply use the programming language itself (e.g., Java, C#, or VB.NET) to access the database and thus avoid a constant, productivity-reducing context switch between programming language and data access API. Native Queries also provide [[type safety]], as well as remove the need to sanitize against [[code injection]] (see [[SQL Injection]]). === LINQ === [[LINQ]] support is fully integrated in db4o for .NET version 3.5. LINQ allows to create object-oriented queries of any complexity with the benefit of compile-time checking, IDE Intellisense integration and automated refactoring. Due to integration with some open-source libraries db4o also allows optimized LINQ queries on Compact Framework. LINQ can be used both against relational and object data storage, thus providing a bridge between them, which can be valuable for projects using both technologies, or for the projects migrating between the two. It can also be used as an abstraction layer, allowing to easily switch the underlying database technology. == Disadvantages == The [[Object_database#Advantages_and_disadvantages|drawbacks and difficulties]] faced by other Object Databases apply to Db4o as well: :Other things that work against ODBMS seem to be the lack of interoperability with a great number of tools/features that are taken for granted in the SQL world, including but not limited to industry standard connectivity, reporting tools, OLAP tools, and backup and recovery standards.{{Citation needed|date=November 2010}} Additionally, object databases lack a formal mathematical foundation, unlike the relational model, and this in turn leads to weaknesses in their query support. However, this objection is offset by the fact that some ODBMSs fully support SQL in addition to navigational access, e.g. Objectivity/SQL++, Matisse, and InterSystems CACHÉ. Effective use may require compromises to keep both paradigms in sync. Issues specific to Db4o may include: * Lack of full-text indexing, poor performance on full-text search<ref name="db4oreview">http://wiki.hsr.ch/Datenbanken/files/25.db4oReview.pdf</ref> * The most common method of querying (native queries) is potentially very slow (''O(n)'')<ref name="db4oreview"/><ref>http://stackoverflow.com/questions/21207/db4o-experiences</ref>. * "There is no general query language like [[SQL]] which can be used for data analyzing or by other applications. This does not allow db4o to be very flexible in a heterogeneous environment."<ref name="db4oreview"/> * Replication cannot be done administratively—i.e. one needs to program an application to achieve replication. "This is contrary to most RDBMS, where administrators manage servers and replication between them."<ref name="db4oreview"/> == Portability and cross-platform deployment == db4o supports Java's JDK 1.1.x through 6.0 and runs on [[Java EE]] and [[Java SE]]. db4o also runs with [[Java ME]] dialects that support reflection, such as [[Connected Device Configuration|CDC]], [[Personal Profile]], [[Symbian OS]], [[SavaJe]] and [[Zaurus]]. Depending on customer demand, db4o will also run on dialects without reflection, such as [[CLDC]], [[MIDP]], [[BlackBerry]] and [[Palm OS]]. db4o was also successfully tested on [[JavaFX]] and [[Silverlight]]. db4o runs out of the box on [[Android (operating system)|Android]]. db4o uses custom [http://developer.db4o.com/Documentation/Reference/db4o-7.12/java/reference/Content/implementation_strategies/db4o_reflection_api.htm generic reflector] to represent class information, when class definitions are not available, which allows to use it in a mixed Java-.NET environment, for example Java client - .NET server and vice versa. Generic reflector also makes it easy to convert the project between environments, as the database does not have to be converted. == Documentation and support == db4o provides various sources of documentation: [http://developer.db4o.com/Documentation/Reference/db4o-7.12/java/tutorial/ tutorial], [http://developer.db4o.com/Documentation.aspx reference documentation], [http://developer.db4o.com/Documentation/Reference/db4o-7.12/java/api/ API documentation], [http://developer.db4o.com/Resources/CommunityContent/Webcasts.aspx online paircasts] and [http://developer.db4o.com/Blogs.aspx blogs]. Lots of important information can also be retrieved from [http://developer.db4o.com/forums forums] and [http://developer.db4o.com/ProjectSpaces community additions] (articles, translated documentation sources, sample projects etc). For commercial users db4o suggests dDN (db4o developer network) subscription with guaranteed 24-hour support and live pairing sessions with the client – Xtreme Connect <ref>[http://www.db4o.com/about/productinformation/dxc/ Product Information]</ref>. == Object Manager == Object Management Enterprise (OME) is a db4o database browsing tool, which is available as a plugin to Eclipse and MS Visual Studio 2005/2008. OME allows to browse classes and objects in the database, connect to a database server, build queries using drag&drop, view database statistics etc. In addition to graphical 