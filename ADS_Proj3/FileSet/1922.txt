date = May 10, 2004 | title = Hibernate: A Developer's Notebook | edition = First | publisher = [[O'Reilly Media]] | pages = 190 | isbn = 0596006969 | url = http://oreilly.com/catalog/9780596006969/ }} {{Refend}} ==External links== * {{official|http://www.hibernate.org}} *[http://www.javafree.org/artigo/871462/Interview-with-Gavin-King-founder-of-Hibernate.html Interview with Gavin King, founder of Hibernate] *[http://www.visualbuilder.com/java/hibernate/tutorial/ Hibernate Tutorial] *[http://docs.jboss.org/hibernate/stable/core/reference/en/html/ Hibernate Reference Documentation] *[http://dev.wavemaker.com/forums/?q=node/3232 Hibernate and HQL Query Tutorial] *[http://community.wavemaker.com/WM5App_HQLGuru/ HQL Guru - Running Hibernate Query Examples] *[http://www.lalitbhatt.com/tiki-index.php?page=Hibernate Hibernate Tutorial] {{Java Persistence API}} {{Java (Sun)}} [[Category:Object-relational mapping]] [[Category:Java platform]] [[Category:Java enterprise platform]] [[Category:Red Hat]] [[Category:Cross-platform software]] [[Category:Persistence frameworks]] [[ca:Hibernate]] [[cs:Hibernate]] [[de:Hibernate (Framework)]] [[el:Hibernate Framework]] [[es:Hibernate]] [[fa:هایبرنیت]] [[fr:Hibernate]] [[it:Hibernate]] [[mn:Hibernate (Java)]] [[nl:Hibernate]] [[ja:Hibernate]] [[pl:Hibernate]] [[pt:Hibernate]] [[ru:Hibernate (библиотека)]] [[tr:Hibernate]] [[uk:Hibernate]] [[zh:Hibernate]]</text> </page> <page> <id>16625</id> <title>Hicks optimality</title> <text>In [[game theory]], a '''Hicks-optimal outcome''', named after [[John Hicks]], is an outcome in which the total payoff for all of the players of a game is the most it could possibly be. A Hicks-optimal outcome is always [[Pareto efficiency|Pareto efficient]]. {{gametheory-stub}} [[Category: Game theory]]</text> </page> <page> <id>16634</id> <title>Hidden transformation</title> <text>The '''hidden transformation''' reformulates a [[constraint satisfaction problem]] in such a way all constraints have at most two variables. The new problem is satisfiable if and only if the original problem was, and solutions can be converted easily from one problem to the other. There are a number of [[algorithm]]s for constraint satisfaction that work only on constraints that have at most two variables. If a problem has constraints with a larger arity (number of variables), conversion into a problem made of binary constraints allows for execution of these solving algorithms. Constraints with one, two, or more variables are called unary, binary, or ''higher-order'' constraints. The number of variables in a constraint is called its ''arity''. [[Image:Hidden-transformation-before.svg|thumb|220px|The hidden transformation replaces each constraint with a new, ''hidden'' variable.]] The hidden transformation converts an arbitrary constraint satisfaction problem into a binary one. The transformation is similar to that generating the [[constraint satisfaction dual problem|dual problem]]. The problem is added new variables, one for each constraint of the original problem. The domain of each such variable is the set of satisfying tuples of the corresponding constraint. The constraints of the new problem enforce the value of the original variables to be consistent with the values of the new variables. For example, if the new variables <math>c</math>, corresponding to the old constraint <math>C(x,y)</math> can assume values <math>(1,2)</math> and <math>(2,0)</math>, two new constraints are added: the first one enforces <math>x</math> to take value <math>1</math> if <math>c=(1,2)</math> value <math>2</math> if <math>c=(2,0)</math>, and vice versa. The second condition enforces a similar condition for variable <math>y</math>. The graph representing the result of this transformation is [[Bipartite graph|bipartite]], as all constraints are between a new and an old variable. Moreover, the constraints are functional: for any given value of a new variable, only one value of the old variable may satisfy the constraint. ==References== *{{cite journal | first=Fahiem | last=Bacchus | coauthors=Xinguang Chen, Peter van Beek, Toby Walsh | title=Binary vs. Non-Binary Constraints | journal=Artificial Intelligence | volume=140 | issue=1/2 | pages=1–37 | year=2002 | url=http://www.cs.toronto.edu/~fbacchus/Papers/bcvwaij02.pdf |doi=10.1016/S0004-3702(02)00210-2}} [[Category:Constraint satisfaction]]</text> </page> <page> <id>16641</id> <title>Hierarchical RBF</title> <text>{{Context|date=October 2009}} A '''hierarchical RBF''' is an [[interpolation]] method based on [[Radial basis function|RBF]]. [[Interpolation]] based on [[Radial basis function|RBF]] used for the construction of shape models in [[3d computer graphics|3D computer graphics]] (see [[Stanford Bunny]] on picture), treatment of results from a [[3D scanner]], terrain reconstruction and others. [[Image:MyBunny.gif]] This problem often named "large scattered data point set interpolation". The idea of method (for example in 3D) consists of the following: * let the scattered points be presented a set <math>\mathbf{P}=\{\mathbf{c}_i=(\mathbf{x}_i,\mathbf{y}_i,\mathbf{z}_i)\vert^{N}_{i=0} \subset \mathbb{R}^3\}</math> * let the exist a set of values of some function in scattered points <math>\mathbf{H}=\{\mathbf{h}_i \vert^{N}_{i=0}\subset \mathbb{R}\}</math> * find a function <math>\mathbf{f}(\mathbf{x})</math> which will meet next condition: <math>\mathbf{f}(\mathbf{x})=1</math> for points lies on shape and <math>\mathbf{f}(\mathbf{x})\neq1</math> for points not lies on shape * as J. C. Carr et al. showed <ref>Carr, J.C.; Beatson, R.K.; Cherrie, J.B.; Mitchell, T.J.; Fright, W.R.; McCallum B.C.; Evans, T.R. (2001), “Reconstruction and Representation of 3D Objects with Radial Basis Functions” ACM SIGGRAPH 2001, Los Angeles, CA, P. 67–76.</ref> this function looks like <math>\mathbf{f}(\mathbf{x})=\sum_{i=1}^N \lambda_i \varphi(\mathbf{x},\mathbf{c}_i)</math> where: <math>\varphi</math> &mdash; it is [[Radial basis function|RBF]]; <math>\lambda</math> &mdash; it is coefficients which are the solution of the [[Linear system of equations|system]] show on picture: [[Image:System.gif]] for determination of surface it is necessary to estimate the value of function <math>\mathbf{f}(\mathbf{x})</math> in interesting points ''x''. A lack of such method is considerable complication <ref>Bashkov, E.A.; Babkov, V.S. (2008) “Research of RBF-algorithm and his modifications apply possibilities for the construction of shape computer models in medical practic”. Proc Int. Conference "Simulation-2008", Pukhov Institute for Modelling in Energy Engineering, [http://babkov.name/article/2008-09.pdf] (in Russian)</ref> <math>\mathbf{O}(\mathbf{n}^2)</math> for calculate [[Radial basis function|RBF]], solve [[Linear system of equations|system]] and determine surface. ==Other similar methods== * Reduce interpolation centres (<math>\mathbf{O}(\mathbf{n}^2)</math> for calculate [[Radial basis function|RBF]] and solve [[Linear system of equations|system]], <math>\mathbf{O}(\mathbf{m}\mathbf{n})</math> for determine surface) * Compactly supported [[Radial basis function|RBF]] (<math>\mathbf{O}(\mathbf{n}\log{\mathbf{n}})</math> for calculate [[Radial basis function|RBF]], <math>\mathbf{O}(\mathbf{n}^{1.2..1.5})</math> for solve [[Linear system of equations|system]], <math>\mathbf{O}(\mathbf{m}\log{\mathbf{n}})</math> for determine surface) * [[Fast multipole method|FMM]] (<math>\mathbf{O}(\mathbf{n}^2)</math> for calculate [[Radial basis function|RBF]], <math>\mathbf{O}(\mathbf{n}\log{\mathbf{n}})</math> for solve [[Linear system of equations|system]], <math>\mathbf{O}(\mathbf{m}+\mathbf{n}\log{\mathbf{n}})</math> for determine surface) ==Hierarchical algorithm== An idea of [[hierarchical]] [[Algorythm|algorithm]] is an acceleration of calculations due to [[Decomposition (computer science)|decomposition]] of intricate problem on the great number of simple (see picture). [[Image:Sxema.gif]] In this case [[hierarchical]] division of space containing points on elementary parts, the [[Linear system of equations|system]] of small dimension solves in each of which. The calculation of surface in this case is taken to the [[hierarchical]] (on the basis of [[Tree (data structure)|tree-structure]]) calculation of interpolant. A method for a [[2D computer graphics|2D]] case is offered Pouderox J. et al.<ref>Pouderox, J. et al. (2004), “Adaptive hierarchical RBF interpolation for creating smooth digital elevathion models”, Proc. 12-th ACM Int. Symp. Advances in Geographical information Systems 2004, ACP Press, P. 232&ndash;240</ref> For a [[3D computer graphics|3D]] case a method is used in the tasks of [[3D computer graphics|3D graphics]] by W. Qiang et al.<ref>Qiang, W.; Pan, Z.; Chun, 