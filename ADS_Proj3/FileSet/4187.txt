SpiderOak Plus+ subscription. The paid plan starts at $10.00/month (or $5.00/month for students<ref>{{cite web | url = https://spideroak.com/education | title = SpiderOak Education Discount | publisher = SpiderOak | author = SpiderOak | accessdate = 2009-12-19 }}</ref>) for each 100 GB increment (or $100/year for each 100 GB)<ref>{{cite web | url = https://spideroak.com/pricing | title = "Spideroak Pricing" | publisher = SpiderOak | author = SpiderOak | accessdate = 2009-06-19 }}</ref>. Some components of SpiderOak are open source, and the company has announced their intent for the client to be fully open source in the future<ref>{{cite web | url = https://spideroak.com/engineering_matters#open_source | title = "Spideroak: Engineering Matters" | publisher = SpiderOak | accessdate = 2009-11-04 }}</ref>. SpiderOak uses a Fault-Tolerant Design, so no file is ever deleted from a user account unless it is manually done through the client<ref>{{cite web | url = https://spideroak.com/whyspideroak | title = "Spideroak: Why SpiderOak" | publisher = SpiderOak | accessdate = 2009-11-04 }}</ref>. SpiderOak won the Editor's Choice Award in the August 2009 edition of [[MacLife]] Magazine<ref>{{cite web | url = http://www.maclife.com/article/reviews/online_storage_battle_which_cloud_backup_service_reigns_supreme?page=0%2C1 | title = "Online Storage Battle: Which Cloud Back-Up Service Reigns Supreme?" | publisher = MacLife | author = Susie Ochs | date = 2009-06-11 | accessdate = 2009-11-04 }}</ref> and also was made an Editor's Choice by [[Computer Shopper]] magazine in May 2009<ref>{{cite web |url=http://computershopper.com/software/reviews/spideroak-3.0|title=SpiderOak 3.0 Review}}</ref>. ==Main features== *All data accessible in one de-duplicated location *Configurable multi-platform synchronization *Preserve all historical versions & deleted files *Share folders instantly in web ShareRooms with [[RSS]] *Retrieve files from any internet-connected device *Comprehensive 'zero-knowledge' data encryption *Unlimited devices<ref>{{cite web | url = https://spideroak.com | title = "Spideroak: Free Online Backup, File and Folder Sync, Share & Storage for Windows, Mac, and Linux - SpiderOak.com" | publisher = SpiderOak | accessdate = 2009-11-04 }}</ref> ==See also== *[[List of online backup services]] *[[File synchronization]] ==References== {{reflist}} ==External links== * [https://spideroak.com/ Official website] * [http://backupsolutionsreview.com/backup-solutions/spideroak/review_text_cont Review in Online Backup Solution Reviews] * [http://www.notebookreview.com/default.asp?newsID=5225&review=SPiderOak+Online+Backup+Review Review in Notebookreview] * [http://www.maclife.com/article/reviews/spideroak MacLife Editors Choice Article] * [http://www.linux-mag.com/id/7490/2/ Review in Linux Magazine] * [http://www.onlinebackupdeals.com/spideroak/ Review in OnlineBackupDeals] {{DEFAULTSORT:Spideroak}} [[Category:File hosting]] [[Category:Data synchronization]] [[Category:Linux archivers and compression-related utilities]] [[Category:Mac OS X software]] [[Category:Windows software]] [[Category:Cross-platform software]] [[Category:Cloud storage]] [[fr:SpiderOak]]</text> </page> <page> <id>35373</id> <title>Spinner (game)</title> <text>{{Unreferenced|date=October 2006}} [[Image:Twister-Spinner.png|thumb|150px|right|<center>[[Twister (game)|Twister]] spinner</center>]] [[Image:Dreidel 001.jpg|thumb|150px|right|<center>Dreidel</center>]] A '''''spinner''''' is a method of [[random]]ly determining something in a game, often movement. There are two types of spinners: #A balanced arrow anchored to a hard backing, usually cardboard, with printed sections. A spinner is used in some games instead of [[Dice]] because a spinner provides more space to print text or images. This type of spinner may have different-sized sections to provide a random distribution that would be more difficult to achieve with [[dice]]. #A polyhedral [[top]] that is spun (rather than rolled like [[dice]]) to produce a random result. An example of this type of spinner is a [[Dreidel]]. {{DEFAULTSORT:Spinner (Game)}} [[Category:Randomness]] {{Board-game-stub}}</text> </page> <page> <id>35376</id> <title>Spirit Parser Framework</title> <text>The '''Spirit Parser Framework''' is an [[object oriented]] [[Recursive descent parser|recursive descent]] [[parser generator]] framework implemented using template [[metaprogramming]] techniques. [[Expression templates]] allow users to approximate the syntax of [[Extended Backus Naur Form]] (EBNF) completely in [[C++]]. Parser objects are composed through [[operator overloading]] and the result is a backtracking [[LL parser|LL(âˆž)]] parser that is capable of parsing rather ambiguous grammars. Spirit can be used for both [[lexing]] and parsing, together or separately. This framework is part of the [[Boost C++ Libraries | Boost libraries]]. == Operators == Because of limitations of the C++ language, the syntax of Spirit has been designed around the operator precedences of C++, while bearing resemblance to both [[Extended Backus Naur Form|EBNF]] and [[regular expressions]]. {|class="wikitable" ! syntax ! explanation |- | x >> y | Match x followed by y. |- | *x | Match x repeated zero or more times. (This is representing the [[Kleene star]]; C++ lacks a unary postfix [[Operator (programming)|operator]] *) |- | x &#124; y | Match x. If x does not match, try to match y. |- | +x | Match x repeated one or more times. |- | -x | Match x zero or one time. |- | x & y | Match x and y. |- | x - y | Match x but not y. |- | x ^ y | Match x or y but not both. |- | x [ function_expression ] | Execute the function/functor returned by function_expression, if x matched. |- | ( x ) | Match x (can be used for priority grouping) |- | x % y | Match one or more repetitions of x, separated by occurrences of y. |- | ~x | Match anything but x (only with character classes such as ch_p or alnum_p) |} == Example == <source lang="cpp"> #include <boost/spirit.hpp> #include <boost/spirit/actor.hpp> #include <string> #include <iostream> using namespace std; using namespace boost::spirit; int main() { string input; cout << "Input a line.\n"; getline(cin, input); cout << "Got '" << input << "'.\n"; unsigned count = 0; /* Next line parses the input (input.c_str()), using a parser constructed with the following semantics (identation matches source for clarity): Zero or more occurrences of ( literal string "cat" ( when matched, increment the counter "count" ) or any character (to move on finding the next occurrence of "cat") ) */ parse(input.c_str(), *( str_p("cat") [ increment_a(count) ] | anychar_p )); /* The parser is constructed by the compiler using operator overloading and template matching, so the actual work is done within spirit::parse(), and the expression starting with * only initializes the rule object that the parse function uses. */ // last, show results. cout << "The input had " << count << " occurrences of 'cat'\n"; return 0; } </source> Of course, there are better algorithms suited for string searching, but this example gives an idea how to construct rules and attach actions to them. ==External links== *[http://spirit.sourceforge.net Spirit parser framework SourceForge page] *[http://www.boost.org/libs/spirit/index.html Documentation in the Boost project] *[http://www.ddj.com/article/printableArticle.jhtml?articleID=184401692&dept_url=/cpp/ Article on Spirit by designer Joel 