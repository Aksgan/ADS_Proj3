undefined long-header packets. ===L3 guarantees=== Although details of switches are still out of scope in the UniPro v1.1 spec, L3 allows UniPro v1.0/v1.1 devices to serve as endpoints on a network. It therefore guarantees a number of properties to higher layer protocols: * that packets will be delivered to the addressed destination device (and packets addressed to non-existent devices are discarded) * that payload sent by an L3 source to a single L3 destination as a series of one or more short-header packets within a single Traffic Class will arrive in order and with the correct payload (reliability) * a corresponding reliability guarantee for long-header packets ==Transport Layer (L4)== The features of UniPro's Transport layer are not especially complex, but are a bit subtle because basic communication services have already been taken care of by lower protocol layers. L4 is essentially about enabling multiple devices on the network or even multiple clients within these devices to share the network in a controlled manner. L4's features tend to be roughly comparable to features found in computer networking (e.g. [[Transmission Control Protocol|TCP]] and [[User Datagram Protocol|UDP]]) but that are less commonly encountered in local busses like PCI Express, USB or on-chip busses. UniPro's L4 also has special significance because it is the top protocol layer in the UniPro specification. Applications are required to use L4's top interface to interact with UniPro and are not expected to bypass L4 to directly access lower layers. Note that the interface at the top of L4 provided for transmitting or receiving data is defined at the behavioral or functional level. This high level of abstraction avoids restricting implementation options. Thus, although the specification contains an annex with a signal-level interface as a non-normative example, a UniPro implementation is not required to have any specific set of hardware signals or software function calls at its topmost interface. ===L4 features=== UniPro's Transport layer can be seen as providing an extra level of addressing within a UniPro device. This * allows a UniPro device to communicate with each another UniPro device using multiple logical data streams (example: sending audio and video and control information separately). * allows a UniPro device to simultaneously connect to multiple other devices (this requires switches as supported in a [[UniPro#Versions_and_roadmap|future version of UniPro]]) using multiple logical data streams. * provides mechanisms to reduce the risk of congestion on the network. * provides a mechanism to structure a stream of bytes as a stream of messages. These points are explained in more detail below. ===L4 segments=== An L4 segment, is essentially the payload of an L3 packet. The L4 header, in its short form, consists of just a single byte. The main field in the short L4 header is a 5-bit "CPort" identifier which can be seen as a subaddress within a UniPro device and is somewhat analogous to the [[TCP and UDP port|port]] numbers used in [[Transmission Control Protocol|TCP]] or [[User Datagram Protocol|UDP]]. Thus every segment (with a short header) is addressed to a specific CPort of specific UniPro device. {| border="1" cellpadding="3" style="margin: 1em auto 1em auto" |+ ''UniPro Segment within a Data Frame'' |- style="background:#D8D8D8; color:black" | align="center background:#FF1804;" | ctl || b15 || b14 || b13 || b12 || b11 || b10 || b09 || b08 || b07 || b06 || b05 || b04 || b03 || b02 || b01 || b00 |- style="background:#FF9400; color:black" align="center" | style="background:#FF1804; color:white" | 1 | colspan="16" | Start-of-Data-Frame control symbol (header) |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="8" style="background:#FAF931" | L3 short header | colspan="8" style="background:#C2FA31" | L4 short header |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | Segment payload |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | : |- style="background:#F8F8F8; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | Segment payload |- style="background:#FF9400; color:black" align="center" | style="background:#FF1804; color:white" | 1 | colspan="16" | End-of-Data-Frame control symbol (trailer) |- style="background:#FF9400; color:black" align="center" | style="background:#FF1804; color:white" | 0 | colspan="16" | 16-bit checksum |} A single bit in the segment header also allows segments to be defined with long segment headers. UniPro v1.1 does not define the structure of such segment formats (except for this single bit). Long header segments may be generated via the long header trap described in the L3 section. ===L4 connections=== UniPro calls a pair of CPorts that communicate with each other a connection (hence the C in CPort). Setting up a connection means that one CPort has been initialized to create segments which are addressed to a specific L4 CPort of a specific L3 DeviceID using a particular L2 Traffic Class. Because UniPro connections are bidirectional, the destination CPort is also configured to allow data to be sent back to the source CPort. In UniPro 1.0/1.1 connection setup is assumed to be relatively static: the settings of the paired CPorts in somehow made to match (e.g. hardcoded in firmware within both devices or communicated by proprietary means). This will be replaced by a conventional (dynamic) connection management protocol in a future version of UniPro. ===L4 flow control=== CPorts also contain variables (state) that can be used to track how much buffer space the peer or connected CPort has. This is used to prevent the situation whereby a CPort sends segments to a CPort which has insufficient buffer space to hold the data, thus leading to stalled data traffic. Unless resolved fast, this traffic jam at the destination quickly grows into a network-wide gridlock. This is highly undesirable as it can greatly affect network performance for all users or, worse, can lead to deadlock situations. The described L4 mechanism is known as end-to-end flow control (E2E FC) because it involves the endpoints of a connection. ===L4 flow control versus L2 flow control=== L4 flow control is complementary to L2 flow control. Both work by having the transmitter pause until it knows there is sufficient buffer space at the receiver. But L4 flow control works between a pair of 