254 LPARs (and thus up to 254 independent [[operating system]] instances). There are many interesting applications of DLPAR capabilities. Primarily, it is used to build agile infrastructures, or to automate hardware system resource allocation, planning, and provisioning. This in turn results in increased system utilization. For example, memory, processor or I/O slots can be added, removed or moved to another LPAR, without rebooting the operating system or the application running in an LPAR. IBM DB2 is such application (http://www.ibm.com/developerworks/eserver/articles/db2_dlpar.html), it is aware of the DLPAR events and automatically tunes itself to changing LPAR resources. The [[System z9]] and [[zSeries]] mainframes and their operating systems, including [[Linux on zSeries]], support even more sophisticated forms of dynamic LPARs. Relevant LPAR-related features on those mainframe platforms include [[Intelligent Resource Director]], [[IBM Parallel Sysplex#Sysplex|Sysplex]], [[IBM Parallel Sysplex|Parallel Sysplex]], [[IBM Parallel Sysplex#Geographically Dispersed Parallel Sysplex|Geographically Dispersed Parallel Sysplex]], and [[Hipersockets]]. The System z9 supports up to 60 LPARs on a single server, but mainframes also support an additional level of virtualization using [[z/VM]] with the ability to support thousands of operating system instances on a single server. == See also == *Virtualization **[[Operating system-level virtualization|OS-Level Virtualization]] **[[Hypervisor]] **[[Hipersockets]] *[[LPAR|Logical Partitioning]] **[[Micro-Partitioning]] [[Category:AS/400]] [[Category:IBM storage devices]] [[Category:Power Architecture]] [[Category:Virtualization software|Dynamic Logical Partitioning]] [[Category:IBM mainframe technology]] [[Category:IBM Mainframe computer operating systems]] {{operating-system-stub}} [[ja:Dynamic Logical Partitioning]]</text> </page> <page> <id>11233</id> <title>Dynamic SSL</title> <text>{{Orphan|date=April 2010}} {{Notability|date=March 2010}} {{Userspace draft|source=ArticleWizard|date=February 2010}} '''Dynamic SSL''' is an endpoint security technology developed by Daniel McCann and Nima Sharifimehr of [[NetSecure Technologies Ltd]]. Dynamic SSL was created to solve the [[endpoint security problem]] in public networks by transparently correcting the implementation flaws in SSL systems that expose sensitive data to interception and tampering. Dynamic SSL is sometimes referred to as Dynamic TLS. <!--== Overview == Dynamic SSL is a software process that is meant to correct implementation flaws in SSL/TLS systems, which leave sensitive data open to interception and tampering at the endpoint. An enhanced version of Dynamic SSL also provides protection against Man-in-the-Middle attacks.--> ==Endpoint vulnerabilities in SSL/TLS systems== Most implementations of SSL assume that the client computer is a secure environment for key negotiation, key storage, and encryption. This is untrue in principle and in practice, as malicious technologies such as [[Spyware]], KeyJacking, and [[Man in the Browser]] have proven to be able to circumvent SSL by obtaining sensitive data prior to encryption<ref>Philip Guhring, "Concepts against Man in the Browser Attack", 2006 http://www2.futureware.at/svn/sourcerer/CAcert/SecureClient.pdf</ref><ref>John Marchesini, S.W.Smith, Meiyuan Zhao, “Keyjacking: risks of the current client-side infrastructure,” Proceedings of the 2nd Annual PKI Research Workshop, 2003. pp. 80-95</ref>. Furthermore, the reliance on the host PC for PKI certificate validation renders the infrastructure vulnerable to [[man-in-the-middle attack]]s<ref>Serpanos D N, Lipton R J, "Defense Against Man-in-the-Middle Attack in Client-Server Systems with Secure Servers" 2003</ref>. <!--The problem is compounded when SSL implementation vulnerabilities are combined with a plaintext protocol such as HTTP, where it is relatively trivial to obtain sensitive data by monitoring the data stream prior to encryption. This means most web applications, including those entrusted to protect sensitive information, are at risk.--> ===Challenges for public networks=== Traditional solutions to endpoint security rely on custom protocols or proprietary authentication architectures that are not interoperable with SSL. In many circumstances, particularly in anonymous or distributed environments where interoperability with SSL is a requirement, synchronization of client and server systems with a proprietary security protocol is simply not feasible. This is known as the [[Endpoint Security Problem]] in public networks. In layman's terms, the [[Endpoint Security Problem]] essentially asserts that any anonymous transaction through a web browser must inherently be at risk, and that it cannot be fixed without removing the anonymity of the transaction. Since virtually all web transactions assume that the client is anonymous at the protocol level<ref>www.ietf.org/rfc/rfc2246.txt</ref>, this means that any proposed third-party solution will essentially break the system.<ref>Note: SSL client authentication does not solve this problem. Since all clients in a web session are anonymous until authenticated, the act of authentication is therefore inherently a risky transaction which is subject to endpoint vulnerabilities.</ref> This is a fundamental vulnerability that undermines the entire web security infrastructure, rendering virtually ever web transaction at risk. Dynamic SSL solves this fundamental problem by focusing on transparently closing the implementation vulnerabilities rather than on redefining a new protocol. Therefore, the existing SSL system remains intact as the default secure communication protocol. However, implementation vulnerabilities are solved to achieve endpoint security. ==Principles of Dynamic SSL== The underlying principle in Dynamic SSL is that encryption of sensitive information cannot be performed in an untrusted environment, such as most personal computers, where the security of the encryption process could be compromised. Rather, encryption of sensitive information must be done outside of the personal computer. Dynamic SSL assumes that the end user's computer is an untrusted environment, and can only be used as the channel to transmit sensitive information. Dynamic SSL thus guarantees the security of sensitive data by ensuring that it is never present in the insecure environment. ==Implementations== Typical implementations involve two core components: a secure environment which hosts the sensitive data to be protected, and a cryptographic proxy, which securely redirects the [[encryption]] of the host process of the insecure environment to a cryptographic provider within the secure environment which hosts the sensitive data. An optional third component which controls the tokenization process can be inserted at the application layer. Nothing is required at the server end. Generally speaking, the only change which is required on the endpoint computer is the replacement of the default [[Transport Layer Security|SSL]] cryptographic provider with a Dynamic SSL cryptographic proxy. Most operating systems and web browsers support pluggable cryptographic providers, meaning that most implementations will require no changes whatsoever to the application on either end of the system. Dynamic SSL works by using a tokenization system for sensitive data in conjunction with secure redirection of cryptographic operations to a secure environment. For example, rather than typing in your [[online banking]] [[password]] into a web browser, you would type in a meaningless token instead. When the form 