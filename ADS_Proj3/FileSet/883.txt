language)|Java]] computer programs are compiled ahead of time and stored as a machine independent code called [[bytecode]]. Bytecode is then executed on request by an interpreter called a [[virtual machine]]. The main disadvantage of interpreters is that computer programs run slower than when compiled. Interpreting code is slower than running the compiled version because the interpreter must [[decode]] each [[statement (programming)|statement]] each time it is loaded and then perform the desired action. However, software development may be faster using an interpreter because testing is immediate when the compiling step is omitted. Another disadvantage of interpreters is that at least one must be present on the computer during computer program execution. By contrast, compiled computer programs need no compiler present during execution. No properties of a programming language require it to be exclusively compiled or exclusively interpreted. The categorization usually reflects the most popular method of language execution. For example, BASIC is thought of as an interpreted language and C a compiled language, despite the existence of BASIC compilers and C interpreters. Some systems use [[just-in-time compilation]] (JIT) whereby sections of the source are compiled 'on the fly' and stored for subsequent executions. ===Self-modifying programs=== A computer program in [[execution (computers)|execution]] is normally treated as being different from the [[data (computing)|data]] the program operates on. However, in some cases this distinction is blurred when a computer program modifies itself. The modified computer program is subsequently executed as part of the same program. [[Self-modifying code]] is possible for programs written in [[machine code]], [[assembly language]], [[Lisp (programming language)|Lisp]], [[C (programming language)|C]], [[COBOL]], [[PL/1]], [[Prolog]] and [[JavaScript]] (the eval feature) among others. ==Execution and storage==<!-- This section is linked from [[Elektronika BK]] --> Typically, computer programs are stored in [[non-volatile memory]] until requested either directly or indirectly to be [[execution (computers)|executed]] by the computer user. Upon such a request, the program is loaded into [[random access memory]], by a computer program called an [[operating system]], where it can be accessed directly by the central processor. The central processor then executes ("runs") the program, instruction by instruction, until termination. A program in execution is called a [[process (computing)|process]].<ref name="osc-ch4-97">{{cite book | last = Silberschatz | first = Abraham | title = Operating System Concepts, Fourth Edition | publisher = Addison-Wesley | year = 1994 | pages = 97 | isbn = 0-201-50480-4 }}</ref> Termination is either by normal self-termination or by error — software or hardware error. ===Embedded programs=== [[Image:USB_flash_drive.JPG|thumb|230px|left|The [[microcontroller]] on the right of this [[USB flash drive]] is controlled with embedded [[firmware]].]] Some computer programs are embedded into hardware. A [[stored-program computer]] requires an initial computer program stored in its [[read-only memory]] to [[booting|boot]]. The boot process is to identify and initialize all aspects of the system, from [[processor register]]s to [[device driver|device controllers]] to [[volatile memory|memory]] contents.<ref name="osc-ch2-p30">{{cite book | last = Silberschatz | first = Abraham | title = Operating System Concepts, Fourth Edition | publisher = Addison-Wesley | year = 1994 | pages = 30 | isbn = 0-201-50480-4 }}</ref> Following the initialization process, this initial computer program loads the [[operating system]] and sets the [[program counter]] to begin normal operations. Independent of the host computer, a [[Peripheral|hardware device]] might have embedded [[firmware]] to control its operation. Firmware is used when the computer program is rarely or never expected to change, or when the program must not be lost when the power is off.<ref name="sco-ch1-p11">{{cite book | last = Tanenbaum | first = Andrew S. | title = Structured Computer Organization, Third Edition | publisher = Prentice Hall | year = 1990 | pages = 11 | isbn = 0-13-854662-2 }}</ref> ===Manual programming=== [[Image:Dg-nova3.jpg|thumb|230px|right|Switches for manual input on a [[Data General Nova]] 3]] Computer programs historically were manually input to the central processor via switches. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also historically were manually input via [[paper tape]] or [[punched cards]]. After the medium was loaded, the starting address was set via switches and the execute button pressed.<ref name="osc-ch1-p6">{{cite book | last = Silberschatz | first = Abraham | title = Operating System Concepts, Fourth Edition | publisher = Addison-Wesley | year = 1994 | pages = 6 | isbn = 0-201-50480-4 }}</ref> ===Automatic program generation=== [[Generative programming]] is a style of [[computer programming]] that creates [[source code]] through [[generic programming|generic]] [[class (computer science)|classes]], [[prototype-based programming|prototypes]], [[template (programming)|templates]], [[aspect (computer science)|aspects]], and [[code generation (compiler)|code generators]] to improve [[programmer]] productivity. Source code is generated with [[programming tool]]s such as a [[template processor]] or an [[integrated development environment]]. The simplest form of source code generator is a [[macro (computer science)|macro]] processor, such as the [[C preprocessor]], which replaces patterns in source code according to relatively simple rules. [[Software engine]]s output source code or [[markup language|markup code]] that simultaneously become the input to another [[process (computing)|computer process]]. The analogy is that of one process driving another process, with the computer code being burned as fuel. [[Application server]]s are software engines that deliver applications to [[client computer]]s. For example, a [[Wiki software|Wiki]] is an application server that lets users build [[dynamic web page|dynamic content]] assembled from [[article (publishing)|articles]]. Wikis generate [[HTML]], [[CSS]], [[Java (programming language)|Java]], and [[JavaScript]] which are then [[interpreter (computing)|interpreted]] by a [[web browser]]. === Simultaneous execution=== {{seealso|Process (computing)|Multiprocessing}} Many operating systems support [[computer multitasking|multitasking]] which enables many computer programs to appear to run simultaneously on one computer. Operating systems may run multiple programs through [[process scheduling]] — a software mechanism to [[context switch|switch]] the CPU among processes often so users can [[time-sharing|interact]] with each program while it runs.<ref name="osc-ch4-100">{{cite book | last = Silberschatz | first = Abraham | title = Operating System Concepts, Fourth Edition | publisher = Addison-Wesley | year = 1994 | pages = 100 | isbn = 0-201-50480-4 }}</ref> Within hardware, modern day multiprocessor computers or computers with multicore processors may run multiple programs.<ref name="mcore">{{cite book | last = Akhter | first = Shameem 