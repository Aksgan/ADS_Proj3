a European mathematical summer school held at the Euler Institute, St. Petersburg, Russia, July 9-20, 2001], Anatoliĭ, Moiseevich Vershik, Springer, 2002, ISBN 3540403124 *[http://www.iop.org/EJ/toc/1742-6596/42/1 Counting Complexity: An International Workshop On Statistical Mechanics And Combinatorics], 10–15 July 2005, Dunk Island, Queensland, Australia *Proceedings of the Conference on Combinatorics and Physics, MPIM Bonn, March 19-23, 2007 {{Physics-stub}} {{Maths-stub}} [[Category:Mathematical physics]] [[Category:Quantum mechanics]] [[Category:Combinatorics]]</text> </page> <page> <id>6957</id> <title>Comma operator</title> <text>In the [[C programming language|C]] and [[C++]] programming languages, the '''comma operator''' (represented by the [[token (parser)|token]] <code>,</code>) is a [[binary operator]] that evaluates its first [[operand]] and discards the result, and then evaluates the second operand and returns this value (and type). The comma operator has the lowest [[precedence]] of any C operator, and acts as a [[sequence point]]. The use of the comma token as an '''operator''' is distinct from its use in [[function call]]s and definitions, variable declarations, enum declarations, and similar constructs, where it acts as a '''separator'''. In this example, the differing behavior between the second and third lines is due to the comma operator having lower precedence than assignment. <source lang="C"> int a=1, b=2, c=3, i; // comma acts as separator in this line, not as an operator i = (a, b); // stores b into i ... a=1, b=2, c=3, i=2 i = a, b; // stores a into i. Equivalent to (i = a), b; ... a=1, b=2, c=3, i=1 i = (a += 2, a + b); // increases a by 2, then stores a+b = 3+2 into i ... a=3, b=2, c=3, i=5 i = a += 2, a + b; // increases a by 2, then stores a = 5 into i ... a=5, b=2, c=3, i=5 i = a, b, c; // stores a into i ... a=5, b=2, c=3, i=5 i = (a, b, c); // stores c into i ... a=5, b=2, c=3, i=3 </source> Because the comma operator discards its first operand, it is generally only useful where the first operand has desirable [[Side effect (computer science)|side effects]], such as in the initialiser or increment statement of a [[for loop]]. For example, the following terse [[linked list]] [[cycle detection]] algorithm (a version of [[Robert W. Floyd|Floyd]]'s [[Cycle_detection#Tortoise_and_hare|"tortoise and hare" algorithm]]): <source lang="C"> bool loops(List *list) { List *tortoise, *hare; /* advance hare 2 times faster than tortoise */ for (tortoise = hare = list; hare && (hare = hare->next); /* tests for valid pointers + one step of hare */ tortoise = tortoise->next, hare = hare->next) /* comma separates hare and tortoise step */ if (tortoise == hare) /* loop found */ return true; return false; } </source> In the [[OCaml]] and [[Ruby (programming language)|Ruby]] programming languages, the semicolon (";") is used for this purpose. ==See also== * [[Sequence point]] * [[Operators in C and C++]] * [http://www.boost.org/doc/libs/1_44_0/libs/assign/doc/index.html#intro Facility from the Boost library which makes it easy to fill containers using comma-operator] [[Category:C programming language]] {{compu-lang-stub}}</text> </page> <page> <id>6958</id> <title>Command-line argument</title> <text>{{Unreferenced|date=July 2008}} In computer [[command-line interface]]s, a '''command-line argument''' is an [[Parameter (computer science)|argument]] sent to a program being called. In general, a program can take any number of command-line arguments, which may be necessary for the program to run, or may even be ignored, depending on the function of that program. For example, in [[Unix]] and [[Unix-like]] environments, an example of a command-line argument is: <source lang="bash"> rm file.s </source> "file.s" is a command-line argument which tells the program [[rm (Unix)|rm]] to remove the file "file.s". Programming languages such as [[C (programming language)|C]], [[C++]] and [[Java (programming language)|Java]] allow a program to interpret the command-line arguments by handling them as string parameters in the [[Main function (programming)|main function]]. ==Command-line switch== A '''command line option''' or simply '''option''' (also known as a '''command line parameter''', '''flag''', or a '''switch''') is an indication by a user that a [[computer program]] should change its default output. For example, in the [[OpenVMS]] [[operating system]], the [[command (computing)|command]] <tt>directory</tt> is used to list the [[computer file|file]]s inside a [[directory (file systems)|directory]]. By default&mdash;that is, when the user simply types <tt>directory</tt>&mdash;it will list only the names of the files. By adding the ''option'' <tt>/owner</tt> (to form the command <tt>directory/owner</tt>), the user can instruct the <tt>directory</tt> command to also display the ownership of the files. The format of switches varies widely between operating systems. ===In OpenVMS=== Under the [[OpenVMS]] operating system, options (traditionally: switches) are entered in the form <tt>command/option_1/option_2/option_3=value</tt> ''etc.'' The form <tt>/option=value</tt> is used to provide an [[Parameter|argument]] to the option; for example, <tt>/user=john</tt> might specify that only files owned by the user "john" should be displayed. ===In Cisco IOS=== <tt>IP ADDRESS 123.232.232.222 255.255.0.0</tt> The <tt>123.232.232.222</tt> and <tt>255.255.0.0</tt> parts are arguments. ===In UNIX and Linux=== In traditional UNIX, options typically consist of a single letter introduced by <tt>-</tt> and possibly followed by an argument. This turned out to be a limiting factor in complex programs requiring many options, so in GNU software the concept of long options was added. Long options are introduced via <tt>--</tt>, and are typically whole words. For example, <tt>ls --long --classify --all</tt>. Arguments to long options are provided with <tt>=</tt>, as <tt>ls --block-size=1024</tt>, or as a separate argument as <tt>ls --block-size 1024</tt>. Some Unix programs use long options with single dashes, for example [[MPlayer]] as in <tt>mplayer -nosound</tt>. GNU/Linux also uses <tt>--</tt> to terminate option lists. For example, an attempt to delete a file called <tt>-file1<tt> by using <code>[[Rm (Unix)|rm]] -file1</code> may produce an error, since <code>rm</code> may interpret <code>-file1</code> as a command line switch. Using <code>rm -- -file1</code> removes ambiguity. Also note that some Linux command line options use no parameter prefix dashes at all, e.g. [[yum]]. ===In MS-DOS=== [[MS-DOS]] and related operating systems typically use single-letter switches, for example <tt>[[dir (command)|dir]] /w /p /a:s</tt>. In this case, the <tt>:</tt> character serves the same purpose as <tt>=</tt> above. Traditionally, MS-DOS is similar to the [[Unix]] operating system; switches are single letters or digits, and introduced via a <tt>-</tt> (hyphen); ''e.g.'' <tt>ls -F -a -1</tt>. When options are 