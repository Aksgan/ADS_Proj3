<br/> $x '''= [[fscanf]](STDIN, '''format''');''' | '''print '''x''';''' or <br/> '''[[echo (command)|echo]] '''x''';''' or <br/> '''[[printf]]('''format''', '''x''');''' | '''[[fprintf]](STDERR, '''format''', '''x''');''' |- | Perl | $x '''= <>;''' or <br/> $x '''= <STDIN>;''' | '''print '''x''';''' or <br/> '''[[printf]] '''format''', '''x''';''' | '''print STDERR '''x''';''' or <br/> '''[[printf]] STDERR '''format''', '''x''';''' |- | Perl 6 | $x '''= $*IN.get;''' | x'''.print''' or<br/> x'''.say''' | x'''.note''' or<br/> '''$*ERR.print('''x''')''' or<br/> '''$*ERR.say('''x''')''' |- | Ruby | x '''= gets''' | '''puts''' x or<br/> '''[[printf]]('''format''', '''x''')''' | '''$stderr.puts('''x''')''' or<br/> '''$stderr.[[printf]]('''format''', '''x''')''' |- | Windows PowerShell | $x '''= Read-Host'''««''' -Prompt'''» text»''';''' or <br/> $x '''= [Console]::Read();''' or <br/> $x '''= [Console]::ReadLine()''' | x''';''' or <br/> '''Write-Output '''x''';''' or <br/> '''echo '''x | '''Write-Error '''x |- | OCaml | '''let''' x '''= read_int ()''' or <br/> '''let''' str '''= read_line ()''' or <br/> '''Scanf.[[scanf]]''' format '''(fun '''x ...''' -> '''...''')''' | '''print_int''' x or <br/> '''print_endline''' str or <br/> '''Printf.[[printf]]''' format x ... | '''prerr_int''' x or <br/> '''prerr_endline''' str or <br/> '''Printf.[[fprintf|eprintf]]''' format x ... |- | F# | '''let''' x '''= System.Console.ReadLine()''' | '''[[printf]]''' format x ... or <br/> '''[[printf]]n''' format x ... | '''[[fprintf|eprintf]]''' format x ... or <br/>'''[[fprintf|eprintf]]n''' format x ... |- | Standard ML | '''val''' str '''= TextIO.inputLIne TextIO.stdIn''' | '''print''' str | '''TextIO.output (TextIO.stdErr, '''str''')''' |- | Haskell (GHC) | x '''<- readLn''' or <br/> str '''<- getLine''' | '''print '''x or <br/> '''putStrLn''' str | '''hPrint stderr '''x or <br/> '''hPutStrLn stderr''' str |} <br>{{note|a68|a}} Algol 68 additionally as the "unformatted" [[transput]] routines: ''read'', ''write'', ''get'' and ''put''. <br>{{note|more c input|b}} '''[[gets]](x)''' and '''[[fgets]](x,''' length''', stdin)''' read unformatted text from stdin. Use of gets is not recommended. <br/>{{note|more c input|c}} '''[[puts]](x)''' and '''[[fputs]](x, stdout)''' write unformatted text to stdout. <br/>{{note|more c error output|d}} '''fputs(x, stderr)''' writes unformatted text to stderr <br/>{{note|Fortran standard units|e}} '''INPUT_UNIT''', '''OUTPUT_UNIT''', '''ERROR_UNIT''' are defined in the ISO_FORTRAN_ENV module <ref>http://fortranwiki.org/fortran/show/iso_fortran_env</ref>. == Reading [[command-line argument]]s == {| class="wikitable" |- ! ! Argument values ! Argument counts ! Program name / Script name |- | C (C99) | rowspan=3| '''argv['''n''']''' | rowspan=3| '''argc''' | rowspan=3| first argument |- | Objective-C |- | C++ |- | C# | rowspan=2| '''args['''n''']''' | '''args.Length''' | '''Assembly.GetEntryAssembly().Location;''' |- | Java | '''args.length''' | <!-- same as name of class containing '''main()''' --> <!-- not sure if that would yield the name of the exe/binary file of the program --> |- | JavaScript <br/><small>[[Windows Script Host]] implementation</small> | '''WScript.Arguments('''n''')''' | '''WScript.Arguments.length''' | {{?}} |- | Go | '''os.Args['''n''']''' | '''len(os.Args)''' | first argument |- | Common Lisp | {{?}} | {{?}} | {{?}} |- | Scheme (R<sup>6</sup>RS) | '''(list-ref (command-line) '''n''')''' | '''(length (command-line))''' | first argument |- | Pascal | '''ParamStr('''n''')''' | '''ParamCount''' | first argument |- | Visual Basic | '''Command'''{{ref|unseparated|[a]}} | {{n/a}} | '''App.Path''' |- | Visual Basic .NET | '''CmdArgs('''n''')''' | '''CmdArgs.Length''' | '''[Assembly].GetEntryAssembly().Location''' |- | Python | '''sys.argv['''n''']''' | '''len(sys.argv)''' | first argument |- | S-Lang | '''__argv['''n''']''' | '''__argc''' | first argument |- | Fortran | '''DO '''i''' = '''1''','''argc''' <ul> CALL GET_COMMAND_ARGUMENT ('''i''','''argv(i)''') </ul> ENDDO''' | argc''' = COMMAND_ARGUMENT_COUNT ()''' | '''CALL GET_COMMAND_ARGUMENT ('''0''','''progname''')''' |- | PHP | '''$argv['''n''']''' | '''$argc''' | first argument |- | Perl | '''$ARGV['''n''']''' | '''scalar(@ARGV)''' | '''$0''' |- | Perl 6 | '''@*ARGS['''n''']''' | '''@*ARGS.elems''' | '''$PROGRAM_NAME''' |- | Ruby | '''ARGV['''n''']''' | '''ARGV.size''' | '''$0''' |- | Windows PowerShell | '''$args['''n''']''' | '''$args.Length''' | '''$MyInvocation.MyCommand.Name''' |- | OCaml | '''Sys.argv.('''n''')''' | '''Array.length Sys.argv''' | first argument |- | F# | '''args.['''n''']''' | '''args.Length''' | '''Assembly.GetEntryAssembly().Location''' |- | Standard ML | '''List.nth (CommandLine.arguments (), '''n''')''' | '''length (CommandLine.arguments ())''' | '''CommandLine.name ()''' |- | Haskell (GHC) | '''do { args <- System.getArgs; return args !! '''n''' }''' | '''do { args <- System.getArgs; return length args }''' | '''System.getProgName''' |} *{{note|unseparated|a}}The command-line arguments in Visual Basic is not separated. A split function '''Split('''string''')''' is required for separating them. == Execution of commands == {| class="wikitable" ! !Shell command !Execute program ![[exec (operating system)|Replace current program with new executed program]] |- | C | rowspan=2| '''[[system (C standard library)|system]]("'''command'''");''' | | rowspan=2| '''[[Exec (operating system)|execl]]('''path''',''' args''');''' or<br/> '''[[Exec (operating system)|execv]]('''path''',''' arglist''');''' |- | C++ |- | Objective-C | | '''[NSTask launchedTaskWithLaunchPath:(NSString *)'''path''' arguments:(NSArray *)'''arguments'''];''' | |- | C# | | rowspan=2| '''System.Diagnostics.Process.Start('''path''',''' argstring''');''' | |- | F# | | |- | Go | | '''exec.Run('''path''',''' argv''',''' envv''',''' dir''', exec.DevNull, exec.DevNull, exec.DevNull)''' | '''os.Exec('''path''',''' argv''',''' envv''')''' |- | Visual Basic | '''Interaction.Shell('''command «''', '''WindowStyle» «''', '''isWaitOnReturn»''')''' | | |- | Visual Basic .NET | '''Microsoft.VisualBasic.Interaction.Shell('''command «''', '''WindowStyle» «''', '''isWaitOnReturn»''')''' | '''System.Diagnostics.Process.Start('''path''',''' argstring''')''' | |- | Java | '''Runtime.exec('''command''');''' or<br/> '''new ProcessBuilder('''command''').start();''' | | |- | JavaScript <br/> <small>[[Windows Script Host]] implementation</small> | '''WScript.CreateObject ("WScript.Shell").Run('''command «''', '''WindowStyle» «''', '''isWaitOnReturn»''');''' | | |- | Common Lisp | '''(shell '''command''')''' | | |- | Scheme | '''(system '''command''')''' | | |- | Pascal | '''system('''command''');''' | | |- | OCaml | '''Sys.command '''command, '''Unix.open_process_full''' command env (stdout, stdin, stderr),... | '''Unix.create_process''' prog args new_stdin new_stdout new_stderr, ... | '''Unix.execv''' prog args or <br/> '''Unix.execve''' prog args env |- | Standard ML | '''OS.Process.system '''command | '''Unix.execute ('''path''', '''args''')''' | '''Posix.Process.exec ('''path''', '''args''')''' |- | Haskell (GHC) | '''System.system '''command | '''System.Process.runProcess '''path''' '''args''' ... | '''Posix.Process.executeFile '''path''' True '''args''' ... |- | Perl | '''system('''command''')''' or <br/> $output '''= `'''command'''`''' | | '''exec('''path''',''' args''')''' |- | Ruby | '''system('''command''')''' or <br/> output '''= `'''command'''`''' | | '''exec('''path''',''' args''')''' |- | PHP | '''system('''command''')''' or <br/> $output '''= `'''command'''`''' or <br/> '''exec('''command''')''' or <br/> '''passthru('''command''')''' | | |- | Python | '''os.system('''command''')''' or<br/> '''subprocess.Popen('''command''')''' | | '''os.execv('''path''',''' args''')''' |- | S-Lang | '''system('''command''') | | |- | Fortran | '''CALL SYSTEM ('''command''', '''status''') or <br/> '''status''' = SYSTEM ('''command''')'''{{ref|Fortran extension|[a]}} | | |- | Windows PowerShell | '''[Diagnostics.Process]::Start('''command''')''' | «'''Invoke-Item''' »program arg1 arg2 … | |} {{note|Fortran extension|a}} Compiler-dependent extension <ref>http://gcc.gnu.org/onlinedocs/gfortran/SYSTEM.html#SYSTEM</ref>. == References == {{Reflist}} [[Category:Programming constructs]] [[Category:Programming language comparisons]]</text> </page> <page> <id>7226</id> <title>Comparison of programming paradigms</title> <text>{{refimprove|date=December 2010}} {{Programming paradigms}} This article attempts 