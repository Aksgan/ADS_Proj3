use cases. * Business case and risk list which are revised. * A development plan for the overall project. * Prototypes that demonstrably mitigate each identified technical risk. If the project cannot pass this milestone, there is still time for it to be canceled or redesigned. However, after leaving this phase, the project transitions into a high-risk operation where changes are much more difficult and detrimental when made. The key domain analysis for the elaboration is the system architecture. ==== Construction Phase ==== The primary objective is to build the software system. In this phase, the main focus is on the development of components and other features of the system. This is the phase when the bulk of the coding takes place. In larger projects, several construction iterations may be developed in an effort to divide the use cases into manageable segments that produce demonstrable prototypes. This phase produces the first external release of the software. Its conclusion is marked by the Initial Operational Capability Milestone. ==== Transition Phase ==== The primary objective is to 'transit' the system from development into production, making it available to and understood by the end user. The activities of this phase include training the end users and maintainers and beta testing the system to validate it against the end users' expectations. The product is also checked against the quality level set in the Inception phase. If all objectives are met, the Product Release Milestone is reached and the development cycle ends. === Six Engineering Disciplines === {{Copyedit|date=September 2009}} ; Business Modeling Discipline : Business modeling explains how to describe a vision of the organization in which the system will be deployed and how to then use this vision as a basis to outline the process, roles and responsibilities. : Organizations are becoming more dependent on [[information technology|IT]] systems, making it imperative that information system engineers know how the applications they are developing fit into the organization. Businesses invest in IT when they understand the competitive advantage and value added by the technology. The aim of [[business modeling]] is to first establish a better understanding and communication channel between [[business engineering]] and [[software engineering]]. Understanding the business means that software engineers must understand the structure and the dynamics of the target organization (the client), the current problems in the organization, and possible improvements. They must also ensure a common understanding of the target organization between customers, end users and developers. ; Requirements Discipline : Requirements explain how to elicit stakeholder requests and transform them into a set of requirements work products that scope the system to be built and provide detailed requirements for what the system must do. ; Analysis and Design Discipline : The goal of analysis and design is to show how the system will be realized. The aim is to build a system that: :* Performs — in a specific implementation environment — the tasks and functions specified in the use-case descriptions. :* Fulfills all its requirements. :* Is easy to change when [[functional requirements]] change. : Designs results into a design model and analysis optionally into an analysis model. The design model serves as an abstraction of the source code; that is, the design model acts as a 'blueprint' of how the source code is structured and written. The design model consists of design classes structured into packages and subsystems with well-defined interfaces, representing what will become components in the implementation. It also contains descriptions of how objects of these design classes collaborate to perform [[use cases]]. ; Implementation Discipline : The purposes of implementation are: :* To define the organization of the code in terms of implementation subsystems that are organized in layers. :* To implement classes and objects in terms of components (source files, binaries, executables, and others). :* To test the developed components as units. :* To integrate the results produced by individual implementers (or teams) into an executable system. : Systems are realized through the implementation of components. The process describes how to reuse existing components, or implement new components with well-defined responsibility, making the system easier to maintain and increasing the possibilities to reuse. ; Test Discipline : The purposes of test are: :* To verify the interaction between objects. :* To verify the proper integration of all components of the software. :* To verify that all requirements have been correctly implemented. :* To identify and ensure that defects are addressed prior to the deployment of the software. :* Ensure that all the defects are fixed, retested, and closed. : The Rational Unified Process proposes an iterative approach, which means that testing occurs throughout the project. This allows the detection of defects as early as possible, which radically reduces the cost of fixing the defect. Tests are carried out along four quality dimensions: ''Reliability, Functionality, Application Performance, and System Performance''. For each of these quality dimensions, the process describes how to go through the test lifecycle of planning, design, implementation, execution, and evaluation. ; Deployment Discipline : The purpose of deployment is to successfully produce product releases, and to deliver the software to its end users. It covers a wide range of activities including producing external releases of the software, packaging the software and business application, distributing the software, installing the software, and providing help and assistance to users. Although deployment activities are mostly centered around the transition phase, many of the activities need to be included in earlier phases to prepare for deployment at the end of the construction phase. The ''Deployment and Environment'' workflows of the Rational Unified Process contain less detail than other workflows. === Three supporting disciplines === ;Environment discipline : The environment discipline focuses on the activities necessary to configure the process for a project. It describes the activities required to develop the guidelines in support of a project. The purpose of the environment activities is to provide the software development organization with the software development environment - both processes and tools - that will support the development team. If the 