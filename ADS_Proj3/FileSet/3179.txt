[[Yao's test]]. However, it has also been shown a [[sufficient condition]] by [[Andrew Chi-Chih Yao | Yao]]<ref name="yao82"/>. We prove it now in the case of probabilistic Turing machine, since [[Leonard Adleman | Adleman]] has already done the work of replacing randomization with non-uniformity in [[Adleman's theorem | his theorem]]. The case of boolean circuits cannot be derived from this case (since it involves deciding potentially undecidable problems), but the proof of Adleman's theorem can be easily adapted to the case of non-uniform boolean circuits families. Let <math>\mathcal M</math> a distringuer for the probabilistic version of Yao's test, i.e. a probabilistic Turing machine, running in polynomial time, such that there is a polynomial <math>Q</math> such that for infinitely many <math>k</math> <center><math>|p_{k,S}^{\mathcal M}-p_{k,U}^{\mathcal M}|\geq\frac{1}{Q(k)}</math></center> Let <math>R_{k,i}=\{s_1\ldots s_iu_{i+1}\ldots u_{P(k)}| s\in S_k, u\in\{0,1\}^{P(k)}\}</math>. We have : <math>R_{k,0}=\{0,1\}^{P(k)}</math> and <math>R_{k,P(k)}=S_k</math>. Then, we notice that <math>\sum_{i=0}^{P(k)}|p_{k,R_{k,i+1}}^{\mathcal M}-p_{k,R_{k,i}}^{\mathcal M}|\geq |p^{\mathcal M}_{k,R_{k,P(k)}}-p^{\mathcal M}_{k,R_{k,0}}|=|p_{k,S}^{\mathcal M}-p_{k,U}^{\mathcal M}|\geq\frac{1}{Q(k)}</math>. Therefore, at least one of the <math>|p_{k,R_{k,i+1}}^{\mathcal M}-p_{k,R_{k,i}}^{\mathcal M}|</math> should be no smaller than <math>\frac{1}{Q(k)P(k)}</math>. Next, we consider probability distributions <math>\mu_{k,i}</math> and <math>\overline{\mu_{k,i}}</math> on <math>R_{k,i}</math>. Distribution <math>\mu_{k,i}</math> is the probability distribution of choosing the <math>i</math> first bits in <math>S_k</math> with probability given by <math>\mu_k</math>, and the <math>P(k)-i</math> remaining bits uniformly at random. We have thus : <center> <math>\mu_{k,i}(w_1\ldots w_{P(k)})=\left(\sum_{s\in S_k, s_1\ldots s_i=w_1\ldots w_i}\mu_k(s)\right)\left(\frac{1}{2}\right)^{P(k)-i}</math> </center><center> <math>\overline{\mu_{k,i}}(w_1\ldots w_{P(k)})=\left(\sum_{s\in S_k, s_1\ldots s_{i-1}(1-s_i)=w_1\ldots w_i}\mu_k(s)\right)\left(\frac{1}{2}\right)^{P(k)-i}</math> </center> We thus have <math>\mu_{k,i}=\frac{1}{2}(\mu_{k,i+1}+\overline{\mu_{k,i+1}})</math> (a simple calculus trick shows this), thus distributions <math>\mu_{k,i+1}</math> and <math>\overline{\mu_{k,i+1}}</math> can be distinguished by <math>\mathcal M</math>. Without loss of generality, we can assume that <math>p^{\mathcal M}_{\mu_{k,i+1}}-p^{\mathcal M}_{\overline{\mu_{k,i+1}}}\geq\frac{1}{2}+\frac{1}{R(k)}</math>, with <math>R</math> a polynomial. This gives us a possible construction of a Turing machine solving the next-bit test : upon receiving the <math>i</math> first bits of a sequence, <math>\mathcal N</math> pads this input with a guess of bit <math>l</math> and then <math>P(k)-i-1</math> random bits, chosen with uniform probability. Then it runs <math>\mathcal M</math>, and outputs <math>l</math> if the result is <math>1</math>, and <math>1-l</math> else. == References == <references/> [[Category:Pseudorandom number generators]]</text> </page> <page> <id>26363</id> <title>Next Byte Codes</title> <text>'''Next Byte Codes''' (NBC) is a simple language with an [[assembly language]] syntax that can be used to program [[Lego Mindstorms NXT]] programmable bricks. The command line compiler outputs NXT compatible machine code, and is supported on Windows, Mac OS and Linux.<ref>[http://www.pcwelt.de/news/software/77325/index.html Update für NBC: Programmiersprache für Lego Mindstorms NXT]</ref> It is maintained by John Hansen, a Mindstorms Developer Program member.<ref>[http://mindstorms.lego.com/MeetMDP/JohnHansen.aspx Mindstorms Developer Program: John Hansen]</ref> The NBC compiler is available under the [[Mozilla Public License]]. The [[Integrated development environment|IDE]] is [[Bricx Command Center]]. The NBC [[debugger]] was developed by SorosyDotCom and is available for download as freeware. [http://www.sorosy.com/lego/nxtdbg/ NBC Debugger,] ==References== {{reflist}} ==External links== * [http://bricxcc.sourceforge.net/nbc/ Website] * {{cite book | chapter = In the Box | title = Extreme NXT: Extending the Lego Mindstorms NXT to the Next Level (Technology in Action) | author = Michael Gasperi, Philippe Hurbain, Isabelle Hurbain | publisher = APress | date = April 11, 2007 | isbn = 1590598180 | doi = 10.1007/978-1-4302-0211-0 }} * [http://www.tik.ee.ethz.ch/tik/education/lectures/PPS/mindstorms/sa_nxt/index.php?page=print Robotics lecture using NBC] * [http://www.sorosy.com/lego/nxtdbg/ NBC Debugger,] [[Category:Assembly languages]] [[Category:Lego Mindstorms] [[fr:Next Byte Codes]]</text> </page> <page> <id>26396</id> <title>Nick Pippenger</title> <text>'''Nicholas John Pippenger''' is a researcher in [[computer science]]. He has produced a number of fundamental results many of which are being widely used in the field of [[theoretical computer science]], [[database processing]] and [[compiler optimization]]. He has also achieved the rank of [[IBM Fellow]] at [[Almaden Research Center|Almaden IBM Research Center]] in [[San Jose, California]]. He has taught at the [[University of British Columbia]] in [[Vancouver, Canada]] and at [[Princeton University]] in the US. In the Fall of 2006 Pippenger joined the faculty of [[Harvey Mudd College]]. Pippenger holds a [[B.S.]] in Natural Sciences from [[Shimer College]] and a [[PhD]] from the [[Massachusetts Institute of Technology]]. He is married to [[Maria Klawe]], President of [[Harvey Mudd College]]. In 1997 he was inducted as a [[Fellow]] of the [[Association for Computing Machinery]]. <ref>{{cite web|url=http://fellows.acm.org/fellow_citation.cfm?id=1421585&srt=all|title=ACM: Fellow Awards / Nicholas Pippenger|work=ACM Fellows|publisher=Association for Computing Machinery|accessdate=2010-01-24}}</ref> The complexity class, [[NC (complexity)|Nick's Class]] (NC), of problems quickly solvable on a parallel computer, was named by [[Stephen Cook]] after Nick Pippenger for his research on circuits with [[polylogarithmic]] depth and polynomial size.<ref>{{cite book|authorlink = Christos Papadimitriou |first=Christos |last=Papadimitriou | year = 1993 | title = Computational Complexity | publisher = Addison Wesley | edition = 1st | isbn = 0-201-53082-1 |chapter=Section 15.3: The class '''NC''' |pages=375&ndash;381}}</ref><ref>{{cite book|authorlink =Dexter Kozen |first=Dexter |last=Kozen | year = 2006 | title = Theory of Computation | publisher = Springer | isbn = 1-84628-297-7 |chapter=Lecture 12: Relation of ''NC'' to Time-Space Classes}}</ref> ==References== {{reflist}} == External links == *[http://www.math.hmc.edu/~njp/ Pippenger's web page] at HMC {{DEFAULTSORT:Pippenger, Nick}} [[Category:Harvey Mudd College faculty]] [[Category:IBM Fellows]] [[Category:Fellows of the Association for Computing Machinery]] [[Category:Theoretical computer scientists]] [[Category:American computer scientists]] [[Category:Living people]] [[Category:Shimer College alumni]] {{compu-scientist-stub}} [[de:Nick Pippenger]]</text> </page> <page> <id>26413</id> <title>Nif gene</title> <text>{{orphan|date=February 2010}} The '''nif gene''' is the [[gene]] responsible for the coding of [[protein]]s related and associated with the [[nitrogen fixation|fixation of atmospheric nitrogen]] into a form of nitrogen available to plants. These genes are found in [[nitrogen fixing bacteria]] and [[cyanobacteria]]. == References == * [http://www.biology-online.org/dictionary/Nif_gene Nif gene - definition from Biology-Online.org] Nif genes hae both positive and negative regulators. Some of nf genes are: Nif A, D, L,K, F,H S,U,Y,W,Z The nif genes are genes encoding enzymes involved in the fixation of atmospheric nitrogen. The primary enzyme encoded by the nif genes is the nitrogenase complex which is in charge of converting atmospheric nitrogen- N2 To other nitrogen forms such as ammonia which the plant can use for various purposes. Besides the nitrogenase enzyme, the nif genes also encode a number of regulatory proteins involved in nitrogen fixation. The nif genes are found in both free living nitrogen fixing bacteria and in symbiotic bacteria in various plants. The expression of the nif genes is induced as a response to low concentrations of fixed nitrogen and oxygen concentrations (the low oxygen concentrations are actively maintained in the root environment).(4,6,7,8). Examples from nature The expression and regulation of nif genes while 