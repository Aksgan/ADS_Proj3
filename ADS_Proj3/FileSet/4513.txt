<title>Transmissibility (structural dynamics)</title> <text>{{Orphan|date=February 2009}} Transmissibility, in the context of [[Structural Dynamics]], can be defined as the ratio of the maximum force (<math>f_{max}</math>) on the floor as a result of the vibration of a machine to the maximum machine force (<math>P_0</math>): :<math>TR = \frac{f_{max}}{P_0} = R_d\sqrt{1+(2\zeta\beta)^2}</math> :Where <math>\zeta</math> is equal to the [[damping ratio]] and <math>\beta</math> is equal to the frequency ratio. <math>R_d</math> is the ratio of the dynamic to static amplitude. [[Category: Structural analysis]]</text> </page> <page> <id>38133</id> <title>Transmission gate</title> <text>[[Image:CMOS transmission gate.PNG|thumb|CMOS Transmission Gate]] A '''transmission gate''' is an [[Electronics|electronic]] element. It is a good non-mechanical [[relay]], built with [[CMOS]] technology. It can be used to simplify digital logic circuits or to switch analog signals, and so is also known as an [[analog electronics|analog]] [[logic gate|gate]], [[analogue switch]] or electronic relay depending on its use. It is made by the parallel combination of an [[nMOS logic|nMOS]] and a [[pMOS logic|pMOS]] transistor with the input at the gate of one transistor being complementary to the input at the gate of the other. == Operation == A [[current (electricity)|current]] can flow through this element in either direction. Depending on whether or not there is a [[voltage]] on the gate, the connection between the input and output is either low-resistance (R<sub>on</sub> = 100 [[Ohm (unit)|ohm]], for instance) or high-resistance (R<sub>off</sub> > 5 [[megohm]]). This can effectively isolate the output from the input. {| class="wikitable" align=right style=text-align:center !colspan=2| CONTROL || INPUT || OUTPUT |- ! pMOS || nMOS || IN || OUT |- |rowspan=2| 0 ||rowspan=2| 1 || 0 || 0 |- | 1 || 1 |- |rowspan=2| 1 ||rowspan=2| 0 || 0 ||rowspan=2| Z |- | 1 |} Digital operation can also be understood this way: when the gate input to the [[nMOS logic|nMOS]] transistor is '0',and the complementary '1' is gate input to the [[pMOS logic|pMOS]], both are turned off. However when gate input to the [[nMOS logic|nMOS]] is '1' and its complementary '0' is the gate input to the [[pMOS logic|pMOS]], both are turned on and passes any signal '1' or '0' equally well without degradation. See the truth table at the right. The use of transmission gates eliminates the undesirable threshold voltage effects which give rise to loss of logic levels in [[pass transistor logic]]. This enables certain logic functions to be implemented with fewer transistors than possible using other CMOS logic, and can be used to design [[multiplexer]]s. == Design == It would seem that a transmission gate could be constructed using simply a single [[pMOS logic|pMOS]] or [[nMOS logic|nMOS]] transistor. If only an individual [[nMOS logic|nMOS]] transistor were to be used, and there was a high voltage on the OUT and a low voltage on the IN and we are trying to transmit the zero to the OUT, then the [[nMOS logic|nMOS]] will drain some of the voltage but not all of it leaving the OUT somewhere in the "no man's land" voltage region of digital circuits. Adding the [[pMOS logic|pMOS]] gate in parallel allows all the voltage to drain after the [[nMOS logic|nMOS]] shuts off before all the voltage is drained. This also solves the problem when transmitting a high voltage to OUT.¹ ==See also== * [[Tri-state logic]] * [[Analog_switch|Analog Switch]] == Sources == *[http://www.maxim-ic.com/appnotes.cfm/appnote_number/4243/ What is a Transmission Gate (Analog Switch)?] *http://www.nanohub.org/courses/nanoscale_transistors - Mark Lundstrom (Lecture 24) [[Category:Solid state switches]] [[Category:Logic gates]] [[ar:بوابة النقل]] [[da:Transmissionsgate]] [[de:Transmission-Gate]] [[it:Transmission gate]]</text> </page> <page> <id>38149</id> <title>Transport triggered architecture</title> <text>In [[computer architecture]], a '''transport triggered architecture''' ('''TTA''') is a kind of [[Central processing unit|CPU]] design in which programs directly control the internal transport [[Bus (computing)|buses]] of a processor. Computation happens as a side effect of data transports: writing data into a ''triggering port'' of a [[functional unit]] triggers the functional unit to start computation. This is similar to what happens in a [[systolic array]]. TTA can be used to create [[application-specific instruction-set processor]]s (''ASIP'') with custom hardware for speed or lower cost but without the inflexibility and design cost of purely-hardware processors. Typically a transport triggered processor has multiple transport buses and multiple functional units connected to the buses, which provides opportunities for [[instruction level parallelism]]. The parallelism is statically defined by the programmer. In this respect (and obviously due to the large instruction word width), the TTA architecture resembles the [[Very Long Instruction Word]] (VLIW) architecture. A TTA instruction word is composed of multiple slots, one slot per bus, and each slot determines the data transport that takes place on the corresponding bus. The fine-grained control allows some optimizations that are not possible in a conventional processor. For example, software can transfer data directly between functional units without using registers. Transport triggering exposes some microarchitectural details that are normally hidden from programmers. This greatly simplifies the control logic of a processor, because many decisions normally done at [[Run time (computing)|run time]] are fixed at [[compile time]]. However, it also means that a binary compiled for one TTA processor will not run on another one without recompilation if there is even a small difference in the architecture between the two. The binary incompatibility problem, in addition to the complexity of implementing a full context switch, makes TTAs more suitable for [[embedded system]]s than for general purpose computing. Of all the [[one instruction set computer]] architectures, the TTA architecture is one of the few that has had CPUs based on it built, and the only one that has CPUs based on it sold commercially. == Structure == TTA processors are built of independent ''function units'' and [[register file]]s, which are connected with ''transport buses'' and ''sockets''. [[Image:Transport Triggered Architecture.png|thumb|Parts of Transport Triggered Architecture]] === Function unit === Each function unit implements one or more [[Operator (programming)|operations]], which implement functionality ranging from a simple addition of integers to a complex and arbitrary user-defined computation. Operands for operations are transferred through function unit ''ports''. Each function unit may have an independent [[Pipeline (computing)|pipeline]]. In case a function unit is [[Instruction pipeline|fully pipelined]], a new operation that takes multiple [[clock cycle]]s to finish can 