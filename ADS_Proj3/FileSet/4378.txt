continues to operate as a standalone company within the Telephonetics plc group. Summer 2009 Telephonetics VIP launch ContactCentre 59R which integrates with their platform, ContactPortal, Mobility and automation agents to make a comprehensive call routing and call automation package for their customers. ==References== 1. Butler Group conducted a Technology Audit on Datadialogs (Eden) [http://www.butlergroup.com/research/KCInterPages/%7B64DEA63C-82C2-4024-9984-D43601E0C331%7D.asp] in April 2008. ==External links== * [http://www.telephoneticsVIP.co.uk Official Telephonetics VIP Website] * [http://www.datadialogs.com Official Datadialogs Website] * [http://www.blog.telephoneticsvip.co.uk Telephonetics VIP blog] * [http://www.forum.telephoneticsvip.co.uk Telephoentics VIP on-line forum] [[Category:Speech recognition]] [[Category:Software companies of the United Kingdom]]</text> </page> <page> <id>37009</id> <title>Template processor</title> <text><!-- web application is already linked in this article, why is a link at the top needed? -->[[Image:TempEngGen015.svg|thumb|right|A diagram illustrating all of the basic elements and processing flow of a template engine.]] A '''template processor''' (also known as a ''template engine'' or a ''template parser'') is [[software]] or a [[software component]] that is designed to combine one or more [[Template (software engineering)|templates]] with a [[data model]] to produce one or more result documents. <ref name="Niemeyer000">{{cite book | last = Niemeyer | first = Patrick | title = Learning Java | publisher = O'Reilly | location = Sebastopol | year = 2002 | isbn = 0596002858 }} </ref> <ref name="Manolescu000">{{cite book | last = Manolescu | first = Dragos | title = Pattern Languages of Program Design 5 | publisher = Addison-Wesley Professional | location = Reading | year = 2006 | isbn = 0321321944 }} </ref> <ref name="Fowler000">{{cite book | last = Fowler | first = Martin | title = Patterns of Enterprise Application Architecture | publisher = Addison-Wesley | location = Boston | year = 2003 | isbn = 0321127420 }} </ref> For purposes of this article, a result document is any kind of formatted output, including [[documents]], [[web page]]s, or [[source code]], either in whole or in fragments. ==System elements== All template processing systems consist of at least these primary elements: * an associated '''data model'''; * one or more '''source templates'''; * a processor or '''template engine'''; * generated output in the form of '''result documents'''. ===Data model=== This may be a relational database, a source file such as [[XML]], an alternate format of [[flat file database]], a [[spreadsheet]] or any of other various sources of preformatted data. Some template processing systems are limited in the types of data that can be used. Others are designed for maximum flexibility and allow many different types of data. ===Source template=== Source templates are traditionally specified: * according to a pre-existing programming language; * according to a specially-defined template language; * according to the features of a hosting software application; or * according to a hybrid combination of some or all of the above. ===Template engine=== The template engine is responsible for: * connecting to the data model; * processing the code specified in the source templates; and * directing the output to a specific [[Pipeline (computing)|pipeline]], [[text file]], or [[Stream (computing)|stream]] Additionally some template engines allow additional configuration options. ===Result documents=== These may consist of an entire document or a document fragment. ==Uses== Template processing is used in various contexts for different purposes. The specific purpose is ordinarily contingent upon the [[software application]] or template engine in use. However, the flexibility of template processing systems often enables unconventional uses for purposes not originally intended by the original designers. ===Template engine=== A template engine is a specific kind of template processing module that exhibits all of the major features of a modern [[programming language]]. The term ''template engine'' evolved as a generalized description of programming languages whose primary or exclusive purpose was to process templates and data to output text. The use of this term is most notably applied to [[web development]] using a [[web template system]], and it is also applied to other contexts as well.<ref name="TmpEngUses">(see e.g., Velocity, TemplateToolkit, Freemarker).</ref> ===Document generation=== Document generation frameworks typically use template processing as the central model for generating documents. ===Source code generation=== Source code generation tools support generation of [[source code]] (as the result documents) from abstract data models (e.g., UML, relational data, domain-specific enterprise data stores) for particular application domains, particular organizations, or in simplifying the production process for [[computer programmer]]s. <!--TODO :: code generation links ;; Rational Rose ;; MyGeneration ;; (others?) --> ===Software functionality=== A [[World Wide Web|web]] template engine processes '''web templates''' and source data (typically from a [[relational database]]) to produce one or more output [[web page]]s or page fragments. It is ordinarily included as a part of a [[web template system]] or [[application framework]]. Currently, template processing software is most frequently used in the context of development for the [[World Wide Web|web]]. <!--TODO :: software functionality links ;; Rational Rose ;; Filemaker ;; Text Editors ;; Database ;; (others?)--> ==Comparison== [[XSLT]] is a template processing model designed by [[W3C]]. It is designed primarily for transformations on [[XML]] data (into [[web document]]s or other output). [[Programming languages]] such as [[Perl]], [[Python (programming language)|Python]], [[PHP]], [[Ruby (programming language)|Ruby]], [[C_Sharp_(programming_language)|C#]], and [[Java (programming language)|Java]] support template processing either natively, or through add-on libraries and modules. [[JavaServer Pages]]<ref name="JSP_for_Java"> JavaServer Pages is a technology released by Sun for use with the Java programming language. {{cite web |url=http://java.sun.com/products/jsp/faq.html#1 |title=JavaServer Pages Technology |date=2006-10-10 |accessdate=2006-10-10 }} </ref>, [[Active Server Pages]]<ref name="ASP10_for_VBS_JS"> ASP 1.0 was originally released for use with Microsoft VBScript and JScript. It was an extension to Microsoft IIS. {{cite web |url=http://en.wikipedia.org/wiki/Active_Server_Pages |title=References to ASP 1.0, JScript, and VBScript }} </ref>, [[Genshi_(templating_language)|Genshi]] (for Python), and [[eRuby]] are examples of template engines designed specifically for web application development. Moreover, template processing is sometimes included as a sub-feature of software packages like [[text editors]], [[Integrated development environment|IDE]]s and [[relational database management system]]s. == Benefits of using template engines == * encourages organization of source code into operationally-distinct layers (see e.g., [[Model-view-controller|MVC]]) * enhances productivity by reducing unnecessary reproduction of effort * enhances teamwork by allowing separation of work based on skill-set (e.g., artistic vs. technical) == References == {{reflist}} ==See also== * [[Template engine (web)]] * [[Source code generation]] 