add readability to the code but are not required for it to execute. Minified source code is especially useful for [[interpreted language]]s deployed and transmitted on the Internet (such as [[JavaScript]]), because it reduces the amount of data that needs to be transferred. Minified source code may also be used as a kind of [[Obfuscated code|obfuscation]]. In Perl culture, aiming at extremely minified source code is the purpose of the [[Perl#Perl golf|Perl golf]] game. Minified source code is also very useful for HTML code. All white space in HTML is reduced to only one space on the surface of a web page, so it's often quite possible to halve the size of a web page, by removing all excessive white space. == Types == ===Tools=== Reputed JavaScript optimizers such as JSMin<ref>[http://www.crockford.com/javascript/jsmin.html JSMin]</ref> and Packer,<ref>[http://dean.edwards.name/packer/ Packer]</ref> themselves programmed in JavaScript, are specially designed for modern web programming techniques, and are able to understand and preserve [[conditional comments]], and similar. Packer, for instance, can optionally [[Base62]] compress the given source code in a manner that can be decompressed by regular [[web browsers]], as well as shrink variable names that are typically 5-10 characters to single letters, which reduces the [[file size]] of the script and, therefore, makes it download faster.<ref>[http://dean.edwards.name/weblog/2007/04/packer3/ Packer version 3.0 feature list]</ref> Google has released their Closure Compiler,<ref>[http://code.google.com/closure/compiler/docs/gettingstarted_ui.html Closure Compiler]</ref> which also provides minification as well as the ability to introduce more aggressive renaming, removing dead code, and providing function inlining. In addition, certain online tools, such as the [[Yahoo!]] YUI Compressor<ref>[http://developer.yahoo.com/yui/compressor/ YUI Compressor]</ref> or Pretty Diff,<ref>[http://prettydiff.com/ Pretty Diff]</ref> can compress [[CSS]] files. ===Web development=== Components and libraries for [[Web applications]] and websites have been developed to optimize file requests and quicken page load times by reducing the size of various files. [[JavaScript]] and [[Cascading Style Sheets|CSS]] resources may be minified, preserving their behavior while considerably reducing their file size. Libraries such as JavaScript Optimizer,<ref>[http://js-optimizer.sourceforge.net JavaScript Optimizer]</ref> pack:tag,<ref>[http://sf.net/projects/packtag pack:tag]</ref> Minify,<ref>[http://code.google.com/p/minify/ Minify]</ref> Lightweight,<ref>[http://razorsharpcode.blogspot.com/2010/02/lightweight-javascript-and-css.html Lightweight]</ref> CssMin,<ref>[http://code.google.com/p/cssmin/ CssMin]</ref> jsmin-php,<ref>[http://github.com/rgrove/jsmin-php/ jsmin-php]</ref> MiniME,<ref>[http://www.toptensoftware.com/minime MiniME]</ref> and ShrinkSafe<ref>[http://shrinksafe.dojotoolkit.org/ ShrinkSafe]</ref> are capable of such on-the-fly optimizations. Some libraries (such as JAWR<ref>[https://jawr.dev.java.net JAWR]</ref> and CombineAndMinify<ref name="cam">[http://www.codeproject.com/KB/aspnet/CombineAndMinify.aspx CombineAndMinify]</ref>) also merge multiple script files into a single file for client download. This fosters a modular approach to development. A novel approach to server-side minification is taken by [[Ziproxy]], a forwarding, non-caching, compressing [[Proxy server|HTTP proxy]] targeted for traffic optimization. It minifies and optimizes HTML, CSS, and JavaScript resources and, in addition, re-compresses pictures. Content encoding is an approach taken by compatible [[web servers]] and modern [[web browsers]] to compress HTML and related textual content, often in the [[gzip]] format. == See also == *[[Copy protection]] *[[Reverse engineering]] *[[Obfuscated code]] == References == {{reflist|2}} == External links == * [http://minification.com/ Minification Blog - Web Design, Brand Identity Design, Mobile Application Design and so much more by Chris Johnson] {{DEFAULTSORT:Minification (Programming)}} [[Category:Source code|Source code]] [[Category:JavaScript]] [[zh:極簡化]]</text> </page> <page> <id>24651</id> <title>Minimal mappings</title> <text>'''Minimal mappings''' are the result of an advanced technique of [[semantic matching]], a technique used in Computer Science to identify information which is semantically related. [http://eprints.biblio.unitn.it/archive/00000381/01/013.pdf Semantic matching] has been proposed as a valid solution to the semantic heterogeneity problem, namely supporting diversity in knowledge. Given any two graph-like structures, e.g. classifications, database or XML schemas and ontologies, matching is an operator which identifies those nodes in the two structures which semantically correspond to one another. For example, applied to file systems it can identify that a folder labeled “car” is semantically equivalent to another folder “automobile” because they are synonyms in English. The proposed technique works on [http://eprints.biblio.unitn.it/archive/00000967/01/016.pdf lightweight ontologies], namely tree structures where each node is labeled by a natural language sentence, for example in English. These sentences are translated into a formal logical formula (according to an artificial unambiguous language) codifying the meaning of the node taking into account its position in the graph. For example, in case the folder “car” is under another folder “red” we can say that the meaning of the folder “car” is “red car” in this case. This is translated into the logical formula “red AND car”. The output of matching is a mapping, namely a set of semantic correspondences between the two graphs. Each mapping element is attached with a semantic relation, for example equivalence. Among all possible mappings, the minimal mapping is a high quality mapping such that i) all the other mapping elements can be computed from the ones in the minimal set in time linear in the size of the input graphs, and ii) none of the mapping elements in the minimal set can be dropped without losing property i). The main advantage of minimal mappings is that they are the minimal amount of information that needs to be dealt with. Notice that this is a rather important feature as the number of possible mappings can grow up to n*m with n and m the size of the two input ontologies. In particular, minimal mappings become crucial with large ontologies, e.g. DMOZ, where even relatively small subsets of the number of possible mapping elements, potentially millions of them, are unmanageable. Minimal mappings provide clear usability advantages. Many systems and corresponding interfaces, mostly graphical, have been provided for the management of mappings but all of them hardly scale with the increasing number of nodes, and the resulting visualizations are rather messy [http://eprints.biblio.unitn.it/archive/00001461/01/042.pdf]. Furthermore, the maintenance of smaller mappings makes the work of the user much easier, faster and less error prone. Look at [http://eprints.biblio.unitn.it/archive/00001525/01/078.pdf] for a formal definition of minimal and, dually, redundant mappings, evidence of the fact that the set of minimal mappings always exists and it is unique and an algorithm for computing them. ==See also== *[[Lightweight ontologies]] *[[Ontology alignment]] *[[Semantic matching]] [[Category:Semantic Web]] [[Category:Ontology (information science)]]</text> </page> <page> <id>24669</id> <title>Minimum distance</title> <text>{{Otheruses4|minimum distance|minimum distance estimation|Minimum distance estimation}} The term '''minimum distance''' is used in several ways: * In [[geometry]], the minimum distance of a collection of points ''P'' in a space is the smallest distance between any two points of the space. * In [[coding theory]], minimum 