= The Mathematics of Internet Congestion Control | publisher = Birkhäuser | location = Boston, MA, USA | year = 2004 | isbn = 978-0-8176-3227-4 }}</ref> for an in-depth account on these techniques and their analysis. ==Notes and references== <references /> ==External links== * [http://www.icir.org/floyd/red.html RED (Random Early Detection) Queue Management]. Author: Sally Floyd * [http://code.google.com/p/guduz/ Guduz] – A Simple Random Early Detection (RED) Simulator * [http://www.ee.ust.hk/~heixj/publication/thesis/node37.html Variants of RED]. Author: Hei Xiao Jun [[Category:Network performance]] [[da:Undgåelse af datanet-trafikforstoppelse#RED og WRED]] [[de:Random early detection]] [[it:Rilevazione casuale anticipata]] [[ja:ランダム初期検知]] [[pl:Random early detection]] [[ru:Random early detection]] [[sk:Random early detection]] [[fi:Random early detection]]</text> </page> <page> <id>31231</id> <title>Random number generator attack</title> <text>{{morefootnotes|date=October 2007}} The security of [[cryptographic]] systems depends on some secret data that is known to authorized persons but unknown and unpredictable to others. To achieve this unpredictability, some [[randomization]] is typically employed. Modern [[cryptographic protocol]]s often require frequent generation of random quantities (see also [[cryptographic nonce|nonce]]). Quality in the [[random number generator|random number generation]] (RNG) process is almost always required for security, and lack of quality generally provides attack vulnerabilities and so to lack of security, even to complete compromise, in cryptographic systems. The RNG process is particularly attractive to attackers because it is typically a single isolated hardware or software component easy to locate. If the attacker can substitute pseudo-random bits generated in a way he can predict, security is totally compromised, yet generally undetectable by any upstream test of the bits. Furthermore, such attacks require only a single access to the system that is being compromised. No data need be sent back in contrast to, say, a [[computer virus]] that steals [[key (cryptography)|keys]] and then e-mails them to some drop point. ==Human generation of random quantities== Humans generally do poorly at generating random quantities. Magicians, professional gamblers and con artists depend on the predictability of human behavior. In [[World War II]] German code clerks were instructed to select three letters at random to be the initial rotor setting for each [[Enigma machine]] message. Instead some chose predictable values like their own or a girl-friend's initials, greatly aiding allied breaking of these encryption systems. Another example is the often predictable ways computer users choose passwords. ''See:'' [[Password cracking]]. Nevertheless, in the specific case of playing [[mixed strategy]] games, use of Human gameplay [[entropy]] for Randomness Generation was studied by Ran Halprin and [[Moni Naor]], see {{cite web | title = Games for Extracting Randomness | url=http://www.neko.co.il/MAE-offline.html}} ==Prominent examples of random number generator security issues== Early versions of [[Netscape Communications Corporation|Netscape]]'s [[Secure Socket Layer]] (SSL) encryption protocol used pseudo-random quantities derived from a PRNG seeded with three variable values, the time of day, the process ID, and the parent process ID. These quantities are often relatively predictable, and so have little [[information entropy|entropy]] and are less than random, and so that version of SSL was found to be insecure as a result. The problem was notified to Netscape in 1994 by Phillip Hallam-Baker, then a researcher in the CERN Web team but was not fixed prior to release. The problem in the running code was discovered in 1995 by [[Ian Goldberg]] and [[David A. Wagner|David Wagner]] <ref>[http://www.cs.berkeley.edu/~daw/papers/ddj-netscape.html DDJ, Jan96: Randomness and Netscape Browser<!-- Bot generated title -->]</ref>, who had to [[Reverse engineering|reverse engineer]] the [[object code]] because Netscape refused to reveal the details of its random number generation (an example of attempted [[security through obscurity]]). That RNG was fixed in later releases (version 2 and higher) by more robust (i.e., more random and so higher entropy from an attacker's perspective) seeding. Microsoft uses an unpublished algorithm to generate random values for its Windows operating system. These random quantities are made available to users via the [[CryptGenRandom]] utility. In November 2007, [[Leo Dorrendorf]] et al. from the [[Hebrew University of Jerusalem]] and [[University of Haifa]] published a paper titled ''Cryptanalysis of the Random Number Generator of the Windows Operating System'' [http://eprint.iacr.org/2007/419.pdf]. The paper presented serious weaknesses in the Microsoft approach. The paper's conclusions were based on [[disassembly]] of the code in Windows 2000, but according to Microsoft apply to XP as well<ref>[http://www.computerworld.com/action/article.do?command=viewArticleBasic&articleId=9048438 Microsoft confirms that XP contains random number generator bug<!-- Bot generated title -->]</ref>. The U.S. [[National Institute of Standards and Technology]] has published a collection of "deterministic random bit generators" it recommends as NIST Special Publication 800-90 [http://csrc.nist.gov/publications/nistpubs/800-90/SP800-90revised_March2007.pdf]. One of the generators, [[Dual EC DRBG]], was favored by the [[National Security Agency]].[http://www.wired.com/politics/security/commentary/securitymatters/2007/11/securitymatters_1115] Dual_EC_DRBG uses [[elliptic curve cryptography|elliptic curve technology]] and includes a set of recommended constants. In August 2007, Dan Shumow and Niels Ferguson of [[Microsoft]] showed that the constants could be constructed in such a way as to create a secret [[Backdoor (computing)|backdoor]] to the algorithm. [http://rump2007.cr.yp.to/15-shumow.pdf] In May, 2008, security researcher [[Luciano Bello]] revealed his discovery that changes made in 2006 to the random number generator in the version of the [[openssl]] package distributed with [[Debian]] [[Linux]] and other Debian-based distributions, such as [[Ubuntu (operating system)|Ubuntu]], dramatically reduced the entropy of generated values and made a variety of security keys vulnerable to attack. [http://www.debian.org/security/2008/dsa-1571] [http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0166] The security weakness was caused by changes made to the openssl code by a Debian developer in response to compiler warnings of apparently redundant code.[http://cryptogon.com/?p=2635] Key types affected include SSH keys, OpenVPN keys, DNSSEC keys, key material for use in X.509 certificates and session keys used in SSL/TLS connections. Keys generated with GnuPG or GNUTLS are not affected as these programs used different methods to generate random numbers. Non-Debian-based Linux distributions are also unaffected. This security vulnerability was promptly patched after it was reported. In December 2010, a group calling itself ''fail0verflow'' announced recovery of the [[ECDSA]] private key used by [[Sony]] to sign software for the [[PlayStation 3]] game console. The attack was made possible because Sony failed to generate a new random [[nonce]] for each signature. ==Attacks on software random number generators== Just as with other components of a cryptosystem, a software random number generator should be designed to resist certain attacks. Exactly which attacks must be defended against depends on the 