[http://www.physik.fu-berlin.de/~kleinert/kleiner_reb1/contents1.html Vol. I] and [http://www.physik.fu-berlin.de/~kleinert/kleiner_reb1/contents2.html Vol. II])'' * Aliprantis, Kim C. Border ''Infinite dimensional analysis. Hitchhiker's guide'' Springer * J. Andres, L. Górniewicz ''Topological Fixed Point Principles for Boundary Value Problems'', Kluwer Academic Publishers, 2003 *[http://books.google.co.uk/books?id=Cir88lF64xIC Topological methods for set-valued nonlinear analysis], Enayet U. Tarafdar, Mohammad Showkat Rahim Chowdhury, World Scientific, 2008, ISBN 9789812704672 ==See also== * [[partial function]] * [[correspondence (mathematics)|correspondence]] * [[Fat link]], a one-to-many [[hyperlink]] * [[Interval finite element]] [[Category:Mathematical relations]] [[Category:Functions and mappings]] [[Category:Types of functions]] [[ca:Funció multivaluada]] [[fr:Fonction multivaluée]] [[it:Funzione polidroma]] [[he:פונקציה רב ערכית]] [[ja:多価関数]] [[pl:Multifunkcja]] [[pt:Função multivalorada]] [[ru:Многозначная функция]] [[sk:Viachodnotová funkcia]] [[sv:Flervärd funktion]]</text> </page> <page> <id>25420</id> <title>Multivariate interpolation</title> <text>In [[numerical analysis]], '''multivariate interpolation''' or '''spatial interpolation''' is [[interpolation]] on functions of more than one variable. The function to be interpolated is known at given points <math>(x_i, y_i, z_i, \dots)</math> and the interpolation problem consist of yielding values at arbitrary points <math>(x,y,z,\dots)</math>. ==Regular grid== For function values known on a [[regular grid]] (having predetermined, not necessarily uniform, spacing), the following methods are available. ===Any dimension=== * [[Nearest-neighbor interpolation]] ===2 dimensions=== * [[Bilinear interpolation]] * [[Bicubic interpolation]] * [[Bézier surface]] * [[Lanczos resampling]] * [[Delaunay triangulation]] * [[Spline interpolation]] * [[Natural neighbor]] * [[Kriging]] * [[Inverse distance weighting]] [[Resampling#Bitmap|Bitmap resampling]] is the application of 2D multivariate interpolation in [[image processing]]. Three of the methods applied on the same dataset, from 16 values located at the black dots. The colours represent the interpolated values. <gallery> Image:Nearest2DInterpolExample.png|Nearest neighbor Image:BilinearInterpolExample.png|Bilinear Image:BicubicInterpolationExample.png|Bicubic </gallery> See also [[Padua points]], for [[polynomial interpolation]] in two variables. ===3 dimensions=== * [[Trilinear interpolation]] * [[Tricubic interpolation]] See also [[Resampling (bitmap)|bitmap resampling]]. ===Tensor product splines for ''N'' dimensions=== Catmull-Rom splines can be easily generalized to any number of dimensions. The [[cubic Hermite spline]] article will remind you that <math>\mathrm{CINT}_x(f_{-1}, f_0, f_1, f_2) = \mathbf{b}(x) \cdot \left( f_{-1} f_0 f_1 f_2 \right)</math> for some 4-vector <math>\mathbf{b}(x)</math> which is a function of ''x'' alone, where <math>f_j</math> is the value at <math>j</math> of the function to be interpolated. Rewrite this approximation as :<math> \mathrm{CR}(x) = \sum_{i=-1}^2 f_i b_i(x) </math> This formula can be directly generalized to N dimensions <ref>[http://arxiv.org/abs/0905.3564 Two hierarchies of spline interpolations. Practical algorithms for multivariate higher order splines]</ref>: :<math> \mathrm{CR}(x_1,\dots,x_N) = \sum_{i_1,\dots,i_N=-1}^2 f_{i_1\dots i_N} \prod_{j=1}^N b_{i_j}(x_j) </math> Note that similar generalizations can be made for other types of spline interpolations, including Hermite splines. In regards to efficiency, the general formula can in fact be computed as a composition of successive <math>\mathrm{CINT}</math>-type operations for any type of tensor product splines, as explained in the [[tricubic interpolation]] article. However, the fact remains that if there are <math>n</math> terms in the 1-dimensional <math>\mathrm{CR}</math>-like summation, then there will be <math>n^N</math> terms in the <math>N</math>-dimensional summation. == Irregular grid (scattered data) == Schemes defined for scattered data on a [[irregular grid]] should all work on a regular grid, typically reducing to another known method. * [[Nearest-neighbor interpolation]] * [[Triangulated irregular network]]-based [[natural neighbor]] * [[Triangulated irregular network]]-based [[linear interpolation]] (a type of [[piecewise linear function]]) * [[Inverse distance weighting]] * [[Kriging]] * [[Radial basis function]] * [[Thin plate spline]] * [[Polyharmonic spline]] (the thin-plate-spline is a special case of a polyharmonic spline) * Least-squares [[spline (mathematics)|spline]] ==Notes== <references /> ==External links== * [http://chichi.lalescu.ro/splines.html Example C++ code for several 1D, 2D and 3D spline interpolations (including Catmull-Rom splines).] * [http://web.archive.org/web/20060915111500/http://www.ices.utexas.edu/CVC/papers/multidim.pdf Multi-dimensional Hermite Interpolation and Approximation], Prof. Chandrajit Bajaja, [[Purdue University]] [[Category:Interpolation]] [[Category:Multivariate interpolation]] {{Mathapplied-stub}}</text> </page> <page> <id>25426</id> <title>Multiversion concurrency control</title> <text>'''Multiversion concurrency control''' (abbreviated '''MCC''' or '''MVCC'''), in the [[database]] field of [[computer science]], is a [[concurrency control]] method commonly used by [[database management system]]s to provide concurrent access to the database and in programming languages to implement [[transactional memory]]<ref>http://clojure.org/refs</ref>. For instance, a database will implement updates not by deleting an old piece of data and overwriting it with a new one, but instead by marking the old data as obsolete and adding the newer "version." Thus there are multiple versions stored, but only one is the latest. This allows the database to avoid overhead of filling in holes in memory or disk structures but requires (generally) the system to periodically sweep through and delete the old, obsolete data objects. For a document-oriented database such as [[CouchDB]], [[Riak]] or [[MarkLogic Server]] it also allows the system to optimize documents by writing entire documents onto contiguous sections of disk—when updated, the entire document can be re-written rather than bits and pieces cut out or maintained in a linked, non-contiguous database structure. MVCC also provides potential "point in time" consistent views. In fact read transactions under MVCC typically use a timestamp or transaction ID to determine what state of the DB to read, and read these "versions" of the data. This avoids managing locks for read transactions because writes can be [[Isolation (database systems)|isolated]] by virtue of the old versions being maintained, rather than through a process of locks or mutexes. Writes affect future "version" but at the transaction ID that the read is working at, everything is guaranteed to be consistent because the writes are occurring at a later transaction ID. In other words, MVCC provides each user connected to the database with a "snapshot" of the database for that person to work with. Any changes made will not be seen by other users of the database until the transaction has been committed. ==Implementation== {{Confusing|section|date=February 2009}} MVCC uses [[timestamp]]s or increasing transaction IDs to achieve transactional consistency. MVCC ensures a transaction never has to wait for a database object by maintaining several versions of an object. Each version would have a write timestamp and it would let a transaction (T<sub>i</sub>) read the most recent version of an object which precedes the transaction timestamp (TS(T<sub>i</sub>)). If a transaction (T<sub>i</sub>) wants to write to an object, and if there is another transaction (T<sub>k</sub>), the timestamp of T<sub>i</sub> must precede the timestamp of T<sub>k</sub> (i.e., TS(T<sub>i</sub>) < TS(T<sub>k</sub>)) for the object write operation to succeed. Which is to say a write cannot complete if there are outstanding transactions with an earlier timestamp. Every object would also 