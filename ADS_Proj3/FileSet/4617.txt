egg = Egg( 4, "White") egg.color = "Green" print egg.weight, egg.color, egg.quack() # prints: 4 Green quack </source> A Egg object could be defined such that weight and color are simple attributes as in the following <source lang="python"> class Egg(object): def __init__(self, weight, color): self.weight = weight self.color = color def quack(self): return "quack" </source> Or the Egg object could use properties, and invoke methods instead <source lang="python"> class Egg(object): def __init__(self, weight, color): self.__weight = toGrams(weight) self.__color = toRGB(color) def setColor(self, colorname): self.__color = toRGB(colorname) def getColor(self): return toColorName(self.__color) color = property(getColor, setColor, doc="Color of the Egg") def setWeight(self, weightOz); self.__weight = 29.3*weightOz def getWeight(self): return self.__weight/29.3; weight = property(setWeight, getWeight, doc="Weight in Ounces") def quack(self): return "quack" </source> Regardless of which way Egg is defined, the calling code can remain the same. The implementation of Egg can switch from one form to the other without affecting code that uses the Egg class. Languages which implement the UAP have this property as well. C++ has neither the UAP nor properties, when an object is changed such that an attribute (color) becomes a pair of functions (getA, setA). Any place in that uses an instance of the object and either sets or gets the attribute value ( x = obj.color or obj.color= x) must be changed to invoke one of the functions. ( x = obj.getColor() or obj.setColor(x)). This complicates maintenance of C++ programs. Distributed libraries of C++ objects must be careful about how they provide access to member data. ==See also== * [http://c2.com/cgi/wiki?UniformAccessPrinciple The UniformAccessPrinciple on the c2 wiki] * http://www.eiffel.com/general/monthly_column/2005/Sept_October.html [[Category:Articles with example Python code]] [[Category:Software design]] [[Category:Programming paradigms]] {{compu-prog-stub}} {{Computer Science}} [[fi:Yhtenäinen osoitusperiaate]]</text> </page> <page> <id>38820</id> <title>Uninstaller</title> <text>[[File:Uninstall BOINC.png|thumb|[[Berkeley Open Infrastructure for Network Computing]] uninstaller [[icon (computing)|icon]].]] An '''uninstaller''', also called a '''deinstaller''', is a [[utility software]] designed to remove other software or parts of it from a computer. It is the opposite of an [[installer]]. ==Components== Generally, most (third-party) uninstallers contain the following components:<ref name="smart" /> * '''Logger''': The Logger is used to log installations (e.g., log which files were added or changed, which registry entries were added or changed, etc. at the time of installation). This log is used when the user decides to uninstall the logged installation at later date (in that case, the log is "reversed" — i.e., the log is read, but opposite actions are taken in reverse order). * '''Uninstaller''': The Uninstaller is used to reverse changes in the log. This way, the applications can be uninstalled because all changes that were made at the times of installation are reversed. * '''Analyzer (optional)''': The Analyzer is used to uninstall programs of which installation is not logged by the uninstaller. In that case, the program analyzes the program and finds (and deletes, if the user decided to uninstall the program) all related files and registry entries. * '''Watcher (optional)''': The Watcher watches running programs for installation programs (and usually offers to start the logger when such programs are detected). Usually, this works by watching the tasklist for any names that are usually used by installation programs (e.g., SETUP.EXE, INSTALL.EXE, etc.) * '''Other tools (optional)''': Some uninstallers may also contain other related tools like a junk file cleaner, browser history cleaner, cache cleaner, etc. These tools are not mandatory for uninstallers and are added mainly to improve the merchantability (since pure uninstallers are unpopular today).<ref>{{cite web |url=http://www.bleepingcomputer.com/forums/topic211625.html |title=Now How does an Installer/Uninstaller Work? | publisher=bleepingcomputer.com |work=Forum |date= |accessdate=27 January 2010 |last= |first= }}</ref><ref name="smart">{{cite web |url=http://www.smartcomputing.com/Editorial/article.asp?article=articles/archive/l0508/15l08/15l08.asp&guid= |title=Uninstalling Software | publisher=[[SmartComputing]] |work= Software |date= August 1999, Vol.5 Issue 8 |accessdate=27 January 2010 |last= |first= }}</ref> ==Operations== Usually, in most (third-party) uninstallers, the following operations can be performed:<ref name="smart" /> * '''Log''': watches any changes made to the system during installation * '''Uninstall''': uninstalls a program (based on the log or analysis) * '''Move/Transport''': backs up a program (usually packs all required files and registry entries in a "transport package", which can be transported and installed in another computer) and uninstalls them * '''Archive''': backs up a program (and possibly compresses it to save disk space) and uninstalls it * '''Backup''': backs up a program (for reinstallation at a later date should the program fail) * '''Other related operations''': such as junk file cleaning, cache cleaning, etc. ==Third-party uninstallers today== Nowadays, pure third-party uninstallers (uninstallers that only contain basic components — that is the watcher, logger, uninstaller, and probably the analyzer) generally are unpopular and are not needed anymore, because:<ref>[http://www.mydigitallife.info/2009/07/19/how-to-disable-and-uninstall-protexis-licensing-service-psiservice-exe How to Disable and Uninstall Protexis Licensing Service psiservice] www.mydigitallife.info</ref> * Most software programs come with their own uninstallers (which are generally better and more accurate), * Most uninstallers are not entirely accurate (most of them are known to leave leftovers, which should be deleted by uninstallers), * There are many better and safer tools that can be used to replace uninstallers, Because of this, to make uninstallers more merchantable, most (if not all) of today's uninstallers contain other related tools (such as a cache cleaner, a junk file cleaner, etc.) <ref name="macbook" /> Why the third-party uninstallers are still used today: * More complex installed programs make system changes that the authors forget, ignore or are not aware of. They often integrate third-party components with no thought of their uninstallation. The competition to release new software versions with additional features leaves the uninstallation with a very small amount of attention and testing. The accuracy of the integrated uninstallers commonly leaves much to be desired. * The uninstallers that don't contain a logger module are aggressively promoted on the market claiming that they completely uninstall programs (a task that is impossible and even dangerous without monitoring an installation) * Many programs are bundled with all kind of add-ons, spyware or not, that are intentionally left on the user's computer after uninstallation of the main program. * At this time — when [[adware]], [[spyware]], [[Keystroke logging|keyloggers]], [[Trojan horse (computing)|trojans]] and other Internet threats appear every day — installation of a software product from an unknown source 