groups. An ''Access Control List'' may be used to grant permission to additional individual users or groups. For example: /pvr [u::rwx,g::r-x,o::r-x/u::rwx,u:sue:rwx,g::r-x,m::rwx,o::r-x] In this example, which is from the [[chacl]] command on the [[Linux]] operating system, the user '''sue''' is granted ''write'' permission to the ''/pvr'' directory. === User groups === Users under Unix style operating systems often belong to managed groups with specific access permissions. This enables users to be grouped by the level of access they have to this system. Many Unix implementations add an additional layer of security by requiring that a user be a member of the ''[[Wheel (Unix term)|wheel]]'' [[Group identifier (Unix)|user privileges group]] in order to access the <tt>su</tt> command.<ref name=levi>{{cite book|title=UNIX Administration: A Comprehensive Sourcebook for Effective Systems and Network Management |first=Bozidar |last=Levi |publisher=CRC Press |year=2002 |pages=207 |isbn=0849313511}}</ref> === Issues === Most Unix and Unix-like systems have an account or group which enables a user to exact complete control over the system, often known as a [[Superuser|root]] account. If access to this account is gained by an unwanted user, this results in a complete breach of the system. A root account however is necessary for administrative purposes, and for the above security reasons the root account is ''seldom'' used for day to day purposes (the [[sudo]] program is more commonly used), so usage of the root account can be more closely monitored. Root access "as it should be" can be visualised by those familiar with the [[Superman]] stories using the following [[analogy]]: ::Using a root account is rather like being Superman; an administrator's regular user is more like Clark Kent. Clark Kent becomes Superman for only as long as necessary, in order to save people. He then reverts to his "disguise". Root access should be used in the same fashion. The Clark Kent disguise doesn't really restrict him though, as he is still able to use his super powers. This is analogous to using the sudo program. ==User and administrative techniques== Unix has many tools that can improve security if used properly by users and administrators. ===Passwords=== Selecting a strong [[password]] and guarding it properly are probably the most important things a user can do to improve Unix security. In Unix systems, the essential information about users is stored under the file <tt>[[Passwd (file)|/etc/passwd]]</tt>. This file keeps track of the users registered in the system and their main definitions. Passwords, or more correctly, the hash of the password, can also be stored in the same place. The entries in <tt>/etc/passwd</tt> occupy exactly one line each, and have the following form: nickname:password_hash:UserID:GroupID:Complete_Name:home_dir:shell_bin An example would be: xfze:$1$zuW2nX3sslp3qJm9MYDdglEApAc36r/:1000:100:Jos√© Carlos D. S. Saraiva:/home/xfze:/bin/bash Since all users must have read access to this file, in order for the system to check the login password, one security issue was raised: anyone could have read the file and retrieve the password hashes of other users. To solve this problem, the file <tt>[[password shadowing|/etc/shadow]]</tt> was created to store the password hashes, with only [[root]] having read access. Under password shadowing, the <tt>/etc/passwd</tt> the 2nd field ([[key derivation function|password hash]]) is replaced by an 'x' which tells the system to retrieve the corresponding user's password via the <tt>/etc/shadow</tt> file. The <tt>/etc/shadow</tt> file usually only contains the first two fields: xfze:$1$zuW2nX3sslp3qJm9MYDdglEApAc36r/::::: The remaining fields in the <tt>/etc/shadow</tt> file include: #The minimum number of days between password changes #The maximum number of days until the password must be changed #The number of days of warning given before the password must be changed #The number of days after the password must be changed when the account becomes unusable #The date (expressed as the number of days since [[Unix epoch|January 1st, 1970]]) when the account is expired These fields may be used to improve Unix security by enforcing a password security policy. ===Users and accounts=== Administrators should delete old accounts promptly. *[[su (Unix)|su]], [[sudo]], [[Secure Shell|ssh]] only, no remote root logins ==Software Maintenance== ===Patching=== Operating systems, like all software, may contain bugs in need of fixing or may be enhanced with the addition of new features. Patching the operating system in a secure manner requires that the software come from a trustworthy source and not have been altered since it was packaged. Common methods for verifying that operating system patches have not been altered include the use of [[cryptographic hash]], such as an [[MD5]] based checksum, or the use of read-only media. From a security standpoint, the specific packaging method, such as the [[RPM Package Manager]] format originally from [[Red Hat Linux]] is not as important as the use of features which ensure the integrity of the patch itself. ====Source Distributions==== Source distributions include the ability to examine the code for suspicious content. The drawback, absent an accompanying cryptographic hash value, is that the user must be able to perform a security analysis of the code themselves. ====RPM Packages==== [[Linux]] distributions which use the [[RPM Package Manager]] format for providing base functionality and software updates make use of [[MD5]] and [[GNU Privacy Guard|GPG]] to ensure content integrity. The hash values are packaged with the RPM file and verified when the package is installed. ====Debian Packages==== [[Linux]] distributions which use the [[Debian]] [[Deb (file format)|.deb package format]] for providing base functionality and software updates make use of [[GNU Privacy Guard|GPG]] signatures to ensure content integrity. A signature is computed when the package is constructed and verified later when the package is installed. ====Other vendors and distributions==== Regardless of the vendor or distribution, all software distributions should provide a mechanism for verifying that the software is legitimate and has not been modified since it was originally packaged. ==Services== Unnecessary system software should not be installed or configured on a system. Software which is no longer required should be removed completely, if possible. *Identify what services are running **netstat -na **lsof **nmap **sockstat -4 ([[FreeBSD]]) The commands [[inetd]] and [[xinetd]] act as super-servers for a variety of network protocols such as [[rlogin]], [[telnet]] and [[ftp]]. Turning off unnecessary services *using ''chkconfig'' on [[Red Hat Linux]] *using ''/etc/rc.conf'' and ''/usr/local/etc/rc.d'' 