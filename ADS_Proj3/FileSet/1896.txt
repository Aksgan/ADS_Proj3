Haskell language definition itself does not include either [[Concurrency (computer science)|concurrency]] or [[Parallel computing|parallelism]], although GHC supports both. {{main|Concurrent Haskell}} [[Concurrent Haskell]] is an extension to Haskell that provides support for threads and synchronization.<ref>Simon Peyton Jones, Andrew Gordon, and Sigbjorn Finne. [http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz Concurrent Haskell]. ''ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (PoPL).'' 1996. (Some sections are out of date with respect to the current implementation.)</ref> GHC's implementation of Concurrent Haskell is based on multiplexing lightweight Haskell threads onto a few heavyweight OS threads,<ref name="marlow2009">[http://www.haskell.org/~simonmar/papers/multicore-ghc.pdf Runtime Support for Multicore Haskell] (Simon Marlow, Simon Peyton Jones, Satnam Singh) ICFP '09: Proceeding of the 14th ACM SIGPLAN international conference on Functional programming, Edinburgh, Scotland, August 2009</ref> so that Concurrent Haskell programs run in parallel on a [[Symmetric multiprocessing|multiprocessor]]. The runtime can support millions of simultaneous threads.<ref name="dons-multicore">http://donsbot.wordpress.com/2009/09/05/defun-2009-multicore-programming-in-haskell-now/</ref> The GHC implementation employs a dynamic pool of OS threads, allowing a Haskell thread to make a blocking system call without blocking other running Haskell threads.<ref name="marlow2004">[http://www.haskell.org/~simonmar/papers/conc-ffi.pdf Extending the Haskell Foreign Function Interface with Concurrency] (Simon Marlow, Simon Peyton Jones, Wolfgang Thaller) Proceedings of the ACM SIGPLAN workshop on Haskell, pages 57--68, Snowbird, Utah, USA, September 2004</ref> Hence the lightweight Haskell threads have the characteristics of heavyweight OS threads, and the programmer is unaware of the implementation details. Recently, Concurrent Haskell has been extended with support for [[Software transactional memory|Software Transactional Memory]] (STM), which is a concurrency abstraction in which compound operations on shared data are performed atomically, as transactions.<ref name="stm">Tim Harris, Simon Marlow, Simon Peyton Jones, Maurice Herlihy "[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.67.3686&rep=rep1&type=pdf Composable memory transactions]" ''Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming'', 2005</ref> GHC's STM implementation is the only STM implementation to date to provide a static compile-time guarantee preventing non-transactional operations from being performed within a transaction. The Haskell STM library also provides two operations not found in other STMs: <tt>retry</tt> and <tt>orElse</tt>, which together allow blocking operations to be defined in a [[Software_transactional_memory#Composable_operations|modular and composable fashion]]. == References == <references /> [[Category:Haskell_programming_language_family]] [[Category:Articles_with_example_Haskell_code]]</text> </page> <page> <id>16382</id> <title>Hatena Satena</title> <text>{{Infobox VG| title = Hatena Satena |image = [[Image:Hatena satena cover.jpg|200px]] |developer = [[Hudson Soft]] |publisher = [[Hudson Soft]] |released = 2001 |genre = [[computer puzzle game|Puzzle]] |modes = [[Single player]] |platforms = [[Game Boy Advance]] |media = |requirements = |input = }} {{nihongo|'''''Hatena Satena'''''|ハテナサテナ}} is a [[Game Boy Advance]] [[puzzle game]] by Japanese developer [[Hudson Soft]] with design elements courtesy of ''[http://www.superlovers.jp/ Super Lovers]''. A version has also been released for mobile phones in Japan. The gameplay can be described as a mix of ''[[Picross]]'' and ''[[Minesweeper (computer game)|Minesweeper]]''. The art design is similar to that of ''[[Super Milk Chan]]''. ==External links== *[http://www.hudson.co.jp/gamenavi/gamedb/softinfo/hatena/index.html Official page (Japanese)] [http://www.excite.co.jp/world/english/web/?wb_url=http://www.hudson.co.jp/gamenavi/gamedb/softinfo/hatena/index.html&wb_lp=JAEN&wb_dis=2 Translated by Excite.co.jp] *[http://www.hudson.co.jp/gamenavi/gamedb/softinfo/hatena/hatena-java/jcolorball/index.html Java sample version] *[http://bankbank.org/games/HatenaFAQ.txt FAQ / translation] *[http://youtube.com/watch?v=_qstF304GII YouTube gameplay video] *[http://gameboy.ign.com/objects/015/015379.html preview and screens from IGN] *[http://www.vgmuseum.com/images/gba/01/101.html screens at VG Museum] [[Category:Game Boy Advance games]] [[Category:Game Boy Advance-only games]] [[Category:Puzzle video games]] [[Category:2001 video games]] [[Category:Hudson Soft games]] [[Category:Mobile phone games]] [[Category:NP-complete problems]]</text> </page> <page> <id>16419</id> <title>Header-only</title> <text>In the context of the [[C (programming language)|C]] or [[C++]] programming languages, a [[library (computing)|library]] is called '''header-only''' if the full definitions of all [[macro (computer science)|macro]]s, [[function (computer science)|function]]s and [[class (computer science)|class]]es comprising the library are visible to the [[compiler]] in a [[header file]] form.<ref name="Wilson-HeaderOnly">{{cite book | last = Wilson | first = Matthew | authorlink = Matthew Wilson (author) | year = 2004 | title = Imperfect C++ | publisher = Addison-Wesley | id = ISBN 0-321-22877-4 }}</ref> Header-only libraries do not need to be separately [[compiler|compiled]], packaged and installed in order to be used. All that is required is to point the compiler at the location of the headers (the -I switch in [[GNU Compiler Collection| gcc/g++]]), and then <tt>[[C preprocessor|#include]]</tt> the header files into the application source. The disadvantages include: * brittleness – most changes to the library will require recompilation of all [[compilation unit]]s using that library * longer compilation times – the compilation unit must see the implementation of all components in the included files, rather than just their interfaces * [[code bloat|code-bloat]] (this may be disputed) – the necessary use of [[inline function|inline]] statements in non-class functions can lead to code bloat by over-inlining. Nonetheless, the header-only form is popular because it avoids the (often much more serious) problem of packaging. == List of (mostly) header-only libraries == {{incomplete-list}} * Some of the [[Boost C++ Libraries]] * [[STLSoft C++ Libraries]] * [[VOLE C++ Library|VOLE]] * [http://flecxx.org/ flecxx] * [http://www.sgi.com/tech/stl/ STL] ==References== {{reflist}} == External links == [[Category:C++]] [[Category:C programming language]]</text> </page> <page> <id>16422</id> <title>Header Error Control</title> <text>{{Context|date=October 2008}} This is a bit error detection and correction mechanism used in data transmitter and receiver. The '''Header Error Control''' (HEC) is the last field in the [[Asynchronous Transfer Mode]] cell consisting of an 8-bit [[Cyclic redundancy check|CRC]] of the cell's header only. It consists of the remainder of the division of the 32 bits of the header by the [[polynomial]] <math>x^8+x^2+x+1</math>. The pattern 01010101 is XORed with the 8-bit remainder before being inserted in the last octet of the header.<ref>{{cite web |url=http://www.ipmplsforum.org/ftp/pub/approved-specs/af-uni-0010.001.rtf |title=ATM User-Network Interface Specification V3.0 |accessdate=2007-09-17}}</ref> This added 01010101 value is called a coset. This scheme is able to correct single-bit errors and detect many multiple-bit errors. For a tutorial and an example of computing the CRC see the [[Mathematics of CRCs]] page. ==References== {{reflist}} [[Category:Network protocols]] [[it:Header Error Correction]]</text> </page> <page> <id>16429</id> <title>HealthBoards</title> <text>{{Orphan|date=February 2009}} '''HealthBoards''' is a long-running [[support group]] website consisting of over 150 [[Internet forum|Internet message boards]] for peer to peer health support (also referred to as a [[virtual community]] or [[online health community]]). The site is unique in that it is purely a health community site, unlike other established health communities on the Web which have generally been part of large web portals ([[WebMD]], [[Yahoo]], [[iVillage]], etc.). As of June 2006 the site received over 2.3 million messages posted by over 250,000 registered members. In 2004 HealthBoards established a partnership with [[WebMD]] to provide additional health 