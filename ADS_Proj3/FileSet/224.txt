Analyzer Toolkit'', Syngress Publishing, ISBN 9781597490733, 2006. *Orebaugh, A., Biles, S., Babbin, J., ''Snort Cookbook'', OReilly Publishing, ISBN 0596007914, 2005. *Orebaugh, A., Rash, M., Babbin, J. and Pinkard, B., ''Intrusion Prevention and Active Response: Deploying Network and Host IPS'', Syngress Publishing, ISBN 9781932266474, 2005. *Orebaugh, A., ''Ethereal Packet Sniffing'', Syngress Publishing, Boston, MA., ISBN 1932266828, 2004. ==External links== *[http://www.securityknox.com/ Securityknox] &mdash; home page {{Persondata <!-- Metadata: see [[Wikipedia:Persondata]]. --> | NAME = Orebaugh, Angela | ALTERNATIVE NAMES = | SHORT DESCRIPTION = | DATE OF BIRTH = | PLACE OF BIRTH = | DATE OF DEATH = | PLACE OF DEATH = }} {{DEFAULTSORT:Orebaugh, Angela}} [[Category:People associated with computer security]] [[Category:American computer scientists]] [[Category:Living people]] [[Category:Year of birth missing (living people)]] [[Category:American technology writers]] [[Category:People from Virginia]]</text> </page> <page> <id>1926</id> <title>Anisotropic filtering</title> <text>[[Image:Anisotropic compare.png|right|thumb|400px|An illustration of texture filtering methods showing trilinear MIP map texture on the left and enhanced with anisotropic texture filtering on the right.]] In [[3D computer graphics]], '''anisotropic filtering''' (abbreviated '''AF''') is a method of enhancing the image quality of [[Texture filtering|textures]] on surfaces that are at [[Dutch angle|oblique viewing angles]] with respect to the camera where the projection of the texture (not the polygon or other primitive on which it is rendered) appears to be non-orthogonal (thus the origin of the word: "an" for ''not'', "iso" for ''same'', and "tropic" from [[tropism]], relating to direction; anisotropic filtering does not filter the same in every direction). Like [[bilinear filtering|bilinear]] and [[trilinear filtering]] it eliminates [[aliasing]] effects, but improves on these other techniques by reducing blur and preserving detail at extreme viewing angles. [[Anisotropic]] filtering is relatively intensive (primarily [[memory bandwidth]] and to some degree [[computation]]ally, though the standard [[space-time tradeoff]] rules apply) and only became a standard feature of consumer-level [[graphics card]]s in the late 1990s. Anisotropic filtering is now common in modern graphics hardware and is enabled either by users through driver settings or by graphics applications and video games through programming interfaces. ==An improvement on isotropic MIP mapping== Hereafter, it is assumed the reader is familiar with [[mipmap|MIP mapping]]. If we were to explore a more approximate anisotropic algorithm, RIP mapping (rectim in parvo) as an extension from MIP mapping, we can understand how anisotropic filtering gains so much texture mapping quality. If we need to texture a horizontal plane which is at an oblique angle to the camera, traditional MIP map minification would give us insufficient horizontal resolution due to the reduction of image frequency in the vertical axis. This is because in MIP mapping each MIP level is isotropic, so a 256 × 256 texture is downsized to a 128 × 128 image, then a 64 × 64 image and so on, so resolution halves on each axis simultaneously, so a MIP map texture probe to an image will always sample an image that is of equal frequency in each axis. Thus, when sampling to avoid aliasing on a high-frequency axis, the other texture axes will be similarly downsampled and therefore potentially blurred. With RIP map anisotropic filtering, in addition to downsampling to 128 × 128, images are also sampled to 256 × 128 and 32 × 128 etc. These anisotropically downsampled images can be probed when the texture-mapped image frequency is different for each texture axis and therefore one axis need not blur due to the screen frequency of another axis and aliasing is still avoided. Unlike more general anisotropic filtering, the RIP mapping described for illustration has a limitation in that it only supports anisotropic probes that are axis-aligned in texture space, so diagonal anisotropy still presents a problem even though real-use cases of anisotropic texture commonly have such screenspace mappings. In layman's terms, anisotropic filtering retains the "sharpness" of a texture normally lost by MIP map texture's attempts to avoid aliasing. Anisotropic filtering can therefore be said to maintain crisp texture detail at all viewing orientations while providing fast anti-aliased texture filtering. == Degree of anisotropy supported == Different degrees or ratios of anisotropic filtering can be applied during rendering and current hardware rendering implementations set an upper bound on this ratio. This degree refers to the maximum ratio of anisotropy supported by the filtering process. So, for example 4:1 (pronounced 4 to 1) anisotropic filtering will continue to sharpen more oblique textures beyond the range sharpened by 2:1. In practice what this means is that in highly oblique texturing situations a 4:1 filter will be twice as sharp as a 2:1 filter (it will display frequencies double that of the 2:1 filter). However, most of the scene will not require the 4:1 filter; only the more oblique and usually more distant pixels will require the sharper filtering. This means that as the degree of anisotropic filtering continues to double there are diminishing returns in terms of visible quality with fewer and fewer rendered pixels affected, and the results become less obvious to the viewer. When one compares the rendered results of an 8:1 anisotropically filtered scene to a 16:1 filtered scene, only a relatively few highly oblique pixels, mostly on more distant geometry, will display visibly sharper textures in the scene with the higher degree of anisotropic filtering, and the frequency information on these few 16:1 filtered pixels will only be double that of the 8:1 filter. The performance penalty also diminishes because fewer pixels require the data fetches of greater anisotropy. In the end it is the additional hardware complexity vs. these diminishing returns, which causes an upper bound to be set on the anisotropic quality in a hardware design. Applications and users are then free to adjust this trade-off through driver and software settings up to this threshold. ==Implementation== True anisotropic filtering probes the texture anisotropically on the fly on a per-pixel basis for any orientation of anisotropy. In graphics hardware, typically when the texture is sampled anisotropically, several probes ([[texel (graphics)|texel]] samples) of the texture around the center point are taken, but on a sample pattern mapped according to the projected shape of the texture at 