Group]] *[[Loomis]] *[[MasterCard]] *[[NetOnNet]] <ref>{{Citation |title=NetOnNet shifts to IP in contact center| url=http://www.carinrecording.com/en/about/inthepress/netonnet-deploys-ip-contact-center |accessdate=2010-08-27}}</ref> *[[OTP Bank]] *[[Raytheon]] *[[Raiffeisen Bank]] *[[Rio Tinto Alcan]] *[[Securitas]] *[[Swedish National Debt Office]] *[[no:Rederiaksjeselskapet Torvald Klaveness|The Torvald Klaveness Group]] *[[Vodafone]] ==References== <references/> ==External links== * [http://www.verba.com/ Verba Technologies] [[Category:Call recording software]] [[Category:Sound recording technology]] [[Category:Audio storage]] [[Category:Unified communications]] [[Category:VoIP software]] [[Category:Telecommunications equipment vendors]] [[Category:Software]] [[Category:Software companies]] [[Category:Business software]] [[Category:Business software companies]] [[Category:C++ software]] [[Category:Windows software]] [[Category:Proprietary software]] [[Category:Companies established in 2010]] [[Category:2010 software]] [[Category:Technology companies of the United States]] [[Category:Software companies of the United States]]</text> </page> <page> <id>39323</id> <title>Verilog</title> <text>In the [[Semiconductor industry|semiconductor]] and [[Electronic design automation|electronic design]] industry, '''Verilog''' is a [[hardware description language]] (HDL) used to model [[Electronics#Electronic systems|electronic systems]]. ''Verilog HDL'', not to be confused with [[VHDL]], is most commonly used in the design, verification, and implementation of [[Digital circuit|digital]] logic chips at the [[register transfer level]] (RTL) of [[Abstraction (computer science)|abstraction]]. It is also used in the verification of [[Analog circuit|analog]] and [[Mixed-signal integrated circuit|mixed-signal circuits]]. == Overview == Hardware description languages such as Verilog, differ from software [[programming language]]s because they include ways of describing the propagation of time and signal dependencies (sensitivity). There are two assignment operators, a blocking assignment (=), and a non-blocking (<=) assignment. The non-blocking assignment allows designers to describe a state-machine update without needing to declare and use temporary storage variables (in any general programming language we need to define some temporary storage spaces for the operands to be operated on subsequently; those are temporary storage variables). Since these concepts are part of Verilog's language semantics, designers could quickly write descriptions of large circuits, in a relatively compact and concise form. At the time of Verilog's introduction (1984), Verilog represented a tremendous productivity improvement for circuit designers who were already using graphical [[schematic capture]] software and specially-written software programs to document and [[Electronic circuit simulation|simulate electronic circuits]]. The designers of Verilog wanted a language with syntax similar to the [[C (programming language)|C programming language]], which was already widely used in engineering software development. Verilog is [[case-sensitive]], has a basic [[preprocessor]] (though less sophisticated than that of ANSI C/C++), and equivalent [[control flow]] [[Keyword (computer programming)|keywords]] (if/else, for, while, case, etc.), and compatible [[operator precedence]]. Syntactic differences include variable declaration (Verilog requires bit-widths on net/reg types {{Clarify|date=February 2010}}), demarcation of procedural blocks (begin/end instead of curly braces {}), and many other minor differences. A Verilog design consists of a hierarchy of modules. Modules encapsulate ''design hierarchy'', and communicate with other modules through a set of declared input, output, and bidirectional ports. Internally, a module can contain any combination of the following: net/variable declarations (wire, reg, integer, etc.), concurrent and sequential statement blocks, and instances of other modules (sub-hierarchies). Sequential statements are placed inside a begin/end block and executed in sequential order within the block. But the blocks themselves are executed concurrently, qualifying Verilog as a [[dataflow language]]. Verilog's concept of 'wire' consists of both signal values (4-state: "1, 0, floating, undefined"), and strengths (strong, weak, etc.) This system allows abstract modeling of shared signal-lines, where multiple sources drive a common net. When a wire has multiple drivers, the wire's (readable) value is resolved by a function of the source drivers and their strengths. A subset of statements in the Verilog language are [[logic synthesis|synthesizable]]. Verilog modules that conform to a synthesizable coding-style, known as RTL (register transfer level), can be physically realized by synthesis software. Synthesis-software algorithmically transforms the (abstract) Verilog source into a [[netlist]], a logically-equivalent description consisting only of elementary logic primitives (AND, OR, NOT, flipflops, etc.) that are available in a specific [[FPGA]] or [[VLSI]] technology. Further manipulations to the netlist ultimately lead to a circuit fabrication blueprint (such as a [[Mask set|photo mask set]] for an [[Application-specific integrated circuit|ASIC]], or a [[bitstream]] file for an [[FPGA]]). == History == ===Beginning=== Verilog was invented by [[Phil Moorby]] and [[Prabhu Goel]] during the winter of 1983/1984 at Automated Integrated Design Systems (renamed to [[Gateway Design Automation]] in 1985) as a hardware modeling language. Gateway Design Automation was purchased by [[Cadence Design Systems]] in 1990. Cadence now has full proprietary rights to Gateway's Verilog and the Verilog-XL simulator [[logic simulator]]s. ===Verilog-95=== With the increasing success of [[VHDL]] at the time, Cadence decided to make the language available for open [[standardization]]. Cadence transferred Verilog into the public domain under the [http://www.ovi.org Open Verilog International] (OVI) (now known as [[Accellera]]) organization. Verilog was later submitted to [[IEEE]] and became IEEE Standard 1364-1995, commonly referred to as Verilog-95. In the same time frame Cadence initiated the creation of [[Verilog-A]] to put standards support behind its analog simulator [[Spectre Circuit Simulator|Spectre]]. Verilog-A was never intended to be a standalone language and is a subset of [[Verilog-AMS]] which encompassed Verilog-95. ===Verilog 2001=== Extensions to Verilog-95 were submitted back to IEEE to cover the deficiencies that users had found in the original Verilog standard. These extensions became [[IEEE]] Standard 1364-2001 known as Verilog-2001. Verilog-2001 is a significant upgrade from Verilog-95. First, it adds explicit support for (2's complement) signed nets and variables. Previously, code authors had to perform signed-operations using awkward bit-level manipulations (for example, the carry-out bit of a simple 8-bit addition required an explicit description of the boolean-algebra to determine its correct value). The same function under Verilog-2001 can be more succinctly described by one of the built-in operators: +, -, /, *, >>>. A generate/endgenerate construct (similar to VHDL's generate/endgenerate) allows Verilog-2001 to control instance and statement instantiation through normal decision-operators (case/if/else). Using generate/endgenerate, Verilog-2001 can instantiate an array of instances, with control over the connectivity of the individual instances. File I/O has been improved by several new system-tasks. And finally, a few syntax additions were introduced to improve code-readability (e.g. always @*, named-parameter override, C-style function/task/module header declaration). Verilog-2001 is the dominant flavor of Verilog supported by the majority of commercial [[Electronic design automation|EDA]] software packages. ===Verilog 2005=== Not to be confused with [[SystemVerilog]], ''Verilog 2005'' ([[IEEE]] Standard 1364-2005) consists of minor corrections, spec clarifications, and a few 