in November 2005 as key part of the [[Service component architecture | Service Component Architecture]]. ==Relation to other technologies== Originally, the technology was known as '''Web Data Objects''', or WDO, and was shipped in [[IBM WebSphere Application Server]] 5.1 and [[IBM WebSphere Studio Application Developer]] 5.1.2.<ref>[http://www.ibm.com/developerworks/java/library/j-sdo/ Introduction to Service Data Objects]</ref> Other similar technologies are [[Java Data Objects|JDO]], [[Eclipse Modeling Framework|EMF]], [[JAXB]] and [[ADO.NET]]. ==Design== Service Data Objects denote the use of language-agnostic data structures that facilitate communication between structural tiers and various service-providing entities. They require the use of a [[tree structure]] with a [[root node]] and provide traversal mechanisms (breadth/depth-first) that allow client programs to navigate the elements. Objects can be static (fixed number of fields) or dynamic with a map-like structure allowing for unlimited fields. The specification defines [[meta-data]] for all fields and each object graph can also be provided with change summaries that can allow receiving programs to act more efficiently on them. ==Developers== The specification is now being developed by [[BEA Systems|BEA]], [[IBM]], [[Rogue Wave (company)|Rogue Wave]], [[Oracle Corporation|Oracle]], [[SAP AG|SAP]], [[Siebel]], [[Sybase]], [[Xcalia]], [[Software AG]], [[Sun Microsystems]] within the [[OASIS]] Member Section Open CSA<ref>[http://www.oasis-opencsa.org/ Activities and announcements | OASIS Open CSA<!-- Bot generated title -->]</ref> since April 2007. Collaborative work and materials remain on the collaboration platform of Open SOA,<ref>[http://www.osoa.org Home - Open SOA Collaboration<!-- Bot generated title -->]</ref> an informal group of actors of the industry. ==Implementations== The following SDO products are available: * Rogue Wave Software ([http://www.roguewave.com/products/hydra/hydrasdo.php HydraSDO]) * [[CodeFutures Software]] (FireStorm/SDO) * Xcalia (for Java and .Net) * BEA ([[AquaLogic]] Data Services Platform) - Now [[Oracle Corporation|Oracle]] Data Service Integrator * IBM (Virtual XML Garden) * IBM ([[WebSphere Process Server]]) There are open source implementations of SDO from: * The Eclipse Persistence Services Project ([[EclipseLink]]) * The [[Apache Tuscany]] project for Java and C++ * The [[SCA and SDO for PHP]] project ==References== {{reflist}} ==External links== Specification versions and history can be found on * Latest materials at [http://www.oasis-opencsa.org/sdo OASIS Open CSA] * [http://www.osoa.org/display/Main/Service+Data+Objects+Home Service Data Objects] * [http://www.osoa.org/display/Main/Service+Data+Objects+Specifications SDO Specifications at OpenSOA] * [http://www.codefutures.com/service-data-object/ Introduction to Service Data Objects] * [http://devzone.zend.com/article/1085-Introducing-Service-Data-Objects-for-PHP Introducing Service Data Objects for PHP] * [http://www.ibm.com/developerworks/web/library/ws-soa-scasdo/index.html Using PHP's SDO and SCA extensions] [[Category:Computer networking]] [[Category:Service-oriented (business computing)]] [[Category:Persistence]] [[de:Service Data Objects]] [[fr:Service Data Objects]] [[ja:Service Data Objects]] [[zh:服务数据对象]]</text> </page> <page> <id>34028</id> <title>Service Management Facility</title> <text>{{Otheruses2|SMF}} '''Service Management Facility''' ('''SMF''') is a feature of the [[Solaris (operating system)|Solaris operating system]] that creates a supported, unified model for services and [[operating system service management|service management]] on each Solaris system and replaces init.d scripts. SMF introduces: * ''Dependency order''. Services sometimes depend on one another for proper operation, and a robust system should know each service's dependencies. If an underlying service fails, it needs to be corrected before other services that depend upon it are affected. * ''Configurable boot verbosity'' * ''Delegation of tasks to non-root users''. A service can be configured to run within a limited set of privileges, rather than as the all-powerful root user. If a service has been compromised, the amount of damage that can be inflicted by the intruder will be minimized if the service's power is constrained to that of a more limited user. * ''Parallel starting of services''. This speeds up the boot process by starting multiple services simultaneously, allowing idle CPU time resulting from a service that is temporarily blocked to be relinquished for use by other services that can start independently of the blocked service. * ''Automatic service restart after failure''. Works in conjunction with the [[Solaris Fault Manager]], allowing software recovery in the event of hardware faults (cpu, memory), admin error such as accidental kills, and software core dumps. All these capabilities are made possible by treating Services as "first class objects". That is, they are more than just user-executed software to the OS. They can be defined to have special states that allow finer control and permit monitoring and probing for diagnosing software failures, rather than having the administrator or dedicated "restarter" modules kill and restart the service as before. == What are services? == Services are software objects that provide a set of capabilities to other software. For example, a webserver provides HTTP service to web browsers. Other services include [[Network File System (protocol)|NFS]] for sharing files on a network, [[Dynamic Host Configuration Protocol|DHCP]] for dynamic [[IP address]] assignment, and [[Secure Shell]] for remote logins. Even higher level functions can be services, such as specific databases for e-commerce, finance, manufacturing control, etc. Typically, services are automatically started at boot up, long-lived, have common states (eg. running, not running), relationship & dependencies (Sendmail service depends on Naming service, which depends on Networking services), and are critical to the dedicated function of the server. == What it replaces == In versions of Solaris prior to Solaris 10, and in UNIX in general, services are configured in text files, with startup files in the /etc/rc.d/ directory trees, and configuration data in files such as /etc/inittab and /etc/inetd.conf. A typical system could have dozens of configuration files, and configuration could involve various methods, including editing [[shell script]]s. With SMF, there is one consistent interface to ease administration. There has been no traditional definition or constraint of what a service is, making administration difficult. With SMF, each service can have a set of defined states, allowing admins to control services in a consistent way based on their state. == SMF concepts == Instances: a ''service'' is a collection of configurations. An ''instance'' is a running execution of a defined service executable. One can have many instances of a defined service, such as multiple webservers listening on different ports referencing different WWW root directories. ==See also== *[[init]] *[[Runlevel]] *[[systemd]] *[[SystemStarter]] and [[launchd]] &ndash; [[Mac OS X]]'s process spawner *[[Upstart]] *[[Initng]] *[[daemontools]] *[[Process Supervision]] *[[runit]] == External links == * [http://www.sun.com/bigadmin/content/selfheal/smf-quickstart.html Solaris Service Management Facility - Quickstart Guide] * [http://www.sun.com/blueprints/0206/819-5150.pdf SMF Sun BluePrint] * [http://docs.sun.com/app/docs/doc/817-1985/6mhm8o5rh?a=view Service Management Facility (SMF) overview] * [http://opensolaris.org/os/community/smf OpenSolaris Service Management Facility community] * [http://www.oreillynet.com/lpt/a/6542 Using Solaris SMF by Chris Josephes 