«'''import Word'''» <br/> '''Word32''' | «'''import Int'''» <br/> '''Int64''' | «'''import Word'''» <br/> '''Word64''' | '''Int''' | «'''import Word'''» <br/> '''Word''' | '''Integer''' |- | [[Eiffel (programming language)|Eiffel]] | '''INTEGER_8''' | '''NATURAL_8''' | '''INTEGER_16''' | '''NATURAL_16''' | '''INTEGER_32''' | '''NATURAL_32''' | '''INTEGER_64''' | '''NATURAL_64''' | '''INTEGER''' | '''NATURAL''' | {{n/a}} |} {{note|a68|a}} The <u>standard</u> constants ''int shorts'' and ''int lengths'' can be used to determine how many '''short'''s and '''long'''s can be usefully prefixed to '''short int''' and '''long int'''. The actually size of the '''short int''', '''int''' and '''long int''' is available as constants ''short max int'', ''max int'' and ''long max int'' etc. <br/>{{note|Java char|b}} Commonly used for characters. <br/>{{note|CInt|c}} The ALGOL 68, C and C++ languages do not specify the exact width of the integer types "short", "int", "long", and (C99, C++0x) "long long", so they are implementation-dependent. In C and C++ "short", "long", and "long long" types are required to be at least 16, 32, and 64 bits wide, respectively, but can be more. The "int" type is required to be at least as wide as "short" and at most as wide as "long", and is typically the width of the word size on the processor of the machine (i.e. on a 32-bit machine it is often 32 bits wide; on 64-bit machines it is often 64 bits wide). C99 also defines the "[u]intN_t" exact-width types in the [[stdint.h]] header. See [[C syntax#Integral types]] for more information. <br/>{{note|scalars|d}} Perl 5 does not have distinct types. Integers, floating point numbers, strings, etc. are all considered "scalars". <br/>{{note|PHP bignum|e}} PHP has two arbitrary-precision libraries. The BCMath library just uses strings as datatype. The GMP library uses an internal "resource" type. <br/>{{note|Kinds|f}} The value of "n" is provided by the SELECTED_INT_KIND<ref name="fortranwiki.org">http://fortranwiki.org/fortran/show/selected_int_kind</ref> intrinsic function. <br/>{{note|a68g|g}} [[ALGOL 68G]]'s run time option ''--precision "number"'' can set precision for '''long long int''''s to the required "number" significant digits. The <u>standard</u> constants ''long long int width'' and ''long long max int'' can be used to determine actual precision. === [[Floating point]] === {| class="wikitable" ! ! [[Single precision]] ! [[Double precision]] ! Processor dependent |- | ALGOL 68 | '''real'''{{ref|a68|[a]}} | '''long real'''{{ref|a68|[a]}} | '''short real''' etc. & '''long long real''' etc.{{ref|a68g|[g]}} |- | C | rowspan=3| '''float'''{{ref|lax floats|[b]}} | rowspan=5| '''double''' | rowspan=3 {{n/a}}{{ref|lax floats|[b]}} |- | Objective-C |- | C++ (STL) |- | C# | rowspan=2| '''float''' | rowspan=3 {{n/a}} |- | Java |- | Go | '''float32''' | '''float64''' |- | D | '''float''' | '''double''' | '''real''' |- | Common Lisp | | | |- | Scheme | | | |- | Pascal (Free Pascal) | '''single''' | '''double''' | '''real''' |- | Visual Basic | rowspan=2| '''Single''' | rowspan=2| '''Double''' | rowspan=2 {{n/a}} |- | Visual Basic .NET |- | Python | rowspan=2 {{n/a}} | '''float''' | |- | JavaScript | '''Number'''<ref name="Javascript numbers">[http://www.mozilla.org/js/language/E262-3.pdf 8.5 The Number Type]</ref> | {{n/a}} |- | S-Lang | <!-- '''x =''' value'''f;''' --> | <!-- '''x =''' value''';''' --> | |- | Fortran | colspan=2|'''REAL(KIND = n)'''{{ref|real inds|[c]}} | |- | PHP | | '''float''' | |- | Perl | | | |- | Perl 6 | '''num32''' | '''num64''' | '''Num''' |- | Ruby | {{n/a}} | '''Float''' | rowspan=3 {{n/a}} |- | Windows PowerShell | colspan=2| |- | OCaml | {{n/a}} | rowspan=2| '''float''' |- | F# | '''float32''' |- | Standard ML | {{n/a}} | '''real''' |- | Haskell (GHC) | '''Float''' | '''Double''' | |- | Eiffel | '''REAL_32''' | '''REAL_64''' | |} {{note|a68_real|a}} The <u>standard</u> constants ''real shorts'' and ''real lengths'' can be used to determine how many '''short'''s and '''long'''s can be usefully prefixed to '''short real''' and '''long real'''. The actually size of the '''short real''', '''real''' and '''long real''' is available as constants ''short max real'', ''max real'' and ''long max real'' etc. With the constants ''short small real'', ''small real'' and ''long small real'' available for each type's [[machine epsilon]]. <br/>{{note|lax floats|b}} declarations of single precision often are not honored <br/>{{note|real kinds|c}} The value of "n" is provided by the SELECTED_REAL_KIND<ref name="ReferenceA">http://fortranwiki.org/fortran/show/selected_real_kind</ref> intrinsic function. <br/>{{note|a68g-real|g}} [[ALGOL 68G]]'s run time option ''--precision "number"'' can set precision for '''long long real'''s to the required "number" significant digits. The <u>standard</u> constants ''long long real width'' and '''long long max real'' can be used to determine actual precision. === [[Complex number]]s === {|class="wikitable" ! ! Integer ! Single precision ! Double precision ! Half and Quadruple precision etc. |- | ALGOL 68 | {{n/a}} | '''compl''' | '''long compl''' etc. | '''short compl''' etc. & '''long long compl''' etc. |- | C (C99) <ref>http://www.gnu.org/software/libc/manual/html_node/Complex-Numbers.html#Complex-Numbers</ref> | {{n/a}} | '''float complex''' | '''double complex''' | rowspan=12 {{n/a}} |- | C++ (STL) | {{n/a}} | «'''std::'''»'''complex<float>''' | «'''std::'''»'''complex<double>''' |- | C# | {{n/a}} | {{n/a}} | '''System.Numerics.Complex''' <br />(.Net 4.0) |- | Java | {{n/a}} | {{n/a}} | {{n/a}} |- | Go | {{n/a}} | '''complex64''' | '''complex128''' |- | D | {{n/a}} | '''cfloat''' | '''cdouble''' |- | Objective-C | {{n/a}} | {{n/a}} | {{n/a}} |- | Common Lisp | | | |- | Scheme | | | |- | Pascal | {{n/a}} | {{n/a}} | |- | Visual Basic | {{n/a}} | {{n/a}} | |- | Visual Basic .NET | {{n/a}} | {{n/a}} | '''System.Numerics.Complex''' <br />(.Net 4.0) |- | Perl | | | '''Math::Complex''' |- | Perl 6 | | '''complex64''' | '''complex128''' | '''Complex''' |- | Python | | | '''complex''' | rowspan=12 {{n/a}} |- | JavaScript | {{n/a}} | {{n/a}} | |- | S-Lang | {{n/a}} | {{n/a}} | |- | Fortran | | colspan=2|'''COMPLEX(KIND = n)'''{{ref|complex kinds|[a]}} |- | Ruby | '''Complex''' | {{n/a}} | '''Complex''' |- | Windows PowerShell | {{n/a}} | {{n/a}} | |- | OCaml | {{n/a}} | {{n/a}} | '''Complex.t''' |- | F# | | | '''System.Numerics.Complex''' <br />(.Net 4.0) |- | Standard ML | {{n/a}} | {{n/a}} | {{n/a}} |- | Haskell (GHC) | {{n/a}} | '''Complex.Complex Float''' | '''Complex.Complex Double''' |- | Eiffel | {{n/a}} | {{n/a}} | 