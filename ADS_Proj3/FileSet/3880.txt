forensics communities for purposes of running large numbers of files through any of several different cryptographic digests. It is similar to [[sha1sum]] from [[GNU Core Utilities]] and [[md5sum]]. {{Crypto navbox|hash}} {{DEFAULTSORT:Sha-2}} [[Category:Cryptographic hash functions]] [[Category:Articles with example pseudocode]] [[Category:Checksum algorithms]] [[hr:SHA-2]]</text> </page> <page> <id>32771</id> <title>SHINE (software)</title> <text>{{Advert|date=July 2008}} {{Unreferenced|date=January 2008}} '''Spacecraft Health Inference Engine''' (SHINE) is a software-development tool for knowledge-based systems and has been created as a product for research and development by the Artificial Intelligence Group, Information Systems Technology Section at NASA/JPL. The system is now in regular use in basic and applied AI research at [[JPL]]. SHINE is a system developed at [[NASA]] to meet many of their demanding and rigorous AI goals for current and future needs. It is a system that was designed to be efficient enough to operate in a real-time environment and to be utilized by non-LISP applications written in conventional programming languages such as C and C++. These non-LISP applications can be running in a distributed computing environment on remote computers or on a computer that supports multiple programming languages. SHINE provides a variety of facilities for the development of software modules for the primary functions in knowledge-based reasoning engines. The system may be used to develop artificial intelligence applications as well as specialized tools for research efforts. Knowledge-based systems for automated task planning, monitoring, diagnosis and other applications require a variety of software modules based on artificial intelligence concepts and advanced programming techniques. The design and implementation of the modules require considerable programming talent and time and background in theoretical artificial intelligence. Sophisticated software development tools that can speed the research and development of new artificial intelligence applications are highly desirable. The SHINE system was developed for that purpose. Included in the system are facilities for developing reasoning processes, memory-data structures and knowledge bases, blackboard systems and spontaneous computation daemons. SHINE is not a shell which means that the user does not have to solve his problems in the shell's way; you can solve them your own way. One is not limited by a shell's out dated problem solving techniques or preconceived notions on how things should be done. Computational efficiency and high performance are especially critical in artificial intelligence software. That consideration has been an important objective for the SHINE system and has led to its design as a toolbox of AI facilities that may be used independently or collectively in the development of knowledge-based systems. SHINE comes with libraries that implement most common problem solving techniques and representations. This means that you can make use of classical AI solutions that have been extensively used and tested by other users. These libraries can also be extended by your own problem solving techniques and representations. SHINE facilities are invoked directly by a programmer in the [[Common Lisp]] language. For improved efficiency, an optimizing compiler is included that generates highly optimized Common LISP code. SHINE allows embedded software written in other programming languages such as C, C++, and also permits software developed with the system to be part of larger, non-Common LISP applications. SHINE is a set of high level and low level software tools designed to assist in building stand-alone knowledge-based system applications, shells and tools. Since SHINE is a [[Common Lisp]] based system, it can be run on any machine that supports Common LISP. Because SHINE is a compiler, not an interpreter, applications can run on a delivery machine that is much smaller than the development machine. SHINE provides the LISP programmer with the necessary tools to build a wide variety of reasoning and inference engines, such as expert systems, planners, diagnosticians, simulators, execution and real-time monitoring. SHINE allows and encourages embedded expert systems to be developed. This means that SHINE could be a supervisor of many other systems either written in SHINE or in conventional programming languages. SHINE is an optimizing compiler-based system. When an application is developed using SHINE, it is first translated into Common LISP code and then passed through an extensive optimizer. SHINE generates tailored code for each application. There are no intermediate levels of interpretation for execution unlike many commercial systems. SHINE programs are executed directly by the LISP interpreter and compiled directly by the LISP compiler. This means much greater speed and better portability to other machines. SHINE augments the [[Common Lisp]] programming language and environment so that programs written in SHINE have direct use of all of the features of the underlying LISP system and the LISP environment. SHINE provides a debugging environment built upon the LISP environment for the debugging of systems at compile-time and run-time. In addition, the SHINE compiler and its run-time environment perform extensive error checking. [[Category:Artificial intelligence applications]] [[Category:Common Lisp software]]</text> </page> <page> <id>32777</id> <title>SHSH blob</title> <text>An '''SHSH Blob''' (for '''S'''ignature '''H'''a'''SH''') is a 128-byte [[RSA]] signature used to verify the validity of [[firmware]] on newer ([[iPhone 3GS]] or [[iPod Touch|iPod Touch 2G]] onward) [[Apple Inc|Apple]] [[iOS (Apple)|iOS]] devices.<ref name="iphonewiki">{{cite web|url=http://www.theiphonewiki.com/wiki/index.php?title=SHSH|title=iPhone Wiki -- SHSH|publisher=theiphonewiki.com|accessdate=2010-07-25}}</ref><ref name="ipad">{{cite web|url=http://www.mayhemiclabs.com/node/14|title=Grab your Ipad's SHSH while you can|publisher=savant from www.mayhemiclabs.com|accessdate=2010-07-27}}</ref> SHSH Blobs are used in a [[challenge-response authentication]] of the firmware, where the challenge key comes in a combination of a [[cryptographic hash function|hash]] of the firmware and the [[Exclusive Chip ID|Exclusive Chip ID (ECID)]] of the device.<ref name="saurik"/> The response from [[Apple Inc|Apple]] is the '''SHSH''' itself, the [[digital signature]] required to validate the firmware.<ref name="iphonewiki"/>. === Downgrading and Jailbreaking === Because the challenge key is static, a [[cache|cached]] copy of the signature may be used in a [[replay attack]] to trick the signing software ([[iTunes]]) into validating an old firmware.<ref name="saurik">{{cite web|url=http://www.saurik.com/id/12|title=Caching Apple's Signature Server|accessdate=2010-07-25|publisher=Saurik.com}}</ref> Using this technique is necessary to restore to previous versions of the [[iOS (Apple)|iOS]] on the [[iPhone 3GS]], [[iPhone 4]], [[iPod Touch|iPod Touch 2G]], [[iPod Touch|iPod Touch 3G]], [[iPod Touch|iPod Touch 4G]], and [[iPad]]. [[downgrade|Downgrading]] the iOS in such a manner may be used for [[iOS jailbreaking]], since older software may have known [[exploit (computer security)|exploits]].<ref>{{cite web|url=http://www.machackpc.com/iphone/3gs/downgrade-or-restore-your-iphone-3gs-firmware-using-shsh-blob-locally-windows-users/|title=Downgrade or Restore your iPhone 3GS Firmware using SHSH blob locally 