the project can ask for resources in the next 4 months period. Each institution controls 20% of the resources of its node. [[CeSViMa]] controls about 40% of the computer resources of [[Magerit]] due to the nodes owned by the [[Technical University of Madrid]]. == Sources == * [http://www.res.es/ RES] in [[Barcelona Supercomputing Center]] website, current coordinator of Spanish Supercomputing Network. [[Category:Supercomputing]] [[Category:Science and technology in Spain]] [[Category:Supercomputers]] [[Category:Power Architecture]] [[Category:Spanish Supercomputing Network]] [[es:Red Española de Supercomputación]]</text> </page> <page> <id>35230</id> <title>Sparse language</title> <text>In [[computational complexity theory]], a '''sparse language''' is a [[formal language]] (a set of [[String (computer science)|strings]]) such that the number of strings of length ''n'' in the language is bounded by a [[polynomial]] function of ''n''. They are used primarily in the study of the relationship of the complexity class '''[[NP (complexity)|NP]]''' with other classes. The [[complexity class]] of all sparse languages is called '''SPARSE'''. Sparse languages are called ''sparse'' because there are a total of 2<sup>''n''</sup> strings of length ''n'', and if a language only contains polynomially many of these, then the proportion of strings of length ''n'' that it contains rapidly goes to zero as ''n'' grows. All [[unary language]]s are sparse. An example of a nontrivial sparse language is the set of binary strings containing exactly ''k'' 1 bits for some fixed ''k''; for each ''n'', there are only [[Binomial coefficient|<math>\binom{n}{k}</math>]] strings in the language, which is bounded by ''n''<sup>''k''</sup>. == Relationships to other complexity classes == '''SPARSE''' contains '''TALLY''', the class of [[unary language]]s, since these have at most one string of any one length. Although not all languages in '''[[P/poly]]''' are sparse, there is a [[polynomial-time Turing reduction]] from any language in '''P/poly''' to a sparse language.<ref>Jin-Yi Cai. Lecture 11: P=poly, Sparse Sets, and Mahaney's Theorem. CS 810: Introduction to Complexity Theory. The University of Wisconsin–Madison. September 18, 2003. http://pages.cs.wisc.edu/~jyc/810notes/lecture11.pdf</ref> Fortune showed in 1979 that if any sparse language is [[co-NP-complete]], then [[P = NP problem|P = NP]];<ref>S. Fortune. A note on sparse complete sets. ''SIAM Journal on Computing'', volume 8, issue 3, pp.431&ndash;433. 1979.</ref> Mahaney used this to show in 1982 that if any sparse language is [[NP-complete]], then P = NP (this is [[Mahaney's theorem]]).<ref>S. R. Mahaney. Sparse complete sets for NP: Solution of a conjecture by Berman and Hartmanis. ''Journal of Computer and System Sciences'' 25:130-143. 1982.</ref> A simpler proof of this based on left-sets was given by Ogihara and Osamu in 1991.<ref>M. Ogiwara and O. Watanabe. On polynomial time bounded truth-table reducibility of NP sets to sparse sets. ''SIAM Journal on Computing'' volume 20, pp.471&ndash;483. 1991.</ref> '''[[E (complexity)|E]]''' &ne; '''[[NE (complexity)|NE]]''' if and only if there exist sparse languages in '''NP''' that are not in '''P'''.<ref>Juris Hartmanis, Neil Immerman, Vivian Sewelson. Sparse Sets in NP-P: EXPTIME versus NEXPTIME. ''Information and Control'', volume 65, issue 2/3, pp.158&ndash;181. 1985. [http://portal.acm.org/citation.cfm?id=808769 At ACM Digital Library]</ref> In 1999, Jin-Yi Cai and D. Sivakumar, building on work by Ogihara, showed that if there exists a sparse '''[[P-complete]]''' problem, then '''[[L (complexity)|L]]''' = '''[[P (complexity)|P]]'''.<ref>Jin-Yi Cai and D. Sivakumar. Sparse hard sets for P: resolution of a conjecture of Hartmanis. ''Journal of Computer and System Sciences'', volume 58, issue 2, pp.280&ndash;296. 1999. ISSN:0022-0000. [http://citeseer.ist.psu.edu/501645.html At Citeseer]</ref> == References == <references /> ==External links== * Lance Fortnow. [http://weblog.fortnow.com/2006/04/favorite-theorems-small-sets.html Favorite Theorems: Small Sets]. April 18, 2006. * Bill Gasarch. [http://weblog.fortnow.com/2007/06/sparse-sets-tribute-to-mahaney.html Sparse Sets (Tribute to Mahaney)]. June 29, 2007. * {{CZoo|SPARSE|S#sparse}} [[Category:Formal languages]] [[Category:Computational complexity theory]] [[zh:稀疏語言]]</text> </page> <page> <id>35250</id> <title>Spatial twist continuum</title> <text>The '''spatial twist continuum''' is a dual representation of an all [[hexahedron|hexahedral]] [[mesh (mathematics)|mesh]] that defines the global [[Connectivity (graph theory)|connectivity]] [[constraint (mathematics)|constraint]]. Discovered by Dr. [[Peter Murdoch]] on the 16th September 1993, the spatial twist continuum is a method that can be used in automatic and semi-automatic mesh generation methods to create all hexahedral meshes for both [[computational fluid dynamics]] and [[finite element method]] applications. The name is derived from the description of the surfaces that define the connectivity of the hexahedral elements. The surfaces are arranged in the three principal dimensions such that they form [[orthogonality|orthogonal]] intersections that conicide with the [[centroid]] of the hexahedral element. They are arranged predominately coplanar to each other in their respective dimensions yet they can twist into the other dimensional planes through transitions. The surfaces are unbroken throughout the entire volume of the mesh hence they are [[Continuum (theory)|continuum]]s. One of the areas where the STC finds application is CFD computational fluid dynamics which is a field of Science and analysis that involves simulating the flow of fluids such as air over and through bodies defined by boundary surfaces. The procedure involves building a mesh and solving the same on a computer using a finite volume approach. An analyst has many choices available for creating a mesh that can be used in a CFD or CAE simulation, one is to use a Tetrahedral, Polyhedral, Trimmed Cartesian or Mixed of Hybrid of Hexahedra called hex dominate, these are classified as non-structured meshes, which can all be created automatically, however the CFD and FEA results are both inaccurate and prone to solution divergence, (the simulation fails to solve). The other option for the analyst is to use an all-hexahedral mesh that offers far greater solver stability and speed as well as accuracy and the ability to run much more powerful turbulence solvers like Large eddy simulation LES in transient mode as opposed to the non-structured meshes that can only run a steady state RANS model. The difficulty with generating an all-hexahedral mesh on a complex geometry is that mesh needs to take into consideration the local geometric detail as well as the global connectivity constraint. This is the STC, and it is only present in an all-hexahedral mesh. This is the reason why it is relatively easy to automate a non-structured mesh, the automatic generator only needs to be concerned with the local cell size geometry. The tradeoffs and relative benefits of using either mesh method to build and solve a CFD or CAE model are best explained by 