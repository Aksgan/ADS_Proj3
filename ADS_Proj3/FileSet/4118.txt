The computer program has a set of operations it can combine. Crucially, the software must be able to try out different combinations of the operations without causing harm. When it finds a sequence that produces the acceptable result, the program is done. Goal seeking is fine when the computer can identify every possible undesired result, but this is rarely possible. People are far more skilled at recognizing undesirable outcomes than software is. Also, producing software to identify every possible bad solution is at least as complex as simply finding a solution. See the article on the [[frame problem]] for more on this. ==Knowledge-based systems== In this design, goal seeking is combined with a large number of facts about the real world, and a logic engine to reason about the facts. This is a basic attempt to add to the computer's ability to recognize undesirable results. At least one such software (see [[Cyc]]) has been under development for more than a decade (as of 2003). Whilst Cyc has captured far more domain knowledge than any other similar system, it is unclear how successful it has been at meeting its original goals. ==Neural networks== This plan would substitute a self-training neural network for the knowledge base of goal-seeking software. No method is generally known to accomplish this. ==Evolutionary systems== This plan uses a software ecology that breeds software to solve the identified problem. It is a goal-seeking system, so it can theoretically solve the brittleness probelem. As with other solutions, the problem is that there must be an identified method of rejecting all possible bad solutions. {{DEFAULTSORT:Software Brittleness Problem}} [[Category:Software quality]]</text> </page> <page> <id>34969</id> <title>Software bug</title> <text>{{Selfref|To report a [[MediaWiki]] error on Wikipedia, see [[Wikipedia:Bug reports]].}} {{Portal|Software Testing}} A '''software bug''' is the common term used to describe an error, flaw, mistake, [[failure]], or [[fault (technology)|fault]] in a computer program or [[software system|system]] that produces an incorrect or unexpected result, or causes it to behave in unintended ways. Most bugs arise from mistakes and errors made by people in either a program's [[source code]] or its [[software architecture|design]], and a few are caused by [[compiler]]s producing incorrect code. A program that contains a large number of bugs, and/or bugs that seriously interfere with its functionality, is said to be ''buggy''. Reports detailing bugs in a program are commonly known as bug reports, fault reports, problem reports, trouble reports, change requests, and so forth. == Effects == {{Main|List of software bugs}} Bugs trigger [[Type I and type II errors]] that can in turn have a wide variety of ripple effects, with varying levels of inconvenience to the user of the program. Some bugs have only a subtle effect on the program's functionality, and may thus lie undetected for a long time. More serious bugs may cause the program to [[crash (computing)|crash]] or [[freeze (computing)|freeze]] leading to a [[denial of service]]. Others qualify as [[security bugs]] and might for example enable a [[Cracker (computing)|malicious user]] to bypass [[access controls]] in order to obtain unauthorized privileges. The results of bugs may be extremely serious. Bugs in the code controlling the [[Therac-25]] [[radiation therapy]] machine were directly responsible for some patient deaths in the 1980s. In 1996, the [[European Space Agency]]'s US$1 billion prototype [[Ariane 5]] rocket was destroyed less than a minute after launch, due to a bug in the on-board guidance computer program. In June 1994, a Royal Air Force [[CH-47 Chinook|Chinook]] [[1994 Scotland RAF Chinook crash|crashed]] into the [[Mull of Kintyre]], killing 29. This was initially dismissed as pilot error, but an investigation by ''[[Computer Weekly]]'' uncovered sufficient evidence to convince a [[House of Lords]] inquiry that it may have been caused by a software bug in the aircraft's [[FADEC|engine control computer]].<ref>[http://www.ccsr.cse.dmu.ac.uk/resources/general/ethicol/Ecv12no2.html The Chinook Helicopter Disaster]</ref> In 2002, a study commissioned by the US [[Department of Commerce]]' [[National Institute of Standards and Technology]] concluded that ''software bugs, or errors, are so prevalent and so detrimental that they cost the US economy an estimated $59 billion annually, or about 0.6 percent of the gross domestic product''.<ref>[http://www.nist.gov/public_affairs/releases/n02-10.htm Software bugs cost US economy dear]</ref> == Etymology == The concept that software might contain errors dates back to 1843 in [[Ada Byron's notes on the analytical engine]] in which she speaks of the difficulty of preparing program 'cards' for [[Charles Babbage]]'s [[Analytical engine]]: {{cquote|...an analyzing process must equally have been performed in order to furnish the Analytical Engine with the necessary operative data; and that herein may also lie a possible source of error. Granted that the actual mechanism is unerring in its processes, the cards may give it wrong orders.}} Use of the term "bug" to describe inexplicable defects has been a part of engineering jargon for many decades and predates computers and computer software; it may have originally been used in hardware engineering to describe mechanical malfunctions. For instance, [[Thomas Edison]] wrote the following words in a letter to an associate in 1878: {{cquote|It has been just so in all of my inventions. The first step is an intuition, and comes with a burst, then difficulties arise—this thing gives out and ''[it is]'' then that 'Bugs' — as such little faults and difficulties are called—show themselves and months of intense watching, study and labor are requisite before commercial success or failure is certainly reached.''}}<ref>Edison to Puskas, 13 November 1878, Edison papers, Edison National Laboratory, U.S. National Park Service, West Orange, N.J., cited in Thomas P. Hughes, ''American Genesis: A History of the American Genius for Invention,'' Penguin Books, 1989, ISBN 0-14-009741-4, on page 75.</ref> Problems with radar electronics during World War II were referred to as ''bug''s (or [[glitch]]es) and there is additional evidence that the usage dates back much earlier. Baffle Ball, the first mechanical pinball game, was advertised as being "free of bugs" in 1931.<ref name="Baffle Ball">{{cite web |url=http://www.ipdb.org/machine.cgi?gid=129 |title=Baffle Ball |publisher=Internet Pinball Database |quote=(See image of advertisement in reference entry)}}</ref> [[Image:H96566k.jpg|thumbnail|250px|Photo of what is possibly the first real bug found in a computer.]] The invention of the term "bug" is often erroneously 