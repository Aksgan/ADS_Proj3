\over \partial u} u' - {\partial L \over \partial x}</math> The second and third term cancel, by the definition of p, and the first and fourth terms cancel by the Euler Lagrange equation. This leaves the Beltrami identity: ::<math> H' = - {\partial L \over \partial x} </math> which is a special case of [[Noether's theorem]]. == Application == In case that ''L'' is independent of ''x'', then the Beltrami identity states that H is constant ::<math> - H' = \frac{d}{dx}\left(L-u'\frac{\partial L}{\partial u'}\right) = 0</math> This can be used to solve the [[Euler-Lagrange equation]], in the same way that conservation of energy can be used to solve Newton's law of motion. The condition that H is constant is an equation for the first derivative of u, while the original Euler Lagrange equation is an equation for the second derivative of u. For example, consider the [[Brachistochrone problem]]: find the curve minimizing the integral: ::<math> \int_0^1 {\sqrt{1+y'^2} \over \sqrt{y}} dx </math> The quantity to minimize is the integral of an L which does not depend explicitly on time, ::<math> L(y,y') = {\sqrt{1+y'^2} \over \sqrt{y}} </math> so the associated Hamiltonian is constant: ::<math> H = p y' - L = {y'^2 \over \sqrt{1+y'^2} \sqrt{y}} - {\sqrt{1+y'^2}\over \sqrt{y}} = {-1 \over \sqrt{1+y'^2}\sqrt{y}} </math> ::<math> \sqrt{1+y'^2}\sqrt{y} = \text{constant}</math> which simplifies to the differential equation for the cycloid. [[Category:Calculus of variations]] [[zh:貝爾特拉米等式]]</text> </page> <page> <id>3616</id> <title>Benz plane</title> <text>In [[mathematics]], a '''Benz plane''' is a [[Geometry|geometrical]] object, named after the [[Germany|German]] [[mathematician]] [[Walter Benz]]. The term was applied to a group of objects that arise from a common [[axiomatization]] of certain structures and split into three families, which were introduced separately: [[Möbius plane]]s, [[Laguerre plane]]s, and [[Minkowski plane]]s. <ref>W. Benz, ''Vorlesungen über Geomerie der Algebren'', [[Springer Science+Business Media|Springer]] (1973)</ref> <ref>F. Buekenhout (ed.), ''Handbook of [[Incidence (geometry)|Incidence Geometry]]'', [[Elsevier]] (1995) ISBN 0-444-88355-X</ref> ==References== <references/> ==External links== * [http://eom.springer.de/b/b110290.htm Benz plane at SpringerLink] [[Category:Geometry]] {{geometry-stub}}</text> </page> <page> <id>3625</id> <title>Berkeley Lower Extremity Exoskeleton</title> <text>{{notability|date=January 2011}} {{primarysources|date=January 2011}} The '''Berkeley Lower Extremity Exoskeleton''' ('''BLEEX''') is a [[robot]]ic device that attaches to the lower [[body]]. Its [[purpose]] is to complement the pilot's [[Physical strength|strength]] by adding extra [[force]] to one's lower extremity bodily movements. The BLEEX was funded by the [[Defense Advanced Research Projects Agency]] (DARPA), and [[Technology development|developed]] by the Berkeley Robotics and Human Engineering Laboratory, a unit within the [[University of California, Berkeley]] [[UC Berkeley College of Engineering|Department of Mechanical Engineering]]. DARPA provided the intitial $50 million of start-up funds in 2001.<ref>Singer, Peter W. [http://www.brookings.edu/articles/2008/0502_iron_man_singer.aspx "How to Be All That You Can Be: A Look at the Pentagon's Five Step Plan For Making Iron Man Real"], [http://www.brookings.edu/ The Brookings Institution], 2 May 2008.</ref> == References == {{Reflist}} == External links == * [http://bleex.me.berkeley.edu/bleex.htm The BLEEX project] * [http://www.berkeley.edu/news/media/releases/2004/03/03_exo.shtml A UCBerkeleyNews news release] [[Category:Robotics]] [[Category:Robotic exoskeletons]] {{robo-stub}}</text> </page> <page> <id>3627</id> <title>Berkeley RISC</title> <text>'''Berkeley RISC''' was one of two seminal research projects into [[RISC]]-based [[microprocessor]] design taking place under [[ARPA]]'s [[VLSI project]]. RISC was led by [[David A. Patterson (scientist)|David Patterson]] at the [[University of California, Berkeley]] between 1980 and 1984, while the other was taking place only a short drive away at [[Stanford University]] under their [[MIPS architecture|MIPS]] effort starting in 1981 and running until 1984. Berkeley's project was so successful that it became the name for all similar designs to follow, even the MIPS would become known as a "RISC processor". The RISC design was later commercialized as the [[SPARC]] processor. ==The RISC concept== Both RISC and MIPS were developed from the realization that the vast majority of programs did not use the vast majority of a processor's instructions. In one calculation it was found that the entire [[Unix]] system, when [[compiler|compiled]], used only 30% of the available instructions on the [[Motorola 68000]]. Much of the circuitry in the m68k, and similar designs, was dedicated to decoding these instructions which were never being used. The RISC idea was to include only those instructions that were ''really'' used, using those transistors to speed the system up instead. To do this, RISC concentrated on adding many more [[Processor register|registers]], small bits of memory holding temporary values that can be accessed at zero cost. This contrasts with normal [[main memory]], which might take several cycles to access. By providing more registers, and making sure the compilers actually used them, programs should run much faster. Additionally the speed of the processor would be more closely defined by its clock speed, because less of its time would be spent waiting for memory accesses. Transistor for transistor, a RISC design would outperform a conventional CPU, hopefully by a lot. On the downside, the instructions being removed were generally performing several "sub-instructions". For instance, the <code>ADD</code> instruction of a traditional design would generally come in several flavours, one that added the numbers in two registers and placed it in a third, another that added numbers found in main memory and put the result in a register, etc. The RISC designs, on the other hand, included only a single flavour of any particular instruction, the <code>ADD</code>, for instance, would ''always'' use registers for all operands. This forced the programmer to write additional instructions to load the values from memory, if needed, making a RISC program "less dense". In the era of expensive memory this was a real concern, notably because memory was also much slower than the CPU. Since a RISC design's <code>ADD</code> would actually require four instructions (two loads, an add, and a save), the machine would have to do much more memory access to read the extra instructions, potentially slowing it down considerably. This was offset to some degree by the fact that the new designs used what was then a very large instruction word of [[32-bit]]s, allowing small constants to be folded directly into the instruction instead of having to be loaded separately. Additionally, the results of one operation are often used soon after by another, so by skipping the write to memory and storing the result in a register, the program did not 