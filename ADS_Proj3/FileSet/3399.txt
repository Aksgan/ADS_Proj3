[[data compression|compression methods]], [[character encoding|character encoding schemes]], and [[operating system]]s. PUIDs can be expressed as [[Uniform Resource Identifier]]s using the <tt>info:pronom/</tt> namespace, details of which are available from the [[info URI]] registry. Neither the PUID scheme, nor its expression as an info URI, supports any inherent dereferencing mechanism, i.e. a PUID does not resolve to a [[Uniform Resource Locator]]. However, The National Archives is planning to develop a range of services to expose PRONOM registry content, including a resolution service for PUIDs. === DROID === DROID (Digital Record Object Identification) is a software tool developed by The National Archives to perform automated batch identification of file formats. It is one of a planned series of tools utilising PRONOM to provide specific digital preservation services. DROID uses internal (byte sequence) and external (file extension) signatures to identify and report the specific file format versions of digital files. These signatures are stored in an XML signature file, generated from information recorded in the PRONOM technical registry. New and updated signatures are regularly added to PRONOM, and DROID can be configured to automatically download updated signature files from the PRONOM website via [[web service]]s. DROID allows files and folders to be selected from a file system for identification. After the identification process had been run, the results can be output in [[XML]], [[comma-separated values|CSV]] or printer-friendly formats. DROID is a platform-independent [[Java (Sun)|Java]] tool. It includes a documented, public [[API]], and can be invoked from both [[GUI]] and [[command line]] interfaces. === Future services === Proposed future services include format risk assessments and preservation planning, and the automated generation of migration pathways for converting between formats. <ref>[http://www.rlg.org/en/page.php?Page_ID=20571#article1 Brown, A. (2005) "Automating preservation: New developments in the PRONOM service", ''RLG DigiNews'' '''9(2)''']</ref> == See also == * [[Digital curation]] * [[Digital preservation]] * [[File format]] == References == {{Reflist}} == External links == * [http://www.nationalarchives.gov.uk/pronom/ PRONOM technical registry] * [http://info-uri.info/registry/OAIHandler?verb=GetRecord&metadataPrefix=reg&identifier=info:pronom/ info:pronom/ namespace registration] * [http://droid.sourceforge.net/ DROID website] * [http://hul.harvard.edu/gdfr/ Global Digital Format Registry project] [[Category:Digital libraries]] [[Category:Preservation (library and archival science)]] [[Category:Web applications]] [[Category:Computer archives]]</text> </page> <page> <id>28188</id> <title>PRTG Network Monitor</title> <text>{{Notability|date=July 2010}} {{Infobox software | name = PRTG Network Monitor | developer = Paessler AG | latest_release_version = 8.1.0.1607 | latest_release_date = 21 September 2010 | operating_system = Windows | genre = [[Network management system]] | license = Freeware and Commercial | website = [http://www.paessler.com/prtg Paessler AG] }} '''PRTG Network Monitor''' ('''PRTG''', successor of [[Paessler Router Traffic Grapher]]) is a [[network monitoring]] software from [[Paessler AG]]. PRTG runs on Windows and monitors network availability and network usage using [[Simple Network Management Protocol|SNMP]], [[Packet Sniffer|Packet Sniffing]], [[WMI]], [[IP SLAs]] and [[Netflow]] and various other protocols. More than 150,000 users use the [[freeware]] and commercial editions. == Version History == * v.7.0 (June 30, 2008) * v.7.1 (March 30, 2009) * v.7.2 (September 28, 2009) * v.7.3 (February 15, 2010) * v.8.1 (September 21, 2010) ==See also== * [[Paessler AG]]: Vendor of the software * [[Comparison of network monitoring systems]] * [http://www.paessler.com/prtg/download PRTG Freeware Download] ==References== * Wally Bahny (March 22, 2010). [http://blogs.techrepublic.com/products/?p=1220 Product Spotlight: PRTG Network Monitor], TechRepublic.com, accessed on March 25, 2010 * Bernd Reder (Nov 17th 2009). [http://www.networkcomputing.de/tests/artikel-81307.html Test: Vier Networkmonitoring-Produkte auf dem Prüfstand (Monitoring Tools Comparison)] (German) Network Computing, accessed on March 25, 2010 * Howard Solomon (Sep 3rd 2009). [http://www.itworldcanada.com/news/paessler-brings-back-windows-for-network-monitor/136488 Paessler brings back Windows for Network Monitor] * David Davis (May 1, 2007). [http://www.networkworld.com/community/?q=node/14708 The ultimate list of Cisco administration tools], Networkworld, accessed on March 25, 2010 * David Harris (October 20th, 2010). [http://dave.harris.net/post/2010/10/20/PRTG-Network-Monitor-8-Review.aspx PRTG Network Monitor 8 Review], accessed on November 1st, 2010 [[Category:Network analyzers]]</text> </page> <page> <id>28189</id> <title>PR (complexity)</title> <text>{{Unreferenced|date=December 2009}} '''PR''' is the complexity class of all [[primitive recursive function]]s – or, equivalently, the set of all [[formal language]]s that can be decided by such a function. This includes addition, multiplication, exponentiation, tetration, etc. The [[Ackermann function]] is an example of a function that is ''not'' primitive recursive, showing that '''PR''' is strictly contained in '''[[R (complexity)|R]]'''. '''PR''' functions can be explicitly enumerated, whereas not all functions '''R''' can be. This shows that ''''PR'''' has a ''syntactic'' definition, whereas ''R'' lacks one. On the other hand, we can "enumerate" any [[recursively enumerable set]] (see also its complexity class '''[[RE (complexity)|RE]]''') by a primitive-recursive function in the following sense: given an input (''M'', ''k''), where ''M'' is a Turing machine and ''k'' is an integer, if ''M'' halts within ''k'' steps then output ''M''; otherwise output nothing. Then the union of the outputs, over all possible inputs (''M'', ''k''), is exactly the set of ''M'' that halt. '''PR''' strictly contains [[ELEMENTARY]]. ==References== * {{ComplexityZoo|PR|P#pr}}. {{ComplexityClasses}} {{DEFAULTSORT:Pr (Complexity)}} [[Category:Complexity classes]] [[ko:PR (복잡도)]] [[ja:PR (計算複雑性理論)]]</text> </page> <page> <id>28208</id> <title>PTAS reduction</title> <text>In [[computational complexity theory]], a '''PTAS reduction''' is a [[reduction (complexity)|reduction]] that is often used to perform reductions between solutions to [[optimization problem]]s. It preserves the property that a problem has a [[polynomial time approximation scheme]] (PTAS) and is used to define [[complete (complexity)|completeness]] for certain classes of [[optimization problem]]s such as [[APX]]. Notationally, if there is a PTAS reduction from a problem A to a problem B, we write <math>\text{A} \leq_{\text{PTAS}} \text{B}</math>. With ordinary [[polynomial-time many-one reduction]]s, if we can describe a reduction from a problem A to a problem B, then any polynomial-time solution for B can be composed with that reduction to obtain a polynomial-time solution for the problem A. Similarly, our goal in defining PTAS reductions is so that given a PTAS reduction from an optimization problem A to a problem B, a PTAS for B can be composed with the reduction to obtain a PTAS for the problem A. Formally, we define a PTAS reduction from A to B using three polynomial-time computable functions, ''f'', ''g'', and ''&alpha;'', with the following properties: * ''f'' maps instances of problem A to instances of problem B. * ''g'' takes an instance ''x'' of problem A, an approximate solution to the corresponding problem <math>f(x)</math> in B, and an error parameter &epsilon; and produces an approximate solution to ''x''. 