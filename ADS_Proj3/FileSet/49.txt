before estimating the interaction effect. == SCA on partitions A, B and AB == Simultaneous component analysis is mathematically identical to [[Principal components analysis|PCA]], but is semantically different in that it models different objects or subjects at the same time. The standard notation for a SCA – and PCA – model is: : <math>X=TP^{'}+E \,</math> where ''X'' is the data, ''T'' are the component scores and ''P'' are the component loadings. ''E'' is the residual or error matrix. Because ASCA models the variation partitions by SCA, the model for effect estimates looks like this: : <math>A=T_{a}P_{a}^{'}+E_{a} \,</math> : <math>B=T_{b}P_{b}^{'}+E_{b} \,</math> : <math>AB=T_{ab}P_{ab}^{'}+E_{ab} \,</math> : <math>E=T_{e}P_{e}^{'}+E_{e} \,</math> Note that every partition has its own error matrix. However, algebra dictates that in a balanced mean centered data set every two level system is of rank one. This results in zero errors, since any rank 1 matrix can be written as the product of a single component score and loading vector. The full ASCA model with two effects and interaction including the SCA looks like this: Decomposition: : <math>X=A+B+AB+E \,</math> : <math>X=T_{a}P_{a}^{'}+T_{b}P_{b}^{'}+T_{ab}P_{ab}^{'}+T_{e}P_{e}^{'}+E_{a}+E_{b}+E_{ab}+E_{e}+E \,</math> == Time as an Effect == Because 'time' is treated as a qualitative factor in the ANOVA decomposition preceding ASCA, a nonlinear multivariate time trajectory can be modeled. An example of this is shown in Figure 10 of this reference ([http://www3.interscience.wiley.com/journal/121356309/abstract]). == References == * [http://dx.doi.org/10.1093/bioinformatics/bti476] ANOVA-Simultaneous Component Analysis (ASCA): a new tool for analyzing designed metabolomics data;<br /><small>Age K. Smilde, Jeroen J. Jansen, Huub C. J. Hoefsloot, Robert-Jan A. N. Lamers, Jan van der Greef and Marieke E. Timmerman</small> * [http://dx.doi.org/10.1002/cem.952] ASCA: analysis of multivariate data obtained from an experimental design; <br /><small>Jeroen J. Jansen, Huub C. J. Hoefsloot, Jan van der Greef, Marieke E. Timmerman, Johan A. Westerhuis, Age K. Smilde</small> * [http://dx.doi.org/10.1186/1471-2105-8-322] Statistical validation of megavariate effects in ASCA;<br /><small>Daniel J Vis, Johan A Westerhuis, Age K Smilde and Jan van der Greef</small> * [http://www3.interscience.wiley.com/journal/121356309/abstract] The geometry of ASCA;<br /><small>Age K. Smilde, Huub. C.J. Hoefsloot, Johan. A. Westerhuis</small> [[Category:Analysis of variance]] [[Category:Bioinformatics]] [[Category:Data analysis]]</text> </page> <page> <id>452</id> <title>ANSI/ISO C Specification Language</title> <text>{{Infobox programming language | name = ANSI/ISO C Specification Language | paradigm = [[declarative programming|declarative]] with few [[imperative programming|imperative]] features. | year = 2008 | designer = [[Commissariat à l'Énergie Atomique]] and [[INRIA]] | developer = [[Commissariat à l'Énergie Atomique]] and [[INRIA]] | latest release version = [[2008]] | latest release date = December 2008 | typing = [[Type system|static]] | implementations = an implementation is in the [[Frama-C]] platform. | influenced_by = [[Java Modeling Language|JML]] }} The '''ANSI/ISO C Specification Language '''('''ACSL''') is a specification language for [[C program]]s, using Hoare style pre- and postconditions and invariants, that follows the design by contract paradigm. Specifications are written as C annotation comments to the C program, which hence can be compiled with any C compiler. The current verification tool for ACSL is [[Frama-C]]. == Overview == ACSL is a Behavioral Interface Specification Language (BISL). It aims at specifying behavioral properties of C source code. The main inspiration for this language comes from the specification language of the Caduceus tool for deductive verification of behavioral properties of [[C program]]s. The specification language of Caduceus is itself inspired from [[JML]] which aims at similar goals for Java source code. One difference with [[JML]], is that ACSL aims at static verification and deductive verification whereas [[JML]] aims both at runtime assertion checking and static verification using for instance the [[ESC/Java]] tool. == Syntax == Let us consider the following example for the prototype of a function named <code>incrstar</code>: /*@ requires \valid(p); @ assigns *p; @ ensures *p == \old(*p) + 1; @*/ void incrstar (int *p); The contract is given by the comment which starts with <code>/*@</code>. Its meaning is as follows: * the first line is a precondition: it states that function <code>incrstar</code> must be called with a pointer <code>p</code> that points to a safely allocated memory location. * Second line is a frame clause, stating that function <code>incrstar</code> does not modify any memory location but the one pointed to by <code>p</code>. * Finally, the <code>ensures</code> clause is a postcondition, which specifies that the value <code>*p</code> is incremented by one. == Tool support == Most of the features of ACSL are supported by [[Frama-C]]. == References == * [http://www.springerlink.com/content/r4480863w8726723/ Example of ACSL usage] Sufficient Preconditions for Modular Assertion Checking in VMCAI 2008 pages 188-202. * A tutorial [http://www.first.fraunhofer.de/uploads/tx_wfproject/acsl-by-example-5_1_0_05.pdf ACSL By Example] was written as part of the [http://www.first.fraunhofer.de/en/projects/devicesoft_deduktive_verifikation_fuer_sicherheitskritische_software_eingebetteter_systeme DEVICE-SOFT] project at [http://www.first.fraunhofer.de/en/home Fraunhofer FIRST] * Report mentioning the use of ACSL in teaching [http://www.it-education.ru/2009/reports/Petrenko_Khoroshilov.htm], Петренко Ольга Леонидовна and Хорошилов Алексей Владимирович. == External links == Complete ACSL specification is available from http://frama-c.cea.fr/download.html [[Category:Specification languages]] [[Category:C programming language]]</text> </page> <page> <id>455</id> <title>ANSI art</title> <text>'''ANSI art''' is a computer artform that was widely used at one time on [[Bulletin board system|BBSes]]. It is similar to [[ASCII art]], but constructed from a larger set of 256 letters, numbers, and symbols &mdash; all codes found in IBM [[code page 437]], often referred to as [[extended ASCII]] and used in [[MS-DOS]] and [[Unix]]<ref>http://www.cplusplus.com/doc/ascii/</ref> environments. ANSI art also contains special [[ANSI escape code|ANSI escape sequence]]s that color text with the 16 foreground and 8 background colours offered by [[ANSI.SYS]], an MS-DOS [[device driver]] loosely based upon the [[American National Standards Institute|ANSI]] X3.64 standard for [[text terminal]]s. Some ANSI artists take advantage of the cursor control sequences within ANSI X3.64 in order to create animations, commonly referred to as ''[[ANSImation]]s''. ANSI art and text files which incorporate ANSI codes carry the ''de facto'' <tt>.ANS</tt> [[filename extension|file extension]]. __TOC__ ANSI art is considerably more flexible than ASCII art, because the particular character set it uses contains symbols intended for drawing, such as a wide variety of box-drawing characters and block characters that [[dithering|dither]] the foreground and background color. It also adds accented characters and math symbols that often find creative use among ANSI artists. The popularity of ANSI art encouraged the creation of a powerful shareware package called [[TheDraw]] coded by Ian E. Davis in 1986. 