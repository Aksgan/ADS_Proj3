standard; however, AIS does not mandate a [[Posix|POSIX]] process, but rather, any equivalent entity that a system provides to manage executing software. The '''area server''' is an abstraction that represents the server that provides services for a specification '''area''' (Availability Management Framework, Cluster Membership Service, Checkpoint Service, and so on). Each area has a separate logical area server, although the implementer is free to create a separate physical module for each area server or combine one or more area servers into a single physical module. [[Image:Programming usage model of SA Forum AIS services.JPG‎|thumb|alt=Programming/usage model of SA Forum AIS services.|Figure 6: Programming/usage model of SA Forum AIS services.]] The area implementation libraries may be implemented in one or several physical libraries; however, a process is required to initialize, register, and obtain an operating system selection object separately for each area's implementation library. Thus, from a programming standpoint, it is useful to view these as separate libraries. The usage model is typical of an event-driven architecture, in which the application performs a setup and then receives callbacks as events occur (fig 6). The use of a Service Availability library starts with a call to initialize the library, which potentially loads any dynamic code and binds the asynchronous calls implemented by the process. When the process no longer requires the use of the area functions, it calls the area finalization function, which disassociates the process from the interface area implementation instance and recovers any associated resources. AIS employs both the synchronous and asynchronous programming models. Synchronous APIs are generally used for library and association housekeeping interfaces. Many AIS Services provide the capability of tracking changes in the entities that they implement. The API track typically consists of three functions: the client invoked initiate and stop tracking of an entity; and the service invoked callback to notify the client about (pending) changes of a tracked entity. ==Backward compatibility== To achieve backward compatibility when evolving the AIS specification, follow a number of rules: * A function or type definition never changes for a specific SA Forum release. * Changes in a function or type definition (adding a new argument to a function, adding a new field to a data structure) force the definition of a new function or type name. A new function or type name is built from the original name in the previous version with a suffix indicating the version where the function/type changed (for instance, saAmfComponentRegister_3()). * As an exception to the previous rule, new enum values, flag values, or union fields can be added to an existing enum, flag, or union types without changing the type name, as long as the size of the enum, flag, or union type does not change. * AIS implementers must ensure that they respect the version numbers provided by the application when it initializes the library and do not expose new enum values to applications using older versions. * AIS implementers must also ensure that they respect the version numbers provided by the application when the library is initialized, with regard to new or modified error codes and do not expose error codes that only apply to functions in the most recent version of the specification to applications written to an older version of the specification. As an example, consider a majorVersion Vx of a given service that includes a function f(), and assume that f() had to be modified in a newer majorVersion Vy (Vy > Vx), which led to the introduction of the f_y() variant that now replaces f() in Vy. Considering an AIS implementation that supports both versions Vx and Vy, a process can initialize the library specifying either Vx or Vy: * if the process initializes a library handle with Vx, this handle does not provide access to functions that have been introduced in versions newer than Vx. In particular, this handle will not enable the process to successfully invoke f_y() * if the process initializes a library handle with Vy, this handle does not provide access to a function introduced in versions older than Vy and then replaced by a newer variant of the same function. In particular, this handle will not enable the process to successfully invoke f(). Note, however, that a process may initialize the library multiple times each time with the version appropriate to the functionality it intends to obtain. The specification document of an AIS Service for Vy only includes the latest variant of a function or type definition supported by Vy. Specification releases are versioned as: <release code>.<major version>.<minor version> The release code is a capital letter. Backward compatibility is maintained only among versions of the same release code. The major version and minor version are incremental numbers. Releases with major number change may introduce new features and change the API in a backward compatible way as described above. Releases with minor number change do not change the API. They provide bug fixes, editorial changes and clarification to their predecessor. ==Implementation Registry== The SA Forum Implementation Registry is a process that enables implementations of the SA Forum specifications to be registered and made publicly available. Membership is not required to register implementations. Implementations that have been successfully registered may be referred to as “[http://www.saforum.org/Implementation-Registry-Main~227740~16627.htm Service Availability Forum Registered].” ==See also== * [[Service Availability Forum]] * [[Service availability|Service Availability]] * [[Opensaf|OpenSAF]] ==External links== * [http://www.saforum.org/Specification-Tutorials~217306~16627.htm Specification Tutorials] * [http://www.saforum.org SA Forum Web Site ] * [http://www.openais.org/doku.php OpenAIS] * [http://www.opensaf.org OpenSAF] * [http://www.linkedin.com/groups?home=&gid=2225458 Talk to Service Availability Professionals] [[Category:Application programming interfaces]]</text> </page> <page> <id>2207</id> <title>Application programming interface key</title> <text>An '''application programing interface key''' (API key) is a code generated by websites that allow users to access their [[application programming interface]]. API keys are used to track how the API is being used in order to prevent malicious use or abuse of the [[terms of service]]. API keys are based on the [[UUID]] system to ensure they will be unique to each user.<ref>{{cite web | author = Shopping.com | title = What is an API Key and how 