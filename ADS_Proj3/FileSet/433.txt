picture of the tree). * The [[root node]] of a tree is the [[node (computer science)|node]] with no parents. There is at most one root node in a rooted tree. * A [[leaf node]] has no children. * The '''depth''' of a node n is the length of the path from the root to the node. The set of all nodes at a given depth is sometimes called a '''level''' of the tree. The root node is at depth zero. * The '''height''' of a tree is the length of the path from the root to the deepest node in the tree. A (rooted) tree with only one node (the root) has a height of zero. * '''Siblings''' are nodes that share the same parent node. * A node p is an '''ancestor''' of a node q if it exists on the path from q to the root. The node q is then termed a '''descendant''' of p. * The '''size''' of a node is the number of descendants it has including itself. *'''In-degree''' of a node is the number of edges arriving at that node. * '''Out-degree''' of a node is the number of edges leaving that node. * The root is the only node in the tree with In-degree = 0. e.g.:depth of tree with level =3,then, size of tree is, level+1=4 ==Types of binary trees== * A '''rooted binary tree''' is a [[tree data structure|tree]] with a [[root node]] in which every node has at most two children. * A '''full binary tree''' (sometimes '''proper binary tree''' or '''2-tree''' or '''strictly binary tree''') is a tree in which every node other than the leaves has two children. * A '''perfect binary tree''' is a ''full binary tree'' in which all ''leaves'' are at the same ''depth'' or same ''level''.<ref>{{cite web|url=http://www.nist.gov/dads/HTML/perfectBinaryTree.html|title=perfect binary tree | publisher = [[NIST]]}}</ref> (This is ambiguously also called a ''complete binary tree''.) * A '''complete binary tree''' is a binary tree in which every level, ''except possibly the last'', is completely filled, and all nodes are as far left as possible.<ref>{{cite web|url=http://www.nist.gov/dads/HTML/completeBinaryTree.html|title=complete binary tree| publisher = NIST}}</ref> <!--"doubt please give correct perfect definition and example for full complete binary tree and also for height and depth--> * An '''infinite complete binary tree''' is a tree with [[aleph number|<math>{\aleph_0}</math>]] levels, where for each level d the number of existing nodes at level d is equal to 2<sup>d</sup>. The cardinal number of the set of all nodes is <math>{\aleph_0}</math>. The cardinal number of the set of all paths is <math>2^{\aleph_0}</math>. The infinite complete binary tree essentially describes the structure of the [[Cantor set]]; the unit interval on the real line (of cardinality <math>2^{\aleph_0}</math>) is the continuous image of the Cantor set; this tree is sometimes called '''the''' [[Cantor space]]. * A '''balanced binary tree''' is commonly defined as a binary tree in which the height of the two subtrees of every node never differ by more than 1.,<ref>Aaron M. Tenenbaum, et. al Data Structures Using C, Prentice Hall, 1990 ISBN 0-13-199746-7</ref> although in general it is a binary tree where no leaf is much farther away from the root than any other leaf. (Different balancing schemes allow different definitions of "much farther" <ref>Paul E. Black (ed.), entry for ''data structure'' in ''[[Dictionary of Algorithms and Data Structures]]. U.S. [[National Institute of Standards and Technology]]. 15 December 2004. [http://xw2k.nist.gov/dads//HTML/balancedtree.html Online version] Accessed 2010-12-19.</ref>). Binary trees that are balanced according to this definition have a predictable depth (how many nodes are traversed from the root to a leaf, root counting as node 0 and subsequent as 1, 2, ..., depth). This depth is equal to the integer part of <math>log_2(n)</math> where <math>n</math> is the number of nodes on the balanced tree. Example 1: balanced tree with 1 node, <math>log_2(1) = 0</math> (depth = 0). Example 2: balanced tree with 3 nodes, <math>log_2(3)=1.59</math> (depth=1). Example 3: balanced tree with 5 nodes, <math>log_2(5)=2.32</math> (depth of tree is 2 nodes). * A '''rooted complete binary tree''' can be identified with a [[free magma]]. * A '''degenerate tree''' is a tree where for each parent node, there is only one associated child node. This means that in a performance measurement, the tree will behave like a linked list data structure. Note that this terminology often varies in the literature, especially with respect to the meaning "complete" and "full". ==Properties of binary trees== * The number of nodes ''<math>n</math>'' in a perfect binary tree can be found using this formula: ''<math>n = 2^{h+1}-1</math>'' where ''<math>h</math>'' is the height of the tree. * The number of nodes ''<math>n</math>'' in a complete binary tree is minimum: ''<math>n = 2^{h}</math>'' and maximum: ''<math>n = 2^{h+1}-1</math>'' where ''<math>h</math>'' is the height of the tree. * The number of leaf nodes ''<math>L</math>'' in a perfect binary tree can be found using this formula: ''<math>L = 2^h</math>'' where ''<math>h</math>'' is the height of the tree. * The number of nodes ''<math>n</math>'' in a perfect binary tree can also be found using this formula: ''<math>n = 2L-1</math>'' where ''<math>L</math>'' is the number of leaf nodes in the tree. * The number of NULL links in a Complete Binary Tree of n-node is (n+1). * The number of leaf nodes in a Complete Binary Tree of n-node is <math>UpperBound(n/2)</math>. * For any non-empty binary tree with ''n''<sub>0</sub> leaf nodes and ''n''<sub>2</sub> nodes of degree 2, ''n''<sub>0</sub> = ''n''<sub>2</sub> + 1.<ref>{{cite book | last=Mehta | first=Dinesh | coauthors = Sartaj Sahni| title=Handbook of Data Structures and Applications|publisher=[[Chapman and Hall]]|isbn = 1584884355|year=2004 }}</ref> * n = n<sub>0</sub> + n<sub>1</sub> + n<sub>2</sub> + n<sub>4</sub> + n<sub>3</sub> + n<sub>5</sub> + .... + n<sub>B-1</sub> + n<sub>B</sub> * B = n - 1, n = 1 + 1*n<sub>1</sub> + 2*n<sub>2</sub> + 3*n<sub>3</sub> + 4*n<sub>4</sub> + ... + B*n<sub>B</sub>, NOT include n<sub>0</sub> ==Proof== proof: n0=n2+1 Let n = the total number of nodes B = the branches in T n0, n1, n2 represent the nodes with no children, single child, and two children respectively. B = n - 