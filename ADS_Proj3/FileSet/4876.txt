|CVTSS2SI r32, xmm/m32||F3 0F 2D /r||Convert Scalar Single-Precision FP Value to Dword Integer|| |- |UCOMISS xmm1, xmm2/m32||0F 2E /r||Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS|| |- |COMISS xmm1, xmm2/m32||0F 2F /r||Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS|| |- |SQRTPS xmm1, xmm2/m128||0F 51 /r||Compute Square Roots of Packed Single-Precision Floating-Point Values|| |- |SQRTSS xmm1, xmm2/m32||F3 0F 51 /r||Compute Square Root of Scalar Single-Precision Floating-Point Value|| |- |RSQRTPS xmm1, xmm2/m128||0F 52 /r||Compute Reciprocal of Square Root of Packed Single-Precision Floating-Point Value|| |- |RSQRTSS xmm1, xmm2/m32||F3 0F 52 /r||Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value|| |- |RCPPS xmm1, xmm2/m128||0F 53 /r||Compute Reciprocal of Packed Single-Precision Floating-Point Values|| |- |RCPSS xmm1, xmm2/m32||F3 0F 53 /r||Compute Reciprocal of Scalar Single-Precision Floating-Point Values|| |- |ANDPS xmm1, xmm2/m128||0F 54 /r||Bitwise Logical AND of Packed Single-Precision Floating-Point Values|| |- |ANDNPS xmm1, xmm2/m128||0F 55 /r||Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values|| |- |ORPS xmm1, xmm2/m128||0F 56 /r||Bitwise Logical OR of Single-Precision Floating-Point Values|| |- |XORPS xmm1, xmm2/m128||0F 57 /r||Bitwise Logical XOR for Single-Precision Floating-Point Values|| |- |ADDPS xmm1, xmm2/m128||0F 58 /r||Add Packed Single-Precision Floating-Point Values|| |- |ADDSS xmm1, xmm2/m32||F3 0F 58 /r||Add Scalar Single-Precision Floating-Point Values|| |- |MULPS xmm1, xmm2/m128||0F 59 /r||Multiply Packed Single-Precision Floating-Point Values|| |- |MULSS xmm1, xmm2/m32||F3 0F 59 /r||Multiply Scalar Single-Precision Floating-Point Values|| |- |SUBPS xmm1, xmm2/m128||0F 5C /r||Subtract Packed Single-Precision Floating-Point Values|| |- |SUBSS xmm1, xmm2/m32||F3 0F 5C /r||Subtract Scalar Single-Precision Floating-Point Values|| |- |MINPS xmm1, xmm2/m128||0F 5D /r||Return Minimum Packed Single-Precision Floating-Point Values|| |- |MINSS xmm1, xmm2/m32||F3 0F 5D /r||Return Minimum Scalar Single-Precision Floating-Point Values|| |- |DIVPS xmm1, xmm2/m128||0F 5E /r||Divide Packed Single-Precision Floating-Point Values|| |- |DIVSS xmm1, xmm2/m32||F3 0F 5E /r||Divide Scalar Single-Precision Floating-Point Values|| |- |MAXPS xmm1, xmm2/m128||0F 5F /r||Return Maximum Packed Single-Precision Floating-Point Values|| |- |MAXSS xmm1, xmm2/m32||F3 0F 5F /r||Return Maximum Scalar Single-Precision Floating-Point Values|| |- |PSHUFW mm1, mm2/m64, imm8||0F 70 /r ib||Shuffle Packed Words|| |- |LDMXCSR m32||0F AE /2||Load MXCSR Register State|| |- |STMXCSR m32||0F AE /3||Store MXCSR Register State|| |- |SFENCE||0F AE /7||Store Fence|| |- |CMPPS xmm1, xmm2/m128, imm8||0F C2 /r ib||Compare Packed Single-Precision Floating-Point Values|| |- |CMPSS xmm1, xmm2/m32, imm8||F3 0F C2 /r ib||Compare Scalar Single-Precision Floating-Point Values|| |- |PINSRW mm, r32/m16, imm8||0F C4 /r||Insert Word|| |- |PEXTRW r32, mm, imm8||0F C5 /r||Extract Word|| |- |SHUFPS xmm1, xmm2/m128, imm8||0F C6 /r ib||Shuffle Packed Single-Precision Floating-Point Values|| |- |PMOVMSKB r32, mm||0F D7 /r||Move Byte Mask|| |- |PMINUB mm1, mm2/m64||0F DA /r||Minimum of Packed Unsigned Byte Integers|| |- |PMAXUB mm1, mm2/m64||0F DE /r||Maximum of Packed Unsigned Byte Integers|| |- |PAVGB mm1, mm2/m64||0F E0 /r||Average Packed Integers|| |- |PAVGW mm1, mm2/m64||0F E3 /r||Average Packed Integers|| |- |PMULHUW mm1, mm2/m64||0F E4 /r||Multiply Packed Unsigned Integers and Store High Result|| |- |MOVNTQ m64, mm||0F E7 /r||Store of Quadword Using Non-Temporal Hint|| |- |PMINSW mm1, mm2/m64||0F EA /r||Minimum of Packed Signed Word Integers|| |- |PMAXSW mm1, mm2/m64||0F EE /r||Maximum of Packed Signed Word Integers|| |- |PSADBW mm1, mm2/m64||0F F6 /r||Compute Sum of Absolute Differences|| |- |MASKMOVQ mm1, mm2||0F F7 /r||Store Selected Bytes of Quadword|| |} ===[[SSE2]] instructions=== ''added with [[Pentium 4]]'' ''also see integer instructions added with Pentium 4'' <blockquote> ====SSE2 SIMD Floating-Point Instructions==== ADDPD, ADDSD, ANDNPD, ANDPD, CMPPD, CMPSD*, COMISD, CVTDQ2PD, CVTDQ2PS, CVTPD2DQ, CVTPD2PI, CVTPD2PS, CVTPI2PD, CVTPS2DQ, CVTPS2PD, CVTSD2SI, CVTSD2SS, CVTSI2SD, CVTSS2SD, CVTTPD2DQ, CVTTPD2PI, CVTTPS2DQ, CVTTSD2SI, DIVPD, DIVSD, MAXPD, MAXSD, MINPD, MINSD, [[MOVAPD]], [[MOVHPD]], MOVLPD, MOVMSKPD, MOVSD*, MOVUPD, MULPD, MULSD, ORPD, SHUFPD, SQRTPD, SQRTSD, SUBPD, SUBSD, UCOMISD, UNPCKHPD, UNPCKLPD, XORPD * CMPSD ''and'' MOVSD ''have the same name as the [[string (computer science)|string]] instruction mnemonics'' CMPSD (CMPS) ''and'' MOVSD (MOVS)'', however, the former refer to scalar [[Double precision|double-precision]] [[Floating point|floating-points]] whereas the latters refer to [[Integer (computer science)|doubleword]] strings.'' ====SSE2 SIMD Integer Instructions==== MOVDQ2Q, MOVDQA, MOVDQU, MOVQ2DQ, PADDQ, PSUBQ, PMULUDQ, PSHUFHW, PSHUFLW, PSHUFD, PSLLDQ, PSRLDQ, PUNPCKHQDQ, PUNPCKLQDQ </blockquote> ===[[SSE3]] instructions=== ''added with Pentium 4 supporting SSE3'' ''also see integer and floating-point instructions added with Pentium 4 SSE3'' <blockquote> ====SSE3 SIMD Floating-Point Instructions==== *ADDSUBPD, ADDSUBPS (for Complex Arithmetic) *HADDPD, HADDPS, HSUBPD, HSUBPS (for Graphics) *[[MOVDDUP]], MOVSHDUP, MOVSLDUP (for Complex Arithmetic) </blockquote> ===[[SSSE3]] instructions=== ''added with [[Xeon]] 5100 series and initial [[Core 2]]'' *PSIGNW, PSIGND, PSIGNB *PSHUFB *PMULHRSW, PMADDUBSW *PHSUBW, PHSUBSW, PHSUBD *PHADDW, PHADDSW, PHADDD *PALIGNR *PABSW, PABSD, PABSB ===[[SSE4]] instructions=== <blockquote> ====[[SSE4.1]]==== ''added with [[Core 2]] manufactured in 45nm'' *MPSADBW *PHMINPOSUW *PMULLD, PMULDQ *DPPS, DPPD *BLENDPS, BLENDPD, BLENDVPS, BLENDVPD, PBLENDVB, PBLENDW *PMINSB, PMAXSB, PMINUW, PMAXUW, PMINUD, PMAXUD, PMINSD, PMAXSD *ROUNDPS, ROUNDSS, ROUNDPD, ROUNDSD *INSERTPS, PINSRB, PINSRD/PINSRQ, EXTRACTPS, PEXTRB, PEXTRW, PEXTRD/PEXTRQ *PMOVSXBW, PMOVZXBW, PMOVSXBD, PMOVZXBD, PMOVSXBQ, PMOVZXBQ, PMOVSXWD, PMOVZXWD, PMOVSXWQ, PMOVZXWQ, PMOVSXDQ, *PMOVZXDQ *PTEST *PCMPEQQ *PACKUSDW *MOVNTDQA ====[[SSE4a]]==== *LZCNT, POPCNT (POPulation CouNT) - advanced bit manipulation ''added with [[Phenom (processor)|Phenom]] processors'' *EXTRQ/INSERTQ *MOVNTSD/MOVNTSS ====[[SSE4.2]]==== ''added with [[Nehalem (microarchitecture)|Nehalem]] processors'' *CRC32 *PCMPESTRI *PCMPESTRM *PCMPISTRI *PCMPISTRM *PCMPGTQ </blockquote> ===[[Advanced Vector Extensions|Intel AVX]] [[Fused multiply-add|FMA]] instructions=== {| class="wikitable" ! Instruction !! Opcode !! Meaning !! Notes |- |VFMADDPD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 69 /r /is4||Fused Multiply-Add of Packed Double-Precision Floating-Point Values|| |- |VFMADDPS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 68 /r /is4||Fused Multiply-Add of Packed Single-Precision Floating-Point Values|| |- |VFMADDSD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 6B /r /is4||Fused Multiply-Add of Scalar Double-Precision Floating-Point Values|| |- |VFMADDSS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 6A /r /is4||Fused Multiply-Add of Scalar Single-Precision Floating-Point Values|| |- |VFMADDSUBPD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 5D /r /is4||Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values|| |- |VFMADDSUBPS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 5C /r /is4||Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values|| |- |VFMSUBADDPD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 5F /r /is4||Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values|| |- |VFMSUBADDPS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 5E /r /is4||Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values|| |- |VFMSUBPD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 6D /r /is4||Fused Multiply-Subtract of Packed Double-Precision Floating-Point Values|| |- |VFMSUBPS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 6C /r /is4||Fused Multiply-Subtract of Packed Single-Precision Floating-Point Values|| |- |VFMSUBSD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 6F /r /is4||Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values|| |- |VFMSUBSS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 6E /r /is4||Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values|| |- |VFNMADDPD xmm0, xmm1, xmm2, 