be supplied for the placeholders. === Placeholder identifiers === Placeholders are usually indicated by some special character or sequence of characters to distinguish them from the rest of the snippet text. Some systems allow snippet placeholders to be named [[identifier]]s. The identifiers may be useful for supporting such features as placeholder duplication or placeholder transformation. The following example uses the identifiers <code>first_name</code>, <code>last_name</code>, and <code>item</code>: <pre> Hello {%first_name%} {%last_name%}, Your shipment of {%item%} is now ready to pick up. Thanks {%first_name%}! </pre> === Placeholder duplication === This allows the user to indicate that the value supplied for one placeholder should be replicated in multiple places, relative to the entire text of the programmable snippet. In the previous example, the named placeholder <code>first_name</code> is an example of this usage. === Placeholder transformation === This allows the user to indicate that one or more values supplied for a placeholder should be replicated and transformed in other places within the text of the programmable snippet. For example, the user may supply a document title in one part of the snippet, and specify that the document title should be repeated in other places, with the first instance being all-uppercase and every other instance being lower-case. == Snippet programming features == For applications that support '''scriptable''' snippets, the range of supported programming features varies. The following enumerates some of the features that are commonly implemented for programmable snippets. === Plain text === Although plain text is a fundamental feature included even with applications that support only non-programmable "static" snippets, programmable snippets are also used for working with plain text. One common complication, however, is that environments that support programmable snippets often have to make distinctions between what counts as "plain text" and what counts as "programming instructions". Further complicating this distinction is the fact that applications that support programmable snippets almost always include support for recognition of multiple programming languages, either through basic [[syntax highlighting]] or execution of embedded commands. For these and other reasons, emitting plain text from programmable snippets almost always entails being careful to avoid problems with [[Syntax of programming languages|syntax]] and [[Delimiter#Delimiter_collision|delimiter collisions]]. === Constants and variables === Programmable snippets often include an ability to establish a binding to an existing variable scope or namespace, from which the user can select any of various constants or variables. These might include values such as the email address of the currently-logged-in user on a given machine, the current system time and date, or the output value of a function. Scriptable snippets are often associated with one or more currently-active files. Consequently, variables may also include environment variables and arguments that specify the filename, cursor position, parent directory and other stats relating to the files in a current editing session. === Interpreted code === Scriptable snippets may allow execution of code in one or more [[programming language]]s. This may include one or more standalone languages, or a language that is specific to the application in which the language is hosted.<ref name="yasnippet001">(See e.g., http://code.google.com/p/yasnippet/ YaSnippet, implemented for the Emacs text editor).</ref> <!-- ==Application support== The following is a summary of snippet support in some applications such as text editors and IDEs. For more details, see also [[Comparison of text editors]]. editor ;; has_plain ;; has_dynamic ;; has_scriptable [[Emacs]] ;; yes ;; yes ;; yes [[EmEditor]] ;; yes ;; yes ;; yes [[Textmate]] ;; yes ;; yes ;; yes [[Textpad]] ;; yes ;; no ;; no --> ==See also== * [[Autocomplete]] * [[Codebase]] * [[Integrated Development Environment]] * [[Macro (computer science)]] * [[Design pattern]] * [[Pastebin]] * [[Preprocessor]] * [[Revision control]] * [[Web widget]] * [[JIT]] * [[Mail merge]] == Notes and references == {{reflist}} ==External links== * [http://www.codebarrel.com Code Barrel] Code Barrel Private Code Snippet Repository. * [https://sites.google.com/site/engineeringcodesnippets/ Engineering Code Snippets] [[Engineering Code Snippets Project]], a project at [[Katholieke Universiteit Leuven]] * [http://dobbscodetalk.com/index.php?option=com_myblog&show=The-Pastebin-Evolved.html&Itemid=29 The Pastebin, Evolved] {{Dead link|date=October 2010}}, article at [[Dr. Dobb's Journal|Dr. Dobb's]] blog about publicly sharing code snippets * [http://snippets.snippets.org/index.php The Snippets archive] Code snippets in [http://c.snippets.org C] and [http://cpp.snippets.org C++] * [http://www.refactory.org/ Code Snippets] Peer-reviewed code snippets that anyone can edit. [http://www.refactory.org/s/recent/in/php PHP], [http://www.refactory.org/s/recent/in/javascript javascript], [http://www.refactory.org/s/recent/in/python python] and more. * [http://www.snippetsapp.com/ Snippets.app] — code snippets library application for Mac OS X. {{DEFAULTSORT:Snippet (Programming)}} [[Category:Source code]] [[Category:Text editor features]] [[fr:Snippet]] [[it:Snippet]] [[ja:スニペット]] [[ru:Сниппет]] [[zh:片段]]</text> </page> <page> <id>34797</id> <title>Social Software Engineering</title> <text>'''Social Software Engineering''' (SSE) is a branch of [[software engineering]] that is concerned with the social aspects of software development. Whereas it is difficult to give an exact definition for the field, the participants of the 1st International Workshop on Social Software Engineering and Applications (SoSEA 2008) <ref>[http://www.cs.tut.fi/sosea08/ 1st International Workshop on Social Software Engineering and Applications (SoSEA 2008)]</ref> proposed the following characterization: * [[Community]]-centered: Software is produced and consumed by and/or for a community rather than focusing on individuals * [[Collaboration]]/collectiveness: Exploiting the collaborative and collective capacity of human beings * [[Companionship]]/relationship: Making explicit the various associations among people * Human/social activities: Software is designed consciously to support human activities and to address [[social problems]] * [[Social inclusion]]: Software should enable social inclusion enforcing links and trust in communities Thus, SSE can be defined as “the application of processes, methods, and tools to enable community-driven creation, management, deployment, and use of software in online environments”.<ref> Imed Hammouda, Jan Bosch, Mehdi Jazayeri, Tommi Mikkonen: First International Workshop on Social Software Engineering and Applications (SoSEA 2008). In: Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering (ASE 2008). IEEE, 2008, pp. 531-532.</ref> One of the main observations in the field of SSE is that the concepts, principles, and technologies made for [[social software]] applications are applicable to software development itself as software engineering is inherently a social activity. SSE is not limited to specific activities of software development. Accordingly, tools have been proposed supporting different parts of SSE, for instance, social system design or social [[requirements engineering]]<ref> Steffen Lohmann, Sebastian Dietzold, Philipp Heim, Norman Heino: [http://www.interactivesystems.info/assets/files/Publikationen/id/22244.pdf A Web Platform for Social Requirements Engineering]. In: Software Engineering 2009 (Workshops). GI, 2009, pp. 