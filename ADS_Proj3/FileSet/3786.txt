Mercurial | url = http://hgbook.red-bean.com/hgbook.html | accessdate = July 13, 2007 }}</ref> Rather, communication is only necessary when pushing or pulling changes to or from other peers. * Each working copy effectively functions as a remote backup of the codebase and of its change-history, providing natural protection against data loss.<ref name='OSullivan'/> ==Integration== Some of the more advanced revision-control tools offer many other facilities, allowing deeper integration with other tools and software-engineering processes. [[Plugin]]s are often available for [[integrated development environment|IDEs]] such as [[Oracle JDeveloper]], [[IntelliJ IDEA]], [[Eclipse (computing)|Eclipse]] and [[Visual Studio]]. [[NetBeans|NetBeans IDE]] and [[Xcode]] come with integrated version control support. ==Common vocabulary== Terminology can vary from system to system, but some terms in common usage include:<ref> {{cite book | last = Collins-Sussman | first = Ben | coauthors = Fitzpatrick, B.W. and Pilato, C.M. | title = Version Control with Subversion | publisher = O'Reilly | year = 2004 | url = http://svnbook.red-bean.com/ | isbn = 0-596-00448-6 }} </ref><ref> {{cite book | last = Wingerd | first = Laura | title = Practical Perforce | publisher = O'Reilly | year = 2005 | url = http://safari.oreilly.com/0596101856 | isbn = 0-596-10185-6 }} </ref> ; [[baseline (configuration management)|Baseline]] : An approved revision of a document or source file from which subsequent changes can be made. See [[#Baselines, labels and tags|baselines, labels and tags]]. ; [[branching (software)|Branch]] : A set of files under version control may be '''branched''' or '''forked''' at a point in time so that, from that time forward, two copies of those files may develop at different speeds or in different ways independently of each other. ; Change : A '''change''' (or '''[[diff]]''', or '''[[Delta encoding|delta]]''') represents a specific modification to a document under version control. The granularity of the modification considered a change varies between version control systems. ; Change list : On many version control systems with [[atomic transaction|atomic]] multi-change commits, a '''changelist''', '''change set''', or '''patch''' identifies the set of '''changes''' made in a single commit. This can also represent a sequential view of the source code, allowing the examination of source "as of" any particular changelist ID. ; Checkout : A '''check-out''' (or '''co''') is the act of creating a local working copy from the repository. A user may specify a specific revision or obtain the latest. The term 'checkout' can also used as a noun to describe the working copy. ; Commit : A '''commit''' ('''checkin''', '''ci''' or, more rarely, '''install''', '''submit''' or '''record''') is the action of writing or merging the changes made in the working copy back to the repository. The terms 'commit' and 'checkin' can also used in noun form to describe the new revision that is created as a result of committing. ; Conflict : A conflict occurs when different parties make changes to the same document, and the system is unable to reconcile the changes. A user must '''resolve''' the conflict by combining the changes, or by selecting one change in favour of the other. ; Delta compression : Most revision control software uses [[delta compression]], which retains only the differences between successive versions of files. This allows for more efficient storage of many different versions of files. ; Dynamic stream : A stream in which some or all file versions are mirrors of the parent stream's versions. ; Export : '''exporting''' is the act of obtaining the files from the repository. It is similar to '''checking-out''' except that it creates a clean directory tree without the version-control metadata used in a working copy. This is often used prior to publishing the contents, for example. ; Head: Also sometime called '''tip''', this refers to the most recent commit. ; Import : '''importing''' is the act of copying a local directory tree (that is not currently a working copy) into the repository for the first time. ; Label : See '''tag'''. ; Mainline : Similar to ''trunk'', but there can be a mainline for each branch. ; [[Merge (revision control)|Merge]] : A '''merge''' or '''integration''' is an operation in which two sets of changes are applied to a file or set of files. Some sample scenarios are as follows: :* A user, working on a set of files, '''updates''' or '''syncs''' their working copy with changes made, and checked into the repository, by other users.<ref name="svnbook-merge">{{cite web|last=Collins-Sussman|first=Ben|title=Version Control with Subversion|url=http://svnbook.red-bean.com/en/1.5/svn.tour.cycle.html#svn.tour.cycle.resolve|accessdate=8 June 2010|coauthors=Brian W. Fitpatrick, and C. Michael Pilato|quote=The G stands for merGed, which means that the file had local changes to begin with, but the changes coming from the repository didn't overlap with the local changes.}}</ref> :* A user tries to '''check-in''' files that have been updated by others since the files were '''checked out''', and the '''revision control software''' automatically merges the files (typically, after prompting the user if it should proceed with the automatic merge, and in some cases only doing so if the merge can be clearly and reasonably resolved). :* A set of files is '''branched''', a problem that existed before the branching is fixed in one branch, and the fix is then merged into the other branch. :* A '''branch''' is created, the code in the files is independently edited, and the updated branch is later incorporated into a single, unified '''trunk'''. ; Promote : The act of copying file content from a less controlled location into a more controlled location. For example, from a user's workspace into a repository, or from a stream to its parent.<ref> {{cite book | title = Accurev Concepts Manual, Version 4.7 | publisher = Accurev, Inc. | date = July, 2008 }} </ref> ; Repository : The '''repository''' is where files' current and historical data are stored, often on a server. Sometimes also called a '''depot''' (for example, by [[SVK]], [[AccuRev]] and [[Perforce]]). ; Resolve : The act of user intervention to address a conflict between different changes to the same document. ; Reverse integration : The process of merging different team branches into the main trunk of the versioning system. ; Revision : Also '''version''': A [[Software versioning|version]] 