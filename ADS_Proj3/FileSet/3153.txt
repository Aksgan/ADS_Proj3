The values <math>g_k^i</math> are the coefficients from the Galois field <math>GF(2^s)</math>. Since the operations are computed in the finite field, the result of the operation is also of the same length, as the size of each vector <math>M</math>. Each node produces a similar output, as computed above. This yields a linear problem of the type <math>X = G M</math>, where with the knowledge of the <math>X , G</math> we need to compute <math>M</math>. Each of the receivers in <math>K</math>, try to solve this linear equation, and for which at least <math>N \ge S</math> packets must be received. The received packets are continually used in the [[Gaussian elimination]] method to reduce <math>G</math> matrix into the row-echelon form. Finally the resulting values of <math>X = G_{echelon}M </math> are solved to obtain <math>M</math>. ==Example == [[Image:Butterfly network.svg|thumb|Butterfly Network.]] In the butterfly network, there are two sources (at the top of the picture), each having knowledge of some value A and B. There are two destination nodes (at the bottom), which each want to know both A and B. Each edge can carry only a single value (we can think of an edge transmitting a bit in each time slot). If we only used [[routing]], then the central line would be able to carry A or B, but not both. Suppose we send A through the center; then the left destination would receive A twice and not know B at all. Sending B poses a similar problem for the right destination. We say that routing is insufficient because no routing scheme can transmit both A and B simultaneously to both destinations. Using a simple code, as shown, we do get both A and B to both destinations simultaneously by sending the sum of the symbols through the center (in other words, we encode A and B using the formula "A+B"). The left destination receives A and A+B, and can find B by subtracting the two values. This is a [[linear code]] because the encoding and decoding schemes are linear operations. ===Throughput=== At the middle of the butterfly network, 3 messages are being transmitted (A, A+B, B). However 4 messages are being received at the endpoints at the bottom (receive 4 messages for the cost of 3 messages, Note that a message storage in the middle center router could store messages A and B and still provide all 4 messages to the endpoints (receive 4 messages for the cost of 2 messages, a 100% improvement). A better example is Figure 2 of http://algo.epfl.ch/~christin/primer.ps which looks like 2 squares showing a shared network path on one side. This shared path carries message A+B. The network gets both messages to endpoints in 1 time slot rather than 2. ==Random network coding == Random Network Coding relies on using [[random coding|random code]]s at nodes for multicast or in cast networks. It was originally proposed in - T. Ho, R. Koetter, M. Medard, D. R. Karger and M. Effros, "The Benefits of Coding over Routing in a Randomized Setting" 2003 IEEE International Symposium on Information Theory. In random network coding, interior network nodes independently choose random linear mappings from inputs to outputs. The effect of the network is that of a transfer matrix from sources to receivers. To recover symbols at the receivers, we require sufficient degrees of freedom – an invertible matrix in the coefficients of all nodes. Receiver nodes can decode if they receive as many independent linear combinations as the number of source processes. ==Coding-aware routing == The example of coding-aware routing was first proposed in [[ROCX]].<ref>http://arena.cse.sc.edu/papers/rocx.secon06.pdf</ref> Consider the scenario in Fig. 2 with three flows f1 : 2→1, f2 : 1→3, f3 : 3→2. If all the links are perfect with no loss, the corresponding shortest paths are 2→5→7→4→1, 1→4→7→6→3, and 3→9→8→2 respectively. Without coding, the total number of transmissions needed to deliver one packet of each flow is 11. Under COPE, since nodes 4, 5 and 6 can not overhear each other, there is only one coding opportunity at node 4 as node 1 and node 7 exchange packets through node 4, reducing the total from 11 to 10. On the other hand, if the route of f3 is changed to 3→6→7→5→2, we need no more than 9 transmissions. Though this path has one more hop (one more transmission) than the shortest path, it creates coding opportunities at nodes 5 and 6. This leads us to investigate the extent of gain possible when routing is performed with the awareness of coding opportunities. == Applications == Network coding is seen to be useful in the following areas: * Alternative to [[forward error correction]] and [[ARQ]] in traditional and wireless networks. eg: [[Multi-user ARQ]]<ref>http://www.ericsson.com/technology/research_papers/wireless_access/doc/Multi-User%20ARQ.pdf</ref> * Robust and resilient to network attacks like snooping, eavesdropping or replay attacks<ref>http://home.eng.iastate.edu/~yuzhen/publications/ZhenYu_INFOCOM_2008.pdf</ref>. * Digital file distribution and P2P file sharing. eg: [[Avalanche filesystem|Avalanche]] from Microsoft * Throughput increase in wireless mesh networks. eg : [[COPE]],<ref>[http://www.sigcomm.org/sigcomm2006/discussion/showpaper.php?paper_id=24 Sigcomm 2006 Form >> XORs in The Air: Practical Wireless Network Coding<!-- Bot generated title -->]</ref> [[Coding-aware routing]]<ref>http://www.cs.wisc.edu/~shravan/infocom-07-2.pdf</ref> * Bidirectional low energy transmission in wireless sensor networks. * Many-to-many broadcast network capacity augmentations. * Buffer and Delay reduction in spatial sensor networks: [[Spatial buffer multiplexing]] <ref>[http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4146919 Welcome to IEEE Xplore 2.0: Looking at Large Networks: Coding vs. Queueing<!-- Bot generated title -->]</ref> ==Network coding and Peer-to-Peer Networks== Network coding may be used in a [[peer-to-peer]] network to reduce the amount of routing information required by peers to achieve near optimal throughput {{Citation needed|date=July 2010}}. In large networks this can be a significant advantage, since otherwise the amount of routing [[overhead information|overhead]] would scale with the size of the network. Unlike scenarios such as the butterfly network example above, network coding does not increase the maximum achievable throughput of a peer-to-peer network <ref name=autogenerated1>http://personal.ie.cuhk.edu.hk/~dmchiu/p2pnetcoding.pdf</ref>. However there are several difficulties when utilising network coding in peer-to-peer networks. * A peer may need to spend a large amount of time and resources decoding received data. * It can be difficult to ensure the uniqueness of the coefficients when there 