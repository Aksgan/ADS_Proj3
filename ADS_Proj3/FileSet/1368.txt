1900 || [[Network Time Protocol]], [[IBM]] [[CICS]], [[Mathematica]], [[RISC OS]], [[Common Lisp]] || |- | January 1, 1904 || [[LabVIEW]], [[Apple Inc.]]'s [[Mac OS]] through version 9, [[Palm OS]], [[MP4]], Microsoft Excel (optionally),<ref name="excel-leapyear" /> [[IGOR Pro]] || 1904 is the first leap year of the twentieth century.<ref>[http://developer.apple.com/dev/techsupport/develop.mactech/issue_28/minow.html Timing on the Macintosh by Martin Minow]</ref> |- | January 1, 1960 || [[S-Plus]], [[SAS System|SAS]] || |- | December 31, 1967 || [[Pick operating system|Pick OS]] || Chosen so that remainder 7 would produce 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, and 6=Saturday.<ref>Mark Pick, International Spectrum Conference April 2010</ref> |- | January 1, 1970 || [[Unix time]], used by [[Unix]], [[Linux]], [[Mac OS X]], other [[Unix-like]] systems, as well as [[Java (programming language)|Java]], [[JavaScript]], [[C (programming language)|C]], [[Perl]] and [[PHP]] [[Programming language]]s || |- | January 1, 1978 || [[AmigaOS]] || |- | January 1, 1980 || [[MS DOS]], [[OS/2]], [[File Allocation Table#Final FAT16|FAT16]] and [[File Allocation Table#FAT32|FAT32]] filesystems, [[Stratus_VOS|VOS]] || |- | January 6, 1980 || [[Qualcomm]] [[Binary Runtime Environment for Wireless|BREW]], [[Global Positioning System|GPS]] || |- | January 1, 1981 || Acorn NetFS || |- | January 1, 2000 || [[AppleSingle and AppleDouble formats|AppleSingle]], [[AppleSingle and AppleDouble formats|AppleDouble]]<ref name="as-ad-epoch">{{cite web|url=http://users.phg-online.de/tk/netatalk/doc/Apple/v2/AppleSingle_AppleDouble.pdf|title=AppleSingle/AppleDouble Formats for Foreign Files Developer's Note|accessdate=October 23, 2007}}</ref> |- | ? ?, 2000 || [[FATX]] filesystem || |- | January 1, 2001 || [[Apple Inc.|Apple]]'s [[Cocoa (API)|Cocoa]] framework || 2001 is the year of the release of Mac OS X 10.0. |} === Problems with epoch-based computer time representation === Computers don't generally store arbitrarily large numbers. Instead, each number stored by a computer is allotted a fixed amount of space. Therefore, when the number of time units that have elapsed since a system's epoch exceeds the largest number that can fit in the space allotted to the time representation, the time representation [[arithmetic overflow|overflow]]s, and problems can occur. While a system's behavior after overflow occurs is not necessarily predictable, one likely result is that the number representing the time will reset to zero, and the computer system will think that the current time is the epoch time again. Most famously, older systems which counted time as the number of years elapsed since the epoch of January 1, 1900 and which only allotted enough space to store the numbers 0 through 99, experienced the [[Year 2000 problem]]. These systems (if not corrected beforehand) would interpret the date January 1, 2000 as January 1, 1900, leading to unpredictable errors at the beginning of the year 2000. Even systems which allocate more storage to the time representation are not immune from this kind of error. Many [[Unix-like]] [[operating system]]s which keep time as seconds elapsed from the epoch date of January 1, 1970, and allot timekeeping enough storage to store numbers as large as {{nowrap|2 147 483 647}} will experience an overflow problem on January 19, 2038 if not fixed beforehand. This is known as the [[Year 2038 problem]]. A correction involving doubling the storage allocated to timekeeping on these systems will allow them to represent dates more than 290 billion years into the future. Other more subtle timekeeping problems exist in computing, such as accounting for [[leap second]]s, which are not observed with any predictability or regularity. Additionally, applications which need to represent historical dates and times (for example, representing a date prior to the switch from the [[Julian calendar]] to the [[Gregorian calendar]]) must use specialized timekeeping [[library (computing)|libraries]]. Finally, some software must maintain compatibility with older software that does not keep time in strict accordance with traditional timekeeping systems. For example, [[Microsoft Excel]] observes the fictional date of February 29, 1900 in order to maintain compatibility with older versions of [[Lotus 1-2-3]].<ref name="excel-leapyear" /> Lotus 1-2-3 observed the date due to an error; by the time the error was discovered, it was too late to fix it&mdash;"a change now would disrupt formulas which were written to accommodate this anomaly".<ref>Kay Wilkins, Customer Relations Representative , Lotus develompent Corp. (1992) quoted in Dershowitz, N. & Reingold, E. M. (2008). ''Calendrical calculations'' (3rd ed.). Cambridge University Press. p. xxi, xxvi. ISBN 978-0-521-70238-6.</ref> ==Notes== {{reflist}} ==External links== * [http://www.merlyn.demon.co.uk/critdate.htm Critical and Significant Dates] (J. R. Stockton), an extensive list of dates that are problematic for various operating systems and computing devices * [http://www.theiet.org/factfiles/it/dates.cfm?type=pdf Potential problem dates for computers (pdf)] A list of potential problem dates for computers and software from 2001 to 2100. {{Chronology}} {{DEFAULTSORT:Epoch (Reference Date)}} [[Category:Calendar eras]] [[Category:Calendaring standards]] [[Category:Chronology]] [[Category:Operating system technology]] [[bs:Epoha]] [[cs:Letopočet]] [[eo:Epoko]] [[fr:Epoch]] [[hu:Epocha]] [[scn:Èbbica]] [[sk:Letopočet]] [[sh:Epoha (datum)]] [[sv:Epok]]</text> </page> <page> <id>12357</id> <title>Epoch Javascript Calendar</title> <text>{{Orphan|date=February 2009}} {{Infobox Software| name = Epoch Javascript Calendar |screenshot = |caption = |developer = MeanFreePath |latest_release_version = 2.0.1 |latest_release_date = September 18. 2006 |operating_system = [[cross-platform]] |genre = [[DHTML]] |license = [[GNU Lesser General Public License|LGPL]] |website = [http://www.meanfreepath.com/javascript_calendar/index.html] }} '''Epoch Javascript Calendar''' is an [[open source]] (only 1.0.x versions), [[GNU Lesser General Public License|LGPL]] [[calendar]] component for use in web pages. It is written in [[JavaScript]] and compatible with almost all modern browsers. ==External links== * http://www.meanfreepath.com/javascript_calendar/index.html - Project homepage [[Category: JavaScript-based calendar components]]</text> </page> <page> <id>12362</id> <title>Epsilon-equilibrium</title> <text>{{Infobox equilibrium| name=Epsilon-equilibrium | supersetof=[[Nash Equilibrium]]| usedfor = [[stochastic game]]s }} In [[game theory]], an '''epsilon-equilibrium''' is a [[strategy profile]] that approximately satisfies the condition of [[Nash equilibrium]]. == Definition == Given a game and a real non-negative parameter ε, a [[strategy profile]] is said to be an ε-equilibrium if it is not possible for any player to gain more than ε in [[expected payoff]] by unilaterally deviating from his [[strategy]]. Every [[Nash Equilibrium]] is equivalent to a ε-equilibrium where ε = 0. Formally, let <math>G=(N,A=A_1\times\cdots\times A_N, u: A \rightarrow \reals^N)</math> be a N-player game with action sets <math>A_i</math> for each player and utility function u. A vector of strategies <math>\sigma \in \Delta = \Delta_1 \times \cdots \times \Delta_N</math> is an <math>\epsilon</math>-Nash Equilibrium for G if :<math>u_i(\sigma)\geq u_i(\sigma_i^',\sigma_{-i})-\epsilon </math> for all <math>\ \sigma_i^' \in \Delta_i, i \in N</math> == Example == The notion of ε-equilibria is important in the theory of [[stochastic 