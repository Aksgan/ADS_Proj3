the current user interface for interacting with [[Linux]] kernel [[netfilter]] functionality. It replaced [[ipchains]]. Other [[Unix]] like operating systems may provide their own native functionality and other [[open source]] firewall products exist. More detailed information about iptables is contained elsewhere. A brief discussion is contained here in order to describe how iptables may be used to configure a Linux firewall. [[netfilter]] provides a state-full packet filter which can be configured according to [[Network card|network interface]], [[Internet Protocol|protocol]], [[IP address|source and/or destination address]], [[IP port|source and/or destination port]] and the state of the packet. A network packet traverses several ''chains'' between the time it is received by a network interface and the time it is accepted by the host or forwarded to another host. The common chains are '''INPUT''', '''OUTPUT''' and '''FORWARD'''. The '''INPUT''' ''chain'' is traversed for all packets as they are received by a network interface, regardless of whether they are to be accepted by the host or forwarded to another host. The '''OUTPUT''' ''chain'' is traversed for all packets as they are transmitted by a network interface. The '''FORWARD''' chain is traversed for those packets are being routed through the host from one network interface to another, such as is the case for a multi-homed system (a system with more than one physical network interface). Each of the built-in chains has a default ''policy'' which defines what action is taken for a packet which reaches the end of the chain. Packet traversal ends when a ''rule'' matches the packet and has an action of '''ACCEPT''', '''DROP''', '''REJECT''' or '''RETURN'''. The simplest [[iptables]] firewall consists of ''rules'' for each desired service, followed by a rule which indicates that any packets which reach this rule are dropped. A system which only permitted, for example, incoming email traffic would have a rule which accepted connections on the [[Simple Mail Transfer Protocol|SMTP]] port, and then dropped others. A rule would be required which indicated that all established connections were also permitted so that outgoing connections would receive responses from other systems. ====INPUT chain==== The following example shows a simple packet filter for the '''INPUT''' chain for the above described example: Chain INPUT (policy DROP 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 0 0 ACCEPT all -- any any anywhere anywhere state ESTABLISHED 0 0 ACCEPT tcp -- any any anywhere anywhere tcp dpt:smtp 0 0 LOG all -- any any anywhere anywhere LOG level warning 0 0 DROP all -- any any anywhere anywhere The addition of an explicit '''DROP''' action ensures that the packets are discarded should the default policy of the '''INPUT''' chain accidentally be changed to '''ACCEPT'''. ====OUTPUT chain==== There is less need for an '''OUTPUT''' chain and the default ''policy'' of the '''OUTPUT''' chain can safely be set to '''ACCEPT'''. In some instances it may be desirable for a firewall to limit certain outgoing connections to a certain set of approved systems. This is known as [[egress filtering]] and may be used to prevent viruses within the firewall from escaping to other systems. For example, it may be the policy of a network to limit outgoing email connections to a single authorized email servers as a way of combating [[e-mail spam]]. This could be achieved by the following example: Chain OUTPUT (policy ACCEPT) pkts bytes target prot opt in out source destination 0 0 DROP tcp -- any any !server anywhere tcp dpt:smtp There is no need to include any other rules in this example as the default policy for the '''OUTPUT''' chain is '''ACCEPT'''. Note also that this rule assumes that the host which is acting as the firewall will not be sending email itself, such as to the email server. This is a good assumption as typically a firewall system contains the minimal amount of system code needed to act as a firewall. A more restrictive '''OUTPUT''' chain would contain permissive ('''ACCEPT''') entries for those services which may be accessed outside the firewall and then a restrictive ('''DROP''') policy for the chain itself. ==General== Secure network communication: *Layer 7: [[GNU Privacy Guard|GPG]]/[[Pretty Good Privacy|PGP]] *Layers 4,5: [[Transport Layer Security|SSL/TLS]]/[[Stunnel]]/[[S/MIME]] *Layer 3: [[Virtual private network|VPN]], [[IPsec]] *Layer 2: [[Point-to-point tunneling protocol|PPTP]] Packet sniffing: *[[tcpdump]], [[Wireshark]] Attacks: *[[Man in the middle attack]] *land [[ping of death]] xmas [[Denial-of-service attack]] et al. ==Advanced== *[[rootkit]]s, kernel modules, chkrootkit *exploit details, [[buffer overflow]]s, local vs remote * [[Security-Enhanced Linux]] ==Service details== *banners *[[Simple Mail Transfer Protocol|SMTP]] - [[e-mail spam|spam]] *[[Sendmail]] - banners help header version etc. *[[Domain Name System]] - reverse mapping dnssec ==External links== * [http://www.dsm.fordham.edu/~moniot/Classes/InternetWebF00/unix-security/unix-security.html ''The Unix Security Model for web server administration''] Robert K. Moniot 2000 * [http://www.alw.nih.gov/Security/Docs/network-security.html ''An Architectural Overview of UNIX Network Security''] Robert B. Reinhardt 1993 * [http://blog.anantshri.info/2007/08/27/how-to-change-root-password-in-debian/ a simple guide to change password in debian] - a must read for new administrators if they wish to avoid crackers. * [http://andercheran.aiind.upv.es/toni/unix/index_en.html Unix security papers] ==References== {{reflist}} ''Practical UNIX and Internet Security,'' Simson Garfinkel and Gene Spafford, O'Reilly & Associates, 2003. [[Category:Operating system security]] [[Category:System administration]] [[Category:Unix]] [[sk:Bezpečnosť v Unixe]]</text> </page> <page> <id>38991</id> <title>Unreal Engine 3</title> <text>{{Infobox software | name = Unreal Engine 3 | collapsible = | developer = [[Epic Games]] | programming language = [[C++]] | operating system = | platform = [[Microsoft Windows|Windows]], [[Linux]], [[Xbox]], [[Xbox 360]], [[PlayStation 3]], [[Mac OS X]], [[iOS (Apple)|iOS]] | genre = [[Game engine]] | website = http://www.epicgames.com/ }} '''Unreal Engine 3''' is a computer [[game engine]] developed by [[Epic Games]]. It is the third generation of [[Unreal Engine]] (UE3), designed for [[DirectX]] 9/10 [[Personal computer|PC]]s, the [[Xbox 360]], and the [[PlayStation 3]].<ref>[http://www.unrealtechnology.com/html/technology/ue30.shtml Unreal Technology]</ref> Its renderer supports many advanced techniques including [[High dynamic range rendering|HDRR]], [[per-pixel lighting]], and dynamic shadows, and builds upon the tools available in previous versions of the engine. Epic has used this version of the engine for their in-house games ''[[Unreal Tournament 3]]'', ''[[Gears of War]]'', and an improved version for ''[[Gears of War 2]]''. Due to aggressive licensing, this current iteration has garnered a great deal 