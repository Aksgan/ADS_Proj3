[[Macintosh Finder|Finder]] windows, menus, and controls. The A/UX Finder was not the same program as the [[System 7 (Macintosh)|System 7]] Finder, but a customized version adapted to run as a Unix [[Process (computing)|process]] and designed to interact with the Unix [[Kernel (computer science)|kernel]] and [[file system]]s. A/UX 3.x also included a '''CommandShell''' terminal program, which offered a [[command line interface]] to the underlying Unix system, a feature which had never been available on Macintosh computers running the classic [[Mac OS]] Finder. An [[X Window System]] server application (called '''MacX''') with a terminal program could also be used to interface with the system and run X applications directly in the Finder. Alternatively, the user could choose to run a full X11R4 session without the Finder. By including a [[compatibility layer]], A/UX could run [[Macintosh System]] 7.0.1, Unix, and "hybrid" [[Application software|application]]s. A hybrid application used both Macintosh and Unix system functions: for example, a Macintosh application which called Unix system functions, or a Unix application which called [[Macintosh Toolbox]] (e.g. [[QuickDraw]]) functions. The compatibility layer used some existing Toolbox functions in the computer’s [[Read-only memory|ROM]], while other function calls were translated into native Unix [[system call]]s. A/UX included a utility called '''Commando''' (similar to a tool of the same name included with [[Macintosh Programmer's Workshop|MPW]]) to assist users with entering [[Unix commands]]. Opening a Unix [[executable]] file from the Finder would open a [[dialog box]] that allowed the user to choose [[Command line interface|command-line]] options for the program using standard controls such as [[radio button]]s and [[check box]]es, and display the resulting command line [[Parameter (computer science)|argument]] for the user before executing the command or program. This feature was intended to ease the [[Experience curve effects|learning curve]] for users new to Unix, and decrease the user’s reliance on the [[Unix manual]]. A/UX users had one central source for most A/UX applications, a [[Server (computing)|server]] at [[NASA]] called “Jagubox” administered by [[Jim Jagielski]], who was also the editor of the A/UX [[FAQ]]. Although Jagubox is down, some [[Mirror (computing)|mirrors]] are still maintained. ==Decline== The last version of A/UX, 3.1.1, was released in 1995. A/UX ran only on 68k Apple machines with a floating point unit (FPU) and a paged memory management unit (PMMU).<ref>{{Cite web |url=http://www.kernelthread.com/mac/oshistory/4.html |title=Many Systems for Many Apples |first=Amit |last=Singh |publisher=Kernel Thread |date=February 2004}}</ref> Apple never [[Porting|ported]] A/UX to [[PowerPC]] Macintoshes (though A/UX 4.0 was rumored to have been an [[OSF/1]] adaptation), and the company all but abandoned it by 1996, preferring to use a slightly modified version of IBM’s [[AIX operating system|AIX]] system on their mid-90s [[Apple Network Server]]s. After [[Steve Jobs]] returned to Apple, another [[Unix-like]] operating system was introduced in the form of [[Mac OS X]], but it had very little in common with A/UX, instead being based on the [[BSD]]-derived [[NeXTSTEP]]. Aside from a few isolated servers still running it, A/UX is essentially extinct, and is considered to be [[abandonware]].{{Citation needed|date=April 2010}} {{Timeline of Macintosh operating systems}} ==References== {{reflist}} ==External links== *[http://www.faqs.org/faqs/aux-faq/ Official A/UX FAQ] *[http://christtrek.dyndns.org:8000/doc/aux/faq.html Unofficial A/UX FAQ] – updates the official FAQ from the 1998 version *[news:comp.unix.aux comp.unix.aux] newsgroup *{{dmoz|Computers/Software/Operating_Systems/Unix/A-UX/}} *[http://www.aux-penelope.com/ A/UX Penelope] – Some screenshots and a tutorial on A/UX installation and security *[http://www.kernelthread.com/mac/oshistory/4.html kernelthread.com] – A/UX in the context of a history of Apple’s Operating Systems *[http://applefritter.com/ui/aux/index.html The Unix for the rest of us?] – Screenshots and a general overview of the major features *[http://aux.preterhuman.net A/UX at preterhuman.net] - Screenshots and simple install guide {{Mac OS History}} {{Apple Inc. operating systems}} {{unix-like}} [[Category:Apple Inc. operating systems]] [[Category:A/UX| ]] [[Category:Discontinued operating systems]] [[de:A/UX]] [[es:A/UX]] [[fr:A/UX]] [[it:A/UX]] [[ko:A/UX]] [[nl:A/UX]] [[ja:A/UX]] [[no:A/UX]] [[pl:A/UX]] [[pt:A/UX]] [[ru:A/UX]] [[sv:A/UX]] [[zh:A/UX]]</text> </page> <page> <id>227</id> <title>A20 line</title> <text>{{refimprove|date=October 2010}} The '''A20''' or ''addressing line 20'' is one of the plethora of [[electrical]] lines that make up the [[system bus]] of an [[x86]]-based computer system. The A20 line in particular is used to transmit the 21st bit on the [[address bus]]. A microprocessor will typically have a number of addressing lines equal to the base-two [[logarithm]] of its physical addressing space. For example a processor with 4 [[Gibibyte|GiB]] of physical addressing space requires 32 lines, which are named A0 through A31. The lines are named after the number of the bit in the address they are transmitting. Thus, A0 will transmit the [[least significant bit]], which is bit 0. A20 transmits bit 21 and will become active once addresses reach 1 [[Mebibyte|MiB]] or 2<sup>20</sup>. [[File:IBM PC Memory areas.svg|thumb|right|The high memory area is available in real mode on 80286 processors if the A20 gate is not disabled]] == History == The early [[Intel 8086]], [[Intel 8088]], and [[Intel 80186]] processors had 20 address lines, numbered A0 to A19, with these the processor can access 2<sup>20</sup> bytes or 1 [[Mebibyte|MiB]]. The processors were designed to access only blocks ("segments") of 64 [[Kibibyte|KiB]] directly (64KiB = 2<sup>16</sup> - 16-bit offset). Which chunk of physical memory this offset actually pointed to, was pre-selected with a 16-bit "segment-register" which could be moved in steps of 16 bytes. The resulting address is equal to Segment * 16 + Offset. In consequence there were various ways to address the same byte in memory. Exemplary, four of 4096 different segment:offset combinations, all referencing the byte whose physical address is 0x000FFFFF (the last byte in 1 MiB-memory space), are: :F000:FFFF :FFFF:000F :F555:AAAF :F800:7FFF Referenced the last way, an increase of one in the offset yields F800:8000, which is a proper address for the processor, but since it translates to the physical address 0x00100000 (the first byte over 1 MiB) the processor would need another address-line to actually access this byte. Since such a line doesn't exist on the 8086 line of processors, the 21<sup>st</sup> bit above, while set, gets dropped, causing the address F800:8000 to "wrap around" and to actually point to the physical address 0x0000000. Because loading segment registers was very slow on early processors, this trick was used by some DOS programmers, for example, to have one segment that has access to program data (e.g. from F800:0000 to 