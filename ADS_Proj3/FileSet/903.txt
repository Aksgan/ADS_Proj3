upgraded to the [http://iccs.info International Conferences on Conceptual Structures (ICCS)], which have been held annually in Europe, Australia, North America and Asia (in 2010). Since the mid 1990s, the ICCS community has broadened its scope to include [[formal concept analysis]] (FCA) and other tools and languages for representing and reasoning about concepts. Following is a sample of some currently active researchers on conceptual graphs, many of whom combine CGs with FCA and other notations for logic. {{col-begin}} {{col-break}} * [http://lml.bas.bg/~galja/ Galia Angelova] &ndash; Bulgaria * [http://www.lirmm.fr/~baget/ Jean-François Baget] &ndash; France * [http://www.dit.hcmut.edu.vn/~tru/research.html Tru Cao] &ndash; Vietnam * [http://www.lirmm.fr/~chein/ Michel Chein] &ndash; France * [http://www.lirmm.fr/~croitoru/ Madalina Croitoru] &ndash; France * [http://www.saic.com/ Dan Corbett] &ndash; USA * [http://www.cs.uah.edu/~delugach/ Harry Delugach] &ndash; USA * [http://www.info.univ-angers.fr/pub/genest/ David Genest] &ndash; France * [http://www.inapg.fr/ Ollivier Haemmerle] &ndash; France * [http://sourceforge.net/projects/amine-platform Adil Kabbaj] &ndash; Morocco * [http://www.lboro.ac.uk/departments/co/people/acad_staff/kocura.html Pavel Kocura] &ndash; UK * [http://www.lirmm.fr/~leclere/ Michel Leclère] &ndash; France * [http://www.soe.ucsc.edu/%7Elevinson/ Robert Levinson] &ndash; USA * [http://www.phmartin.info/ Philippe Martin] &ndash; Australia * [http://www.ift.ulaval.ca/departement/professeurs/mineau_guy Guy Mineau] &ndash; Canada {{col-break}} * [http://communitysense.nl Aldo de Moor] &ndash; The Netherlands * [http://www.ift.ulaval.ca/~moulin/ Bernard Moulin] &ndash; Canada * [http://w3.ift.ulaval.ca/~memek1/ Mehdi Mekni] &ndash; Canada * [http://www.lirmm.fr/~mugnier/ Marie-Laure Mugnier] &ndash; France * [http://www.hum.aau.dk/~ulrikp/ Ulrik Petersen] &ndash; Denmark * [http://www.cs.nmsu.edu/~hdp/ Heather Pfeiffer] &ndash; USA * [http://homepages.gold.ac.uk/polovina/ Simon Polovina] &ndash; UK * [http://www.hum.aau.dk/~scharfe/ Henrik Schaerfe] &ndash; Denmark * [http://www.jfsowa.com/pubs/ John Sowa] &ndash; USA * [http://lml.bas.bg/~albena Albena Strupchanska] &ndash; Bulgaria * [http://www.kde.cs.uni-kassel.de/stumme Gerd Stumme] &ndash; Germany {{col-end}} ===Resources=== * [http://conceptualstructures.org Conceptual Structures Home Page] * [http://conceptualgraphs.org Conceptual Graphs Home Page] * [http://www.lirmm.fr/gbkrbook/ Graph-Based Knowledge Representation (book)] * [http://www.jfsowa.com/cg/ John F. Sowa] * [[John Sowa|Sowa, John F.]], [http://www.jfsowa.com/pubs/laws.htm "Laws, Facts, and Contexts: Foundations for Multimodal Reasoning"] * [http://www.huminf.aau.dk/cg/ University of Aalborg Online Course] * [http://www.lirmm.fr/cogui/ COGUI] * [http://cogitant.sourceforge.net/ COGITANT] [[Category:Knowledge representation]] [[de:Konzeptgraph]] [[es:Gráficos conceptuales]] [[fr:Graphe conceptuel]] [[it:Grafo concettuale]]</text> </page> <page> <id>7653</id> <title>Conceptual model (computer science)</title> <text>A [[mental model]] captures ideas in a [[problem domain]], while a conceptual model represents 'concepts' (entities) and relationships between them. A Conceptual model in the field of computer science is also known as a [[Domain_model|domain model]]. Conceptual modeling should not be confused with other modeling disciplines such as [[data modelling]], [[logical modelling]] and [[physical modelling]]. The conceptual model is explicitly chosen to be independent of design or implementation concerns, for example, concurrency or data storage. The aim of a conceptual model is to express the meaning of terms and concepts used by domain experts to discuss the problem, and to find the correct relationships between different concepts. The conceptual model attempts to clarify the meaning of various, usually ambiguous terms, and ensure that problems with different interpretations of the terms and concepts cannot occur. Such differing interpretations could easily cause confusion amongst stakeholders, especially those responsible for designing and implementing a solution, where the conceptual model provides a key artifact of business understanding and clarity. Once the domain concepts have been modeled, the model becomes a [[stability (software engineering)|stable]] basis for subsequent development of applications in the domain. The concepts of the conceptual model can be mapped into physical design or implementation constructs using either manual or [[Model-driven_development|automated code generation approaches]]. The realization of conceptual models of many domains can be combined to a coherent platform. A conceptual model can be described using various notations, such as [[Unified Modeling Language|UML]] or [[Object-modeling_technique|OMT]] for object modelling, or [[Information Engineering|IE]] or [[IDEF1X]] for [[Entity-relationship model|Entity Relationship Modelling]]. In UML notation, the conceptual model is often described with a [[class diagram]] in which [[class (computer science)|class]]es represent concepts, [[Association (object-oriented programming)|association]]s represent relationships between concepts and [[role type]]s of an association represent role types taken by instances of the modelled concepts in various situations. In ER notation, the conceptual model is described with an ER Diagram in which entities represent concepts, [[cardinality]] and [[optionality]] represent relationships between concepts. Regardless of the notation used, it is important not to compromise the richness and clarity of the business meaning depicted in the conceptual model by expressing it directly in a form influenced by design or implementation concerns. == Literature == * [[Martin Fowler|Fowler, Martin]]: Analysis Patterns, Reusable object models, Addison-Wesley Longman, 1997. ISBN 0-201-89542-0. [[Category:Object-oriented programming]] [[Category:Software requirements]] [[da:Objektorienteret analyse og design]] [[de:Objektorientierte Analyse]] [[de:Objektorientiertes Design]] [[it: Modello concettuale (informatica)|Modello concettuale (informatica)]]</text> </page> <page> <id>7654</id> <title>Conceptual schema</title> <text>A '''conceptual schema''' or ''conceptual [[data model]]'' is a map of [[concept]]s and their [[Relational model|relationship]]s. This describes the [[semantics]] of an organization and represents a series of [[Logical assertion|assertion]]s about its nature. Specifically, it describes the things of significance to an [[organization]] (''entity classes''), about which it is inclined to collect information, and characteristics of (''attributes'') and associations between pairs of those things of significance (''relationships''). == Overview == Because a conceptual schema represents the semantics of an organization, and not a [[database design]], it may exist on various levels of abstraction. The original [[ANSI]] four-schema architecture began with the set of ''external schemas'' that each represent one person's view of the world around him or her. These are consolidated into a single ''conceptual schema'' that is the superset of all of those external views. A data model can be as concrete as each person's perspective, but this tends to make it inflexible. If that person's world changes, the model must change. Conceptual data models take a more abstract perspective, identifying the fundamental things, of which the things an individual deals with are just examples. The model does allow for what is called [[Inheritance (computer science)|inheritance]] in [[object oriented]] terms. The set of [[Instantiation (computer science)|instance]]s of an entity class may be subdivided into entity classes in their own right. Thus, each instance of a ''sub-type'' entity class is also an instance of the entity class's ''super-type''. Each instance of the super-type entity class, then is also an instance of one of the sub-type entity classes. [[supertype|Super-type]]/[[subtype|sub-type]] relationships may be ''[[exclusive relationship|exclusive]]'' or not. A methodology may require that each instance of a super-type may ''only'' be an instance of ''one'' sub-type. Similarly, a super-type/sub-type relationship may be ''exhaustive'' or not. It 