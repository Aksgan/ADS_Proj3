that pixel. Each probe is often in itself a filtered MIP map sample, which adds more sampling to the process. Sixteen trilinear anisotropic samples might require 128 samples from the stored texture, as trilinear MIP map filtering needs to take four samples times two MIP levels and then anisotropic sampling (at 16-tap) needs to take sixteen of these trilinear filtered probes. ==Performance and optimization== The sample count required can make anisotropic filtering extremely [[memory bandwidth|bandwidth]]-intensive. Multiple textures are common; each texture sample could be four bytes or more, so each anisotropic pixel could require 512 bytes from texture memory, although [[texture compression]] is commonly used to reduce this. A display can easily contain over a million pixels, and the desired frame rate tends to be as high as 30–60 frames per second or more, so the texture memory bandwidth can get very high (tens to hundreds of gigabytes per second) very quickly. Fortunately, several factors mitigate in favor of better performance. The probes themselves share [[cache]]d texture samples, both inter- and intra-pixel. Even with 16-tap anisotropic filtering, not all 16 taps are always needed, because only distant highly oblique pixel fill tends to be highly anisotropic, and such fill tends to cover small regions of the screen, and finally magnification texture filters require no anisotropic filtering. ==See also== *[[Bilinear filtering]] *[[Trilinear filtering]] *[[Anti-aliasing]] == External links == * [http://www.extremetech.com/article2/0,1558,1152380,00.asp The Naked Truth About Anisotropic Filtering] [[Category:Texture filtering]] [[de:Anisotropes Filtern]] [[fr:Filtrage anisotrope]] [[hr:Anizotropno filtriranje]] [[it:Filtro anisotropico]] [[ja:異方性フィルタリング]] [[pl:Filtrowanie anizotropowe]] [[ru:Анизотропная фильтрация]] [[fi:Anisotrooppinen suodatus]] [[zh:各向异性过滤]]</text> </page> <page> <id>1936</id> <title>Anne Westfall</title> <text>{{BLP sources|date=November 2008}} '''Anne Westfall''' is an influential [[game programmer]] of the 1980s. She is the wife of fellow game programmer, [[game designer]] and [[entrepreneur]] [[Jon Freeman]].<ref name="halcyon">[http://www.dadgum.com/halcyon/BOOK/FREEFALL.HTM Interview with Jon Freeman and Anne Westfall] from ''Halcyon Days''</ref> ==Career== In 1981, Westfall and her husband Jon, left [[Epyx]], the [[video game developer]] and [[video game publisher|publisher]] her husband co-founded just three years earlier. Westfall cited a desire to learn [[assembly language]] and to work on the [[Atari 800#Original 400.2F800 series|Atari 800]] as one reason for their departure from Epyx.<ref name="halcyon" /> Together with game designer [[Paul Reiche III]], they started [[Free Fall Associates]] to make [[computer game]]s free of the politics existing at the now larger Epyx.<ref name="halcyon" /> For several years, Westfall was on the [[board of directors]] of the [[Game Developers Conference|Computer Game Developers Conference]]. ==Personal== Westfall met Jon at the [[West Coast Computer Faire]] in 1980 while demonstrating her surveying program she wrote for the [[TRS-80]]. Her booth was next to Automated Simulations' booth&mdash;later Epyx&mdash;where Jon was working. After dating for about six months, Freeman convinced Westfall to move closer and come to work at his company.<ref name="halcyon" /> ==References== {{Reflist}} ==External links== * [http://www.mobygames.com/developer/sheet/view/developerId=241/ MobyGames' entry on Westfall] {{DEFAULTSORT:Westfall, Anne}} [[Category:Video game programmers]] [[Category:Living people]]</text> </page> <page> <id>1939</id> <title>Annotated reference manual</title> <text>{{Unreferenced|date=November 2006}} {{Orphan|date=February 2009}} An '''annotated reference manual''' is the definitive reference manual for a computer programming language (the [[Programming language reference|Language Reference Manual]] plus annotations to clarify special issues). The two most well known Annotated Reference Manuals are: * [[Annotated Ada Reference Manual]] * [[Annotated C++ Reference Manual]] [[Category:Programming language topics|Specification]] {{compu-lang-stub}}</text> </page> <page> <id>1948</id> <title>Anomaly-based intrusion detection system</title> <text>An '''Anomaly-Based''' [[intrusion-detection system|Intrusion Detection System]], is a system for detecting computer intrusions and misuse by monitoring system activity and classifying it as either ''normal'' or ''anomalous''. The classification is based on [[heuristics]] or rules, rather than patterns or [[signature]]s, and will detect any type of misuse that falls out of normal system operation. This is as opposed to signature based systems which can only detect attacks for which a signature has previously been created. In order to determine what is attack traffic, the system must be taught to recognise normal system activity. This can be accomplished in several ways, most often with [[artificial intelligence]] type techniques. Systems using [[neural networks]] have been used to great effect. Another method is to define what normal usage of the system comprises using a strict mathematical model, and flag any deviation from this as an attack. This is known as strict anomaly detection. ==See also== * [[Change detection]] * [[Cfengine]] - 'cfenvd' can be utilized to do anomaly detection * [[RRDtool]] - can be configured to flag anomalies ==References== * [ftp://ftp.cerias.purdue.edu/pub/papers/sandeep-kumar/kumar-intdet-phddiss.pdf CLASSIFICATION AND DETECTION OF COMPUTER INTRUSIONS] thesis by Sandeep Kumar for Purdue University August 1995 * [http://artofhacking.com/files/phrack/phrack56/P56-11.TXT A strict anomaly detection model for IDS, Phrack 56 0x11, Sasha/Beetle] * [http://cricket.sourceforge.net/aberrant/rrd_hw.htm Notes on RRDTOOL implementation of Aberrant Behavior Detection] {{DEFAULTSORT:Anomaly-Based Intrusion Detection System}} [[Category:Computer security]] [[Category:Computer network security]] {{compu-network-stub}} [[be:Выяўленне анамалій]] [[it:Anomaly based intrusion detection system]] [[ru:Обнаружение аномалий]]</text> </page> <page> <id>1949</id> <title>Anomaly detection</title> <text>'''Anomaly detection''', also referred to as '''outlier detection'''<ref>{{cite journal | author=[[Hans-Peter Kriegel]], Peer Kröger, Arthur Zimek | title=Outlier Detection Techniques (Tutorial) | journal=13th Pacific-Asia Conference on Knowledge Discovery and Data Mining (PAKDD 2009) | location=Bangkok, Thailand | year=2009 | url=http://www.dbs.ifi.lmu.de/Publikationen/Papers/tutorial_slides.pdf | accessdate=2010-06-05 }}</ref> refers to detecting patterns in a given data set that do not conform to an established normal behavior.<ref>Varun Chandola, Arindam Banerjee, and Vipin Kumar, [http://www.cs.umn.edu/~kumar/papers/anomaly-survey.php Anomaly Detection: A Survey], ACM Computing Surveys, Vol. 41(3), Article 15, July 2009</ref> The patterns thus detected are called anomalies and often translate to critical and actionable information in several application domains. Anomalies are also referred to as [[outlier]]s, surprise, aberrant, deviation, peculiarity, etc. Three broad categories of anomaly detection techniques exist. Supervised anomaly detection techniques learn a classifier using labeled instances belonging to normal and anomaly class, and then assign a normal or anomalous label to a test instance. Semi-supervised anomaly detection techniques construct a model representing normal behavior from a given normal training data set, and then test the likelihood of a test instance to be generated by the learnt model. Unsupervised anomaly detection techniques detect anomalies in an unlabeled test data set under the assumption that majority of the instances in the data set are normal. == Applications== Anomaly detection is applicable in a variety of domains, such as [[intrusion detection]], [[fraud detection]], fault detection, system 