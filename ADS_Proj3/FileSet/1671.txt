for the integration process. Process representation of methodologies should employ the relevant modelling language discussed below. === Generic Enterprise-Modelling Language === ''Generic enterprise modelling languages'' (GEML) define generic constructs (building blocks) for [[enterprise modelling]]. Generic constructs which represent the different elements of the operation improve both modelling efficiency and model understanding. These constructs have to be adapted to the different needs of people creating and using enterprise models. Therefore different languages may exist which accommodate different users (e.g. business users, system designers, IT modelling specialists, others).<ref name="Nell97"/> Modelling the enterprise operation means to describe its processes and the necessary information, resources and organisational aspects. Therefore modelling languages have to provide constructs capable of capturing the semantics of enterprise operations. This is especially important if enterprise models are to support the enterprise operation itself. Model-based decision support and model-driven operation control and monitoring require modelling constructs which are supporting the end users and which represent the operational processes according to the users perception. Modelling languages increase the efficiency of enterprise modelling. In addition they allow a common representation of the enterprise operation. Modelling languages have to support the modelling of all entity types across all phases of their respective life cycles. In addition, modelling languages have to provide generic constructs as well as macro constructs (GEMs) build from generic ones. The latter will further enhance modelling productivity. === Generic Enterprise-Modelling Tool === ''Generic enterprise modelling tools'' (GEMT) define the generic implementation of the [[enterprise integration]] methodologies and [[modelling language]]s and other support for creation and use of [[enterprise model]]s. Modelling tools should provide user guidance for both the modelling process itself and for the operational use of the models. Therefore enterprise modelling tools designs have to encompass not only the modelling methodology, but should provide model enactment capability for simulation of operational processes as well. The latter should also include analysis and evaluation capabilities for the simulation results.<ref name="Nell97"/> === Enterprise Models === ''Enterprise models'' (EMs) represent the enterprise operation mostly in the form of [[business process]]es. However, in certain cases other representations may be suitable as well. Business processes will be represented using the generic modelling-language constructs defined above for the relevant engineering methodology. Enterprise operations are usually rather complex and therefore difficult to understand if all relevant aspects of the operation are represented in a common model. To reduce the model complexity for the user, different views should be provided which allow the users only to see the aspect of concern.<ref name="Nell97"/> === Ontological Theories === ''Ontological theories'' (OT) formalise the most generic aspects of enterprise related concepts in terms of essential properties and axioms. [[Ontological theories]] may be considered as '[[meta-model]]s' since they consider facts and rules about the facts and rules of the enterprise and its models.<ref name="Nell97"/> === Generic Enterprise Models === ''Generic enterprise models'' (GEMs) identify [[reference model]]s (partial models) which capture concepts common to many enterprises. GEMs will be used in enterprise modelling to increase modelling process efficiency.<ref name="Nell97"/> === Generic Modules === ''Generic Modules'' (GMs) identify generally applicable products to be employed in [[enterprise integration]] (e.g. tools, integrating infrastructures, others.).<ref name="Nell97"/> == See also == * [[Computer Integrated Manufacturing]] * [[CIMOSA]] * [[Functional Software Architecture]] * [[ISO 19439]] == References == {{NIST-PD}} {{reflist}} == Further reading == * [[Fran√ßois Vernadat|F.B. Vernadat]] (1996). "Enterprise Modeling and Integration: Principles and Applications", Chapman & Hall, London. ISBN 0-412-60550-3 * T.J. Williams and Hong Li, ''A Specification and Statement of Requirements for GERAM (The Generalised Enterprise Reference Architecture and Methodology) with all Requirements illustrated by Examples from the Purdue Enterprise Reference Architecture and Methodology PERA'', REPORT NUMBER 159 Purdue Laboratory for Applied Industrial Control November 1995, Version 1.1 * D. Shorter, Editor, "An evaluation of CIM modelling constructs - Evaluation report of constructs for views according to ENV 40 003", In: ''Computers in Industry'' - Vol. 24, Nrs 2-3 * T.J. Williams, et al., "Architectures for integrating manufacturing activities and enterprises", In: ''Computers in Industry'' - Vol. 24, Nrs 2-3 * ''ENV 40 003 Computer Integrated Manufacturing'' - Systems Architecture - Framework for Enterprise Modelling CEN/CENELEC, 1990 * ''ENV 12 204 Advanced Manufacturing Technology'' - Systems Architecture - Constructs for Enterprise Modelling CEN TC 310/WG1, 1995 * Charles J. Petrie, Jr (1992). ''Enterprise Integration Modelling; ICEIMT Conference Proceedings'', The MIT Press. ISBN 0-262-66080-6 == External links == {{Commonscat|GERAM}} * [http://www.cit.gu.edu.au/~bernus/taskforce/geram/versions/geram1-6-3/v1.6.3.html GERAM: Generalised Enterprise Reference Architecture and Methodology Version 1.6.3]. by [[Peter Bernus]], March 1999. [[Category:Enterprise modelling]] [[Category:Reference models]]</text> </page> <page> <id>14951</id> <title>Generalised metric</title> <text>In mathematics, the concept of a '''generalised metric''' is a generalisation of that of a [[metric space|metric]], in which the distance is not a [[real number]] but taken from an arbitrary [[ordered field]]. In general, when we define [[metric space]] the distance function is taken to be a real-valued [[function (mathematics)|function]]. The real numbers form an ordered field which is [[archimedean_property|Archimedean]] and [[complete_ordered_field|order complete]]. So, the metric spaces have some nice properties like: in a metric space compactness, sequential compactness and countable compactness are equivalent etc etc. These properties may not, however, hold so easily if the distance function is taken in an arbitrary ordered field, instead of in <math>\scriptstyle \mathbb R</math>. ==Preliminary definition== Let <math>(F,+,\cdot,<)</math> be an arbitrary ordered field, and <math>M</math> a nonempty set; a function <math>d :M\times M\to F^+\cup\{0\}</math> is called a metric on <math>M</math>, iff the following conditions hold: # <math>d(x,y)=0\Leftrightarrow x=y</math>; # <math>d(x,y)=d(y,x)</math>, commutativity; # <math>d(x,y)+d(y,z)\le d(x,z)</math>, triangle inequality. It is not difficult to verify that the open balls <math>B(x,\delta)\;:=\{y\in M\;:d(x,y)<\delta\}</math> form a basis for a suitable topology, the latter called the '''''metric topology''''' on <math>M</math>, with the metric in <math>F</math>. In view of the fact that <math>F</math> in its order topology is [[monotonically normal]], we would expect <math>M</math> to be at least [[Regular_space|regular]]. == Further properties == However, under [[axiom of choice]], every general metric is [[monotonically normal]], for, given <math>x\in G</math>, where <math>G</math> is open, there is an open ball <math>B(x,\delta)</math> such that <math>x\in B(x,\delta)\subseteq G</math>. Take <math>\mu(x,G)=B(x,\delta/2)</math>. Verify the conditions for Monotone Normality. The matter of 