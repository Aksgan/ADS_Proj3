places or products; or complex [[data structure]]s representing compound [[Object (computer science)|objects]] such as clients, investments, [[Account (accountancy)|accounts]], meetings or legal matters. A variable has three essential attributes: a symbolic name (also known as an [[identifier]]), a data location (generally in storage or memory, identified by [[address]] and [[length]]), and a [[value (computer science)|value]], represented by the data contents of that location. These attributes are often assigned at separate times during the program execution. In some programming languages, non-identical identifiers can simultaneously refer to the same variable, location and value. Variables often also have a fourth attribute, a [[Data type|type]] which specifies the kind of information the variable stores. Variable type defines the format in which its value is to be stored, the amount of memory it occupies and the way its contents can be manipulated and expressed. A variable can be typed as a [[Scalar (computing)|scalar]] or [[Array data type|array]], or as a more specific subtype (e.g., integer, currency, string, boolean, etc.), or as any other object or [[Class (computer science)|class]] of objects defined elsewhere, depending on what is supported by the [[programming language]]. [[compiler (computing)|Compilers]] and [[Interpreter (computing)|interpreters]] of computer code have to replace the variables' symbolic names by the actual locations of the data. While the variable name, type and location generally remain fixed, the data stored in the location may alter during program execution. ==Identifiers referencing a variable== An identifier referencing a variable can be used to access the variable in order to read out the value, or alter the value, or modify the [[Attribute (computing)|attributes]] of the variable, such as access permission, [[Lock (computer science)|locks]], [[Semaphore (programming)|semaphores]], etc. For instance, a variable might be referenced by the identifier "<code>total_count</code>" and the variable can contain the number 1956. If the same variable is referenced by the identifier "<code>x</code>" as well, and if using this identifier "<code>x</code>", the value of the variable is altered to 2009, then reading the value using the identifier "<code>total_count</code>", the result is 2009 and not 1956. If in a particular programming language a variable can only be referenced by a single identifier, that can simply be called ''the name of the variable''. Otherwise we can talk about ''one of the names of the variable''. For instance, in the previous example, the "<code>total_count</code>" is a name of the variable in question, and "<code>x</code>" is another name of the same variable. ==Actions on a variable== In [[imperative programming|imperative]] [[programming language]]s, values can generally be [[Dereference|accessed]] or [[Assignment (computer science)|changed]] at any time. However, in [[Pure function|pure]] [[functional programming|functional]] and [[logic programming|logic language]]s, variables are [[Free variables and bound variables|bound]] to expressions and keep a single value during their entire [[Scope (programming)|lifetime]] due to the requirements of [[referential transparency (computer science)|referential transparency]]. In imperative languages, the same behavior is exhibited by [[constant (programming)|constant]]s, which are typically contrasted with normal variables. Depending on the [[type system]] of a programming language, variables may only be able to store a specified [[datatype]] (e.g. [[Integer (computer science)|integer]] or [[string (computer science)|string]]). Alternatively a datatype may be associated only with the current value, allowing a single variable to store anything supported by the programming language. ==Naming conventions== {{Main|Naming conventions (programming)}} {{See also|Identifier|Namespace (computer science)}} Unlike their mathematical counterparts, programming variables and constants commonly take multiple-character names, e.g. <code>COST</code> or <code>total</code>. Single-character names are most commonly used only for auxiliary variables; for instance, <code>i</code>, <code>j</code>, <code>k</code> for [[Array data type|array]] index variables. Some naming conventions are enforced at the language level as part of the language syntax and involve the format of valid identifiers. In almost all languages, variable names cannot start with a digit (0-9) and cannot contain whitespace characters. Whether, which, and when punctuation marks are permitted in variable names varies from language to language; many languages only permit the underscore (_) in variable names and forbid all other punctuation. In some programming languages, specific (often punctuation) characters (known as [[sigil (computer programming)|sigil]]s) are prefixed or appended to variable identifiers to indicate the variable's type. [[Case-sensitivity]] of variable names also varies between languages and some languages require the use of a certain case in naming certain entities;<ref group="note">For example, [[Haskell (programming language)|Haskell]] requires that names of types start with a capital letter.</ref> Most modern languages are case-sensitive, some older languages are not. Some languages reserve certain forms of variable names for their own internal use; in many languages, names beginning with 2 underscores ("__") often fall under this category. However, beyond the basic restrictions imposed by a language, the naming of variables is largely a matter of style. At the machine code level, variable names are not used, so the exact names chosen do not matter to the computer. Thus names of variables identify them, for the rest they are just a tool for programmers to make programs easier to write and understand. Programmers often create and adhere to code style guidelines which offer guidance on naming variables or impose a precise naming scheme. Shorter names are faster to type but are less descriptive; longer names often make programs easier to read and the purpose of variables easier to understand. However, extreme verbosity in variable names can also lead to less comprehensible code. ==In spreadsheets== In a [[spreadsheet]], a cell may contain a [[formula]] with [[cell reference|references to other cells]]. Such a cell reference is a kind of variable; its value is the value of the referenced cell (see also: [[reference (computer science)]]). ==Scope and extent== <!-- Note: Please do not change this header, cross-referenced from [[scope (programming)]]. --> {{See also|Free variables and bound variables}} The ''[[scope (programming)|scope]]'' of a variable describes where in a program's text, the variable may be used, while the ''extent'' (or ''lifetime'') describes when in a program's execution a variable has a (meaningful) value. The scope of a variable is actually a property of the name of the variable, and the extent is a property of the variable itself. A variable name's ''scope'' affects its ''extent''. ''Scope'' is a [[Lexical variable scoping#Static scoping|lexical]] aspect 