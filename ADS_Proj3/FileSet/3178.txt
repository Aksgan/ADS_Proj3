the company that created the operating system for the original [[iPod]]. Speculation continued for several years that Apple might release a new PDA with some Newton technology or collaborate with Palm. Feeding a bit of speculation, Apple put the "Print Recognizer" part of the Newton 2.1 handwriting recognition system into [[Mac OS X]] version 10.2 (known as "Jaguar"). It can be used with graphics tablets to seamlessly input handwritten printed text anywhere there was an insertion point on the screen. This technology, known as "[[Inkwell (Macintosh)|Inkwell]]", appears in the System Preferences whenever a tablet input device is plugged in. An [[Easter egg (virtual)|Easter egg]] in Print Recognizer on the Newton (write "ROSETTA! ROSETTA! ROSETTA!", and the Newton will insert "ROSETTA! ROSETTA! Hey, that's me!" instead) was present in Inkwell in Mac OS 10.2 and 10.3, but seems to have been removed in 10.4. Larry Yaeger was the author of the original Rosetta recognizer on the Newton, and was also responsible for porting it to Mac OS X.<ref>http://wwnc.newtontalk.net/2004/program/larryyaeger/slides-larryyaeger.pdf</ref> The [[Rosetta (software)|Rosetta]] name was later used for Apple's [[PowerPC]] emulation layer for [[Intel]]-based Macs. At an All Things Digital conference in 2004, Steve Jobs made reference to a new "Apple PDA" (perhaps a successor to the Newton) which the company had developed but had decided not to bring to market.<ref>[http://www.appleinsider.com/articles/04/06/07/jobs_apple_developed_but_did_not_ship_apple_pda.html AppleInsider | Jobs: Apple developed, but did not ship Apple PDA<!-- Bot generated title -->]</ref> The tablet eventually evolved into the iOS product family{{Citation needed|date=November 2010}}. === Newton emulation === Since 2004, the Einstein Project<ref>[http://www.kallisys.com/newton/einstein/ Kallisys | Newton | Einstein Project<!-- Bot generated title -->]</ref> has been working on emulating the Newton for use as an alternate OS on other platforms. It is currently available for the Sharp [[Zaurus]], Apple's [[Mac OS X]], Nokia [[Nokia 770|770]] and [[Nokia N800|N800]], [[Microsoft Windows]] and the [[Pepper Pad|PepperPad]] 3. The emulator is an open source project, but requires an original Newton ROM to be installed in order to function. Since September 2010 Einstein also runs on iPhones and iPads. ===Future=== Since the release of [[iPhone|Apple's iPhone]] in 2007, many people{{Who|date=March 2010}} consider that the Newton was influential in its development. Some refer to the Newton as the iPhone's grandfather. A possible Newton revival has been a common source of speculation among the Macintosh user base; when patents for a tablet based Macintosh were applied for,<ref>[http://www.appleinsider.com/article.php?id=600 Appleinsider, ''Euro filing reveals Apple handheld design images'', August 13, 2004]</ref> rumor sites jumped at the possibility of a new [[Tablet PC]] style Macintosh. In September 2009, Michael Tchao, one of the Newton's marketing product champions, returned to Apple.<ref>[http://bits.blogs.nytimes.com/2009/09/28/apple-rehires-newton-and-nike-marketing-whiz/ ''Apple Rehires a Developer of Its Newton Tablet'',September 28, 2009]</ref> On January 27, 2010, Apple announced the [[iPad]]. The iPad is Apple's second [[Tablet Computer]]. == References == {{Reflist|2}} ==External links== {{External links|May 2007|date=July 2009}} {{Commons|Apple Newton}} ===Newton technical documents for programmers=== NewtonScript Programming: [[NewtonScript]] is the native programming language for all MessagePads *[http://newton.vyx.net/documentation/COMPCON-Arch.pdf The Newton Application Architecture] *[http://newton.tek-ed.com/NewtonToolKit_win/NTK/Winntk16.pdf Newton Tool Kit (NTK) Integrated Development Environment Manual] *[http://home.satx.rr.com/dumbstart/tutorial/tutorial1.htm A quick introduction to programming in NewtonScript using NTK] *[http://www.newted.org/manuals/NewtonScriptProgramLanguage.pdf The NewtonScript Programming Language (Apple Manual).] *[http://www.newted.org/manuals/NewtonProgrammerGuide20.pdf Newton Programmer's Guide, OS 2.0] *[http://www.newted.org/manuals/NewtonProgrammerGuide21Add.pdf Newton Programmer's Guide, OS 2.1 Addendum] *[http://www.newted.org/manuals/NewtonProgrammerRef20.pdf Newton Programmer's Reference, OS 2.0] *[http://www.newted.org/manuals/NewtonOS21EngDoc.pdf Newton OS 2.1 Engineering Documents] *[http://waltersmith.us/wp-content/uploads/2005/12/OOPSLA95.pdf Explanation of NewtonScript Prototyping] *[http://www.newted.org/manuals/Newton20UIGuide.pdf Newton User Interface Specification Guide] ===General historical information on pen computing=== *[http://users.erols.com/rwservices/pens/penhist.html Notes on the (relatively unknown) History of Pen-based Computing] *[http://rwservices.no-ip.info:81/biblio.html Annotated Bibliography in Pen Computing] ===Earlier Apple systems=== {{Apple hardware before 1998}} {{DEFAULTSORT:Newton (Platform)}} [[Category:Apple Newton]] [[Category:1993 introductions]] [[Category:Apple personal digital assistants]] [[Category:Handwriting recognition]] [[Category:Personal digital assistant software]] [[ca:Apple Newton]] [[cs:Apple Newton]] [[de:Newton (PDA)]] [[es:Apple Newton]] [[fr:Apple Newton]] [[ko:뉴턴 (컴퓨터)]] [[it:Famiglia Newton (Apple)]] [[nl:Apple Newton]] [[ja:アップル・ニュートン]] [[no:Apple Newton]] [[nn:Apple Newton]] [[pl:Newton (komputer)]] [[pt:Apple Newton]] [[ru:Apple Newton]] [[sk:Apple Newton]] [[sv:Newton (PDA)]] [[tr:Apple Newton]] [[zh:Apple Newton]]</text> </page> <page> <id>26361</id> <title>Next-bit test</title> <text>In [[cryptography]] and the [[theory of computation]], the next-bit test<ref name="yao82">[[Andrew Chi-Chih Yao]]. [http://www.busim.ee.boun.edu.tr/~mihcak/teaching/ee684-spring07/proposed-project-papers/one-way-functions/Yao-XOR-Lemma-and-Hard-Core-Predicates/Yao-XOR-original.pdf Theory and applications of trapdoor functions]. In Proceedings of the 23rd IEEE Symposium on Foundations of Computer Science, 1982.</ref> is a test against [[Pseudo-random | pseudo-random number generators]]. We say that a sequence of bits passes the next bit test for at any position <math>i</math> in the sequence, if an attacker knows the <math>i</math> first bits, he cannot predict the <math>(i+1)</math>st with reasonnable computational power. == Precise statement(s) == Let <math>P</math> be a polynomial, and <math>S=\{S_k\}</math> be a collection of sets such that <math>S_k</math> contains <math>P(k)</math>-bit long sequences. Moreover, let <math>\mu_k</math> be the [[probability distribution]] of the strings in <math>S_k</math>. We now define the next-bit test in two different ways. ===Boolean circuit formulation=== A predicting collection<ref>[[Manuel Blum]] and [[Silvio Micali]], How to generate cryptographically strong sequences of pseudo-random bits, in SIAM J. COMPUT., Vol. 13, No. 4, November 1984</ref> <math>C=\{C_k^i\}</math> is a collection of [[boolean circuits]], such that each circuit <math>C_k^i</math> has less than <math>P_C(k)</math> gates and exactly <math>i</math> inputs. Let <math>p_{k,i}^C</math> be the probability that, on input the <math>i</math> first bits of <math>s</math>, a string randomly selected in <math>S_k</math> with probability <math>\mu_k(s)</math>, the circuit correctly predicts <math>s_{i+1}</math>, i.e. : <center> <math> p_{k,i}^C={\mathcal P} \left[ C_k(s_1\ldots s_i)=s_{i+1} \right | s\in S_k\text{ with probability }\mu_k(s)] </math> </center> Now, we say that <math>\{S_k\}_k</math> passes the next-bit test if for any predicting collection <math>C</math>, any polynomial <math>Q</math> : <center> <math>p_{k,i}^C<\frac{1}{2}+\frac{1}{Q(k)}</math> </center> ===Probabilistic Turing machines=== We can also define the next-bit test in terms of probabilistic Turing machines, although this definition is somewhat stronger (see [[P/poly#Adleman's theorem|Adleman's theorem]]). Let <math>\mathcal M</math> be a probabilistic Turing machine, working in polynomial time. Let <math>p_{k,i}^{\mathcal M}</math> be the probability that <math>\mathcal M</math> predicts the <math>(i+1)</math>st bit correctly, i.e. <center> <math>p_{k,i}^{\mathcal M}={\mathcal P}[M(s_1\ldots s_i)=s_{i+1} | s\in S_k\text{ with probability }\mu_k(s)]</math> </center> We say that collection <math>S=\{S_k\}</math> passes the next-bit test if for all polynomial <math>Q</math>, for all but finitely many <math>k</math>, for all <math>0<i<k</math>: <center> <math> p_{k,i}^{\mathcal M}<\frac{1}{2}+\frac{1}{Q(k)} </math> </center> == Completeness for Yao's test == The next-bit test is a particular case of [[Yao's test]] for random sequences, and passing it is therefore a [[necessary condition]] for passing 