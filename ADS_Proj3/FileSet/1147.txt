*Establish that operational documentation is complete and represents the system configuration and its planned modes of operation *Establish that the training function is in place and has demonstrated capability to support all aspects of system maintenance, preparation, operation, and recovery. ;Flight Readiness Review The FRR examines tests, demonstrations, analyses, and audits that determine the system's readiness for a safe and successful flight or launch and for subsequent flight operations. It also ensures that all flight and ground hardware, software, personnel, and procedures are operationally ready. The following are typical objectives of a FRR: *Receive certification that flight operations can safely proceed with acceptable risk. *Confirm that the system and support elements are properly configured and ready for launch. *Establish that all interfaces are compatible and function as expected. *Establish that the system state supports a launch "go" decision based on go/no-go criteria. == See also == * [[Critical path method]] * [[Technical peer review]] * [[Systems Development Life Cycle]] * [[Engineering design process]] == References == {{Reflist}} [[Category:Engineering]] [[Category:Project management]] [[Category:NASA technology spinoffs]] [[Category:Systems engineering]]</text> </page> <page> <id>10061</id> <title>Designbox</title> <text>{{Infobox Software | name = Designbox for Visual Studio | developer = [[StudioWorks Software, LLC]] | latest_release_version = 2.2.1 (for VS 2005/2008/2010) | latest_release_date = {{release date|2010|08|08}} | latest_preview_version = none | latest_preview_date = | operating_system = [[Microsoft Windows]] | genre = [[Microsoft]] [[Microsoft Visual Studio|Visual Studio]] [[Plug-in (computing)|add-on]] for .NET 2005, 2008, and 2010 | license = commercial, $249 | website = http://www.studioworkssoft.com }} '''Designbox for Visual Studio''' is a [[User interface|UI]] design productivity tool for [[Microsoft Visual Studio]]. It adds a new toolbox window that can associate initial property values with control items. It then applies these initial values to the control each time that control is drag and dropped onto the Form Designer. Designbox also includes the Design Gallery window that is used to apply pre-defined designs to existing controls. Designbox currently supports .NET [[WinForms|Windows Forms]] applications and works with all the major WinForms control suites from third-party vendors such as [[ComponentOne]], Developer Express, Infragistics, Telerik and [[Syncfusion]]. ==Features== * The Designbox Window - A toolbox that stores property/value designs for control classes. Developers can then drag-and-drop these designs onto the WinForms Form Designer to create initialized controls. * The Design Gallery - A Visual Studio tool window that allows developers to browse through and apply control designs. * Design by Example - The ability to create designs from an existing control that exemplifies that design. * WinForms to Xml Conversion - Designbox uses a custom WinForms to Xml translator that converts WinForms forms and controls to Xml. <!--== References ==--> {{Reflist}} ==External links== * [http://www.studioworkssoft.com StudioWorks Designbox website] * [http://www.studioworkssoft.com/community/palettes.aspx Community Design Galleries for third-party control suites] * [http://helpcentral.componentone.com/Article.aspx?ID=1948 A Better Way to Design and Style Applications Using ComponentOne Studio and Designbox] <!--- Categories ---> [[Category:Integrated development environments]] [[Category:.NET programming tools]] [[Category:Visual Studio extensions]] {{programming-software-stub}}</text> </page> <page> <id>10067</id> <title>Desk Accessory</title> <text>'''Desk Accessory''' (DA) is a small helper-type application that can be run concurrently with any other application on the system. Early examples, such as [[SideKick]] or Macintosh Desk Accessories used special programming models to provided a small degree of [[computer multitasking|multitasking]] on a system that initially did not have any other multitasking ability. ==Personal Information Managers== Early [[personal information managers]], such as Borland's [[SideKick]] or [[Norton Desktop]] provided pop-up calculator, alarm, calendar and other functions for single-tasking operating systems like MS-DOS using [[Terminate and Stay Resident|terminate and stay resident]] techniques. ==Apple Macintosh== [[image:DA Mac 1.png|thumb|right|400px|Early Macintosh Desk Accessories]] Introduced in 1984, as part of the [[Mac OS|operating system]] for the [[Apple Macintosh]] computer, a Desk Accessory (DA) was a piece of [[software]], originally written as a device driver, conforming to a particular programming model. The purpose of this model was to permit very small helper-type applications to be run concurrently with any other application on the system. This provided a small degree of [[computer multitasking|multitasking]] on a system that initially did not have any other multitasking ability. Within the OS, the DA was in fact implemented as a special class of [[device driver|driver]]. It was installed in the driver queue, and given time periodically and co-operatively as a result of the host application calling ''SystemTask()'' within its [[main loop]]. A DA was permitted to have a user-interface as long as it was confined to one main window. A special appearance of window frame was reserved for the use of DAs so that the user could distinguish it from the windows of the hosting application. Typical early DAs included the Calculator and Alarm Clock. Third-party DAs such as spelling checkers could be purchased. It was considered hard to write a DA, especially early on when there was little in the way of developer tools. However, since on the early Mac OS drivers did not have any special privileges, writing a DA was, with practice, no more difficult than any other application. A special '''Font/DA Mover''' utility was used to change the configuration of DAs. Because DAs were not installed or launched in the same way that applications were, the user could not drag and drop DAs into or out of the system. They resided in the ''System'' file's 'DRVR' [[resource fork|resources]], like actual drivers, though they could theoretically be installed in any file whose resources were loaded into the memory, and were stored in [[suitcase (Macintosh)|"suitcases"]] when not installed in the system file. As a resource numbering scheme was implemented for marking resources as belonging to another resource of some particular type and number in the same file, such as a DA ('DRVR'), it was possible for desk accessories to have a limited "resource fork" of their own within the file they were contained in; the mover utility recognised such resources and moved them along with the actual DA code resource they were associated with. With the advent of [[System 7 (Macintosh)|System 7]], which included a standard [[co-operative multitasking]] feature, the need for DAs diminished greatly, and developers were encouraged to develop small applications instead. The system continued 