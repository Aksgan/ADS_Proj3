Esperanto within two weeks, due to optimized learning exercises. The software uses listening tests of all used words to train pronunciation and listening comprehension. The user can record their attempts at speaking [[Esperanto]] with a [[microphone]] and compare them with the examples. Sound samples include songs available for singing along with, by the Brazilian pop music band Merlin among others. At the end of each unit, and for certification of the whole Esperanto course the user can pass an examination and utilize a special feature of this course: the tests can be given to course leaders to be corrected free of charge. This correction service is provided by volunteers of the [[Esperanto movement]] including the German Esperanto youth organization. ''Kurso de Esperanto'' is based on a 10 hour course developed by the Quebec Esperanto Society and some other courses. The language course works with both [[Microsoft Windows|Windows]] systems and the numerous [[Linux]] [[Linux distribution|distributions]]. At the moment <small>(February 2006)</small> there is version '''3.0''' for Linux and version '''3.2''' for Windows. ''Kurso de Esperanto'' is already in more than 23 languages. There are many volunteers working to increase this number. The translation process of the Esperanto course is simplified by a program called ''tradukilo'' that is also available for free download. == External links == * '''[http://www.kurso.com.br/ Kurso de Esperanto website]''' * [http://www3.sympatico.ca/esperanto/esk.htm Quebec Esperanto Society] ([http://www3.sympatico.ca/esperanto/english-an.htm English]) * [http://purl.oclc.org/net/pmeg Plena Manlibro de Esperanta Gramatiko] - another source for Kurso de Esperanto {{DEFAULTSORT:Kurso De Esperanto}} [[Category:Esperanto education]] [[Category:Language learning software]] [[Category:Learning]] [[eo:Kurso de Esperanto]] [[pt:Kurso de Esperanto]]</text> </page> <page> <id>20874</id> <title>Kuwaiti algorithm</title> <text>The '''Kuwaiti algorithm''' is used by [[Microsoft]] to convert between [[Gregorian calendar]] dates and [[Islamic calendar]] dates.<ref>[http://www.microsoft.com/globaldev/DrIntl/columns/002/default.mspx#EAD Hijri Dates in SQL Server 2000] from Microsoft</ref><ref>Kriegel, Alex, and Boris M. Trukhnov. SQL Bible. Indianapolis, IN: Wiley, 2008. Page 383.</ref> There is no fixed correspondence defined in advance between the Gregorian [[solar calendar]] and the Islamic [[lunar calendar]], since the latter is defined by the visibility of the new moon by religious authorities and can therefore vary by a day or two, depending on the particular Islamic authority, weather conditions, and other variables. As an attempt to make conversions between the calendars somewhat predictable, Microsoft claims to have created this [[algorithm]] based on statistical analysis of historical data from [[Kuwait]]. However, its results are identical to a variation of the [[tabular Islamic calendar]], which was introduced by Muslim astronomers around the eighth century.<ref>[http://www.phys.uu.nl/~vgent/islam/islam_tabcal_main.htm#kuwait The "Kuwait algorithm" in Islamic-Western Calendar Converter by Robert van Gent]</ref> Inevitably, any arithmetic algorithm is imprecise, and results often differ by a day or two from observation or complex calculation. ==Behavior== ''Note: This was determined by inspection of the output of the software and is possibly wrong for dates that were not examined.'' {{Original research|date=January 2009}} *Common (non-leap) years have 354 days. Leap years have 355 days. *Odd-numbered months of the year have 30 days. Even-numbered months have 29 days. Exception: the 12th month of a leap year has 30 days. *Eleven of every thirty years are leap years. The leap years are the years which are congruent modulo 30 to any of these numbers: 2, 5, 7, 10, 13, 15, 18, 21, 24, 26, 29. Thus, a 30-year cycle always lasts exactly (354&times;30)+11 = 10631 days. *Correlation with Gregorian calendar: the 1st of January 2000 (a Saturday) corresponds to the 25th of Ramadan 1420. (Ramadan is the ninth month of the Islamic lunar year.) ==References== {{reflist}} [[Category:Specific calendars]] [[Category:Calendar algorithms]] [[ar:طريقة العد الكويتية]]</text> </page> <page> <id>20878</id> <title>Kyma (sound design language)</title> <text>'''Kyma''' is a visual programming language for sound design used by musicians, researchers, and sound designers. In Kyma, a user programs a multiprocessor DSP by graphically connecting modules on the screen of a [[Macintosh]] or [[Microsoft Windows|Windows]] computer. ==Background== Kyma has characteristics of both object-oriented and functional programming languages. The basic unit in Kyma is the "Sound" object, not the "note" of traditional music notation. A Sound is defined as: i) a Sound atom <br/> ii) a unary transform T(s) where s is a Sound<br/> iii) an n-ary transform T(s<sub>1</sub>, s<sub>2</sub>,.., s<sub>n</sub>), where s<sub>1</sub>,s<sub>2</sub>,..s<sub>n</sub> are Sounds<ref>{{cite conference | last = Scaletti | first = C.A. | coauthors = [[Ralph Johnson]] | title = An Interactive Environment for Object-oriented Music Composition and Sound Synthesis | booktitle = [[OOPSLA]] '88 Proceedings | pages = 222–233 | publisher = [[Association for Computing Machinery]] | date = September 25-30, 1988 | location = San Diego | id = ACM 0-89791-284-5/88/0009/0222}}</ref> A Sound atom is a source of audio (like a microphone input or a noise generator), a unary transform modifies its argument (for example, a LowpassFilter might take a running average of its input), and an n-ary transform combines two or more Sounds (a Mixer, for example, is defined as the sum of its inputs). ==History== The first version of Kyma, which computed digital audio samples on a [[Macintosh 512K]] was written in the [[Smalltalk]] programming language in 1986 by [[Carla Scaletti]] in [[Champaign, Illinois]]. In May 1987, Scaletti had partitioned Kyma into graphics and sound generation engines and ported the sound generation code to a digital signal processor called the Platypus designed by [[Lippold Haken]] and [[Kurt J. Hebel]] of the [[PLATO (computer system)|CERL Sound Group]]. <ref>{{cite book | last = Chadabe | first = Joel | title = Electric Sound: The Past and Promise of Electronic Music | publisher = [[Prentice Hall]] | date = 1997 | pages = 265–267 | isbn = 0-13-303231-0 }}</ref> In 1987, Scaletti presented a paper on Kyma and demonstrated live digital sound generation on the Platypus at the [[ICMC|International Computer Music Conference]] where it was identified by electronic synthesis pioneer [[Robert Moog|Bob Moog]] as a technology to watch in his conference report for [[Keyboard Magazine]]: <blockquote>''One new language that acknowledges no distinction between sound synthesis and composition is Kyma, a music composition language for the Macintosh that views all elements in a piece of music, from the structure of a single sound to the structure of the entire composition, as objects to 