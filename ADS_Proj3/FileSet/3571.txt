to the [[Desktop metaphor|desktop]], rather than to the [[Clipboard (software)|clipboard]]. However, using any of the key sequences described above, but additionally pressing the '''[[control key]]''' will modify the behavior to copy the image to the system [[Clipboard (software)|clipboard]] instead. For example : '''[[Command key|command]]-[[Shift key|shift]]-[[control key]]-[[3 (number)|3]]''' or ''[[Command key|command]]-[[Shift key|shift]]-[[control key]]-[[4 (number)|4]]''' ==See also== *[[System request]] (SysRq) *[http://docs.info.apple.com/article.html?artnum=61544 Mac OS X: Shortcuts for taking pictures of the screen] {{Keyboard}} {{keyboard keys}} [[Category:Computer keys]] [[Category:Computing terminology]] [[cs:Print Screen]] [[fr:Touche Impr. écran]] [[it:Stampa schermo (tasto)]] [[he:Print screen]] [[nl:Print screen]] [[ja:プリントスクリーン]] [[pl:Print Screen]] [[pt:Print screen]] [[ro:Print screen]] [[ru:Print Screen]] [[vi:In màn hình]] [[zh:Print Screen]]</text> </page> <page> <id>29973</id> <title>Printf</title> <text>{{lowercase|title=printf}} [[Image:Printf.svg|350px|thumb|An example of the printf function.]] '''Printf functions''' (which stands for "'''print f'''ormatted") are a class of [[function (computer science)|functions]] typically associated with some types of programming languages. They accept a [[string (computer science)|string]] [[parameter (computer science)|parameter]] called the '''format string''', which specifies a method for rendering an arbitrary number of varied data type parameter(s) into a string. This string is then by default printed on the [[standard output]] stream, but variants exist that perform other tasks with the result. Characters in the format string are usually copied literally into the function's output, with the other parameters being rendered into the resulting text at points marked by '''format specifiers''', which are typically introduced by a [[percent sign|'''%''' character]]. ==Timeline== Many [[programming languages]] implement a '''<code>printf</code>''' [[subroutine|function]], to output a formatted [[string literal|string]]. It originated from the [[C (programming language)|C programming language]], where it has a [[Function prototype|prototype]] similar to the following: <source lang="c">int printf(const char *format, ...)</source> The [[Variable (programming)|string constant]] <code>format</code> provides a description of the output, with [[placeholder]]s{{dn}} marked by "%" [[escape character]]s, to specify both the relative location and the type of output that the function should produce. === 1950s: FORTRAN, COBOL === FORTRAN's [[Variadic function|variadic]] <code> PRINT </code> statement took a reference to a non-executable <code> FORMAT </code> statement. <code> PRINT 601, 123456, 1000.0, 3.1415, 250 601 FORMAT (8H RED NUM,I7,4H EXP,E8.1,5H REAL,F5.2,4H VAL,I4) </code> will print the following (on a new line, because of the leading blank character)<ref>{{cite web | title=ASA Print Control Characters| url=http://www.felgall.com/asa.htm | accessdate=February 12, 2010 }}</ref>: <code> RED NUM 123456 EXP 1.0E 03 REAL 3.14 VAL 250 </code> === 1960s: BCPL, ALGOL 68, Multics PL/I === C's [[Variadic function|variadic]] <code>printf</code> has its origins in [[BCPL]]'s <code>writef</code> function. [[ALGOL 68]] Draft and Final report had the functions <code>inf</code> and <code>outf</code>, subsequently these were revised out of the original language and replaced with the now more familiar <code>readf/getf</code> and <code>printf/putf</code>. printf(($"Color "g", number1 "6d,", number2 "4zd,", hex "16r2d,", float "-d.2d,", unsigned value"-3d"."l$, "red", 123456, 89, BIN 255, 3.14, 250)); [[Multics]] has a standard function called <code>ioa_</code> with a wide variety of control codes. It was based on a machine-language facility from Multics's BOS (Bootstrap Operating System). <source lang="c"> call ioa_ ("Hello, ^a", "World!"); </source> === 1970s: C, Lisp === <source lang="c"> printf("Color %s, number1 %d, number2 %05d, hex %x, float %5.2f, unsigned value %u.\n", "red", 123456, 89, 255, 3.14159, 250); </source> will print the following line (including new-line character, \n): Color red, number1 123456, number2 00089, hex ff, float 3.14, unsigned value 250. The <code>printf</code> function returns the number of characters printed, or a negative value if an output error occurs. [[Common Lisp]] has the <code>format</code> function. <source lang="lisp"> (format t "Hello, ~a" "World!") </source> prints <code>"Hello, World!"</code> on the standard output stream. If the first argument is <code>nil</code>, format returns the string to its caller. The first argument can also be any output stream. <code>format</code> was introduced into [[ZetaLisp]] at [[Massachusetts Institute of Technology|MIT]] in 1978, based on the [[Multics]] <code>ioa_</code>, and was later adopted into the [[Common Lisp]] standard. ===1980s: Perl=== [[Perl]] also has a <code>printf</code> function. [[Common Lisp]] has a [[format (Common Lisp)|format]] function which acts according to the same principles as <code>printf</code>, but uses different characters for output conversion. The [[GLib]] library contains <code>g_print</code>, an implementation of <code>printf</code>. Some [[Unix]] systems have a <code>printf</code> program for use in [[shell script]]s. This can be used instead of [[echo (command)|echo]] in situations where the latter is not portable. For example: <source lang="bash">echo -n -e "$FOO\t$BAR"</source> may be rewritten portably as: <source lang="bash">printf "%s\t%s" "$FOO" "$BAR"</source> === 1990s: PHP, Python === 1991: [[Python (programming language)|Python]]'s <code>%</code> operator harkens to <code>printf</code>'s syntax when interpolating the contents of a tuple. This operator can, for example, be used with the <code>print</code> function: <source lang="python">print("%s\t%s" % (foo,bar))</source> Version 2.6 of Python included the <code>str.format()</code> which is preferred to the obsolete <code>%</code> which may go away in future versions of Python: <source lang="python">print("If you multiply five and six you get {0}.".format(5*6))</source> 1995: [[PHP]] also has the <code>printf</code> function, with the same specifications and usage as that in C/C++. [[MATLAB]] does not have <code>printf</code>, but does have its two extensions <code>sprintf</code> and <code>fprintf</code> which use the same formatting strings. <code>sprintf</code> returns a formatted string instead of producing a visual output. === 2000s: Java === 2004: [[Java (programming language)|Java]] supported <code>printf</code> from version 1.5 onwards as a member of the <code>PrintStream</code><ref>{{ cite web | publisher=Sun Microsystems Inc. | title = PrintStream (Java 2 Platform SE 5.0) | year = 1994 | url=http://java.sun.com/j2se/1.5.0/docs/api/java/io/PrintStream.html#printf(java.lang.String,%20java.lang.Object...) | accessdate=2008-11-18 }}</ref> [[class (computer science)|class]], giving it the functionality of both the <code>printf</code> and <code>[[fprintf]]</code> functions. At the same time <code>sprintf</code>-like functionality was added to the <code>String</code> class by adding the <code>format(String, Object... args)</code> method.<ref>{{ cite web | publisher=Sun Microsystems Inc. | title = String (Java 2 Platform SE 5.0) | year = 1994 | url=http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html#format(java.lang.String,%20java.lang.Object...) | accessdate=2008-11-18 }}</ref> <source lang="java5"> // Write "Hello, World!" to standard output (like printf) System.out.printf("%s, %s", "Hello", "World!"); // create a String object with the value "Hello, World!" (like sprintf) String myString = String.format("%s, %s", "Hello", "World!"); </source> Unlike most other implementations, Java's implementation of <code>printf</code> throws an [[exception handling|exception]] on encountering a malformed format string. ==Derivative functions== The [[C Standard]] specifies a number of derivative functions to further leverage the printf functionality: ===fprintf=== <source lang="c">int fprintf(FILE *stream, const char *format, ...)</source> '''<code>fprintf</code>''' 