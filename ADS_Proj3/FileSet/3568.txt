language)|Lua]] * [[First class function]]s, [[closure (computer science)|closures]], [[continuation]]s in languages that support [[functional programming]] such as [[Lisp (programming language)|Lisp]], [[ML (programming language)|ML]], [[Perl 6]] and [[C Sharp 3.0|C# 3.0]] ==Specific primitive data types== ===Integer numbers=== An integer data type can hold a whole number, but no fraction. Integers may be either signed (allowing negative values) or unsigned (nonnegative values only). Unsigned Integer types are in general not available for [[Java (programming language)|Java]]<ref name=unsignedjava>{{cite web|url=http://www.darksleep.com/player/JavaAndUnsignedTypes.html|title=Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof) |date=2009-11-05 |first=Sean R.|last=Owens|accessdate=2010-09-05}}</ref>. Typical sizes of integers are: {| class="wikitable" |- ! Size ! Names ! Signed Range ! Unsigned Range |- | 8 bits | [[Byte]] | −128 to +127 | 0 to 255 |- | 16 bits | [[word (computing)|Word]], short int | −32,768 to +32,767 | 0 to 65,535 |- | 32 bits | [[word (computing)#Dword.2C qword.2C and oword|Double Word]], long int (win32, win64, 32-bit Linux<ref name=agnerfog>{{cite web|url=http://www.agner.org/optimize/calling_conventions.pdf|title=Calling conventions for different C++ compilers and operating systems: Chapter 3, Data Representation |date=2010-02-16 |accessdate=2010-08-30 |last=Fog |first=Agner}}</ref>) | −2,147,483,648 to +2,147,483,647 | 0 to 4,294,967,295 |- | 64 bits | long int (C in 64-bit linux<ref name=agnerfog/>), long long ([[C (programming language)|C]]), long ([[Java (programming language)|Java]], the signed integer variant only<ref name=unsignedjava/>)) | −9,223,372,036,854,775,808 to +9,223,372,036,854,775,807 | 0 to 18,446,744,073,709,551,615 |- | unlimited | [[Bignum]] | | |} Literals for integers consist of a sequence of digits. Most programming languages disallow use of commas for [[digit grouping]], although [[Fortran]] (77, 90, and above, fixed form source but not free form source) allows embedded spaces, and [[Perl]], [[Ruby (programming language)|Ruby]], and [[D (programming language)|D]] allow embedded [[underscore]]s. Negation is indicated by a minus sign (−) before the value. Examples of integer literals are: * 42 * 10000 * −233000 ===Booleans=== A [[Boolean datatype|boolean]] type, typically denoted "bool" or "boolean", is a single-bit type that can be either "true" or "false". In some languages (e.g., [[C++]]), boolean values may be implicitly converted to integers, usually according to the mapping false → 0 and true → 1 (for example, <code>true + true</code> would be a valid expression evaluating to 2), but other languages (e.g., [[Java (programming language)|Java]], [[Pascal (programming language)|Pascal]] and [[Ada (programming language)|Ada]]) disallow this. ===Floating-point numbers=== A [[floating-point]] number represents a limited-precision [[rational number]] that may have a fractional part. These numbers are stored internally in a format equivalent to [[scientific notation]], typically in [[binary numeral system|binary]] but sometimes in [[decimal]]. Because floating-point numbers have limited precision, only a subset of [[real number|real]] or [[rational number|rational]] numbers are exactly representable; other numbers can be represented only approximately. Many languages have both a [[single precision]] (often called "float") and a [[double precision]] type. Literals for floating point numbers include a decimal point, and typically use "e" or "E" to denote scientific notation. Examples of floating-point literals are: * 20.0005 * 99.9 * −5000.12 * 6.02e23 Some languages (e.g., [[Fortran]], [[Python (programming language)|Python]]) also have a [[complex number]] type comprising two floating-point numbers: a real part and an imaginary part. ===Fixed-point numbers=== A [[fixed-point arithmetic|fixed-point]] number represents a limited-precision [[rational number]] that may have a fractional part. These numbers are stored internally in a scaled-integer form, typically in [[binary numeral system|binary]] but sometimes in [[decimal]]. Because fixed-point numbers have limited precision, only a subset of [[real number|real]] or [[rational number|rational]] numbers are exactly representable; other numbers can be represented only approximately. Fixed-point numbers also tend to have a more limited range of values than [[floating point]], and so the programmer must be careful to avoid overflow in intermediate calculations as well as the final results. ===Characters and strings=== A [[character (computing)|character]] type (typically called "char") may contain a single [[letter (alphabet)|letter]], [[numerical digit|digit]], [[punctuation mark]], or [[control character]]. Some languages have two or more character types, for example a single-byte type for [[ASCII]] characters and a multi-byte type for [[Unicode]] characters. The term "character type" is normally used even for types whose values more precisely represent [[code unit]]s, for example a [[UTF-16]] code unit as in [[Java (programming language)|Java]] and [[JavaScript]]. Characters may be combined into [[string (computer science)|strings]]. The string data can include numbers and other numerical symbols but will be treated as text. In most languages, a string is equivalent to an array of characters or code units, but [[Java (programming language)|Java]] treats them as distinct types (<code>java.lang.String</code> and <code>char[]</code>). Other languages (such as [[Python (programming language)|Python]], and many dialects of [[BASIC]]) have no separate character type; strings with a length of one are normally used to represent (single code unit) characters. Literals for characters and strings are usually surrounded by [[quotation marks]]: sometimes, single quotes (') are used for characters and double quotes (") are used for strings. Examples of character literals in C syntax are: * 'A' * '4' * '$' * '\t' ([[tab key|tab character]]) Examples of string literals in C syntax are: * "A" * "Hello World" ===Numeric data type ranges=== Each numeric data type has its maximum and minimum value known as the [[range (computer science)|range]]. Attempting to store a number outside the range may lead to compiler/runtime errors, or to incorrect calculations (due to [[truncation]]) depending on the language being used. The range of a variable is based on the number of bytes used to save the value, and an integer data type is usually able to store <math>2^n</math> values (where <math>n</math> is the number of [[bit]]s that contribute to the value). For other data types (e.g. [[floating point]] values) the range is more complicated and will vary depending on the method used to store it. There are also some types that do not use entire bytes, e.g. a boolean that requires a single [[bit]], and represents a [[binary numeral system|binary]] value (although in practice a byte is often used, with the remaining 7 bits being redundant). Some programming languages (such as [[Ada (programming language)|Ada]] and [[Pascal (programming language)|Pascal]]) also allow the opposite direction, that is, the programmer defines the range and precision needed to 