! required [[main function]] |- | [[ALGOL 68]] |''foo''«(parameters)»; |'''proc''' ''foo'' = «(parameters)» [[void type|void]]: ( ''instructions'' ); |'''proc''' ''foo'' = «(parameters)» '''rettype''': ( ''instructions ...; retvalue'' ); | {{n/a}} |- | C (C99) | rowspan=7| '''foo('''«parameters»''')''' | rowspan=5| '''[[void type|void]] foo('''«parameters»''') { '''instructions''' }''' | rowspan=5| type '''foo('''«parameters»''') { '''instructions ... '''return''' value'''; }''' | rowspan=3| «global declarations» <br/> '''int main('''«'''int argc, char *argv[]'''»''') { <ul>'''instructions'''</ul> }''' |- | Objective-C |- | C++ (STL) |- | C# | '''static void Main('''«'''string[] args'''»''') { '''instructions''' }''' or<br/> '''static int Main('''«'''string[] args'''»''') { '''instructions''' }''' |- | Java | '''public static void main(String[] args) { '''instructions''' }''' or<br/> '''public static void main(String[[variadic function|...]] args) { '''instructions''' }''' |- | JavaScript | '''function foo('''«parameters»''') { '''instructions''' }''' or<br/> '''var foo = function ('''«parameters»''') {'''instructions''' }''' or<br/> '''var foo = new Function ('''«'''"'''parameter'''",''' ... ''',"'''last parameter'''"'''»''' "'''instructions'''");''' | '''function foo('''«parameters»''') { '''instructions ... '''return''' value'''; }''' | {{n/a}} |- | Go | '''func foo('''«parameters»''') { '''instructions''' }''' | '''func foo('''«parameters»''') '''type''' { '''instructions ... '''return''' value''' }''' | '''func main() { '''instructions''' }''' |- | Common Lisp | rowspan=2| '''(foo '''«parameters»''')''' | '''([[defun]] foo ('''«parameters»''')'''<ul>instructions''')'''</ul> or <br/>'''(setf (symbol-function <nowiki>'</nowiki>'''symbol''')'''<ul>lambda''')'''</ul> | '''([[defun]] foo ('''«parameters»''')'''<ul>...</ul><ul>value''')'''</ul> | rowspan=2 {{n/a}} |- | Scheme | '''(define (foo '''parameters''')''' instructions''')''' or <br/> '''(define foo ([[anonymous function|lambda]] ('''parameters''')''' instructions'''))''' | '''(define (foo '''parameters''')''' instructions... return_value''')''' or <br/> '''(define foo ([[anonymous function|lambda]] ('''parameters''')''' instructions... return_value'''))''' |- | Pascal | '''foo'''«'''('''parameters''')'''» | '''procedure foo'''«'''('''parameters''')'''»''';''' «'''forward;'''»{{ref|forward declaration|[a]}}<br/> «'''label'''<ul>label declarations»</ul> «'''const'''<ul>constant declarations»</ul> «'''type'''<ul>type declarations»</ul> «'''var'''<ul>variable declarations»</ul> «local function declarations»<br/>'''begin'''<ul>instructions</ul>'''end;''' | '''function foo'''«'''('''parameters''')'''»''': '''type'''; '''«'''forward;'''»{{ref|forward declaration|[a]}}<br/> «'''label'''<ul>label declarations»</ul> «'''const'''<ul>constant declarations»</ul> «'''type'''<ul>type declarations»</ul> «'''var'''<ul>variable declarations»</ul> «local function declarations»<br/>'''begin'''<ul> instructions'''; <br/> foo := '''value</ul>'''end;''' | '''program''' name''';'''<br/> «'''label'''<ul>label declarations»</ul> «'''const'''<ul>constant declarations»</ul> «'''type'''<ul>type declarations»</ul> «'''var'''<ul>variable declarations»</ul> «function declarations»<br/>'''begin'''<ul>instructions</ul> '''end.''' <!--somewhat of a technicality--> |- | Visual Basic | rowspan=2| '''Foo('''«parameters»''')''' | rowspan=2| '''Sub Foo('''«parameters»''') <ul> '''instructions''' </ul> End Sub''' | '''Function Foo('''«parameters»''') As '''type <ul>instructions<br/> '''Foo = '''value</ul>'''End Function''' | '''Sub Main()'''<ul>instructions</ul>'''End Sub''' |- | Visual Basic .NET | '''Function Foo('''«parameters»''') As '''type <ul>instructions<br/>'''Return '''value</ul>'''End Function''' | '''Sub Main('''«'''ByVal CmdArgs() As String'''»''') <ul>'''instructions'''</ul> End Sub'''<br/>or<br/> '''Function Main('''«'''ByVal CmdArgs() As String'''»''') As Integer <ul>'''instructions'''</ul>End Function''' |- | Python | '''foo('''«parameters»''')''' | '''def foo('''«parameters»'''):''' <br/> {{keypress|Tab}} instructions | '''def foo('''«parameters»'''):''' <br/> {{keypress|Tab}} instructions <br/> {{keypress|Tab}} '''return''' value | {{n/a}} |- | S-Lang | '''foo('''«parameters» «;qualifiers»''')''' | '''define foo ('''«parameters»''') { '''instructions''' }''' | '''define foo ('''«parameters»''') { '''instructions ... '''return '''value'''; }''' | '''public define slsh_main () { '''instructions''' }''' |- | Fortran | '''foo ('''«arguments»''') <br> CALL sub_foo ('''«arguments»''')'''{{ref|Fortran arguments|[c]}} | '''SUBROUTINE sub_foo ('''«arguments»''') <ul> '''instructions''' </ul> END SUBROUTINE'''{{ref|Fortran arguments|[c]}} | type''' FUNCTION foo ('''«arguments»''') <ul> '''instructions''' <br/> ... <br/> foo '''= value''' </ul> END FUNCTION'''{{ref|Fortran arguments|[c]}} | '''PROGRAM '''main''' <ul> '''instructions''' </ul> END PROGRAM''' |- | Forth | «parameters»''' FOO''' | ''': FOO ''' « ''stack effect comment:'' '''( '''before '''-- )''' » ''' <ul> '''instructions''' </ul> ;''' | ''': FOO ''' « ''stack effect comment:'' '''( '''before '''--''' after ''')''' » ''' <ul> '''instructions''' </ul> ;''' | {{n/a}} |- | PHP | '''foo('''«parameters»''')''' | '''function foo('''«parameters»''') { '''instructions''' }''' | '''function foo('''«parameters»''') { '''instructions''' ... return '''value'''; }''' | rowspan=6 {{n/a}} |- | Perl | '''foo('''«parameters»''')''' or <br/> '''&foo'''«'''('''parameters''')'''» | '''sub foo { '''«'''my ('''parameters''') = @_;'''»''' '''instructions''' }''' | '''sub foo { '''«'''my ('''parameters''') = @_;'''»''' '''instructions'''... '''«'''return'''»''' '''value'''; }''' |- | Perl 6 | '''foo('''«parameters»''')''' or <br/> '''&foo'''«'''('''parameters''')'''» | «'''multi''' »'''sub foo('''parameters''') { '''instructions''' }''' | «'''our''' «type» »«'''multi''' »'''sub foo('''parameters''') { '''instructions'''... '''«'''return'''»''' '''value'''; }''' |- | Ruby | '''foo'''«'''('''parameters''')'''» | '''def foo'''«'''('''parameters''')'''» <ul>instructions </ul> '''end''' | '''def foo'''«'''('''parameters''')'''» <ul>instructions <br/> «'''return'''» value </ul> '''end''' |- | Windows PowerShell | '''foo'''« parameters» | '''function foo '''«'''('''parameters''')'''»''' { '''instructions''' };''' or<br/>'''function foo { '''«'''param('''parameters''')'''»''' '''instructions''' }''' | '''function foo '''«'''('''parameters''')'''» ''' { '''instructions''' ''' … '''return '''value''' };''' or<br/>'''function foo { '''«'''param('''parameters''')'''» '''instructions''' …''' return '''value''' }''' |- | OCaml | rowspan=4| '''foo '''parameters | rowspan=2| '''let''' «'''rec'''» '''foo''' parameters '''=''' instructions | rowspan=2| '''let''' «'''rec'''» '''foo''' parameters '''=''' instructions... return_value |- | F# | '''[<EntryPoint>] let main args =''' instructions |- | Standard ML | '''fun foo''' parameters '''= (''' instructions ''')''' | '''fun foo''' parameters '''= (''' instructions... return_value ''')''' |- | Haskell | '''foo''' parameters '''= do'''<br/>{{keypress|Tab}} instructions | '''foo''' parameters '''=''' return_value <br/> or <br/> '''foo''' parameters '''= do'''<br/>{{keypress|Tab}} instructions<br/>{{keypress|Tab}} '''return''' value | «'''main :: IO ()'''» <br/> '''main = do''' instructions |- | Eiffel | '''foo ('''«parameters»''')''' | '''foo ('''«parameters»''')'''<br/><ul>'''require''' <ul>preconditions</ul> '''do''' <ul>instructions</ul> '''ensure''' <ul>postconditions</ul> '''end'''</ul> | '''foo ('''«parameters»''')''': type<br/><ul>'''require''' <ul>preconditions</ul> '''do''' <ul>instructions</ul><ul>'''Result''' := value</ul> '''ensure''' <ul>postconditions</ul> '''end'''</ul> | {{ref|root class and feature|[b]}} |} {{note|forward declaration|a}} Pascal requires "forward;" for [[forward declaration]]s.<br/> {{note|root class and feature|b}} Eiffel allows the specification of an application's root class and feature.<br/> {{note|Fortran arguments|c}} In Fortran, function/subroutine parameters are called arguments (since PARAMETER is a language keyword); the CALL keyword is required for subroutines. {{ref|Fortran arguments|[c]}} == [[Type conversion]]s == Where ''string'' is a signed decimal number: {| class="wikitable" |- ! ! string to integer ! string to long integer ! string to floating point ! integer to string ! floating point to string |- | rowspan=3 | [[ALGOL 68]] with general, and then specific formats | colspan=5 align=center| With prior declarations and association of: '''string''' buf := "12345678.9012e34 "; '''file''' proxy; associate(proxy, buf); |- | get(proxy, ivar); | get(proxy, livar); | get(proxy, rvar); | put(proxy, ival); | put(proxy, rval); |- | getf(proxy, ($g$, ivar)); or getf(proxy, ($dddd$, ivar)); |getf(proxy, ($g$, livar)); or getf(proxy, ($8d$, livar)); |getf(proxy, ($g$, rvar)); or getf(proxy, ($8d.4dE2d$, rvar)); |putf(proxy, ($g$, ival)); or putf(proxy, ($4d$, ival)); |putf(proxy, ($g(width, places, exp)$, rval)); or putf(proxy, ($8d.4dE2d$, rval)); etc. |- | C (C99) | integer '''= [[atoi]]('''string''');''' | long '''= [[atol (programming)|atol]]('''string''');''' | float '''= [[atof]]('''string''');''' | '''[[sprintf]]('''string''', "%i", '''integer''');''' | '''[[sprintf]]('''string''', "%f", '''float''');''' |- | Objective-C | integer '''= ['''string''' intValue];''' | long '''= ['''string''' longLongValue];''' | float '''= ['''string''' doubleValue];''' | string '''= [NSString stringWithFormat:@"%i", '''integer'''];''' | string '''= [NSString stringWithFormat:@"%f", '''float'''];''' |- | C++ (STL) | colspan=3|«'''std::'''»'''istringstream('''string''') >> '''number; | colspan=2|«'''std::'''»'''ostringstream 