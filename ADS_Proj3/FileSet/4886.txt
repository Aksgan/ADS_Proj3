two consecutive items, not just one. If the addresses of the two consecutive items are reversed, you will end up traversing the list in the opposite direction. This form of linked list may be inadvisable: * General-purpose debugging tools cannot follow the XOR chain, making debugging more difficult; <ref>http://www.iecc.com/gclist/GC-faq.html#GC,%20C,%20and%20C++</ref> * The price for the decrease in memory usage is an increase in code complexity, making maintenance more expensive; * Most [[garbage collection (computer science)|garbage collection]] schemes do not work with data structures that do not contain literal [[pointer (computing)|pointer]]s; * XOR of pointers is not defined in some contexts (e.g., the [[C (programming language)|C]] language), although many languages provide some kind of [[type conversion]] between pointers and integers; * The pointers will be unreadable if one isn't traversing the list &mdash; for example, if the pointer to a list item was contained in another data structure; * While traversing the list you need to remember the address of the previously accessed node in order to calculate the next node's address. Computer systems have increasingly cheap and plentiful memory, and storage overhead is not generally an overriding issue outside specialized [[embedded system]]s. Where it is still desirable to reduce the overhead of a linked list, [[unrolled linked list|unrolling]] provides a more practical approach (as well as other advantages, such as increasing cache performance and speeding [[random access]]). ==Features== * Given only one list item, one cannot immediately obtain the addresses of the other elements of the list. * Two XOR operations suffice to do the traversal from one item to the next, the same instructions sufficing in both cases. Consider a list with items <code>{…B C D…}</code> and with R1 and R2 being [[Processor register|registers]] containing, respectively, the address of the current (say C) list item and a work register containing the XOR of the current address with the previous address (say C⊕D). Cast as [[System/360]] instructions: <code> X R2,Link R2 <- C⊕D ⊕ B⊕D (i.e. B⊕C, "Link" being the link field in the current record, containing B⊕D) XR R1,R2 R1 <- C ⊕ B⊕C (i.e. B, voilà: the next record) </code> * End of list is signified by imagining a list item at address zero placed adjacent to an end point, as in <code>{0 A B C…}</code>. The link field at A would be 0⊕B. An additional instruction is needed in the above sequence after the two XOR operations to detect a zero result in developing the address of the current item, * A list end point can be made reflective by making the link pointer be zero. A zero pointer is a ''mirror''. (The XOR of the left and right neighbor addresses, being the same, is zero.) ==Why does it work?== The key is the first operation, and the properties of XOR: *X⊕X=0 *X⊕0=X *X⊕Y=Y⊕X *(X⊕Y)⊕Z=X⊕(Y⊕Z) The R2 register always contains the XOR of the address of current item C with the address of the predecessor item P: C⊕P. The Link fields in the records contain the XOR of the left and right successor addresses, say L⊕R. XOR of R2 (C⊕P) with the current link field (L⊕R) yields C⊕P⊕L⊕R. * If the predecessor was L, the P(=L) and L ''cancel out'' leaving C⊕R. * If the predecessor had been R, the P(=R) and R cancel, leaving C⊕L. In each case, the result is the XOR of the current address with the next address. XOR of this with the current address in R1 leaves the next address. R2 is left with the requisite XOR pair of the (now) current address and the predecessor. ==Variations== The underlying principle of the XOR linked list can be applied to any reversible binary operation. Replacing XOR by addition or subtraction gives slightly different, but largely equivalent, formulations: ===Addition linked list=== <code> ... A B C D E ... <–> A+C <-> B+D <-> C+E <-> </code> This kind of list has exactly the same properties as the XOR linked list, except that a zero link field is not a "mirror". The address of the next node in the list is given by subtracting the previous node's address from the current node's link field. ===Subtraction linked list=== <code> ... A B C D E ... <–> C-A <-> D-B <-> E-C <-> </code> This kind of list differs from the "traditional" XOR linked list in that the instruction sequences needed to traverse the list forwards is different from the sequence needed to traverse the list in reverse. The address of the next node, going forwards, is given by ''adding'' the link field to the previous node's address; the address of the preceding node is given by ''subtracting'' the link field from the next node's address. The subtraction linked list is also special in that the entire list can be relocated in memory without needing any patching of pointer values, since adding a constant offset to each address in the list will not require any changes to the values stored in the link fields. (See also [[Serialization]].) This is an advantage over both XOR linked lists and traditional linked lists. The subtraction linked list also does not require casting [[C (programming language)|C]] pointers to integers. The subtraction of two C pointers yields an integer. Note that it is still not portable to all platforms since subtraction of pointers is only guaranteed to be valid if the two pointers are elements in the same array or allocated block. ==See also== *[[XOR swap algorithm]] ==References== <references/> [[Category:Linked lists]] [[fr:Chaînage XOR]] [[it:XOR linked list]] [[he:רשימה מקושרת של XOR]] [[ja:XOR連結リスト]] [[ru:XOR-связный список]]</text> </page> <page> <id>40724</id> <title>XOTcl</title> <text>'''XOTcl''' is an [[object-oriented]] extension for the [[Tcl|Tool Command Language]] created by Gustaf Neumann and Uwe Zdun. It is an extension of the MIT [[OTcl]]. XOTcl supports [[metaclass]]es. [[Class (computer science)|Class]] and [[Method (computer science)|method]] definitions are completely dynamic. XOTcl is similar to [[CLOS]]. ==See also== *[[OTcl]] *[[incr Tcl]] *[[Snit]] *[[Tcl]] *[[Tcllib]] *[[C++/Tcl]] *[[Itk]] *[[Tk (programming language)|Tk]] ==External links== *[http://media.wu-wien.ac.at/ XOTcl Homepage] - Extended Object Tcl *[http://citeseer.org/cs?q=XOTcl Citations from CiteSeer] *[http://www.activestate.com/Products/ActiveTcl/ ActiveState's Tcl distribution] 