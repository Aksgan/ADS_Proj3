a grammar for the language being parsed. The grammar can be written using any text editor - such as Notepad or the editor that is built into the Builder. At this stage, no coding is required. === Construct the tables === Once the grammar is complete, it is analyzed by the Builder, the [[LALR]] and [[Deterministic finite state machine|DFA]] parse tables are constructed, and any ambiguities or problems with the grammar are reported. Afterwards, the tables are saved to a Compiled Grammar Table file to be used later by a parsing engine. At this point, the GOLD Parser Builder is no longer needed. === Select a parsing Engine === In the final stage, the tables are read by an Engine. At this point, the development process is dependent on the selected implementation language. == External links == * [http://www.devincook.com/goldparser/ GOLD Parsing System Homepage] ** [http://www.devincook.com/goldparser/contributors List of Contributors] * [http://tech.groups.yahoo.com/group/goldparser/ GOLD Yahoo Group] [[Category:Parser generators]] [[Category:Programming language implementation]] [[de:GOLD Parsing System]] [[pl:GOLD]]</text> </page> <page> <id>14633</id> <title>GOR method</title> <text>The '''GOR method''' ('''G'''arnier-'''O'''sguthorpe-'''R'''obson) is an [[information theory]]-based method for the [[secondary structure prediction|prediction]] of [[secondary structure]]s in [[protein]]s.<ref name="Garnier_orig">Garnier J, Gibrat JF, Robson B. (1996). GOR method for predicting protein secondary structure from amino acid sequence. [http://dx.doi.org/10.1016/S0076-6879(96)66034-0 ''Methods Enzymol'' 266:540-53].</ref> It was developed in the late 1970's shortly after the simpler [[Chou-Fasman method]]. Like Chou-Fasman, the GOR method is based on [[probability]] parameters derived from empirical studies of known protein [[tertiary structure]]s solved by [[X-ray crystallography]]. However, unlike Chou-Fasman, the GOR method takes into account not only the propensities of individual [[amino acid]]s to form particular secondary structures, but also the [[conditional probability]] of the amino acid to form a secondary structure given that its immediate neighbors have already formed that structure. The method is therefore essentially [[Bayesian analysis|Bayesian]] in its analysis.<ref name="Garnier_elaboration">Garnier J, Osguthorpe DJ, Robson B. (1978). Analysis of the accuracy and implications of simple methods for predicting the secondary structure of globular proteins. [http://dx.doi.org/10.1016/0022-2836(78)90297-8 ''J Mol Biol'' 120:97-120].</ref> The GOR method analyzes sequences to predict [[alpha helix]], [[beta sheet]], [[turn (biochemistry)|turn]], or [[random coil]] secondary structure at each position based on 17-amino acid sequence windows. The original description of the method included four [[scoring matrix|scoring matrices]] of size 17x20, where the columns correspond to the [[log-odds]] score, which reflects the probability of finding a given amino acid at each position in the 17-residue sequence. The four matrices reflect the probabilities of the central, ninth amino acid being in a helical, sheet, turn, or coil conformation. In subsequent revisions to the method, the turn matrix was eliminated due to the high variability of sequences in turn regions (particularly over such a large window). The method was considered as best requiring at least four contiguous residues to score as alpha helices to classify the region as helical, and at least two contiguous residues for a beta sheet.<ref name="Mount">Mount DM (2004). Bioinformatics: Sequence and Genome Analysis, 2, Cold Spring Harbor Laboratory Press. ISBN 0879697121.</ref> The mathematics and algorithm of the GOR method were based on a earlier series of studies by Robson and colleagues reported mainly in the Journal of Molecular Biology (e.g. <ref name="Robson_first"> Robson B, Pain RH. (1971). Analysis of the Code Relating Sequence to Conformation in Globular Proteins: Possible Implications for the Mechanism of Formation of Helical Regions. J. Mol. Biol: 58, 237-256</ref>) and The Biochemical Journal (e.g. <ref name="Robson_second"> Robson B. (1974). Analysis of the Code Relating Sequence to Conformation in Globular Proteins: Theory and Application of Expected Information. 141: 853-867</ref>). The latter describes the information theoretic expansions in terms of conditional information measures. The use of the word "simple" in the title of the GOR paper reflected the fact that the above earlier methods provided proofs and techniques somewhat daunting by being rather unfamilar in protein science in the early 1970s; even Bayes methods were then unfamilar and controversial. An important feature of these early studies, which survived in the GOR method, was the treatment of the sparse protein sequence data of the early 1970s by expected information measures. That is, expectations on a Bayesian basis considering the distribution of plausible information measure values given the actual frequencies (numbers of observations). The expectation measures resulting from integration over this and similar distributions may now be seen as composed of “incomplete” or extended zeta functions, e.g. z(s,observed frequency) − z(s,expected frequency) with incomplete zeta function z(s, n) = 1 + (1/2)<sup>s</sup> + (1/3)<sup>s</sup>+ (1/4)<sup>s</sup> + …. +(1/n)<sup>s</sup>. The GOR method used s=1. Also, in the GOR method and the earlier methods, the measure for the contrary state to e.g. helix H, i.e. ~H, was subtracted from that for H, and similarly for beta sheet, turns, and coil or loop. Thus the method can be seen as employing a zeta function estimate of log predictive odds. An adjustable decision constant could also be applied, which thus also implies a decision theory approach; the GOR method allowed the option to use decision constants to optimize predictions for different classes of protein. The expected information measure used as a basis for the information expansion was less important by the time of publication of the GOR method because protein sequence data became more plentiful, at least for the terms considered at that time. Then, for s=1, the expression z(s,observed frequency) − z(s,expected frequency) approaches the natural logarithm of (observed frequency / expected frequency) as frequencies increase. However, this measure (including use of other values of s) remains important in later more general applications with high dimensional data, where data for more complex terms in the information expansion are inevitably sparse (e.g. <ref name="Robson_third"> Robson B. (2005). Clinical and Pharmacogenomic Data Mining: 3. Zeta Theory As a General Tactic for Clinical Bioinformatics. J. Proteome Res. (Am. Chem. Soc.) 4(2): 445-455 </ref>). ==References== <references /> {{bioinformatics-stub}} [[Category:Bioinformatics]] [[Category:Protein methods]]</text> </page> <page> <id>14635</id> <title>GOSUB</title> <text>'''GOSUB''' is a command in many versions of the [[BASIC programming language|BASIC]] computer [[programming language]]. GOSUB statements branch to simple kinds of [[Subroutine|subroutines]] without (sometimes with) parameters or local [[variable (computer 