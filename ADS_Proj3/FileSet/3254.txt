generally in no cost versions. It is typically extremely compact. Even with an Oberon [[compiler]], assorted utilities including a [[web browser]], [[TCP/IP]] networking, and a GUI, the entire package fits on a single 3.5" [[floppy disk]]. The version which runs on bare PC hardware is called [[Native Oberon]]. There is also a version called Oberon V4 that is closer to the original operating system developed by N. Wirth. It was also developed at ETHZ, but the most recent version is at [http://www.ssw.uni-linz.ac.at/Oberon.html Linz university]. Oberon V4 appears to be orphaned, there are almost no changes since 2000. The computer science department at ETHZ has in recent years begun exploring [[active objects]] and [[concurrency]] for operating systems, and has released an early version of a new language [[Active Oberon|Active Object Oberon]] and a new operating system for it, first called AOS and now called A2 and/or [[Bluebottle OS|Bluebottle]]. It is available from ETHZ with most source via the [[Internet]]. Versions are currently available for Intel [[IA-32]] single and multi-processor systems and for the [[StrongARM]] CPU family. ==References== <references/> * [http://www-old.oberon.ethz.ch/WirthPubl/ProgInOberonWR.pdf M. Reiser and N. Wirth: Programming in Oberon] Addison-Wesley/ACM Press (1992) ISBN 0-201-56543-9 * The Oberon System - M. Reiser - Out-of-print - Addison-Wesley/ACM Press (1991) ISBN 0-201-54422-9 * [http://www-old.oberon.ethz.ch/WirthPubl/ProjectOberon.pdf N. Wirth and J. Gutknecht: Project Oberon - The Design of an Operating System and Compiler] Addison-Wesley/ACM Press (1992) ISBN 0-201-54428-8 ==External links== * [http://www.oberon.ethz.ch/ The ETH Oberon Homepage] * [http://www.ocp.inf.ethz.ch/wiki/ Oberon Community Platform - Wiki & Forum] {{DEFAULTSORT:Oberon (Operating System)}} [[Category:Free software operating systems]] [[ja:Oberon]] [[ru:Оберон (операционная система)]] [[uk:Оберон (операційна система)]]</text> </page> <page> <id>26981</id> <title>Objeck (programming language)</title> <text>{{orphan|date=September 2010}} The '''Objeck''' programming language is a modern object-oriented computing language with functional features. The programming environment consists of a compiler, virtual machine ([[Garbage collection (computer science)|garbage collector]] and [[Just-in-time compilation|JIT]] compiler) along with a command-line debugger. ==Background== The programming environment originally grew from a prototype that was created to investigate the process of translating stack instructions into register instructions and finally into machine code. From that prototype, a small virtual machine was developed along with a simple assembler. The project adopted the name Objeck after the assembler was replaced by a much more complex object-oriented/functional front-end. The language itself has ties with [[C Sharp (programming language)|C#]], [[Scheme (programming language)|Scheme]] and indirectly [[Ruby (programming language)|Ruby]]. Today the system is generally considered stable. The current development fouces is on features that make object-oriented and functional programming lighter-weight. ==Example== Below is an example of the [["Hello world" program]]: <source lang="cpp"> bundle Default { class SayHello{ function : Main(args : String[]) ~ Nil { "Hello World!"->PrintLine(); } } } </source> ==References== * [http://sourceforge.net/projects/objeck-lang Main project website] * [http://rosettacode.org/wiki/Category:Objeck Rosetta Code examples] * [http://freshmeat.net/projects/objeck-programming-language Fresh Meat] * [http://mac.softpedia.com/get/Developer-Tools/Objeck.shtml Softpedia] * [http://code.google.com/p/objeck-lang/ Google Code] [[Category:Object-oriented programming languages]]</text> </page> <page> <id>26982</id> <title>Object-Oriented Fortran</title> <text>{{Orphan|date=November 2006}} '''Object-Oriented Fortran''' is an [[object-oriented]] extension of [[Fortran]], in which data items can be grouped into objects, which can be instantiated and executed in parallel. It was available for [[Sun Microsystems|Sun]], [[Iris (computer)|Iris]], [[Intel iPSC|iPSC]], and [[nCUBE]], but is no longer supported. {{FOLDOC}} [[Category:Fortran programming language family]] {{Compu-lang-stub}}</text> </page> <page> <id>26986</id> <title>Object-based file system</title> <text>{{nofootnotes|date=September 2008}} In computing, the term '''object-based file system''' refers to an architectural blueprint for [[List_of_file_systems#Distributed_file_systems|distributed file systems]]. An object-based [[file system]] splits file [[metadata]] (such as the filename, its size and access times) from file data and stores them on different [[File_server|servers]]. File metadata is stored on metadata servers, the file data is split into so-called ''objects'' and stored on object storage servers. The file system client employs metadata and object storage servers to present a full file system [[Abstraction_(computer_science)|abstraction]] to the [[User_(computing)|users]]. The object-based file system architecture has several advantages: * The file system [[Client_(computing)|client]] accesses file content directly via object storage servers. Metadata servers are only contacted once when the file is opened, thereby eliminating the metadata bottleneck of block-based distributed file systems. * The size of these objects can usually be configured on per-file basis. This allows the stripe width to be adapted to the access properties of an individual file when the objects of a file are [[Data_striping|striped]] across multiple object storage servers. File systems that follow an object-based architecture include [[Lustre (file system)|Lustre]] and [[EXOFS|exofs]]. == Sources == {{cite journal | last = Mesnier | first = M. | coauthors = Ganger G., Riedel E | title = Object-based storage | journal = IEEE Communications Magazine 2003 | volume = 8 | pages = 84–90 }} {{cite conference | first = M. | last = Factor | coauthors = Meth K. Naor D., Rodeh O., Satran J. | title = Object storage: The future building block for storage systems | booktitle = Local to Global Data Interoperability - Challenges and Technologies | pages = 119–123 | publisher = IEEE Computer Society | date = 2005 | url = http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=1612479 | doi = 10.1109/LGDI.2005.1612479 | accessdate = }} {{compu-storage-stub}} [[Category:Computer file systems]]</text> </page> <page> <id>27001</id> <title>Object-oriented programming</title> <text>{{Programming paradigms}} {{technical|date=November 2010}} '''Object-oriented programming''' ('''OOP''') is a [[programming paradigm]] that uses "[[Object (computer science)|objects]]" &ndash; [[data structure]]s consisting of [[Field (computer science)|data fields]] and [[Method (computer science)|methods]] together with their interactions <!-- does this mean 1. a data structure containing both data types and methods (if so an example of this structure would be nice) or 2. a data structure (containing data fields) and methods ?(if so, how are they related physically for their interactions to occur - an example would be nice) -->&ndash; to design applications and computer programs. Programming techniques may include features such as [[data abstraction]], [[Encapsulation (object-oriented programming)|encapsulation]], [[Message passing|messaging]], [[module (programming)|modularity]], [[Polymorphism in object-oriented programming|polymorphism]], and [[Inheritance (computer science)|inheritance]]. Many modern [[programming language]]s now support OOP. ==Overview== Many people first learn to program using a language that is not object-oriented. Simple, non-OOP programs may be one long list of commands. More complex programs will group lists of commands into [[Function (programming)|functions]] or [[Subroutine|subroutines]] each of which might perform a particular task. With designs of this sort, it is common for 