xmm3||C4E3 WvvvvL01 79 /r /is4||Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values|| |- |VFNMADDPS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 78 /r /is4||Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values|| |- |VFNMADDSD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 7B /r /is4||Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values|| |- |VFNMADDSS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 7A /r /is4||Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values|| |- |VFNMSUBPD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 7D /r /is4||Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values|| |- |VFNMSUBPS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 7C /r /is4||Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values|| |- |VFNMSUBSD xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 7F /r /is4||Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values|| |- |VFNMSUBSS xmm0, xmm1, xmm2, xmm3||C4E3 WvvvvL01 7E /r /is4||Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values|| |} </blockquote> == Intel [[AES instruction set|AES]] instructions == 6 new instructions. {| class="wikitable" |- ! Instruction ! Description |- | AESENC | Perform one round of an [[Advanced Encryption Standard|AES]] encryption flow |- | AESENCLAST | Perform the last round of an AES encryption flow |- | AESDEC | Perform one round of an AES decryption flow |- | AESDECLAST | Perform the last round of an AES decryption flow |- | AESKEYGENASSIST | Assist in AES round key generation |- | AESIMC | Assist in AES Inverse Mix Columns |} == Undocumented instructions == The x86 CPUs contain [[Illegal opcode|undocumented instructions]] which are implemented on the chips but not listed in some official documents. They can be found in various sources across the Internet, such as [[Ralf Brown's Interrupt List]] and at http://sandpile.org. {| class="wikitable" !|mnemonic !|opcode !|description !|undoc status |- |AAM imm8 |D4 imm8 |Divide AL by imm8, put the quotient in AH, and the remainder in AL |Available beginning with 8086, documented since Pentium (earlier documentation lists no arguments) |- |AAD imm8 |D5 imm8 |Multiplication counterpart of AAM |Available beginning with 8086, documented since Pentium (earlier documentation lists no arguments) |- |SALC |D6 |Set AL depending on the value of the Carry Flag (a 1-byte alternative of SBB AL, AL) |Available beginning with 8086, but only documented since Pentium Pro. |- |[[F00f|HCF]] |F0 0F C7 C8 |'''H'''alt and '''C'''atch '''F'''ire - Causes the CPU to lock, forcing the user to hard-reboot. |This was considered a bug by Intel and has been fixed in Pentium Pro step myB2 and later processors.<ref name="pentium-update-cmpxchg8b"> {{cite book | title = Pentium Processor Specification Update | publisher = [[Intel Corporation]] | date = 1999-01 | pages = 51&ndash;52 | url = http://www.biblio.deis.unibo.it/Testi_Liberi/Pentium/24248041.PDF | format = [[PDF]] | accessdate = 2006-11-02 | id = order number 242480-041 }}</ref> <!-- Intel's official web site has a broken link: http://www.intel.com/design/pentium/specupdt/ --> |- |UD1 |0F B9 |Intentionally undefined instruction, but unlike UD2 this was not published |- |ICEBP |F1 |Single byte single-step exception / Invoke [[In-circuit emulator|ICE]] |Available beginning with 80386, documented (as INT1) since Pentium Pro |- |[[LOADALL]] |0F 05 |Loads All Registers from Memory Address 0x000800H |Only available on 80286 |- |Unknown opcode |0F 04 |Exact purpose unknown, causes CPU hang. (the only way out is CPU reset)<ref> {{cite web | url = http://www.sandpile.org/post/msgs/20004129.htm | title = Re: Undocumented opcodes (HINT_NOP) | accessdate = 2010-11-07 }} </ref> In some implementations, emulated through [[BIOS]] as a [[halt]]ing sequence. <ref> {{cite web | url = http://www.sandpile.org/post/msgs/20003986.htm | title = Re: Also some undocumented 0Fh opcodes | accessdate = 2010-11-07 }} </ref> |Only available on 80286 |- |LOADALLD |0F 07 |Loads All Registers from Memory Address ES:EDI |Only available on 80386 |- |POP CS |0F |Pop top of the stack into CS Segment register (causing a far jump) |Only available on earliest models of 8086. Beginning with 80286 this opcode is used as a prefix for 2-Byte-Instructions |- |MOV CS,r/m |8E/1 |Moves a value from register/memory into CS Segment register (causing a far jump) |Only available on earliest models of 8086. Beginning with 80286 this opcode causes an invalid opcode exception |- |MOV ES,r/m |8E/4 |Moves a value from register/memory into ES segment register |Only available on earliest models of 8086. On 80286 this opcode causes an invalid opcode exception. Beginning with 80386 the value is moved into the FS segment register. |- |MOV CS,r/m |8E/5 |Pop top of the stack into CS Segment register (?) |Only available on earliest models of 8086. On 80286 this opcode causes an invalid opcode exception. Beginning with 80386 the value is moved into the GS segment register. |- |MOV SS,r/m |8E/6 |Moves a value from register/memory into SS Segment register |Only available on earliest models of 8086. Beginning with 80286 this opcode causes an invalid opcode exception |- |MOV DS,r/m |8E/7 |Moves a value from register/memory into DS Segment register |Only available on earliest models of 8086. Beginning with 80286 this opcode causes an invalid opcode exception |} ==See also== * [[CLMUL instruction set|CLMUL]] * [[XOP instruction set|XOP]] * [[CVT16 instruction set|CVT16]] * [[FMA instruction set|FMA]] * [[Larrabee (microarchitecture)|Larrabee extensions]] ==References== {{reflist}} * [http://www.intel.com/products/processor/manuals/ Intel Software Developer's Manuals] ==External links== {{wikibooks|X86 Assembly|X86 Instructions|X86 Instructions}} * [http://home.comcast.net/~fbui/intel.html The 8086 / 80286 / 80386 / 80486 Instruction Set ] * [http://www.intel.com/products/processor/manuals/index.htm Free IA-32 and x86-64 documentation], provided by Intel * [http://www.nasm.us/doc/nasmdocb.html Netwide Assembler Instruction List] (from [[Netwide Assembler]]) * [http://siyobik.info/index.php?module=x86 x86 Instruction Set Reference] * [http://ref.x86asm.net X86 Opcode and Instruction Reference] {{Template:X86_assembly_topics}} {{DEFAULTSORT:X86 Instruction Listings}} [[Category:X86 instructions| ]] [[Category:Instruction set listings]] [[fr:Jeu d'instruction x86]]</text> </page> <page> <id>40635</id> <title>XCAST</title> <text>{{Orphan|date=December 2009}} {{Unreferenced|date=August 2010}} The '''explicit multi-unicast (Xcast)''' is a variation of [[multicast]] that supports a great number of little multicast sessions.{{Citation needed|date=August 2010}}<!--What does 'little' mean--> It is done by adding<!--define adding, summing?--> all the [[IP address]]es in the destination field of the IP header, instead of using a multicast address. The traditional multicast schemes over [[Internet Protocol|IP]] are scalable for big multicast groups, but they have got scalability problems for a great number of groups. The multicast schemes can be used to minimize the [[bandwidth (computing)|bandwidth]] consumption. Xcast can be used to minimize the bandwidth consumption for little groups, but 