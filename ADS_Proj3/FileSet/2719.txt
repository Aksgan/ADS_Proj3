[[Gambit Communications]] consisting of [[simulation]] software in the [[network management|network]] and [[systems management]] space. MIMIC solves a classical simulation problem: network management software typically manages large networks. Traditionally, in order to setup such networks for the purposes of [[software development]], [[software testing]] or [[training]], physical equipment had to be separately purchased and assembled in [[laboratories]]. To reduce the expense, most of the network can be simulated. The principle behind [[Simple Network Management Protocol|SNMP]] simulation is that the SNMP protocol is an interface that can be simulated. SNMP requests carry data values for [[Management information base|MIB]] objects, which can be shaped at will by the simulator, thus representing any device which has an SNMP interface. In contrast to [[Network simulation]], where the entire network is modelled within a computer, this type of empirical simulation is visible on the network, and you can communicate with the simulator over the network. The concept can be extended to other [[Protocol (computing)|protocols]] such as for [[cable modems]], [[command line interface|CLI]] such as [[Cisco IOS]] or [[TL1]], or [[IPMI]]. ==Sources== * [http://www.networkcomputing.com/1102/1102f1.html Network Management That Works] * [http://www.networkworld.com/news/2002/130584_03-04-2002.html New tools ease Cisco IOS mgmt.] * [http://www.networkworld.com/newsletters/careers/2003/0915car1.html Virtual router labs] * [http://masshightech.bizjournals.com/masshightech/stories/2003/10/13/story9.html Gambit simulates the network with virtual software] * [http://www.hp.com/education/courses/u5089s.html?jumpid=reg_R1002_USEN Advanced HP Network Node Manager Software] * [http://articles.techrepublic.com.com/5100-6350_11-5261529.html Simulated labs offer low-cost alternative to IT pros seeking Cisco certification]<!-- This looks to be a good, informative source --> * [http://articles.techrepublic.com.com/5100-6350_11-5435104.html Create a virtual router lab using Gambit's MIMIC] * [http://www.networkcomputing.com/showArticle.jhtml?articleID=185303656 12th Annual Well-Connected Awards: Network Infrastructure] [[Category:Internet protocols]] [[Category:Internet standards]] [[Category:Network management]] [[Category:System administration]] [[Category:Application layer protocols]] [[Category:Multi-agent systems]] [[Category:Simulation software]]</text> </page> <page> <id>22963</id> <title>MIPS-X</title> <text>'''MIPS-X''' is a [[microprocessor]] and [[instruction set architecture]] developed as a follow-on project to the [[MIPS architecture]] at [[Stanford University]] by the same team that developed MIPS. The project, supported by the Defense Advanced Research Projects Agency, started in 1984, and its final form was described in a set of papers released in 1986â€“87. Unlike its older cousin, MIPS-X was never commercialized as a [[workstation]] CPU, and has mainly been seen in [[Embedded system|embedded]] designs based on chips designed by [[8x8 Inc|Integrated Information Technology]] for use in [[digital video]] applications. MIPS-X, while designed by the same team and architecturally very similar, is not instruction-set compatible with the mainline MIPS R-series processors. The processor is obscure enough that (as of this writing) support for it is provided only by specialist developers (such as [[Green Hills Software]]), and is notably missing from [[GNU Compiler Collection|GCC]]. MIPS-X has become important among [[DVD player]] [[firmware]] [[Hacker (computing)|hackers]], since many low-end DVD players use chips based on the IIT design (and produced by [[ESS Technology Inc.]]) as their central processor and [[MPEG-2]] decoder. The Programmer's Manual described an instruction called '''hsc''', which means '''halt and spontaneously combust'''. The manual claimed that on the [[NSA]] versions of the processor, this instruction was executed when a protection violation was detected,<ref>[ftp://reports.stanford.edu/pub/cstr/reports/csl/tr/86/289/CSL-TR-86-289.pdf hsc instruction], MIPS-X Instruction Set and Programmer's Manual, p. 65.</ref> however this was intended as a joke. On other platforms, this type of instruction is known as [[Halt and Catch Fire]]. ==References== {{Reflist}} ==External links== * [http://mos.stanford.edu/papers/mh_jssc_87.pdf The original MIPS-X paper] from Stanford. {{microcompu-stub}} [[Category:Central processing unit]] [[Category:Instruction processing]] [[Category:Instruction set architectures]] [[Category:Microprocessors]] [[it:MIPS-X]] [[ko:MIPS-X]]</text> </page> <page> <id>22969</id> <title>MISD</title> <text>{{otheruses}} [[Image:MISD.svg|right|225px]] {{Flynn's Taxonomy}} In [[computing]], '''MISD''' ('''M'''ultiple '''I'''nstruction, '''S'''ingle '''D'''ata) is a type of [[parallel computing]] [[computer architecture|architecture]] where many functional units perform different operations on the same data. [[Pipeline (computing)|Pipeline]] architectures belong to this type, though a purist might say that the data is different after processing by each stage in the pipeline. Fault-tolerant computers executing the same instructions redundantly in order to detect and mask errors, in a manner known as [[Replication (computer science)|task replication]], may<!-- incoherent with the definition of MIMD above... "_different_ operations" --> be considered to belong to this type. Not many instances of this architecture exist, as [[MIMD]] and [[SIMD]] are often more appropriate for common data parallel techniques. Specifically, they allow better scaling and use of computational resources than MISD does. Some argue that a [[systolic array]] is an example of a MISD structure.<ref>Quinn, Michael J. '''Parallel Programming in C with MPI and OpenMP.'''Boston: McGraw Hill, 2004.</ref><ref>Ibaroudene, Djaffer. "Parallel Processing, EG6370G: Chapter 1, Motivation and History." St Mary's University, San Antonio, TX. Spring 2008.</ref> ==Footnotes== {{Reflist|2}} {{CPU technologies}} {{Parallel computing}} [[Category:Flynn's Taxonomy]] [[Category:Parallel computing]] [[Category:Classes of computers|Misd]] {{compu-hardware-stub}} [[ar:MISD]] [[ca:MISD]] [[de:Flynnsche Klassifikation#MISD (Multiple Instruction, Single Data)]] [[es:MISD]] [[ko:MISD]] [[it:MISD]] [[ja:MISD]] [[pl:MISD]] [[pt:MISD]] [[ru:MISD]]</text> </page> <page> <id>22974</id> <title>MIT Computer Science and Artificial Intelligence Laboratory</title> <text>{{Infobox laboratory |name = MIT Computer Science and Artificial Intelligence Laboratory |image = [[File:Stata Center1.jpg|200px]] |established = July 1, 2003<br/>July 1, 1963 (as Project MAC) |research_field = [[Computer science]] |director = [[Victor Zue]] |city = [[Cambridge, Massachusetts|Cambridge, MA, USA]] |address = The Stata Center, Building 32<br/>32 Vassar Street<br/>Cambridge, MA 02139<br/>USA |telephone = 617-253-5851 |nickname = CSAIL |operating_agency = [[Massachusetts Institute of Technology]] |website = http://www.csail.mit.edu/ |logo = [[File:CSAIL Logo.png|106px]] }} '''MIT Computer Science and Artificial Intelligence Laboratory''' (also '''CSAIL''') is a research laboratory at the [[Massachusetts Institute of Technology]] formed by the 2003 merger of the Laboratory for Computer Science and Artificial Intelligence Laboratory. Housed within the [[Stata Center]], CSAIL is the largest on-campus laboratory as measured by research scope and membership. ==Research activities== CSAIL's research activities are organized around a number of semi-autonomous research groups, each of which is headed by one or more [[professor]]s or research scientists. These groups are divided up into seven general areas of research: *[[Artificial Intelligence]] *[[Computational biology]] *[[Computer graphics|Graphics]] and [[Machine vision|Vision]] *[[Natural language processing|Language]] and [[Machine learning|Learning]] *[[Theory of computation]] *[[Robotics]] *Systems (includes [[computer architecture]], databases, [[distributed system]]s, [[Computer networking|networks]] and networked systems, [[operating system]]s, programming methodology, and [[software engineering]] among others) In addition, CSAIL hosts the [[World Wide Web Consortium]] (W3C). ==History== Computing research at MIT began with [[Vannevar Bush]]'s research into a [[differential analyzer]] and [[Claude Shannon]]'s electronic [[Boolean algebra (logic)|Boolean algebra]] in the 1930s, the wartime [[Radiation Laboratory]], the post-war [[Project Whirlwind]] and [[Research Laboratory of Electronics 