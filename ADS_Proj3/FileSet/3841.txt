'''The Wizards Templates''' <br /> When leaving the Wizard, the edited Template is pasted inside your Source, at the actual position of the Cursor. You should never remove, or even modify, these Comments and the in-between Sources, if you wish to keep the re-edition possibility. Modifying something inside the Template Source will be erased by a re-edition. Because of this difficulty, you should always paste your Wizards Templates at the end of your Source, in a dedicated TITLE, in order to make sure that you will never accidentally modify them. The Source Editor has actually no security implemented to save you from such accidents. '''The actual Form Wizards''' <br /> This first Wizard is still under development and is actually used to study, define and finalize the exchange mechanisms between the Source Editor and the Wizards. It is fully effective, but will probably be improved and extended. The purpose of this Form Wizard is to visually edit the windows interface of a Program, a bit similar to what the Resources Editor does, but in a more powerful and flexible manner as, in this case, the creations are not based on Dialogs, but on the 'CreateWindow' Function. '''The Form Wizards Files''' <br /> The Window Wizard File (*.wwf) format is used to store all information about a form. See the Wizard source code for additional information on the file format (TITLE Help of the main RosAsm source code). '''Wizard Global Introduction''' <br /> '''Drawing''' All drawing actions can be done with the mouse. * Once you have drawn a control, you can move it by a simple drag-and-drop. * A right-click on one of the controls will display a context menu which provides quick access to Edit menu options. <br /> '''Properties''' The properties window allows you to modify all the styles available for a given control.(Window Tab for window styles, WindowEx Tab for extended window styles and Control Tab for control specific styles) The A-Z Tab contains additional information: * The Name of the control as it will appear in RosAsm Source * The Caption of the control * The client coordinates of the control. <br /> '''Code writing''' You can output the code corresponding to your form in several ways. (All these options are available in the Output menu) * Display it in a pop-up window. * Write it to a file. * Paste it into RosAsm. <br /> '''Menu Itens control''' File New : Create a new form Open : Open a new *.wwf file Save : Save the current form Save As : Save the current form with new name Edit Bring To Front : Bring the control to the top of the Z-Order. Send To Back : Send the control to the bottom of the Z-Order. Delete : Delete the current selected control(s). Lock Controls : Lock control position. Output Display * The whole code: Display in a pop-up window the code corresponding to the current form. * Current control code: Display in a pop-up window the code corresponding to the current selected control (the one with yellow squares). * Write in file: Write in a file the code corresponding to the current form. * Paste in RosAsm and quit : Paste into RosAsm the code corresponding to the current form, save it in a file and close the wizard. '''Requirements''' The wizard uses a file so as to store all the window and control styles. The file rwslist.dat is a raw list of all available styles with only basic information. You can get more information about this file in the Wizard source (TITLE Help in the main rosAsm source code). === Debugger === RosAsm comes with an integrated [[debugger]] which is built on top of the Win32 Debug API. When you Run / F5 your application (the debuggee) from inside RosAsm, it is automatically debugged. If you try to run a DLL, the [[debugger]] asks for a host process, which is expected to load the library. The [[debugger]] will point out eventual exceptions in your source with the faulty instruction highlighted and a detailed exception description. Furthermore you can set breakpoints in your source either at design time or at run time. When the debuggee encounters such a breakpoint, the OS transfers control to the [[debugger]] and halts all threads of the debuggee. With the debug dialog you can view the current flag states, register & data label values and view the contents of the whole address space of your application. The flags are embedded in the toolbar and can be shown and hidden through its context menu (right-click on toolbar). '''Exceptions''' When the exception box pops up, something went wrong in your application. The debug dialog title shows 'EXCEPTION' and the exception dialog title tells about the code module in which the crash occurred. A detailed exception description is given in the text window. Furthermore the instruction that caused the exception and its address are provided. In case of access violations additional information about the address which was tried to access and the access mode is shown below. In general, the debuggee must be terminated when an exception occurs. Take care that the debug dialog is closed when you press Terminate. Therefore be sure to analyze the cause which may have led to the crash before you exit. When you make use of structured exception handlers (SEH) the exception is still reported but you have the chance to forward it to the handler by Pass to SEH. If the exception is handled, the debuggee continues, otherwise the exception will be reported again without the possibility to pass it to the handler. If the exception dialog caption doesn't show the name of your application but some other module like user32.dll, the exception happened outside of your application and (hopefully) a call to a external routine is highlighted. This does not mean, however, that it isn't your fault :) Most of the time missing or wrong parameters are the reason for these crashes. Check the call 