35 years on: to what extent has software engineering design achieved its goals?]</ref> the field's future looks bright according to [[Money Magazine]] and [http://salary.com/ Salary.com], which rated "[[software engineer]]" as the best job in the United States in 2006.<ref>{{Cite web | last = Kalwarski | first = Tara | coauthors = Daphne Mosher, Janet Paskin and Donna Rosato | year = 2006 | url = http://money.cnn.com/magazines/moneymag/bestjobs/2006/ | title = Best Jobs in America | work = MONEY Magazine | publisher = CNN | accessdate = 2006-04-20 }}</ref> ==History== {{Main|History of software engineering}} When the first modern digital [[computer]]s appeared in the early 1940s,<ref>{{Cite book|last=Leondes|title= intelligent systems: technology and applications|year=2002| publisher=CRC Press| isbn =9780849311215 | quote = }}</ref> the instructions to make them operate were wired into the machine. Practitioners quickly realized that this design was not flexible and came up with the "stored program architecture" or [[von Neumann architecture]]. Thus the first division between "hardware" and "software" began with [[abstraction (computer science)|abstraction]] being used to deal with the complexity of computing. [[Programming languages]] started to appear in the 1950s and this was also another major step in abstraction. Major languages such as [[Fortran]], [[ALGOL]], and [[COBOL]] were released in the late 1950s to deal with scientific, algorithmic, and business problems respectively. [[Edsger Dijkstra|E.W. Dijkstra]] wrote his seminal paper, "Go To Statement Considered Harmful",<ref>{{Cite journal | last = Dijkstra | first = E. W. | authorlink = Edsger_Dijkstra | title = Go To Statement Considered Harmful | journal = [[Communications of the ACM]] | volume = 11 | issue = 3 | pages = 147–148 | month = March | year = 1968 | url = http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF | accessdate = 2009-08-10 | doi = 10.1145/362929.362947}} </ref> in 1968 and [[David Parnas]] introduced the key concept of [[modularity]] and [[information hiding]] in 1972<ref> {{Cite journal | last = Parnas | first = David | authorlink = David Parnas | journal = [[Communications of the ACM]] | volume = 15 | issue = 12 | pages = 1053–1058 | url = http://www.acm.org/classics/may96/ | title = On the Criteria To Be Used in Decomposing Systems into Modules | month = December | year = 1972 | accessdate = 2008-12-26 | doi = 10.1145/361598.361623 }}</ref> to help programmers deal with the ever increasing complexity of [[software systems]]. A software system for managing the hardware called an [[operating system]] was also introduced, most notably by [[Unix]] in 1969. In 1967, the [[Simula]] language introduced the [[object-oriented programming]] paradigm. These advances in [[software]] were met with more advances in [[computer hardware]]. In the mid 1970s, the [[microcomputer]] was introduced, making it economical for hobbyists to obtain a [[computer]] and write [[software]] for it. This in turn led to the now famous [[Personal Computer]] (PC) and [[Microsoft Windows]]. The [[Software Development Process|Software Development Life Cycle]] or SDLC was also starting to appear as a consensus for centralized construction of software in the mid 1980s. The late 1970s and early 1980s saw the introduction of several new Simula-inspired object-oriented programming languages, including [[Smalltalk]], [[Objective-C]], and [[C++]]. [[Open-source]] software started to appear in the early 90s in the form of [[Linux]] and other software introducing the "bazaar" or decentralized style of constructing software.<ref>[[Eric S. Raymond|Raymond, Eric S.]] ''[[The Cathedral and the Bazaar]]''. ed 3.0. 2000.</ref> Then the [[World Wide Web]] and the popularization of the [[Internet]] hit in the mid 90s, changing the engineering of software once again. [[Distributed systems]] gained sway as a way to design systems, and the [[Java (programming language)|Java]] programming language was introduced with its own [[virtual machine]] as another step in [[abstraction]]. [[Programmers]] collaborated and wrote the [[Agile Manifesto]], which favored more lightweight processes to create cheaper and more timely software. The current definition of ''software engineering'' is still being debated by practitioners today as they struggle to come up with ways to produce software that is "cheaper, better, faster". [[Spend management|Cost reduction]] has been a primary focus of the IT industry since the 1990s. [[Total cost of ownership]] represents the costs of more than just acquisition. It includes things like productivity impediments, upkeep efforts, and resources needed to support infrastructure. ==Profession== {{Main|Software engineer}} Legal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, the [[British Computer Society]] licenses software engineers and members of the society can also become [[Chartered Engineer (UK)|Chartered Engineers]] (CEng), while in some areas of Canada, such as Alberta, Ontario,<ref>{{cite conference | first = N.S.W. | last = Williams | title = Professional Engineers Ontario's approach to licensing software engineering practitioners | booktitle = Software Engineering Education and Training, 2001 Proceedings. 14th Conference on | pages = 77–78 | publisher = [[IEEE]]| date = 19–21 February 2001 | location = Charlotte, NC | url = | accessdate = }}</ref> and Quebec, software engineers can hold the Professional Engineer (P.Eng)designation and/or the Information Systems Professional (I.S.P.) designation; however, there is no legal requirement to have these qualifications. In [[Israel]] a person with an appropriate engineering degree has the right to be listed in Israel's Registry of Engineers and Architects<ref>[http://www.tamas.gov.il/NR/exeres/DACD5881-70D5-463A-BDF2-AA363197FB2F.htm]</ref>, and Israeli engineering law<ref>[http://www.moit.gov.il/NR/exeres/AACCF3CC-C47C-4D2F-BF49-FDB4185C6E55.htm ]</ref> says that a person calling themselves an engineer without the proper license / registration could be sentenced to up to 6 months in jail. The [[IEEE Computer Society]] and the [[Association for Computing Machinery|ACM]], the two main professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE's ''Guide to the Software Engineering Body of Knowledge - 2004 Version'', or [[SWEBOK]], defines the field and describes the knowledge the IEEE expects a practicing [[software engineer]] to have. The IEEE also promulgates a "Software Engineering Code of Ethics".<ref>[http://www.computer.org/portal/cms_docs_computer/computer/content/code-of-ethics.pdf ''Software Engineering Code of Ethics'']</ref> ===Employment=== In 2004, the [[Bureau of Labor Statistics|U. S. Bureau of Labor Statistics]] counted 760,840 [[software engineer]]s holding jobs in the [[United States|U.S.]]; in the same time period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined.<ref>Bureau of Labor Statistics, U.S. Department of Labor, [ftp://ftp.bls.gov/pub/news.release/ocwage.txt ''USDL 05-2145: 