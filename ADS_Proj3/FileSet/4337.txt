component layer of the Internet protocols, as TCP/IP is designed to be hardware independent. As a result TCP/IP has been implemented on top of virtually any hardware networking technology in existence. The Link Layer is used to move packets between the Internet Layer interfaces of two different hosts on the same link. The processes of transmitting and receiving packets on a given link can be controlled both in the [[software]] [[device driver]] for the [[network card]], as well as on [[firmware]] or specialized [[chipsets]]. These will perform [[Data Link Layer|data link]] functions such as adding a [[packet header]] to prepare it for transmission, then actually transmit the frame over a [[Physical Layer|physical]] [[transmission medium|medium]]. The TCP/IP model includes specifications of translating the network addressing methods used in the Internet Protocol to data link addressing, such as [[Media Access Control]] (MAC), however all other aspects below that level are implicitly assumed to exist in the Link Layer, but are not explicitly defined. The Link Layer is also the layer where packets may be selected to be sent over a [[virtual private network]] or other [[tunneling protocol|networking tunnel]]. In this scenario, the Link Layer data may be considered application data which traverses another instantiation of the IP stack for transmission or reception over another IP connection. Such a connection, or virtual link, may be established with a transport protocol or even an application scope protocol that serves as a [[tunneling protocol|tunnel]] in the Link Layer of the protocol stack. Thus, the TCP/IP model does not dictate a strict hierarchical encapsulation sequence. ===Internet Layer=== The [[Internet Layer]] solves the problem of sending packets across one or more networks. [[Internetworking]] requires sending data from the source [[computer network|network]] to the destination network. This process is called [[routing]].<ref>[http://www.comsci.us/datacom/ippacket.html IP Packet Structure]</ref> In the Internet Protocol Suite, the Internet Protocol performs two basic functions: * ''Host addressing and identification'': This is accomplished with a hierarchical addressing system (see [[IP address]]). * ''Packet routing'': This is the basic task of getting packets of data (datagrams) from source to destination by sending them to the next network node (router) closer to the final destination. IP can carry data for a number of different [[upper layer protocol]]s. These protocols are each identified by a unique [[List of IP protocol numbers|protocol number]]: for example, [[Internet Control Message Protocol]] (ICMP) and [[Internet Group Management Protocol]] (IGMP) are protocols 1 and 2, respectively. Some of the protocols carried by IP, such as ICMP (used to transmit diagnostic information about IP transmission) and IGMP (used to manage [[IP Multicast]] data) are layered on top of IP but perform internetworking functions. This illustrates the differences in the architecture of the TCP/IP stack of the Internet and the OSI model. ===Transport Layer=== The [[Transport Layer]]'s responsibilities include end-to-end message transfer capabilities independent of the underlying network, along with error control, segmentation, flow control, congestion control, and application addressing (port numbers). End to end message transmission or connecting applications at the transport layer can be categorized as either [[connection-oriented]], implemented in [[Transmission Control Protocol]] (TCP), or [[connectionless]], implemented in [[User Datagram Protocol]] (UDP). The Transport Layer can be thought of as a transport mechanism, e.g., a vehicle with the responsibility to make sure that its contents (passengers/goods) reach their destination safely and soundly, unless another protocol layer is responsible for safe delivery. The Transport Layer provides this service of connecting applications through the use of [[TCP and UDP port|service ports]]. Since IP provides only a [[best effort delivery]], the Transport Layer is the first layer of the TCP/IP stack to offer reliability. IP can run over a reliable data link protocol such as the [[High-Level Data Link Control]] (HDLC). Protocols above transport, such as RPC, also can provide reliability. For example, the Transmission Control Protocol (TCP) is a connection-oriented protocol that addresses numerous reliability issues to provide a [[reliable byte stream]]: * data arrives in-order * data has minimal error (i.e. correctness) * duplicate data is discarded * lost/discarded packets are resent * includes traffic congestion control The newer [[Stream Control Transmission Protocol]] (SCTP) is also a reliable, connection-oriented transport mechanism. It is [[Message-stream-oriented]] — not [[byte-stream-oriented]] like TCP — and provides multiple streams multiplexed over a single connection. It also provides [[multi-homed|multi-homing]] support, in which a connection end can be represented by multiple [[IP address]]es (representing multiple physical interfaces), such that if one fails, the connection is not interrupted. It was developed initially for telephony applications (to transport [[Signaling System 7|SS7]] over [[Internet Protocol|IP]]), but can also be used for other applications. User Datagram Protocol is a connectionless [[datagram]] protocol. Like IP, it is a best effort, "unreliable" protocol. Reliability is addressed through [[error detection]] using a weak [[checksum]] algorithm. UDP is typically used for applications such as streaming media (audio, video, [[Voice over IP]] etc) where on-time arrival is more important than reliability, or for simple query/response applications like [[Domain Name System|DNS]] lookups, where the overhead of setting up a reliable connection is disproportionately large. [[Real-time Transport Protocol]] (RTP) is a datagram protocol that is designed for real-time data such as [[streaming media|streaming audio and video]]. TCP and UDP are used to carry an assortment of higher-level applications. The appropriate transport protocol is chosen based on the higher-layer protocol application. For example, the [[File Transfer Protocol]] expects a reliable connection, but the [[Network File System (protocol)|Network File System]] (NFS) assumes that the subordinate [[Remote Procedure Call]] protocol, not transport, will guarantee reliable transfer. Other applications, such as VoIP, can tolerate some loss of packets, but not the reordering or delay that could be caused by retransmission. The applications at any given network address are distinguished by their TCP or UDP [[TCP and UDP port|port]]. By convention certain ''well known ports'' are associated with specific applications. (''See [[List of TCP and UDP port numbers]].'') ===Application Layer=== The [[Application Layer]] refers to the higher-level protocols used by most applications for network communication. Examples of application layer protocols include the [[File Transfer Protocol]] (FTP) and the [[Simple 