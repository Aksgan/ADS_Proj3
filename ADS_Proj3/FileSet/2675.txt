a [[relation (mathematics)|relation]] on machine states. It holds whenever starting from a state in which the boolean expression <math>C\land I</math> is true and successfully executing some program called ''body'', the machine ends up in a state in which <math>I</math> is true. If this relation can be proven, the rule then allows us to conclude that successful execution of the program <code>while (C) body</code> will lead from a state in which <math>I</math> is true to a state in which <math>\lnot C\land I</math> holds. The boolean formula ''I'' in this rule is known as the loop invariant. The following example illustrates how this rule works. Consider the program while (x<10) x:=x+1; One can then prove the following Hoare triple: :<math>\{x\leq10\}\; \mathbf{while}\ (x<10)\ x := x+1\;\{x=10\}</math> The condition ''C'' of the <code>while</code> loop is <math>x<10</math>. A useful loop invariant ''I'' is <math>x\leq10</math>. Under these assumptions it is possible to prove the following Hoare triple: :<math>\{x<10 \land x\leq10\}\; x := x+1 \;\{x\leq10\}</math> While this triple can be derived formally from the rules of Floyd-Hoare logic governing assignment, it is also intuitively justified: Computation starts in a state where <math>x<10 \land x\leq10</math> is true, which means simply that <math>x<10</math> is true. The computation adds 1 to x, which means that <math>x\leq10</math> is still true (for integer x). Under this premise, the rule for <code>while</code> loops permits the following conclusion: :<math>\{x\leq10\}\; \mathbf{while}\ (x<10)\ x := x+1 \;\{\lnot(x<10) \land x\leq10\}</math> However, the post-condition <math>\lnot(x<10)\land x\leq10</math> (''x'' is less than or equal to 10, but it is not less than 10) is [[Logical equivalence|logically equivalent]] to <math>x=10</math>, which is what we wanted to show. The loop invariant plays an important role in the intuitive argument for soundness of the Floyd-Hoare rule for <code>while</code> loops. The loop invariant has to be true before each iteration of the loop body, and also after each iteration of the loop body. Since a <code>while</code> loop is precisely the repeated iteration of the loop body, it follows that if the invariant is true before entering the loop, it must also be true after exiting the loop. Because of the fundamental similarity of loops and [[recursion|recursive]] programs, proving partial correctness of loops with invariants is very similar to proving correctness of recursive programs via [[Mathematical induction|induction]]. In fact, the loop invariant is often the inductive property one has to prove of a recursive program that is equivalent to a given loop. ==Programming language support== ===[[Eiffel (programming language)|Eiffel]]=== The [[Eiffel (programming language)|Eiffel]] programming language provides native support for loop invariants.<ref>[[Bertrand Meyer|Meyer, Bertrand]], ''Eiffel: The Language,'' [[Prentice Hall]], 1991, pp. 129–131.</ref> A loop invariant is expressed with the same syntax used for a [[class invariant]]. In the sample below, the loop invariant expression <code>x <= 10</code> must be true following the loop initialization, and after each execution of the loop body. <syntaxhighlight lang="eiffel"> from x := 0 invariant x <= 10 until x = 10 loop x := x + 1 end</syntaxhighlight> == See also == * [[Loop variant]] * [[Predicate transformer semantics#While loop| Weakest-preconditions of While loop]] == References == {{reflist}} == Further reading == * [[Thomas H. Cormen]], [[Charles E. Leiserson]], [[Ronald L. Rivest]], and [[Clifford Stein]]. ''[[Introduction to Algorithms]]'', Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Pages 17–19, section 2.1: Insertion sort. * [[David Gries]]. "A note on a standard strategy for developing loop invariants and loops." ''Science of Computer Programming'', vol 2, pp.207–214. 1984. * Michael D. Ernst, Jake Cockrell, William G. Griswold, David Notkin. "[http://citeseer.ist.psu.edu/292512.html Dynamically Discovering Likely Program Invariants to Support Program Evolution]." ''International Conference on Software Engineering'', pp.213–224. 1999. * Robert Paige. "Programming with Invariants." ''IEEE Software'', 3(1):56–69. January 1986. * Yanhong A. Liu, Scott D. Stoller, and Tim Teitelbaum. [http://www.cs.sunysb.edu/~stoller/SIEC-SCP.html Strengthening Invariants for Efficient Computation]. ''Science of Computer Programming'', 41(2):139–172. October 2001. * Michael Huth, Mark Ryan. "Logic in Computer Science.", Second Edition. [[Category:Formal methods terminology]] [[Category:Computer programming]] [[de:Schleifeninvariante]] [[pl:Niezmiennik pętli]]</text> </page> <page> <id>22658</id> <title>Los Alamos chess</title> <text>{{Chess diagram 6x6|= | tright | |= 6 |rd|nd|qd|kd|nd|rd|= 5 |pd|pd|pd|pd|pd|pd|= 4 | | | | | | |= 3 | | | | | | |= 2 |pl|pl|pl|pl|pl|pl|= 1 |rl|nl|ql|kl|nl|rl|= a b c d e f | '''Los Alamos chess''' }} '''Los Alamos chess''' (or '''anti-clerical chess''') is a [[chess variant]] played on a [[Minichess|6×6 board]] without [[bishop (chess)|bishops]]. This was the first chess-like game played by a computer program. This program was written in [[Los Alamos National Laboratory|Los Alamos laboratory]] by [[Paul Stein (computer scientist)|Paul Stein]] and [[Mark Wells (computer scientist)|Mark Wells]] for the [[MANIAC I]] computer in 1956. The reduction of the board size and the number of pieces from standard [[chess]] was due to the very limited capacity of computers at the time. The computer played three games. The first it played against itself. The second one was against a strong human player, who played [[chess handicap|without a queen]]. The human player won. In the third game, MANIAC I played against a novice chess player who had been taught the rules just before the game. The computer won, marking the first time that a computer had beaten a human player in a chess-like game. == Rules == The starting position is shown on the right. All rules are as in chess except: * There is no pawn double-move, nor is there ''[[en passant]]'' capture; * [[Pawns]] may not promote to bishops; * There is no [[castling]]. == References == * D.B. Pritchard (1994). ''The Encyclopedia of Chess Variants''. ISBN 0-9524142-0-1. * H. L. Anderson (1986). ''[http://www.fas.org/sgp/othergov/doe/lanl/pubs/00326886.pdf Metropolis, Monte Carlo, and the MANIAC''] (from [http://library.lanl.gov/cgi-bin/getfile?number14.htm Los Alamos Science], N 14, Fall 1986), pp 104-105. == See also == * [[Minichess]] == External links == * [http://www.chessvariants.org/small.dir/losalamos.html Los Alamos Chess] by Hans L. Bodlaender. * [http://www.chessbase.com/columns/column.asp?pid=102 A short history of computer chess] by Frederic Friedel * [http://BrainKing.com BrainKing.com] - internet server to play Los Alamos chess. [[Category:Chess variants]] [[Category:Computer chess]] [[es:Ajedrez Los Álamos]] [[ka:ლოს-ალამოსის ჭადრაკი]] [[pt:Xadrez Los Alamos]] [[ru:Шахматы Лос-Аламос]] [[tr:Los Alamos satrancı]] [[zh:洛斯阿拉莫斯象棋]]</text> </page> <page> <id>22663</id> <title>Loss of significance</title> <text>{{Unreferenced|date=September 2009}} '''Loss of significance''' is an 