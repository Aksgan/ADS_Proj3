lock" - start of synchronized() section) |- | monitorexit || align="center" | c3 || || objectref &rarr; || exit monitor for object ("release the lock" - end of synchronized() section) |- | multianewarray || align="center" | c5 || indexbyte1, indexbyte2, dimensions || count1, [count2,...] &rarr; arrayref || create a new array of ''dimensions'' dimensions with elements of type identified by class reference in constant pool ''index'' (''indexbyte1 << 8 + indexbyte2''); the sizes of each dimension is identified by ''count1'', [''count2'', etc.] |- ! colspan="5" | N |- | new || align="center" | bb || indexbyte1, indexbyte2 || &rarr; objectref || creates new object of type identified by class reference in constant pool ''index'' (''indexbyte1 << 8 + indexbyte2'') |- | newarray || align="center" | bc || atype || count &rarr; arrayref || creates new array with ''count'' elements of primitive type identified by ''atype'' |- | nop || align="center" | 00 || || [No change] || performs no operation |- ! colspan="5" | P |- | pop || align="center" | 57 || || value &rarr; || discards the top value on the stack |- | pop2 || align="center" | 58 || || {value2, value1} &rarr; || discards the top two values on the stack (or one value, if it is a double or long) |- | putfield || align="center" | b5 || indexbyte1, indexbyte2 || objectref, value &rarr; || set field to ''value'' in an object ''objectref'', where the field is identified by a field reference ''index'' in constant pool (''indexbyte1 << 8 + indexbyte2'') |- | putstatic || align="center" | b3 || indexbyte1, indexbyte2 || value &rarr; || set static field to ''value'' in a class, where the field is identified by a field reference ''index'' in constant pool (''indexbyte1 << 8 + indexbyte2'') |- ! colspan="5" | R |- | ret || align="center" | a9 || index || [No change] || continue execution from address taken from a local variable ''#index'' (the asymmetry with jsr is intentional) |- | return || align="center" | b1 || || &rarr; [empty] || return void from method |- ! colspan="5" | S |- | saload || align="center" | 35 || || arrayref, index &rarr; value || load short from array |- | sastore || align="center" | 56 || || arrayref, index, value &rarr; || store short to array |- | sipush || align="center" | 11 || byte1, byte2 || &rarr; value || pushes a short onto the stack |- | swap || align="center" | 5f || || value2, value1 &rarr; value1, value2 || swaps two top words on the stack (note that value1 and value2 must not be double or long) |- ! colspan="5" | T |- | tableswitch || align="center" | aa || [0-3 bytes padding], defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, lowbyte1, lowbyte2, lowbyte3, lowbyte4, highbyte1, highbyte2, highbyte3, highbyte4, jump offsets... || index &rarr; || continue execution from an address in the table at offset ''index'' |- ! colspan="5" | W |- | wide || align="center" | c4 || opcode, indexbyte1, indexbyte2 <br>or<br> iinc, indexbyte1, indexbyte2, countbyte1, countbyte2 || [same as for corresponding instructions] || execute ''opcode'', where ''opcode'' is either iload, fload, aload, lload, dload, istore, fstore, astore, lstore, dstore, or ret, but assume the ''index'' is 16 bit; or execute iinc, where the ''index'' is 16 bits and the constant to increment by is a signed 16 bit short |- ! colspan="5" | Unused |- | breakpoint || align="center" | ca || || || reserved for breakpoints in Java debuggers; should not appear in any class file |- | impdep1 || align="center" | fe || || || reserved for implementation-dependent operations within debuggers; should not appear in any class file |- | impdep2 || align="center" | ff || || || reserved for implementation-dependent operations within debuggers; should not appear in any class file |- | ''(no name)'' || align="center" | cb-fd || || || these values are currently unassigned for opcodes and are reserved for future use |- | xxxunusedxxx || align="center" | ba || || || this opcode is reserved "for historical reasons" |} ==See also== * [[Java bytecode]], a general description of the java bytecode within the context of the [[JVM]] * [[ARM9E]], a [[Central processing unit|CPU]] family with direct Java bytecode execution ability * [[Common Intermediate Language]] (CIL), a similar bytecode specification that runs on the [[Common Language Runtime|CLR]] of the [[.NET Framework]]. * [[C to Java Virtual Machine compilers]] ==External links== *[http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html Sun's Java Virtual Machine Specification] {{Java (Sun)}} [[Category:Java platform]] [[Category:Instruction set listings]]</text> </page> <page> <id>19796</id> <title>Java package</title> <text>A '''Java package''' is a mechanism for organizing [[Java (programming language)|Java]] [[class (computer science)|classes]] into [[namespace (computer science)|namespaces]] similar to the modules of [[Modula]]. Java packages can be stored in compressed files called [[JAR file]]s, allowing classes to download faster as a group rather than one at a time. Programmers also typically use packages to organize classes belonging to the same category or providing similar functionality. * A package provides a unique namespace for the types it contains. * Classes in the same package can access each other's package-access members. == Overview == In general, a package can contain the following kinds of [[Datatypes|types]]. * [[Class (computer science)|Classes]] * [[Interface (Java)|Interfaces]] * [[Enumerated type]]s == Using packages == In a Java source file, the package that this file's class or classes belong to is specified with the <code>package</code> [[keyword (computer programming)|keyword]]. This keyword is usually the first keyword in source file.<ref>http://java.sun.com/docs/books/tutorial/java/package/managingfiles.html</ref> <source lang="java"> package java.awt.event; </source> To use a package's classes inside a Java source file, it is convenient to import the classes from the package with an <code>import</code> declaration. The following declaration <source lang="java"> import java.awt.event.*; </source> imports all classes from the <code>java.awt.event</code> package, while the next declaration <source lang="java"> import java.awt.event.ActionEvent; </source> imports only the <code>ActionEvent</code> class from the package. After either of these import declarations, the <code>ActionEvent</code> class can be referenced using its simple class name: <source lang="java"> ActionEvent myEvent = new ActionEvent(); </source> Classes can also be used directly without an import 